{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"preface/","title":"Preface","text":"LeetCode Solutions \ud83d\udca1 Solutions to LeetCode in C++, Java, Python, JavaScript and MySQL. This repository aims to provide code with good readability and consistent style over various topics and embraces new standards."},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#array","title":"Array","text":"<ul> <li>1. Two Sum</li> <li>1. Two Sum</li> </ul>"},{"location":"tags/#easy","title":"Easy","text":"<ul> <li>1. Two Sum</li> <li>1. Two Sum</li> </ul>"},{"location":"tags/#hash-table","title":"Hash Table","text":"<ul> <li>1. Two Sum</li> <li>1. Two Sum</li> </ul>"},{"location":"tags/#linked-list","title":"Linked List","text":"<ul> <li>2. Add Two Numbers</li> </ul>"},{"location":"tags/#math","title":"Math","text":"<ul> <li>2. Add Two Numbers</li> </ul>"},{"location":"tags/#medium","title":"Medium","text":"<ul> <li>2. Add Two Numbers</li> </ul>"},{"location":"tags/#recursion","title":"Recursion","text":"<ul> <li>2. Add Two Numbers</li> </ul>"},{"location":"LeetCode_Articles/","title":"LeetCode Articles","text":""},{"location":"LeetCode_Articles/Article/0001/","title":"1. Two Sum","text":"Problem <p>1. Two SumEasy<p>Given an array of integers <code>nums</code>\u00a0and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p> <p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p></p> <p><p>You can return the answer in any order.</p></p> <p><p> </p> <p>Example 1:</p></p> <p><pre>Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre></p> <p><p>Example 2:</p></p> <p><pre>Input: nums = [3,2,4], target = 6\nOutput: [1,2]\n</pre></p> <p><p>Example 3:</p></p> <p><pre>Input: nums = [3,3], target = 6\nOutput: [0,1]\n</pre></p> <p><p> </p> <p>Constraints:</p></p> <p><ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li> <li>Only one valid answer exists.</li> </ul></p> <p><p> </p> Follow-up:\u00a0Can you come up with an algorithm that is less than\u00a0<code>O(n<sup>2</sup>)\u00a0</code>time complexity?</p> Solution C++PythonJava <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>","tags":["Easy","Array","Hash Table"]},{"location":"LeetCode_Articles/0001/","title":"1. Two Sum","text":"Problem <p>1. Two SumEasy<p>Given an array of integers <code>nums</code>\u00a0and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p> <p><p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p></p> <p><p>You can return the answer in any order.</p></p> <p><p> </p> <p>Example 1:</p></p> <p><pre>Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre></p> <p><p>Example 2:</p></p> <p><pre>Input: nums = [3,2,4], target = 6\nOutput: [1,2]\n</pre></p> <p><p>Example 3:</p></p> <p><pre>Input: nums = [3,3], target = 6\nOutput: [0,1]\n</pre></p> <p><p> </p> <p>Constraints:</p></p> <p><ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li> <li>Only one valid answer exists.</li> </ul></p> <p><p> </p> Follow-up:\u00a0Can you come up with an algorithm that is less than\u00a0<code>O(n<sup>2</sup>)\u00a0</code>time complexity?</p> Solution C++PythonJava <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre>","tags":["Easy","Array","Hash Table"]},{"location":"LeetCode_Problems/0001/","title":"1. Two Sum","text":"Problem <p>Given an array of integers <code>nums</code>\u00a0and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p> <p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p> <p>You can return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li> <li>Only one valid answer exists.</li> </ul> <p> </p> <p>Follow-up:\u00a0Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code> time complexity?</p>"},{"location":"LeetCode_Problems/0002/","title":"2. Add Two Numbers","text":"Problem <p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\u00a0as a linked list.</p> <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n</pre> <p>Example 2:</p> <pre>\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n</pre> <p>Example 3:</p> <pre>\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li>It is guaranteed that the list represents a number that does not have leading zeros.</li> </ul>"},{"location":"LeetCode_Problems/0003/","title":"3. Longest Substring Without Repeating Characters","text":"Problem <p>Given a string <code>s</code>, find the length of the longest substring without repeating characters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s</code> consists of English letters, digits, symbols and spaces.</li> </ul>"},{"location":"LeetCode_Problems/0004/","title":"4. Median of Two Sorted Arrays","text":"Problem <p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return the median of the two sorted arrays.</p> <p>The overall run time complexity should be <code>O(log (m+n))</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums1.length == m</code></li> <li><code>nums2.length == n</code></li> <li><code>0 &lt;= m &lt;= 1000</code></li> <li><code>0 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= m + n &lt;= 2000</code></li> <li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0005/","title":"5. Longest Palindromic Substring","text":"Problem <p>Given a string <code>s</code>, return the longest palindromic substring in <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"cbbd\"\nOutput: \"bb\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consist of only digits and English letters.</li> </ul>"},{"location":"LeetCode_Problems/0006/","title":"6. Zigzag Conversion","text":"Problem <p>The string <code>\"PAYPALISHIRING\"</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p> <pre>\nP   A   H   N\nA P L S I I G\nY   I   R\n</pre> <p>And then read line by line: <code>\"PAHNAPLSIIGYIR\"</code></p> <p>Write the code that will take a string and make this conversion given a number of rows:</p> <pre>\nstring convert(string s, int numRows);\n</pre> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"A\", numRows = 1\nOutput: \"A\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists of English letters (lower-case and upper-case), <code>','</code> and <code>'.'</code>.</li> <li><code>1 &lt;= numRows &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0007/","title":"7. Reverse Integer","text":"Problem <p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> with its digits reversed. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p> <p>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: x = 123\nOutput: 321\n</pre> <p>Example 2:</p> <pre>\nInput: x = -123\nOutput: -321\n</pre> <p>Example 3:</p> <pre>\nInput: x = 120\nOutput: 21\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0008/","title":"8. String to Integer (atoi)","text":"Problem <p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer (similar to C/C++'s <code>atoi</code> function).</p> <p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p> <ol> <li>Read in and ignore any leading whitespace.</li> <li>Check if the next character (if not already at the end of the string) is <code>'-'</code> or <code>'+'</code>. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.</li> <li>Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.</li> <li>Convert these digits into an integer (i.e. <code>\"123\" -&gt; 123</code>, <code>\"0032\" -&gt; 32</code>). If no digits were read, then the integer is <code>0</code>. Change the sign as necessary (from step 2).</li> <li>If the integer is out of the 32-bit signed integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then clamp the integer so that it remains in the range. Specifically, integers less than <code>-2<sup>31</sup></code> should be clamped to <code>-2<sup>31</sup></code>, and integers greater than <code>2<sup>31</sup> - 1</code> should be clamped to <code>2<sup>31</sup> - 1</code>.</li> <li>Return the integer as the final result.</li> </ol> <p>Note:</p> <ul> <li>Only the space character <code>' '</code> is considered a whitespace character.</li> <li>Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"42\"\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 42.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"   -42\"\nOutput: -42\nExplanation:\nStep 1: \"   -42\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -42\" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is -42.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"4193 with words\"\nOutput: 4193\nExplanation:\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 4193.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 200</code></li> <li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>' '</code>, <code>'+'</code>, <code>'-'</code>, and <code>'.'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0009/","title":"9. Palindrome Number","text":"Problem <p>Given an integer <code>x</code>, return <code>true</code> if <code>x</code> is a palindrome, and <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\n</pre> <p>Example 2:</p> <pre>\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n</pre> <p>Example 3:</p> <pre>\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup>\u00a0&lt;= x &lt;= 2<sup>31</sup>\u00a0- 1</code></li> </ul> <p> </p> <p>Follow up: Could you solve it without converting the integer to a string?</p>"},{"location":"LeetCode_Problems/0010/","title":"10. Regular Expression Matching","text":"Problem <p>Given an input string <code>s</code>\u00a0and a pattern <code>p</code>, implement regular expression matching with support for <code>'.'</code> and <code>'*'</code> where:</p> <ul> <li><code>'.'</code> Matches any single character.\u200b\u200b\u200b\u200b</li> <li><code>'*'</code> Matches zero or more of the preceding element.</li> </ul> <p>The matching should cover the entire input string (not partial).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length\u00a0&lt;= 20</code></li> <li><code>1 &lt;= p.length\u00a0&lt;= 20</code></li> <li><code>s</code> contains only lowercase English letters.</li> <li><code>p</code> contains only lowercase English letters, <code>'.'</code>, and\u00a0<code>'*'</code>.</li> <li>It is guaranteed for each appearance of the character <code>'*'</code>, there will be a previous valid character to match.</li> </ul>"},{"location":"LeetCode_Problems/0011/","title":"11. Container With Most Water","text":"Problem <p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p> <p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p> <p>Return the maximum amount of water a container can store.</p> <p>Notice that you may not slant the container.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</pre> <p>Example 2:</p> <pre>\nInput: height = [1,1]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == height.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0012/","title":"12. Integer to Roman","text":"Problem <p>Roman numerals are represented by seven different symbols:\u00a0<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p> <pre>\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre> <p>For example,\u00a0<code>2</code> is written as <code>II</code>\u00a0in Roman numeral, just two one's added together. <code>12</code> is written as\u00a0<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p> <p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p> <ul> <li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.\u00a0</li> <li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.\u00a0</li> <li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li> </ul> <p>Given an integer, convert it to a roman numeral.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 3\nOutput: \"III\"\nExplanation: 3 is represented as 3 ones.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 58\nOutput: \"LVIII\"\nExplanation: L = 50, V = 5, III = 3.\n</pre> <p>Example 3:</p> <pre>\nInput: num = 1994\nOutput: \"MCMXCIV\"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 3999</code></li> </ul>"},{"location":"LeetCode_Problems/0013/","title":"13. Roman to Integer","text":"Problem <p>Roman numerals are represented by seven different symbols:\u00a0<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p> <pre>\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre> <p>For example,\u00a0<code>2</code> is written as <code>II</code>\u00a0in Roman numeral, just two ones added together. <code>12</code> is written as\u00a0<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p> <p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p> <ul> <li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.\u00a0</li> <li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.\u00a0</li> <li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li> </ul> <p>Given a roman numeral, convert it to an integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 15</code></li> <li><code>s</code> contains only\u00a0the characters <code>('I', 'V', 'X', 'L', 'C', 'D', 'M')</code>.</li> <li>It is guaranteed\u00a0that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0014/","title":"14. Longest Common Prefix","text":"Problem <p>Write a function to find the longest common prefix string amongst an array of strings.</p> <p>If there is no common prefix, return an empty string <code>\"\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n</pre> <p>Example 2:</p> <pre>\nInput: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= strs.length &lt;= 200</code></li> <li><code>0 &lt;= strs[i].length &lt;= 200</code></li> <li><code>strs[i]</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0015/","title":"15. 3Sum","text":"Problem <p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p> <p>Notice that the solution set must not contain duplicate triplets.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 3000</code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0016/","title":"16. 3Sum Closest","text":"Problem <p>Given an integer array <code>nums</code> of length <code>n</code> and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>.</p> <p>Return the sum of the three integers.</p> <p>You may assume that each input would have exactly one solution.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,0,0], target = 1\nOutput: 0\nExplanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 500</code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> <li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0017/","title":"17. Letter Combinations of a Phone Number","text":"Problem <p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</p> <p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p> <p></p> <p> </p> <p>Example 1:</p> <pre>\nInput: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n</pre> <p>Example 2:</p> <pre>\nInput: digits = \"\"\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: digits = \"2\"\nOutput: [\"a\",\"b\",\"c\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= digits.length &lt;= 4</code></li> <li><code>digits[i]</code> is a digit in the range <code>['2', '9']</code>.</li> </ul>"},{"location":"LeetCode_Problems/0018/","title":"18. 4Sum","text":"Problem <p>Given an array <code>nums</code> of <code>n</code> integers, return an array of all the unique quadruplets <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p> <ul> <li><code>0 &lt;= a, b, c, d\u00a0&lt; n</code></li> <li><code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are distinct.</li> <li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li> </ul> <p>You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,2,2,2], target = 8\nOutput: [[2,2,2,2]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0019/","title":"19. Remove Nth Node From End of List","text":"Problem <p>Given the <code>head</code> of a linked list, remove the <code>n<sup>th</sup></code> node from the end of the list and return its head.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n</pre> <p>Example 2:</p> <pre>\nInput: head = [1], n = 1\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: head = [1,2], n = 1\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is <code>sz</code>.</li> <li><code>1 &lt;= sz &lt;= 30</code></li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> <li><code>1 &lt;= n &lt;= sz</code></li> </ul> <p> </p> <p>Follow up: Could you do this in one pass?</p>"},{"location":"LeetCode_Problems/0020/","title":"20. Valid Parentheses","text":"Problem <p>Given a string <code>s</code> containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p> <p>An input string is valid if:</p> <ol> <li>Open brackets must be closed by the same type of brackets.</li> <li>Open brackets must be closed in the correct order.</li> <li>Every close bracket has a corresponding open bracket of the same type.</li> </ol> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"()\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"()[]{}\"\nOutput: true\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"(]\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of parentheses only <code>'()[]{}'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0021/","title":"21. Merge Two Sorted Lists","text":"Problem <p>You are given the heads of two sorted linked lists <code>list1</code> and <code>list2</code>.</p> <p>Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.</p> <p>Return the head of the merged linked list.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n</pre> <p>Example 2:</p> <pre>\nInput: list1 = [], list2 = []\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: list1 = [], list2 = [0]\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li>Both <code>list1</code> and <code>list2</code> are sorted in non-decreasing order.</li> </ul>"},{"location":"LeetCode_Problems/0022/","title":"22. Generate Parentheses","text":"Problem <p>Given <code>n</code> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n</pre> <p>Example 2:</p> <pre>Input: n = 1\nOutput: [\"()\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 8</code></li> </ul>"},{"location":"LeetCode_Problems/0023/","title":"23. Merge k Sorted Lists","text":"Problem <p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p> <p>Merge all the linked-lists into one sorted linked-list and return it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nmerging them into one sorted list:\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</pre> <p>Example 2:</p> <pre>\nInput: lists = []\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: lists = [[]]\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>k == lists.length</code></li> <li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= lists[i].length &lt;= 500</code></li> <li><code>-10<sup>4</sup> &lt;= lists[i][j] &lt;= 10<sup>4</sup></code></li> <li><code>lists[i]</code> is sorted in ascending order.</li> <li>The sum of <code>lists[i].length</code> will not exceed <code>10<sup>4</sup></code>.</li> </ul>"},{"location":"LeetCode_Problems/0024/","title":"24. Swap Nodes in Pairs","text":"Problem <p>Given a\u00a0linked list, swap every two adjacent nodes and return its head. You must solve the problem without\u00a0modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\n</pre> <p>Example 2:</p> <pre>\nInput: head = []\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: head = [1]\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the\u00a0list\u00a0is in the range <code>[0, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0025/","title":"25. Reverse Nodes in k-Group","text":"Problem <p>Given the <code>head</code> of a linked list, reverse the nodes of the list <code>k</code> at a time, and return the modified list.</p> <p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p> <p>You may not alter the values in the list's nodes, only nodes themselves may be changed.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is <code>n</code>.</li> <li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> </ul> <p> </p> <p>Follow-up: Can you solve the problem in <code>O(1)</code> extra memory space?</p>"},{"location":"LeetCode_Problems/0026/","title":"26. Remove Duplicates from Sorted Array","text":"Problem <p>Given an integer array <code>nums</code> sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in <code>nums</code>.</p> <p>Consider the number of unique elements of <code>nums</code> to be <code>k</code>, to get accepted, you need to do the following things:</p> <ul> <li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the unique elements in the order they were present in <code>nums</code> initially. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li> <li>Return <code>k</code>.</li> </ul> <p>Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <pre>\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre> <p>If all assertions pass, then your solution will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> <li><code>nums</code> is sorted in non-decreasing order.</li> </ul>"},{"location":"LeetCode_Problems/0027/","title":"27. Remove Element","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> in-place. The order of the elements may be changed. Then return the number of elements in <code>nums</code> which are not equal to <code>val</code>.</p> <p>Consider the number of elements in <code>nums</code> which are not equal to <code>val</code> be <code>k</code>, to get accepted, you need to do the following things:</p> <ul> <li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the elements which are not equal to <code>val</code>. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li> <li>Return <code>k</code>.</li> </ul> <p>Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <pre>\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i &lt; actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre> <p>If all assertions pass, then your solution will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 50</code></li> <li><code>0 &lt;= val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0028/","title":"28. Find the Index of the First Occurrence in a String","text":"Problem <p>Given two strings <code>needle</code> and <code>haystack</code>, return the index of the first occurrence of <code>needle</code> in <code>haystack</code>, or <code>-1</code> if <code>needle</code> is not part of <code>haystack</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: haystack = \"sadbutsad\", needle = \"sad\"\nOutput: 0\nExplanation: \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n</pre> <p>Example 2:</p> <pre>\nInput: haystack = \"leetcode\", needle = \"leeto\"\nOutput: -1\nExplanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= haystack.length, needle.length &lt;= 10<sup>4</sup></code></li> <li><code>haystack</code> and <code>needle</code> consist of only lowercase English characters.</li> </ul>"},{"location":"LeetCode_Problems/0029/","title":"29. Divide Two Integers","text":"Problem <p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division, and mod operator.</p> <p>The integer division should truncate toward zero, which means losing its fractional part. For example, <code>8.345</code> would be truncated to <code>8</code>, and <code>-2.7335</code> would be truncated to <code>-2</code>.</p> <p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p> <p>Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: <code>[\u22122<sup>31</sup>, 2<sup>31</sup> \u2212 1]</code>. For this problem, if the quotient is strictly greater than <code>2<sup>31</sup> - 1</code>, then return <code>2<sup>31</sup> - 1</code>, and if the quotient is strictly less than <code>-2<sup>31</sup></code>, then return <code>-2<sup>31</sup></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\n</pre> <p>Example 2:</p> <pre>\nInput: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup> &lt;= dividend, divisor &lt;= 2<sup>31</sup> - 1</code></li> <li><code>divisor != 0</code></li> </ul>"},{"location":"LeetCode_Problems/0030/","title":"30. Substring with Concatenation of All Words","text":"Problem <p>You are given a string <code>s</code> and an array of strings <code>words</code>. All the strings of <code>words</code> are of the same length.</p> <p>A concatenated substring in <code>s</code> is a substring that contains all the strings of any permutation of <code>words</code> concatenated.</p> <ul> <li>For example, if <code>words = [\"ab\",\"cd\",\"ef\"]</code>, then <code>\"abcdef\"</code>, <code>\"abefcd\"</code>, <code>\"cdabef\"</code>, <code>\"cdefab\"</code>, <code>\"efabcd\"</code>, and <code>\"efcdab\"</code> are all concatenated strings. <code>\"acdbef\"</code> is not a concatenated substring because it is not the concatenation of any permutation of <code>words</code>.</li> </ul> <p>Return the starting indices of all the concatenated substrings in <code>s</code>. You can return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\nOutput: [0,9]\nExplanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\nThe substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\nThe substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\nThe output order does not matter. Returning [9,0] is fine too.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\nOutput: []\nExplanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\nThere is no substring of length 16 in s that is equal to the concatenation of any permutation of words.\nWe return an empty array.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\nOutput: [6,9,12]\nExplanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\nThe substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\nThe substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\nThe substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= words.length &lt;= 5000</code></li> <li><code>1 &lt;= words[i].length &lt;= 30</code></li> <li><code>s</code> and <code>words[i]</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0031/","title":"31. Next Permutation","text":"Problem <p>A permutation of an array of integers is an arrangement of its members into a sequence or linear order.</p> <ul> <li>For example, for <code>arr = [1,2,3]</code>, the following are all the permutations of <code>arr</code>: <code>[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]</code>.</li> </ul> <p>The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).</p> <ul> <li>For example, the next permutation of <code>arr = [1,2,3]</code> is <code>[1,3,2]</code>.</li> <li>Similarly, the next permutation of <code>arr = [2,3,1]</code> is <code>[3,1,2]</code>.</li> <li>While the next permutation of <code>arr = [3,2,1]</code> is <code>[1,2,3]</code> because <code>[3,2,1]</code> does not have a lexicographical larger rearrangement.</li> </ul> <p>Given an array of integers <code>nums</code>, find the next permutation of <code>nums</code>.</p> <p>The replacement must be in place and use only constant extra memory.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3]\nOutput: [1,3,2]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,2,1]\nOutput: [1,2,3]\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,5]\nOutput: [1,5,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0032/","title":"32. Longest Valid Parentheses","text":"Problem <p>Given a string containing just the characters <code>'('</code> and <code>')'</code>, return the length of the longest valid (well-formed) parentheses substring.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"\"\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>s[i]</code> is <code>'('</code>, or <code>')'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0033/","title":"33. Search in Rotated Sorted Array","text":"Problem <p>There is an integer array <code>nums</code> sorted in ascending order (with distinct values).</p> <p>Prior to being passed to your function, <code>nums</code> is possibly rotated at an unknown pivot index <code>k</code> (<code>1 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (0-indexed). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p> <p>Given the array <code>nums</code> after the possible rotation and an integer <code>target</code>, return the index of <code>target</code> if it is in <code>nums</code>, or <code>-1</code> if it is not in <code>nums</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n</pre> <p>Example 2:</p> <pre>Input: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n</pre> <p>Example 3:</p> <pre>Input: nums = [1], target = 0\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li>All values of <code>nums</code> are unique.</li> <li><code>nums</code> is an ascending array that is possibly rotated.</li> <li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0034/","title":"34. Find First and Last Position of Element in Sorted Array","text":"Problem <p>Given an array of integers <code>nums</code> sorted in non-decreasing order, find the starting and ending position of a given <code>target</code> value.</p> <p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p> <p>You must\u00a0write an algorithm with\u00a0<code>O(log n)</code> runtime complexity.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\n</pre> <p>Example 2:</p> <pre>Input: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\n</pre> <p>Example 3:</p> <pre>Input: nums = [], target = 0\nOutput: [-1,-1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup>\u00a0&lt;= nums[i]\u00a0&lt;= 10<sup>9</sup></code></li> <li><code>nums</code> is a non-decreasing array.</li> <li><code>-10<sup>9</sup>\u00a0&lt;= target\u00a0&lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0035/","title":"35. Search Insert Position","text":"Problem <p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p> <p>You must\u00a0write an algorithm with\u00a0<code>O(log n)</code> runtime complexity.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> contains distinct values sorted in ascending order.</li> <li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0036/","title":"36. Valid Sudoku","text":"Problem <p>Determine if a\u00a0<code>9 x 9</code> Sudoku board\u00a0is valid.\u00a0Only the filled cells need to be validated\u00a0according to the following rules:</p> <ol> <li>Each row\u00a0must contain the\u00a0digits\u00a0<code>1-9</code> without repetition.</li> <li>Each column must contain the digits\u00a0<code>1-9</code>\u00a0without repetition.</li> <li>Each of the nine\u00a0<code>3 x 3</code> sub-boxes of the grid must contain the digits\u00a0<code>1-9</code>\u00a0without repetition.</li> </ol> <p>Note:</p> <ul> <li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li> <li>Only the filled cells need to be validated according to the mentioned\u00a0rules.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: true\n</pre> <p>Example 2:</p> <pre>\nInput: board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>board.length == 9</code></li> <li><code>board[i].length == 9</code></li> <li><code>board[i][j]</code> is a digit <code>1-9</code> or <code>'.'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0037/","title":"37. Sudoku Solver","text":"Problem <p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p> <p>A sudoku solution must satisfy all of the following rules:</p> <ol> <li>Each of the digits <code>1-9</code> must occur exactly once in each row.</li> <li>Each of the digits <code>1-9</code> must occur exactly once in each column.</li> <li>Each of the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li> </ol> <p>The <code>'.'</code> character indicates empty cells.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation:\u00a0The input board is shown above and the only valid solution is shown below:\n\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>board.length == 9</code></li> <li><code>board[i].length == 9</code></li> <li><code>board[i][j]</code> is a digit or <code>'.'</code>.</li> <li>It is guaranteed that the input board has only one solution.</li> </ul>"},{"location":"LeetCode_Problems/0038/","title":"38. Count and Say","text":"Problem <p>The count-and-say sequence is a sequence of digit strings defined by the recursive formula:</p> <ul> <li><code>countAndSay(1) = \"1\"</code></li> <li><code>countAndSay(n)</code> is the way you would \"say\" the digit string from <code>countAndSay(n-1)</code>, which is then converted into a different digit string.</li> </ul> <p>To determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.</p> <p>For example, the saying and conversion for digit string <code>\"3322251\"</code>:</p> <p></p> <p>Given a positive integer <code>n</code>, return the <code>n<sup>th</sup></code> term of the count-and-say sequence.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: \"1\"\nExplanation: This is the base case.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4\nOutput: \"1211\"\nExplanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 30</code></li> </ul>"},{"location":"LeetCode_Problems/0039/","title":"39. Combination Sum","text":"Problem <p>Given an array of distinct integers <code>candidates</code> and a target integer <code>target</code>, return a list of all unique combinations of <code>candidates</code> where the chosen numbers sum to <code>target</code>. You may return the combinations in any order.</p> <p>The same number may be chosen from <code>candidates</code> an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.</p> <p>The test cases are generated such that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n</pre> <p>Example 2:</p> <pre>\nInput: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\n</pre> <p>Example 3:</p> <pre>\nInput: candidates = [2], target = 1\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= candidates.length &lt;= 30</code></li> <li><code>2 &lt;= candidates[i] &lt;= 40</code></li> <li>All elements of <code>candidates</code> are distinct.</li> <li><code>1 &lt;= target &lt;= 40</code></li> </ul>"},{"location":"LeetCode_Problems/0040/","title":"40. Combination Sum II","text":"Problem <p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code>\u00a0where the candidate numbers sum to <code>target</code>.</p> <p>Each number in <code>candidates</code>\u00a0may only be used once in the combination.</p> <p>Note:\u00a0The solution set must not contain duplicate combinations.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n</pre> <p>Example 2:</p> <pre>\nInput: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;=\u00a0candidates.length &lt;= 100</code></li> <li><code>1 &lt;=\u00a0candidates[i] &lt;= 50</code></li> <li><code>1 &lt;= target &lt;= 30</code></li> </ul>"},{"location":"LeetCode_Problems/0041/","title":"41. First Missing Positive","text":"Problem <p>Given an unsorted integer array <code>nums</code>, return the smallest missing positive integer.</p> <p>You must implement an algorithm that runs in <code>O(n)</code> time and uses <code>O(1)</code> auxiliary space.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,0]\nOutput: 3\nExplanation: The numbers in the range [1,2] are all in the array.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,4,-1,1]\nOutput: 2\nExplanation: 1 is in the array but 2 is missing.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [7,8,9,11,12]\nOutput: 1\nExplanation: The smallest positive integer 1 is missing.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0042/","title":"42. Trapping Rain Water","text":"Problem <p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</pre> <p>Example 2:</p> <pre>\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == height.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0043/","title":"43. Multiply Strings","text":"Problem <p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p> <p>Note:\u00a0You must not use any built-in BigInteger library or convert the inputs to integer directly.</p> <p> </p> <p>Example 1:</p> <pre>Input: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"\n</pre> <p>Example 2:</p> <pre>Input: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li> <li><code>num1</code> and <code>num2</code> consist of digits only.</li> <li>Both <code>num1</code> and <code>num2</code>\u00a0do not contain any leading zero, except the number <code>0</code> itself.</li> </ul>"},{"location":"LeetCode_Problems/0044/","title":"44. Wildcard Matching","text":"Problem <p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>'?'</code> and <code>'*'</code> where:</p> <ul> <li><code>'?'</code> Matches any single character.</li> <li><code>'*'</code> Matches any sequence of characters (including the empty sequence).</li> </ul> <p>The matching should cover the entire input string (not partial).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aa\", p = \"*\"\nOutput: true\nExplanation:\u00a0'*' matches any sequence.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"cb\", p = \"?a\"\nOutput: false\nExplanation:\u00a0'?' matches 'c', but the second letter is 'a', which does not match 'b'.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li> <li><code>s</code> contains only lowercase English letters.</li> <li><code>p</code> contains only lowercase English letters, <code>'?'</code> or <code>'*'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0045/","title":"45. Jump Game II","text":"Problem <p>You are given a 0-indexed array of integers <code>nums</code> of length <code>n</code>. You are initially positioned at <code>nums[0]</code>.</p> <p>Each element <code>nums[i]</code> represents the maximum length of a forward jump from index <code>i</code>. In other words, if you are at <code>nums[i]</code>, you can jump to any <code>nums[i + j]</code> where:</p> <ul> <li><code>0 &lt;= j &lt;= nums[i]</code> and</li> <li><code>i + j &lt; n</code></li> </ul> <p>Return the minimum number of jumps to reach <code>nums[n - 1]</code>. The test cases are generated such that you can reach <code>nums[n - 1]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,0,1,4]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> <li>It's guaranteed that you can reach <code>nums[n - 1]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0046/","title":"46. Permutations","text":"Problem <p>Given an array <code>nums</code> of distinct integers, return all the possible permutations. You can return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre> <p>Example 2:</p> <pre>Input: nums = [0,1]\nOutput: [[0,1],[1,0]]\n</pre> <p>Example 3:</p> <pre>Input: nums = [1]\nOutput: [[1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 6</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li>All the integers of <code>nums</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0047/","title":"47. Permutations II","text":"Problem <p>Given a collection of numbers, <code>nums</code>,\u00a0that might contain duplicates, return all possible unique permutations in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 8</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/0048/","title":"48. Rotate Image","text":"Problem <p>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by 90 degrees (clockwise).</p> <p>You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0049/","title":"49. Group Anagrams","text":"Problem <p>Given an array of strings <code>strs</code>, group the anagrams together. You can return the answer in any order.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <p> </p> <p>Example 1:</p> <pre>Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n</pre> <p>Example 2:</p> <pre>Input: strs = [\"\"]\nOutput: [[\"\"]]\n</pre> <p>Example 3:</p> <pre>Input: strs = [\"a\"]\nOutput: [[\"a\"]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= strs[i].length &lt;= 100</code></li> <li><code>strs[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0050/","title":"50. Pow(x, n)","text":"Problem <p>Implement pow(x, n), which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>x<sup>n</sup></code>).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: x = 2.00000, n = 10\nOutput: 1024.00000\n</pre> <p>Example 2:</p> <pre>\nInput: x = 2.10000, n = 3\nOutput: 9.26100\n</pre> <p>Example 3:</p> <pre>\nInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-100.0 &lt; x &lt; 100.0</code></li> <li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup>-1</code></li> <li><code>n</code> is an integer.</li> <li>Either <code>x</code> is not zero or <code>n &gt; 0</code>.</li> <li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0051/","title":"51. N-Queens","text":"Problem <p>The n-queens puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p> <p>Given an integer <code>n</code>, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.</p> <p>Each solution contains a distinct board configuration of the n-queens' placement, where <code>'Q'</code> and <code>'.'</code> both indicate a queen and an empty space, respectively.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: [[\"Q\"]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/0052/","title":"52. N-Queens II","text":"Problem <p>The n-queens puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p> <p>Given an integer <code>n</code>, return the number of distinct solutions to the\u00a0n-queens puzzle.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/0053/","title":"53. Maximum Subarray","text":"Problem <p>Given an integer array <code>nums</code>, find the subarray with the largest sum, and return its sum.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1]\nOutput: 1\nExplanation: The subarray [1] has the largest sum 1.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [5,4,-1,7,8]\nOutput: 23\nExplanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul> <p> </p> <p>Follow up: If you have figured out the <code>O(n)</code> solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>"},{"location":"LeetCode_Problems/0054/","title":"54. Spiral Matrix","text":"Problem <p>Given an <code>m x n</code> <code>matrix</code>, return all elements of the <code>matrix</code> in spiral order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10</code></li> <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0055/","title":"55. Jump Game","text":"Problem <p>You are given an integer array <code>nums</code>. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.</p> <p>Return <code>true</code> if you can reach the last index, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0056/","title":"56. Merge Intervals","text":"Problem <p>Given an array\u00a0of <code>intervals</code>\u00a0where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n</pre> <p>Example 2:</p> <pre>\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li> <li><code>intervals[i].length == 2</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0057/","title":"57. Insert Interval","text":"Problem <p>You are given an array of non-overlapping intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represent the start and the end of the <code>i<sup>th</sup></code> interval and <code>intervals</code> is sorted in ascending order by <code>start<sub>i</sub></code>. You are also given an interval <code>newInterval = [start, end]</code> that represents the start and end of another interval.</p> <p>Insert <code>newInterval</code> into <code>intervals</code> such that <code>intervals</code> is still sorted in ascending order by <code>start<sub>i</sub></code> and <code>intervals</code> still does not have any overlapping intervals (merge overlapping intervals if necessary).</p> <p>Return <code>intervals</code> after the insertion.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n</pre> <p>Example 2:</p> <pre>\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li> <li><code>intervals[i].length == 2</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li><code>intervals</code> is sorted by <code>start<sub>i</sub></code> in ascending order.</li> <li><code>newInterval.length == 2</code></li> <li><code>0 &lt;= start &lt;= end &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0058/","title":"58. Length of Last Word","text":"Problem <p>Given a string <code>s</code> consisting of words and spaces, return the length of the last word in the string.</p> <p>A word is a maximal substring consisting of non-space characters only.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"Hello World\"\nOutput: 5\nExplanation: The last word is \"World\" with length 5.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"   fly me   to   the moon  \"\nOutput: 4\nExplanation: The last word is \"moon\" with length 4.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"luffy is still joyboy\"\nOutput: 6\nExplanation: The last word is \"joyboy\" with length 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of only English letters and spaces <code>' '</code>.</li> <li>There will be at least one word in <code>s</code>.</li> </ul>"},{"location":"LeetCode_Problems/0059/","title":"59. Spiral Matrix II","text":"Problem <p>Given a positive integer <code>n</code>, generate an <code>n x n</code> <code>matrix</code> filled with elements from <code>1</code> to <code>n<sup>2</sup></code> in spiral order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3\nOutput: [[1,2,3],[8,9,4],[7,6,5]]\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: [[1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 20</code></li> </ul>"},{"location":"LeetCode_Problems/0060/","title":"60. Permutation Sequence","text":"Problem <p>The set <code>[1, 2, 3, ...,\u00a0n]</code> contains a total of <code>n!</code> unique permutations.</p> <p>By listing and labeling all of the permutations in order, we get the following sequence for <code>n = 3</code>:</p> <ol> <li><code>\"123\"</code></li> <li><code>\"132\"</code></li> <li><code>\"213\"</code></li> <li><code>\"231\"</code></li> <li><code>\"312\"</code></li> <li><code>\"321\"</code></li> </ol> <p>Given <code>n</code> and <code>k</code>, return the <code>k<sup>th</sup></code> permutation sequence.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 3, k = 3\nOutput: \"213\"\n</pre> <p>Example 2:</p> <pre>Input: n = 4, k = 9\nOutput: \"2314\"\n</pre> <p>Example 3:</p> <pre>Input: n = 3, k = 1\nOutput: \"123\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 9</code></li> <li><code>1 &lt;= k &lt;= n!</code></li> </ul>"},{"location":"LeetCode_Problems/0061/","title":"61. Rotate List","text":"Problem <p>Given the <code>head</code> of a linked\u00a0list, rotate the list to the right by <code>k</code> places.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [0,1,2], k = 4\nOutput: [2,0,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 500]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li><code>0 &lt;= k &lt;= 2 * 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0062/","title":"62. Unique Paths","text":"Problem <p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the top-left corner (i.e., <code>grid[0][0]</code>). The robot tries to move to the bottom-right corner (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p> <p>Given the two integers <code>m</code> and <code>n</code>, return the number of possible unique paths that the robot can take to reach the bottom-right corner.</p> <p>The test cases are generated so that the answer will be less than or equal to <code>2 * 10<sup>9</sup></code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: m = 3, n = 7\nOutput: 28\n</pre> <p>Example 2:</p> <pre>\nInput: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right\n3. Down -&gt; Right -&gt; Down\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0063/","title":"63. Unique Paths II","text":"Problem <p>You are given an <code>m x n</code> integer array <code>grid</code>. There is a robot initially located at the top-left corner (i.e., <code>grid[0][0]</code>). The robot tries to move to the bottom-right corner (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p> <p>An obstacle and space are marked as <code>1</code> or <code>0</code> respectively in <code>grid</code>. A path that the robot takes cannot include any square that is an obstacle.</p> <p>Return the number of possible unique paths that the robot can take to reach the bottom-right corner.</p> <p>The testcases are generated so that the answer will be less than or equal to <code>2 * 10<sup>9</sup></code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: 2\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -&gt; Right -&gt; Down -&gt; Down\n2. Down -&gt; Down -&gt; Right -&gt; Right\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: obstacleGrid = [[0,1],[0,0]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == obstacleGrid.length</code></li> <li><code>n == obstacleGrid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>obstacleGrid[i][j]</code> is <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0064/","title":"64. Minimum Path Sum","text":"Problem <p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.</p> <p>Note: You can only move either down or right at any point in time.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[1,2,3],[4,5,6]]\nOutput: 12\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 200</code></li> </ul>"},{"location":"LeetCode_Problems/0065/","title":"65. Valid Number","text":"Problem <p>A valid number can be split up into these components (in order):</p> <ol> <li>A decimal number or an integer.</li> <li>(Optional) An <code>'e'</code> or <code>'E'</code>, followed by an integer.</li> </ol> <p>A decimal number can be split up into these components (in order):</p> <ol> <li>(Optional) A sign character (either <code>'+'</code> or <code>'-'</code>).</li> <li>One of the following formats:     <ol> <li>One or more digits, followed by a dot <code>'.'</code>.</li> <li>One or more digits, followed by a dot <code>'.'</code>, followed by one or more digits.</li> <li>A dot <code>'.'</code>, followed by one or more digits.</li> </ol> </li> </ol> <p>An integer can be split up into these components (in order):</p> <ol> <li>(Optional) A sign character (either <code>'+'</code> or <code>'-'</code>).</li> <li>One or more digits.</li> </ol> <p>For example, all the following are valid numbers: <code>[\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"]</code>, while the following are not valid numbers: <code>[\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]</code>.</p> <p>Given a string <code>s</code>, return <code>true</code> if <code>s</code> is a valid number.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"0\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"e\"\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: s = \".\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 20</code></li> <li><code>s</code> consists of only English letters (both uppercase and lowercase), digits (<code>0-9</code>), plus <code>'+'</code>, minus <code>'-'</code>, or dot <code>'.'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0066/","title":"66. Plus One","text":"Problem <p>You are given a large integer represented as an integer array <code>digits</code>, where each <code>digits[i]</code> is the <code>i<sup>th</sup></code> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading <code>0</code>'s.</p> <p>Increment the large integer by one and return the resulting array of digits.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n</pre> <p>Example 2:</p> <pre>\nInput: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n</pre> <p>Example 3:</p> <pre>\nInput: digits = [9]\nOutput: [1,0]\nExplanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= digits.length &lt;= 100</code></li> <li><code>0 &lt;= digits[i] &lt;= 9</code></li> <li><code>digits</code> does not contain any leading <code>0</code>'s.</li> </ul>"},{"location":"LeetCode_Problems/0067/","title":"67. Add Binary","text":"Problem <p>Given two binary strings <code>a</code> and <code>b</code>, return their sum as a binary string.</p> <p> </p> <p>Example 1:</p> <pre>Input: a = \"11\", b = \"1\"\nOutput: \"100\"\n</pre> <p>Example 2:</p> <pre>Input: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li> <li><code>a</code> and <code>b</code> consist\u00a0only of <code>'0'</code> or <code>'1'</code> characters.</li> <li>Each string does not contain leading zeros except for the zero itself.</li> </ul>"},{"location":"LeetCode_Problems/0068/","title":"68. Text Justification","text":"Problem <p>Given an array of strings <code>words</code> and a width <code>maxWidth</code>, format the text such that each line has exactly <code>maxWidth</code> characters and is fully (left and right) justified.</p> <p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>' '</code> when necessary so that each line has exactly <code>maxWidth</code> characters.</p> <p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p> <p>For the last line of text, it should be left-justified, and no extra space is inserted between words.</p> <p>Note:</p> <ul> <li>A word is defined as a character sequence consisting of non-space characters only.</li> <li>Each word's length is guaranteed to be greater than <code>0</code> and not exceed <code>maxWidth</code>.</li> <li>The input array <code>words</code> contains at least one word.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\nOutput:\n[\n\u00a0 \u00a0\"This \u00a0 \u00a0is \u00a0 \u00a0an\",\n\u00a0 \u00a0\"example \u00a0of text\",\n\u00a0 \u00a0\"justification. \u00a0\"\n]</pre> <p>Example 2:</p> <pre>\nInput: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\nOutput:\n[\n\u00a0 \"What \u00a0 must \u00a0 be\",\n\u00a0 \"acknowledgment \u00a0\",\n\u00a0 \"shall be \u00a0 \u00a0 \u00a0 \u00a0\"\n]\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.</pre> <p>Example 3:</p> <pre>\nInput: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\nOutput:\n[\n\u00a0 \"Science \u00a0is \u00a0what we\",\n  \"understand \u00a0 \u00a0 \u00a0well\",\n\u00a0 \"enough to explain to\",\n\u00a0 \"a \u00a0computer. \u00a0Art is\",\n\u00a0 \"everything \u00a0else \u00a0we\",\n\u00a0 \"do \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"\n]</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 300</code></li> <li><code>1 &lt;= words[i].length &lt;= 20</code></li> <li><code>words[i]</code> consists of only English letters and symbols.</li> <li><code>1 &lt;= maxWidth &lt;= 100</code></li> <li><code>words[i].length &lt;= maxWidth</code></li> </ul>"},{"location":"LeetCode_Problems/0069/","title":"69. Sqrt(x)","text":"Problem <p>Given a non-negative integer <code>x</code>, return the square root of <code>x</code> rounded down to the nearest integer. The returned integer should be non-negative as well.</p> <p>You must not use any built-in exponent function or operator.</p> <ul> <li>For example, do not use <code>pow(x, 0.5)</code> in c++ or <code>x ** 0.5</code> in python.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: x = 4\nOutput: 2\nExplanation: The square root of 4 is 2, so we return 2.\n</pre> <p>Example 2:</p> <pre>\nInput: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0070/","title":"70. Climbing Stairs","text":"Problem <p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p> <p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 45</code></li> </ul>"},{"location":"LeetCode_Problems/0071/","title":"71. Simplify Path","text":"Problem <p>Given a string <code>path</code>, which is an absolute path (starting with a slash <code>'/'</code>) to a file or directory in a Unix-style file system, convert it to the simplified canonical path.</p> <p>In a Unix-style file system, a period <code>'.'</code> refers to the current directory, a double period <code>'..'</code> refers to the directory up a level, and any multiple consecutive slashes (i.e. <code>'//'</code>) are treated as a single slash <code>'/'</code>. For this problem, any other format of periods such as <code>'...'</code> are treated as file/directory names.</p> <p>The canonical path should have the following format:</p> <ul> <li>The path starts with a single slash <code>'/'</code>.</li> <li>Any two directories are separated by a single slash <code>'/'</code>.</li> <li>The path does not end with a trailing <code>'/'</code>.</li> <li>The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period <code>'.'</code> or double period <code>'..'</code>)</li> </ul> <p>Return the simplified canonical path.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: path = \"/home/\"\nOutput: \"/home\"\nExplanation: Note that there is no trailing slash after the last directory name.\n</pre> <p>Example 2:</p> <pre>\nInput: path = \"/../\"\nOutput: \"/\"\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n</pre> <p>Example 3:</p> <pre>\nInput: path = \"/home//foo/\"\nOutput: \"/home/foo\"\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= path.length &lt;= 3000</code></li> <li><code>path</code> consists of English letters, digits, period <code>'.'</code>, slash <code>'/'</code> or <code>'_'</code>.</li> <li><code>path</code> is a valid absolute Unix path.</li> </ul>"},{"location":"LeetCode_Problems/0072/","title":"72. Edit Distance","text":"Problem <p>Given two strings <code>word1</code> and <code>word2</code>, return the minimum number of operations required to convert <code>word1</code> to <code>word2</code>.</p> <p>You have the following three operations permitted on a word:</p> <ul> <li>Insert a character</li> <li>Delete a character</li> <li>Replace a character</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: \nhorse -&gt; rorse (replace 'h' with 'r')\nrorse -&gt; rose (remove 'r')\nrose -&gt; ros (remove 'e')\n</pre> <p>Example 2:</p> <pre>\nInput: word1 = \"intention\", word2 = \"execution\"\nOutput: 5\nExplanation: \nintention -&gt; inention (remove 't')\ninention -&gt; enention (replace 'i' with 'e')\nenention -&gt; exention (replace 'n' with 'x')\nexention -&gt; exection (replace 'n' with 'c')\nexection -&gt; execution (insert 'u')\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li> <li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0073/","title":"73. Set Matrix Zeroes","text":"Problem <p>Given an <code>m x n</code> integer matrix <code>matrix</code>, if an element is <code>0</code>, set its entire row and column to <code>0</code>'s.</p> <p>You must do it in place.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[0].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>-2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>A straightforward solution using <code>O(mn)</code> space is probably a bad idea.</li> <li>A simple improvement uses <code>O(m + n)</code> space, but still not the best solution.</li> <li>Could you devise a constant space solution?</li> </ul>"},{"location":"LeetCode_Problems/0074/","title":"74. Search a 2D Matrix","text":"Problem <p>You are given an <code>m x n</code> integer matrix <code>matrix</code> with the following two properties:</p> <ul> <li>Each row is sorted in non-decreasing order.</li> <li>The first integer of each row is greater than the last integer of the previous row.</li> </ul> <p>Given an integer <code>target</code>, return <code>true</code> if <code>target</code> is in <code>matrix</code> or <code>false</code> otherwise.</p> <p>You must write a solution in <code>O(log(m * n))</code> time complexity.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0075/","title":"75. Sort Colors","text":"Problem <p>Given an array <code>nums</code> with <code>n</code> objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.</p> <p>We will use the integers <code>0</code>, <code>1</code>, and <code>2</code> to represent the color red, white, and blue, respectively.</p> <p>You must solve this problem without using the library's sort function.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,0,1]\nOutput: [0,1,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 300</code></li> <li><code>nums[i]</code> is either <code>0</code>, <code>1</code>, or <code>2</code>.</li> </ul> <p> </p> <p>Follow up:\u00a0Could you come up with a one-pass algorithm using only\u00a0constant extra space?</p>"},{"location":"LeetCode_Problems/0076/","title":"76. Minimum Window Substring","text":"Problem <p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return the minimum window substring of <code>s</code> such that every character in <code>t</code> (including duplicates) is included in the window. If there is no such substring, return the empty string <code>\"\"</code>.</p> <p>The testcases will be generated such that the answer is unique.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == s.length</code></li> <li><code>n == t.length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li> </ul> <p> </p> <p>Follow up: Could you find an algorithm that runs in <code>O(m + n)</code> time?</p>"},{"location":"LeetCode_Problems/0077/","title":"77. Combinations","text":"Problem <p>Given two integers <code>n</code> and <code>k</code>, return all possible combinations of <code>k</code> numbers chosen from the range <code>[1, n]</code>.</p> <p>You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4, k = 2\nOutput: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nExplanation: There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1, k = 1\nOutput: [[1]]\nExplanation: There is 1 choose 1 = 1 total combination.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>1 &lt;= k &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/0078/","title":"78. Subsets","text":"Problem <p>Given an integer array <code>nums</code> of unique elements, return all possible subsets (the power set).</p> <p>The solution set must not contain duplicate subsets. Return the solution in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0]\nOutput: [[],[0]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li>All the numbers of\u00a0<code>nums</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0079/","title":"79. Word Search","text":"Problem <p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> if <code>word</code> exists in the grid.</p> <p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n = board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 6</code></li> <li><code>1 &lt;= word.length &lt;= 15</code></li> <li><code>board</code> and <code>word</code> consists of only lowercase and uppercase English letters.</li> </ul> <p> </p> <p>Follow up: Could you use search pruning to make your solution faster with a larger <code>board</code>?</p>"},{"location":"LeetCode_Problems/0080/","title":"80. Remove Duplicates from Sorted Array II","text":"Problem <p>Given an integer array <code>nums</code> sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.</p> <p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code>\u00a0should hold the final result. It does not matter what you leave beyond the first\u00a0<code>k</code>\u00a0elements.</p> <p>Return <code>k</code> after placing the final result in the first <code>k</code> slots of <code>nums</code>.</p> <p>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</p> <p>Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <pre>\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre> <p>If all assertions pass, then your solution will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,1,2,2,3]\nOutput: 5, nums = [1,1,2,2,3,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,0,1,1,1,1,2,3,3]\nOutput: 7, nums = [0,0,1,1,2,3,3,_,_]\nExplanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> is sorted in non-decreasing order.</li> </ul>"},{"location":"LeetCode_Problems/0081/","title":"81. Search in Rotated Sorted Array II","text":"Problem <p>There is an integer array <code>nums</code> sorted in non-decreasing order (not necessarily with distinct values).</p> <p>Before being passed to your function, <code>nums</code> is rotated at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (0-indexed). For example, <code>[0,1,2,4,4,4,5,6,6,7]</code> might be rotated at pivot index <code>5</code> and become <code>[4,5,6,6,7,0,1,2,4,4]</code>.</p> <p>Given the array <code>nums</code> after the rotation and an integer <code>target</code>, return <code>true</code> if <code>target</code> is in <code>nums</code>, or <code>false</code> if it is not in <code>nums</code>.</p> <p>You must decrease the overall operation steps as much as possible.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> is guaranteed to be rotated at some pivot.</li> <li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li> </ul> <p> </p> <p>Follow up: This problem is similar to\u00a0Search in Rotated Sorted Array, but\u00a0<code>nums</code> may contain duplicates. Would this affect the runtime complexity? How and why?</p>"},{"location":"LeetCode_Problems/0082/","title":"82. Remove Duplicates from Sorted List II","text":"Problem <p>Given the <code>head</code> of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,3,4,4,5]\nOutput: [1,2,5]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,1,1,2,3]\nOutput: [2,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li>The list is guaranteed to be sorted in ascending order.</li> </ul>"},{"location":"LeetCode_Problems/0083/","title":"83. Remove Duplicates from Sorted List","text":"Problem <p>Given the <code>head</code> of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,1,2]\nOutput: [1,2]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,1,2,3,3]\nOutput: [1,2,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 300]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li>The list is guaranteed to be sorted in ascending order.</li> </ul>"},{"location":"LeetCode_Problems/0084/","title":"84. Largest Rectangle in Histogram","text":"Problem <p>Given an array of integers <code>heights</code> representing the histogram's bar height where the width of each bar is <code>1</code>, return the area of the largest rectangle in the histogram.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: heights = [2,4]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= heights[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0085/","title":"85. Maximal Rectangle","text":"Problem <p>Given a <code>rows x cols</code>\u00a0binary <code>matrix</code> filled with <code>0</code>'s and <code>1</code>'s, find the largest rectangle containing only <code>1</code>'s and return its area.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.\n</pre> <p>Example 2:</p> <pre>\nInput: matrix = [[\"0\"]]\nOutput: 0\n</pre> <p>Example 3:</p> <pre>\nInput: matrix = [[\"1\"]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>rows == matrix.length</code></li> <li><code>cols == matrix[i].length</code></li> <li><code>1 &lt;= row, cols &lt;= 200</code></li> <li><code>matrix[i][j]</code> is <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0086/","title":"86. Partition List","text":"Problem <p>Given the <code>head</code> of a linked list and a value <code>x</code>, partition it such that all nodes less than <code>x</code> come before nodes greater than or equal to <code>x</code>.</p> <p>You should preserve the original relative order of the nodes in each of the two partitions.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,4,3,2,5,2], x = 3\nOutput: [1,2,2,4,3,5]\n</pre> <p>Example 2:</p> <pre>\nInput: head = [2,1], x = 2\nOutput: [1,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 200]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li><code>-200 &lt;= x &lt;= 200</code></li> </ul>"},{"location":"LeetCode_Problems/0087/","title":"87. Scramble String","text":"Problem <p>We can scramble a string s to get a string t using the following algorithm:</p> <ol> <li>If the length of the string is 1, stop.</li> <li>If the length of the string is &gt; 1, do the following:     <ul> <li>Split the string into two non-empty substrings at a random index, i.e., if the string is <code>s</code>, divide it to <code>x</code> and <code>y</code> where <code>s = x + y</code>.</li> <li>Randomly\u00a0decide to swap the two substrings or to keep them in the same order. i.e., after this step, <code>s</code> may become <code>s = x + y</code> or <code>s = y + x</code>.</li> <li>Apply step 1 recursively on each of the two substrings <code>x</code> and <code>y</code>.</li> </ul> </li> </ol> <p>Given two strings <code>s1</code> and <code>s2</code> of the same length, return <code>true</code> if <code>s2</code> is a scrambled string of <code>s1</code>, otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\nExplanation: One possible scenario applied on s1 is:\n\"great\" --&gt; \"gr/eat\" // divide at random index.\n\"gr/eat\" --&gt; \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\"gr/eat\" --&gt; \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n\"g/r / e/at\" --&gt; \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\"r/g / e/at\" --&gt; \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\"r/g / e/ a/t\" --&gt; \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"abcde\", s2 = \"caebd\"\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: s1 = \"a\", s2 = \"a\"\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>s1.length == s2.length</code></li> <li><code>1 &lt;= s1.length &lt;= 30</code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0088/","title":"88. Merge Sorted Array","text":"Problem <p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in non-decreasing order, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p> <p>Merge <code>nums1</code> and <code>nums2</code> into a single array sorted in non-decreasing order.</p> <p>The final sorted array should not be returned by the function, but instead be stored inside the array <code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\nExplanation: The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\nOutput: [1]\nExplanation: The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums1.length == m + n</code></li> <li><code>nums2.length == n</code></li> <li><code>0 &lt;= m, n &lt;= 200</code></li> <li><code>1 &lt;= m + n &lt;= 200</code></li> <li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li> </ul> <p> </p> <p>Follow up: Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p>"},{"location":"LeetCode_Problems/0089/","title":"89. Gray Code","text":"Problem <p>An n-bit gray code sequence is a sequence of <code>2<sup>n</sup></code> integers where:</p> <ul> <li>Every integer is in the inclusive range <code>[0, 2<sup>n</sup> - 1]</code>,</li> <li>The first integer is <code>0</code>,</li> <li>An integer appears no more than once in the sequence,</li> <li>The binary representation of every pair of adjacent integers differs by exactly one bit, and</li> <li>The binary representation of the first and last integers differs by exactly one bit.</li> </ul> <p>Given an integer <code>n</code>, return any valid n-bit gray code sequence.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: [0,1,3,2]\nExplanation:\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: [0,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 16</code></li> </ul>"},{"location":"LeetCode_Problems/0090/","title":"90. Subsets II","text":"Problem <p>Given an integer array <code>nums</code> that may contain duplicates, return all possible subsets (the power set).</p> <p>The solution set must not contain duplicate subsets. Return the solution in any order.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,2,2]\nOutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n</pre> <p>Example 2:</p> <pre>Input: nums = [0]\nOutput: [[],[0]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10</code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/0091/","title":"91. Decode Ways","text":"Problem <p>A message containing letters from <code>A-Z</code> can be encoded into numbers using the following mapping:</p> <pre>\n'A' -&gt; \"1\"\n'B' -&gt; \"2\"\n...\n'Z' -&gt; \"26\"\n</pre> <p>To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, <code>\"11106\"</code> can be mapped into:</p> <ul> <li><code>\"AAJF\"</code> with the grouping <code>(1 1 10 6)</code></li> <li><code>\"KJF\"</code> with the grouping <code>(11 10 6)</code></li> </ul> <p>Note that the grouping <code>(1 11 06)</code> is invalid because <code>\"06\"</code> cannot be mapped into <code>'F'</code> since <code>\"6\"</code> is different from <code>\"06\"</code>.</p> <p>Given a string <code>s</code> containing only digits, return the number of ways to decode it.</p> <p>The test cases are generated so that the answer fits in a 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"12\"\nOutput: 2\nExplanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"226\"\nOutput: 3\nExplanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"06\"\nOutput: 0\nExplanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> contains only digits and may contain leading zero(s).</li> </ul>"},{"location":"LeetCode_Problems/0092/","title":"92. Reverse Linked List II","text":"Problem <p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return the reversed list.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]\n</pre> <p>Example 2:</p> <pre>\nInput: head = [5], left = 1, right = 1\nOutput: [5]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is <code>n</code>.</li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>-500 &lt;= Node.val &lt;= 500</code></li> <li><code>1 &lt;= left &lt;= right &lt;= n</code></li> </ul> <p> </p> <p>Follow up: Could you do it in one pass?</p>"},{"location":"LeetCode_Problems/0093/","title":"93. Restore IP Addresses","text":"Problem <p>A valid IP address consists of exactly four integers separated by single dots. Each integer is between <code>0</code> and <code>255</code> (inclusive) and cannot have leading zeros.</p> <ul> <li>For example, <code>\"0.1.2.201\"</code> and <code>\"192.168.1.1\"</code> are valid IP addresses, but <code>\"0.011.255.245\"</code>, <code>\"192.168.1.312\"</code> and <code>\"192.168@1.1\"</code> are invalid IP addresses.</li> </ul> <p>Given a string <code>s</code> containing only digits, return all possible valid IP addresses that can be formed by inserting dots into <code>s</code>. You are not allowed to reorder or remove any digits in <code>s</code>. You may return the valid IP addresses in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"25525511135\"\nOutput: [\"255.255.11.135\",\"255.255.111.35\"]\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"0000\"\nOutput: [\"0.0.0.0\"]\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"101023\"\nOutput: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 20</code></li> <li><code>s</code> consists of digits only.</li> </ul>"},{"location":"LeetCode_Problems/0094/","title":"94. Binary Tree Inorder Traversal","text":"Problem <p>Given the <code>root</code> of a binary tree, return the inorder traversal of its nodes' values.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,null,2,3]\nOutput: [1,3,2]\n</pre> <p>Example 2:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: root = [1]\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p> </p> <p>Follow up: Recursive solution is trivial, could you do it iteratively?</p>"},{"location":"LeetCode_Problems/0095/","title":"95. Unique Binary Search Trees II","text":"Problem <p>Given an integer <code>n</code>, return all the structurally unique BST's (binary search trees), which has exactly <code>n</code> nodes of unique values from <code>1</code> to <code>n</code>. Return the answer in any order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: [[1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 8</code></li> </ul>"},{"location":"LeetCode_Problems/0096/","title":"96. Unique Binary Search Trees","text":"Problem <p>Given an integer <code>n</code>, return the number of structurally unique BST's (binary search trees) which has exactly <code>n</code> nodes of unique values from <code>1</code> to <code>n</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3\nOutput: 5\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 19</code></li> </ul>"},{"location":"LeetCode_Problems/0097/","title":"97. Interleaving String","text":"Problem <p>Given strings <code>s1</code>, <code>s2</code>, and <code>s3</code>, find whether <code>s3</code> is formed by an interleaving of <code>s1</code> and <code>s2</code>.</p> <p>An interleaving of two strings <code>s</code> and <code>t</code> is a configuration where <code>s</code> and <code>t</code> are divided into <code>n</code> and <code>m</code> substrings respectively, such that:</p> <ul> <li><code>s = s<sub>1</sub> + s<sub>2</sub> + ... + s<sub>n</sub></code></li> <li><code>t = t<sub>1</sub> + t<sub>2</sub> + ... + t<sub>m</sub></code></li> <li><code>|n - m| &lt;= 1</code></li> <li>The interleaving is <code>s<sub>1</sub> + t<sub>1</sub> + s<sub>2</sub> + t<sub>2</sub> + s<sub>3</sub> + t<sub>3</sub> + ...</code> or <code>t<sub>1</sub> + s<sub>1</sub> + t<sub>2</sub> + s<sub>2</sub> + t<sub>3</sub> + s<sub>3</sub> + ...</code></li> </ul> <p>Note: <code>a + b</code> is the concatenation of strings <code>a</code> and <code>b</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\nOutput: true\nExplanation: One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\nOutput: false\nExplanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n</pre> <p>Example 3:</p> <pre>\nInput: s1 = \"\", s2 = \"\", s3 = \"\"\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s1.length, s2.length &lt;= 100</code></li> <li><code>0 &lt;= s3.length &lt;= 200</code></li> <li><code>s1</code>, <code>s2</code>, and <code>s3</code> consist of lowercase English letters.</li> </ul> <p> </p> <p>Follow up: Could you solve it using only <code>O(s2.length)</code> additional memory space?</p>"},{"location":"LeetCode_Problems/0098/","title":"98. Validate Binary Search Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, determine if it is a valid binary search tree (BST).</p> <p>A valid BST is defined as follows:</p> <ul> <li>The left subtree of a node contains only nodes with keys less than the node's key.</li> <li>The right subtree of a node contains only nodes with keys greater than the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [2,1,3]\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0099/","title":"99. Recover Binary Search Tree","text":"Problem <p>You are given the <code>root</code> of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,3,null,null,2]\nOutput: [3,1,null,null,2]\nExplanation: 3 cannot be a left child of 1 because 3 &gt; 1. Swapping 1 and 3 makes the BST valid.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [3,1,4,null,null,2]\nOutput: [2,1,4,null,null,3]\nExplanation: 2 cannot be in the right subtree of 3 because 2 &lt; 3. Swapping 2 and 3 makes the BST valid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 1000]</code>.</li> <li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li> </ul> <p> </p> <p>Follow up: A solution using <code>O(n)</code> space is pretty straight-forward. Could you devise a constant <code>O(1)</code> space solution?</p>"},{"location":"LeetCode_Problems/0100/","title":"100. Same Tree","text":"Problem <p>Given the roots of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are the same or not.</p> <p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: p = [1,2], q = [1,null,2]\nOutput: false\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in both trees is in the range <code>[0, 100]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0101/","title":"101. Symmetric Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,2,3,4,4,3]\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,2,null,3,null,3]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p> </p> <p>Follow up: Could you solve it both recursively and iteratively?</p>"},{"location":"LeetCode_Problems/0102/","title":"102. Binary Tree Level Order Traversal","text":"Problem <p>Given the <code>root</code> of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1]\nOutput: [[1]]\n</pre> <p>Example 3:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0103/","title":"103. Binary Tree Zigzag Level Order Traversal","text":"Problem <p>Given the <code>root</code> of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1]\nOutput: [[1]]\n</pre> <p>Example 3:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0104/","title":"104. Maximum Depth of Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, return its maximum depth.</p> <p>A binary tree's maximum depth\u00a0is the number of nodes along the longest path from the root node down to the farthest leaf node.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,9,20,null,null,15,7]\nOutput: 3\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1,null,2]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0105/","title":"105. Construct Binary Tree from Preorder and Inorder Traversal","text":"Problem <p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return the binary tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n</pre> <p>Example 2:</p> <pre>\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= preorder.length &lt;= 3000</code></li> <li><code>inorder.length == preorder.length</code></li> <li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li> <li><code>preorder</code> and <code>inorder</code> consist of unique values.</li> <li>Each value of <code>inorder</code> also appears in <code>preorder</code>.</li> <li><code>preorder</code> is guaranteed to be the preorder traversal of the tree.</li> <li><code>inorder</code> is guaranteed to be the inorder traversal of the tree.</li> </ul>"},{"location":"LeetCode_Problems/0106/","title":"106. Construct Binary Tree from Inorder and Postorder Traversal","text":"Problem <p>Given two integer arrays <code>inorder</code> and <code>postorder</code> where <code>inorder</code> is the inorder traversal of a binary tree and <code>postorder</code> is the postorder traversal of the same tree, construct and return the binary tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]\n</pre> <p>Example 2:</p> <pre>\nInput: inorder = [-1], postorder = [-1]\nOutput: [-1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= inorder.length &lt;= 3000</code></li> <li><code>postorder.length == inorder.length</code></li> <li><code>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</code></li> <li><code>inorder</code> and <code>postorder</code> consist of unique values.</li> <li>Each value of <code>postorder</code> also appears in <code>inorder</code>.</li> <li><code>inorder</code> is guaranteed to be the inorder traversal of the tree.</li> <li><code>postorder</code> is guaranteed to be the postorder traversal of the tree.</li> </ul>"},{"location":"LeetCode_Problems/0107/","title":"107. Binary Tree Level Order Traversal II","text":"Problem <p>Given the <code>root</code> of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[15,7],[9,20],[3]]\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1]\nOutput: [[1]]\n</pre> <p>Example 3:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0108/","title":"108. Convert Sorted Array to Binary Search Tree","text":"Problem <p>Given an integer array <code>nums</code> where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\n\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> is sorted in a strictly increasing order.</li> </ul>"},{"location":"LeetCode_Problems/0109/","title":"109. Convert Sorted List to Binary Search Tree","text":"Problem <p>Given the <code>head</code> of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n</pre> <p>Example 2:</p> <pre>\nInput: head = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in <code>head</code> is in the range <code>[0, 2 * 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0110/","title":"110. Balanced Binary Tree","text":"Problem <p>Given a binary tree, determine if it is height-balanced.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,9,20,null,null,15,7]\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,2,3,3,null,null,4,4]\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: root = []\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0111/","title":"111. Minimum Depth of Binary Tree","text":"Problem <p>Given a binary tree, find its minimum depth.</p> <p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p> <p>Note:\u00a0A leaf is a node with no children.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,9,20,null,null,15,7]\nOutput: 2\n</pre> <p>Example 2:</p> <pre>\nInput: root = [2,null,3,null,4,null,5,null,6]\nOutput: 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>5</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0112/","title":"112. Path Sum","text":"Problem <p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <code>true</code> if the tree has a root-to-leaf path such that adding up all the values along the path equals <code>targetSum</code>.</p> <p>A leaf is a node with no children.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\nExplanation: The root-to-leaf path with the target sum is shown.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,3], targetSum = 5\nOutput: false\nExplanation: There two root-to-leaf paths in the tree:\n(1 --&gt; 2): The sum is 3.\n(1 --&gt; 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n</pre> <p>Example 3:</p> <pre>\nInput: root = [], targetSum = 0\nOutput: false\nExplanation: Since the tree is empty, there are no root-to-leaf paths.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> <li><code>-1000 &lt;= targetSum &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0113/","title":"113. Path Sum II","text":"Problem <p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return all root-to-leaf paths where the sum of the node values in the path equals <code>targetSum</code>. Each path should be returned as a list of the node values, not node references.</p> <p>A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: [[5,4,11,2],[5,8,4,5]]\nExplanation: There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,3], targetSum = 5\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: root = [1,2], targetSum = 0\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 5000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> <li><code>-1000 &lt;= targetSum &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0114/","title":"114. Flatten Binary Tree to Linked List","text":"Problem <p>Given the <code>root</code> of a binary tree, flatten the tree into a \"linked list\":</p> <ul> <li>The \"linked list\" should use the same <code>TreeNode</code> class where the <code>right</code> child pointer points to the next node in the list and the <code>left</code> child pointer is always <code>null</code>.</li> <li>The \"linked list\" should be in the same order as a pre-order traversal of the binary tree.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n</pre> <p>Example 2:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: root = [0]\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p> </p> <p>Follow up: Can you flatten the tree in-place (with <code>O(1)</code> extra space)?</p>"},{"location":"LeetCode_Problems/0115/","title":"115. Distinct Subsequences","text":"Problem <p>Given two strings s and t, return the number of distinct subsequences of s which equals t.</p> <p>The test cases are generated so that the answer fits on a 32-bit signed integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"rabbbit\", t = \"rabbit\"\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate \"rabbit\" from s.\n<code>rabbbit</code>\n<code>rabbbit</code>\n<code>rabbbit</code>\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"babgbag\", t = \"bag\"\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate \"bag\" from s.\n<code>babgbag</code>\n<code>babgbag</code>\n<code>babgbag</code>\n<code>babgbag</code>\n<code>babgbag</code></pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 1000</code></li> <li><code>s</code> and <code>t</code> consist of English letters.</li> </ul>"},{"location":"LeetCode_Problems/0116/","title":"116. Populating Next Right Pointers in Each Node","text":"Problem <p>You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p> <pre>\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n</pre> <p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p> <p>Initially, all next pointers are set to <code>NULL</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n</pre> <p>Example 2:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 2<sup>12</sup> - 1]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul> <p> </p> <p>Follow-up:</p> <ul> <li>You may only use constant extra space.</li> <li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li> </ul>"},{"location":"LeetCode_Problems/0117/","title":"117. Populating Next Right Pointers in Each Node II","text":"Problem <p>Given a binary tree</p> <pre>\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n</pre> <p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p> <p>Initially, all next pointers are set to <code>NULL</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,null,7]\nOutput: [1,#,2,3,#,4,5,7,#]\nExplanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n</pre> <p>Example 2:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 6000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p> </p> <p>Follow-up:</p> <ul> <li>You may only use constant extra space.</li> <li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li> </ul>"},{"location":"LeetCode_Problems/0118/","title":"118. Pascal's Triangle","text":"Problem <p>Given an integer <code>numRows</code>, return the first numRows of Pascal's triangle.</p> <p>In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:</p> <p></p> <p> </p> <p>Example 1:</p> <pre>Input: numRows = 5\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n</pre> <p>Example 2:</p> <pre>Input: numRows = 1\nOutput: [[1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= numRows &lt;= 30</code></li> </ul>"},{"location":"LeetCode_Problems/0119/","title":"119. Pascal's Triangle II","text":"Problem <p>Given an integer <code>rowIndex</code>, return the <code>rowIndex<sup>th</sup></code> (0-indexed) row of the Pascal's triangle.</p> <p>In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:</p> <p></p> <p> </p> <p>Example 1:</p> <pre>Input: rowIndex = 3\nOutput: [1,3,3,1]\n</pre> <p>Example 2:</p> <pre>Input: rowIndex = 0\nOutput: [1]\n</pre> <p>Example 3:</p> <pre>Input: rowIndex = 1\nOutput: [1,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= rowIndex &lt;= 33</code></li> </ul> <p> </p> <p>Follow up: Could you optimize your algorithm to use only <code>O(rowIndex)</code> extra space?</p>"},{"location":"LeetCode_Problems/0120/","title":"120. Triangle","text":"Problem <p>Given a <code>triangle</code> array, return the minimum path sum from top to bottom.</p> <p>For each step, you may move to an adjacent number of the row below. More formally, if you are on index <code>i</code> on the current row, you may move to either index <code>i</code> or index <code>i + 1</code> on the next row.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\nOutput: 11\nExplanation: The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n</pre> <p>Example 2:</p> <pre>\nInput: triangle = [[-10]]\nOutput: -10\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= triangle.length &lt;= 200</code></li> <li><code>triangle[0].length == 1</code></li> <li><code>triangle[i].length == triangle[i - 1].length + 1</code></li> <li><code>-10<sup>4</sup> &lt;= triangle[i][j] &lt;= 10<sup>4</sup></code></li> </ul> <p> </p> <p>Follow up: Could you\u00a0do this using only <code>O(n)</code> extra space, where <code>n</code> is the total number of rows in the triangle?</p>"},{"location":"LeetCode_Problems/0121/","title":"121. Best Time to Buy and Sell Stock","text":"Problem <p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p> <p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p> <p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</pre> <p>Example 2:</p> <pre>\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0122/","title":"122. Best Time to Buy and Sell Stock II","text":"Problem <p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p> <p>On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p> <p>Find and return the maximum profit you can achieve.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n</pre> <p>Example 2:</p> <pre>\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.\n</pre> <p>Example 3:</p> <pre>\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0123/","title":"123. Best Time to Buy and Sell Stock III","text":"Problem <p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p> <p>Find the maximum profit you can achieve. You may complete at most two transactions.</p> <p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.</pre> <p>Example 2:</p> <pre>\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n</pre> <p>Example 3:</p> <pre>\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= prices[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0124/","title":"124. Binary Tree Maximum Path Sum","text":"Problem <p>A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.</p> <p>The path sum of a path is the sum of the node's values in the path.</p> <p>Given the <code>root</code> of a binary tree, return the maximum path sum of any non-empty path.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 3 * 10<sup>4</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0125/","title":"125. Valid Palindrome","text":"Problem <p>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p> <p>Given a string <code>s</code>, return <code>true</code> if it is a palindrome, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>s</code> consists only of printable ASCII characters.</li> </ul>"},{"location":"LeetCode_Problems/0126/","title":"126. Word Ladder II","text":"Problem <p>A transformation sequence from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p> <ul> <li>Every adjacent pair of words differs by a single letter.</li> <li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li> <li><code>s<sub>k</sub> == endWord</code></li> </ul> <p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return all the shortest transformation sequences from <code>beginWord</code> to <code>endWord</code>, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words <code>[beginWord, s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub>]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\nExplanation:\u00a0There are 2 shortest transformation sequences:\n\"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; \"cog\"\n\"hit\" -&gt; \"hot\" -&gt; \"lot\" -&gt; \"log\" -&gt; \"cog\"\n</pre> <p>Example 2:</p> <pre>\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: []\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= beginWord.length &lt;= 5</code></li> <li><code>endWord.length == beginWord.length</code></li> <li><code>1 &lt;= wordList.length &lt;= 500</code></li> <li><code>wordList[i].length == beginWord.length</code></li> <li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li> <li><code>beginWord != endWord</code></li> <li>All the words in <code>wordList</code> are unique.</li> <li>The sum of all shortest transformation sequences does not exceed <code>10<sup>5</sup></code>.</li> </ul>"},{"location":"LeetCode_Problems/0127/","title":"127. Word Ladder","text":"Problem <p>A transformation sequence from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p> <ul> <li>Every adjacent pair of words differs by a single letter.</li> <li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li> <li><code>s<sub>k</sub> == endWord</code></li> </ul> <p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return the number of words in the shortest transformation sequence from <code>beginWord</code> to <code>endWord</code>, or <code>0</code> if no such sequence exists.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: One shortest transformation sequence is \"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; cog\", which is 5 words long.\n</pre> <p>Example 2:</p> <pre>\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: 0\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= beginWord.length &lt;= 10</code></li> <li><code>endWord.length == beginWord.length</code></li> <li><code>1 &lt;= wordList.length &lt;= 5000</code></li> <li><code>wordList[i].length == beginWord.length</code></li> <li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li> <li><code>beginWord != endWord</code></li> <li>All the words in <code>wordList</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0128/","title":"128. Longest Consecutive Sequence","text":"Problem <p>Given an unsorted array of integers <code>nums</code>, return the length of the longest consecutive elements sequence.</p> <p>You must write an algorithm that runs in\u00a0<code>O(n)</code>\u00a0time.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is <code>[1, 2, 3, 4]</code>. Therefore its length is 4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0129/","title":"129. Sum Root to Leaf Numbers","text":"Problem <p>You are given the <code>root</code> of a binary tree containing digits from <code>0</code> to <code>9</code> only.</p> <p>Each root-to-leaf path in the tree represents a number.</p> <ul> <li>For example, the root-to-leaf path <code>1 -&gt; 2 -&gt; 3</code> represents the number <code>123</code>.</li> </ul> <p>Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.</p> <p>A leaf node is a node with no children.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3]\nOutput: 25\nExplanation:\nThe root-to-leaf path <code>1-&gt;2</code> represents the number <code>12</code>.\nThe root-to-leaf path <code>1-&gt;3</code> represents the number <code>13</code>.\nTherefore, sum = 12 + 13 = <code>25</code>.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [4,9,0,5,1]\nOutput: 1026\nExplanation:\nThe root-to-leaf path <code>4-&gt;9-&gt;5</code> represents the number 495.\nThe root-to-leaf path <code>4-&gt;9-&gt;1</code> represents the number 491.\nThe root-to-leaf path <code>4-&gt;0</code> represents the number 40.\nTherefore, sum = 495 + 491 + 40 = <code>1026</code>.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li>The depth of the tree will not exceed <code>10</code>.</li> </ul>"},{"location":"LeetCode_Problems/0130/","title":"130. Surrounded Regions","text":"Problem <p>Given an <code>m x n</code> matrix <code>board</code> containing <code>'X'</code> and <code>'O'</code>, capture all regions that are 4-directionally\u00a0surrounded by <code>'X'</code>.</p> <p>A region is captured by flipping all <code>'O'</code>s into <code>'X'</code>s in that surrounded region.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nOutput: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nExplanation: Notice that an 'O' should not be flipped if:\n- It is on the border, or\n- It is adjacent to an 'O' that should not be flipped.\nThe bottom 'O' is on the border, so it is not flipped.\nThe other three 'O' form a surrounded region, so they are flipped.\n</pre> <p>Example 2:</p> <pre>\nInput: board = [[\"X\"]]\nOutput: [[\"X\"]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>board[i][j]</code> is <code>'X'</code> or <code>'O'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0131/","title":"131. Palindrome Partitioning","text":"Problem <p>Given a string <code>s</code>, partition <code>s</code> such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"aab\"\nOutput: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n</pre> <p>Example 2:</p> <pre>Input: s = \"a\"\nOutput: [[\"a\"]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 16</code></li> <li><code>s</code> contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0132/","title":"132. Palindrome Partitioning II","text":"Problem <p>Given a string <code>s</code>, partition <code>s</code> such that every substring of the partition is a palindrome.</p> <p>Return the minimum cuts needed for a palindrome partitioning of <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aab\"\nOutput: 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"a\"\nOutput: 0\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"ab\"\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2000</code></li> <li><code>s</code> consists of lowercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/0133/","title":"133. Clone Graph","text":"Problem <p>Given a reference of a node in a connected undirected graph.</p> <p>Return a deep copy (clone) of the graph.</p> <p>Each node in the graph contains a value (<code>int</code>) and a list (<code>List[Node]</code>) of its neighbors.</p> <pre>\nclass Node {\n    public int val;\n    public List&lt;Node&gt; neighbors;\n}\n</pre> <p> </p> <p>Test case format:</p> <p>For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with <code>val == 1</code>, the second node with <code>val == 2</code>, and so on. The graph is represented in the test case using an adjacency list.</p> <p>An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p> <p>The given node will always be the first node with <code>val = 1</code>. You must return the copy of the given node as a reference to the cloned graph.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: adjList = [[2,4],[1,3],[2,4],[1,3]]\nOutput: [[2,4],[1,3],[2,4],[1,3]]\nExplanation: There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: adjList = [[]]\nOutput: [[]]\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n</pre> <p>Example 3:</p> <pre>\nInput: adjList = []\nOutput: []\nExplanation: This an empty graph, it does not have any nodes.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the graph is in the range <code>[0, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> <li><code>Node.val</code> is unique for each node.</li> <li>There are no repeated edges and no self-loops in the graph.</li> <li>The Graph is connected and all nodes can be visited starting from the given node.</li> </ul>"},{"location":"LeetCode_Problems/0134/","title":"134. Gas Station","text":"Problem <p>There are <code>n</code> gas stations along a circular route, where the amount of gas at the <code>i<sup>th</sup></code> station is <code>gas[i]</code>.</p> <p>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from the <code>i<sup>th</sup></code> station to its next <code>(i + 1)<sup>th</sup></code> station. You begin the journey with an empty tank at one of the gas stations.</p> <p>Given two integer arrays <code>gas</code> and <code>cost</code>, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return <code>-1</code>. If there exists a solution, it is guaranteed to be unique</p> <p> </p> <p>Example 1:</p> <pre>\nInput: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\nOutput: 3\nExplanation:\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n</pre> <p>Example 2:</p> <pre>\nInput: gas = [2,3,4], cost = [3,4,3]\nOutput: -1\nExplanation:\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == gas.length == cost.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= gas[i], cost[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0135/","title":"135. Candy","text":"Problem <p>There are <code>n</code> children standing in a line. Each child is assigned a rating value given in the integer array <code>ratings</code>.</p> <p>You are giving candies to these children subjected to the following requirements:</p> <ul> <li>Each child must have at least one candy.</li> <li>Children with a higher rating get more candies than their neighbors.</li> </ul> <p>Return the minimum number of candies you need to have to distribute the candies to the children.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n</pre> <p>Example 2:</p> <pre>\nInput: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == ratings.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= ratings[i] &lt;= 2 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0136/","title":"136. Single Number","text":"Problem <p>Given a non-empty\u00a0array of integers <code>nums</code>, every element appears twice except for one. Find that single one.</p> <p>You must\u00a0implement a solution with a linear runtime complexity and use\u00a0only constant\u00a0extra space.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [2,2,1]\nOutput: 1\n</pre> <p>Example 2:</p> <pre>Input: nums = [4,1,2,1,2]\nOutput: 4\n</pre> <p>Example 3:</p> <pre>Input: nums = [1]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></code></li> <li>Each element in the array appears twice except for one element which appears only once.</li> </ul>"},{"location":"LeetCode_Problems/0137/","title":"137. Single Number II","text":"Problem <p>Given an integer array <code>nums</code> where\u00a0every element appears three times except for one, which appears exactly once. Find the single element and return it.</p> <p>You must\u00a0implement a solution with a linear runtime complexity and use\u00a0only constant\u00a0extra space.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [2,2,3,2]\nOutput: 3\n</pre> <p>Example 2:</p> <pre>Input: nums = [0,1,0,1,0,1,99]\nOutput: 99\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li>Each element in <code>nums</code> appears exactly three times except for one element which appears once.</li> </ul>"},{"location":"LeetCode_Problems/0138/","title":"138. Copy List with Random Pointer","text":"Problem <p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p> <p>Construct a deep copy of the list. The deep copy should consist of exactly <code>n</code> brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.</p> <p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p> <p>Return the head of the copied linked list.</p> <p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p> <ul> <li><code>val</code>: an integer representing <code>Node.val</code></li> <li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li> </ul> <p>Your code will only be given the <code>head</code> of the original linked list.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [[1,1],[2,1]]\nOutput: [[1,1],[2,1]]\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: head = [[3,null],[3,0],[3,null]]\nOutput: [[3,null],[3,0],[3,null]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 1000</code></li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li> </ul>"},{"location":"LeetCode_Problems/0139/","title":"139. Word Break","text":"Problem <p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p> <p>Note that the same word in the dictionary may be reused multiple times in the segmentation.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 300</code></li> <li><code>1 &lt;= wordDict.length &lt;= 1000</code></li> <li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li> <li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li> <li>All the strings of <code>wordDict</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0140/","title":"140. Word Break II","text":"Problem <p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, add spaces in <code>s</code> to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.</p> <p>Note that the same word in the dictionary may be reused multiple times in the segmentation.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 20</code></li> <li><code>1 &lt;= wordDict.length &lt;= 1000</code></li> <li><code>1 &lt;= wordDict[i].length &lt;= 10</code></li> <li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li> <li>All the strings of <code>wordDict</code> are unique.</li> <li>Input is generated in a way that the length of the answer doesn't exceed\u00a010<sup>5</sup>.</li> </ul>"},{"location":"LeetCode_Problems/0141/","title":"141. Linked List Cycle","text":"Problem <p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the\u00a0<code>next</code>\u00a0pointer. Internally, <code>pos</code>\u00a0is used to denote the index of the node that\u00a0tail's\u00a0<code>next</code>\u00a0pointer is connected to.\u00a0Note that\u00a0<code>pos</code>\u00a0is not passed as a parameter.</p> <p>Return\u00a0<code>true</code> if there is a cycle in the linked list. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of the nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> <li><code>pos</code> is <code>-1</code> or a valid index in the linked-list.</li> </ul> <p> </p> <p>Follow up: Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p>"},{"location":"LeetCode_Problems/0142/","title":"142. Linked List Cycle II","text":"Problem <p>Given the <code>head</code> of a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the <code>next</code> pointer. Internally, <code>pos</code> is used to denote the index of the node that tail's <code>next</code> pointer is connected to (0-indexed). It is <code>-1</code> if there is no cycle. Note that <code>pos</code> is not passed as a parameter.</p> <p>Do not modify the linked list.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of the nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> <li><code>pos</code> is <code>-1</code> or a valid index in the linked-list.</li> </ul> <p> </p> <p>Follow up: Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p>"},{"location":"LeetCode_Problems/0143/","title":"143. Reorder List","text":"Problem <p>You are given the head of a singly linked-list. The list can be represented as:</p> <pre>\nL<sub>0</sub> \u2192 L<sub>1</sub> \u2192 \u2026 \u2192 L<sub>n - 1</sub> \u2192 L<sub>n</sub>\n</pre> <p>Reorder the list to be on the following form:</p> <pre>\nL<sub>0</sub> \u2192 L<sub>n</sub> \u2192 L<sub>1</sub> \u2192 L<sub>n - 1</sub> \u2192 L<sub>2</sub> \u2192 L<sub>n - 2</sub> \u2192 \u2026\n</pre> <p>You may not modify the values in the list's nodes. Only nodes themselves may be changed.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,4]\nOutput: [1,4,2,3]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5]\nOutput: [1,5,2,4,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 5 * 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0144/","title":"144. Binary Tree Preorder Traversal","text":"Problem <p>Given the <code>root</code> of a binary tree, return the preorder traversal of its nodes' values.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,null,2,3]\nOutput: [1,2,3]\n</pre> <p>Example 2:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: root = [1]\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p> </p> <p>Follow up: Recursive solution is trivial, could you do it iteratively?</p>"},{"location":"LeetCode_Problems/0145/","title":"145. Binary Tree Postorder Traversal","text":"Problem <p>Given the <code>root</code> of a\u00a0binary tree, return the postorder traversal of its nodes' values.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,null,2,3]\nOutput: [3,2,1]\n</pre> <p>Example 2:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: root = [1]\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of the nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul> <p> </p> <p>Follow up: Recursive solution is trivial, could you do it iteratively?</p>"},{"location":"LeetCode_Problems/0146/","title":"146. LRU Cache","text":"Problem <p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.</p> <p>Implement the <code>LRUCache</code> class:</p> <ul> <li><code>LRUCache(int capacity)</code> Initialize the LRU cache with positive size <code>capacity</code>.</li> <li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li> <li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, evict the least recently used key.</li> </ul> <p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= capacity &lt;= 3000</code></li> <li><code>0 &lt;= key &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li> <li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>get</code> and <code>put</code>.</li> </ul>"},{"location":"LeetCode_Problems/0147/","title":"147. Insertion Sort List","text":"Problem <p>Given the <code>head</code> of a singly linked list, sort the list using insertion sort, and return the sorted list's head.</p> <p>The steps of the insertion sort algorithm:</p> <ol> <li>Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.</li> <li>At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.</li> <li>It repeats until no input elements remain.</li> </ol> <p>The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.</p> <p></p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 5000]</code>.</li> <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> </ul>"},{"location":"LeetCode_Problems/0148/","title":"148. Sort List","text":"Problem <p>Given the <code>head</code> of a linked list, return the list after sorting it in ascending order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n</pre> <p>Example 3:</p> <pre>\nInput: head = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 5 * 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Follow up: Can you sort the linked list in <code>O(n logn)</code> time and <code>O(1)</code> memory (i.e. constant space)?</p>"},{"location":"LeetCode_Problems/0149/","title":"149. Max Points on a Line","text":"Problem <p>Given an array of <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 3\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= points.length &lt;= 300</code></li> <li><code>points[i].length == 2</code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>All the <code>points</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0150/","title":"150. Evaluate Reverse Polish Notation","text":"Problem <p>You are given an array of strings <code>tokens</code> that represents an arithmetic expression in a Reverse Polish Notation.</p> <p>Evaluate the expression. Return an integer that represents the value of the expression.</p> <p>Note that:</p> <ul> <li>The valid operators are <code>'+'</code>, <code>'-'</code>, <code>'*'</code>, and <code>'/'</code>.</li> <li>Each operand may be an integer or another expression.</li> <li>The division between two integers always truncates toward zero.</li> <li>There will not be any division by zero.</li> <li>The input represents a valid arithmetic expression in a reverse polish notation.</li> <li>The answer and all the intermediate calculations can be represented in a 32-bit integer.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n</pre> <p>Example 2:</p> <pre>\nInput: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6\n</pre> <p>Example 3:</p> <pre>\nInput: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\nOutput: 22\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= tokens.length &lt;= 10<sup>4</sup></code></li> <li><code>tokens[i]</code> is either an operator: <code>\"+\"</code>, <code>\"-\"</code>, <code>\"*\"</code>, or <code>\"/\"</code>, or an integer in the range <code>[-200, 200]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0151/","title":"151. Reverse Words in a String","text":"Problem <p>Given an input string <code>s</code>, reverse the order of the words.</p> <p>A word is defined as a sequence of non-space characters. The words in <code>s</code> will be separated by at least one space.</p> <p>Return a string of the words in reverse order concatenated by a single space.</p> <p>Note that <code>s</code> may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"the sky is blue\"\nOutput: \"blue is sky the\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"  hello world  \"\nOutput: \"world hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"a good   example\"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> contains English letters (upper-case and lower-case), digits, and spaces <code>' '</code>.</li> <li>There is at least one word in <code>s</code>.</li> </ul> <p> </p> <p>Follow-up:\u00a0If the string data type is mutable in your language, can\u00a0you solve it\u00a0in-place\u00a0with\u00a0<code>O(1)</code>\u00a0extra space?</p>"},{"location":"LeetCode_Problems/0152/","title":"152. Maximum Product Subarray","text":"Problem <p>Given an integer array <code>nums</code>, find a subarray that has the largest product, and return the product.</p> <p>The test cases are generated so that the answer will fit in a 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>-10 &lt;= nums[i] &lt;= 10</code></li> <li>The product of any prefix or suffix of <code>nums</code> is guaranteed to fit in a 32-bit integer.</li> </ul>"},{"location":"LeetCode_Problems/0153/","title":"153. Find Minimum in Rotated Sorted Array","text":"Problem <p>Suppose an array of length <code>n</code> sorted in ascending order is rotated between <code>1</code> and <code>n</code> times. For example, the array <code>nums = [0,1,2,4,5,6,7]</code> might become:</p> <ul> <li><code>[4,5,6,7,0,1,2]</code> if it was rotated <code>4</code> times.</li> <li><code>[0,1,2,4,5,6,7]</code> if it was rotated <code>7</code> times.</li> </ul> <p>Notice that rotating an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p> <p>Given the sorted rotated array <code>nums</code> of unique elements, return the minimum element of this array.</p> <p>You must write an algorithm that runs in\u00a0<code>O(log n) time.</code></p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,4,5,1,2]\nOutput: 1\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,5,6,7,0,1,2]\nOutput: 0\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [11,13,15,17]\nOutput: 11\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5000</code></li> <li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li> <li>All the integers of <code>nums</code> are unique.</li> <li><code>nums</code> is sorted and rotated between <code>1</code> and <code>n</code> times.</li> </ul>"},{"location":"LeetCode_Problems/0154/","title":"154. Find Minimum in Rotated Sorted Array II","text":"Problem <p>Suppose an array of length <code>n</code> sorted in ascending order is rotated between <code>1</code> and <code>n</code> times. For example, the array <code>nums = [0,1,4,4,5,6,7]</code> might become:</p> <ul> <li><code>[4,5,6,7,0,1,4]</code> if it was rotated <code>4</code> times.</li> <li><code>[0,1,4,4,5,6,7]</code> if it was rotated <code>7</code> times.</li> </ul> <p>Notice that rotating an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p> <p>Given the sorted rotated array <code>nums</code> that may contain duplicates, return the minimum element of this array.</p> <p>You must decrease the overall operation steps as much as possible.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,3,5]\nOutput: 1\n</pre> <p>Example 2:</p> <pre>Input: nums = [2,2,2,0,1]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5000</code></li> <li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li> <li><code>nums</code> is sorted and rotated between <code>1</code> and <code>n</code> times.</li> </ul> <p> </p> <p>Follow up: This problem is similar to\u00a0Find Minimum in Rotated Sorted Array, but\u00a0<code>nums</code> may contain duplicates. Would this affect the runtime complexity? How and why?</p> <p> </p>"},{"location":"LeetCode_Problems/0155/","title":"155. Min Stack","text":"Problem <p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p> <p>Implement the <code>MinStack</code> class:</p> <ul> <li><code>MinStack()</code> initializes the stack object.</li> <li><code>void push(int val)</code> pushes the element <code>val</code> onto the stack.</li> <li><code>void pop()</code> removes the element on the top of the stack.</li> <li><code>int top()</code> gets the top element of the stack.</li> <li><code>int getMin()</code> retrieves the minimum element in the stack.</li> </ul> <p>You must implement a solution with <code>O(1)</code> time complexity for each function.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li> <li>Methods <code>pop</code>, <code>top</code> and <code>getMin</code> operations will always be called on non-empty stacks.</li> <li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>getMin</code>.</li> </ul>"},{"location":"LeetCode_Problems/0156/","title":"156. Binary Tree Upside Down","text":"Problem"},{"location":"LeetCode_Problems/0157/","title":"157. Read N Characters Given Read4","text":"Problem"},{"location":"LeetCode_Problems/0158/","title":"158. Read N Characters Given read4 II - Call Multiple Times","text":"Problem"},{"location":"LeetCode_Problems/0159/","title":"159. Longest Substring with At Most Two Distinct Characters","text":"Problem"},{"location":"LeetCode_Problems/0160/","title":"160. Intersection of Two Linked Lists","text":"Problem <p>Given the heads of two singly linked-lists <code>headA</code> and <code>headB</code>, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return <code>null</code>.</p> <p>For example, the following two linked lists begin to intersect at node <code>c1</code>:</p> <p></p> <p>The test cases are generated such that there are no cycles anywhere in the entire linked structure.</p> <p>Note that the linked lists must retain their original structure after the function returns.</p> <p>Custom Judge:</p> <p>The inputs to the judge are given as follows (your program is not given these inputs):</p> <ul> <li><code>intersectVal</code> - The value of the node where the intersection occurs. This is <code>0</code> if there is no intersected node.</li> <li><code>listA</code> - The first linked list.</li> <li><code>listB</code> - The second linked list.</li> <li><code>skipA</code> - The number of nodes to skip ahead in <code>listA</code> (starting from the head) to get to the intersected node.</li> <li><code>skipB</code> - The number of nodes to skip ahead in <code>listB</code> (starting from the head) to get to the intersected node.</li> </ul> <p>The judge will then create the linked structure based on these inputs and pass the two heads, <code>headA</code> and <code>headB</code> to your program. If you correctly return the intersected node, then your solution will be accepted.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2<sup>nd</sup> node in A and 3<sup>rd</sup> node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3<sup>rd</sup> node in A and 4<sup>th</sup> node in B) point to the same location in memory.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes of <code>listA</code> is in the <code>m</code>.</li> <li>The number of nodes of <code>listB</code> is in the <code>n</code>.</li> <li><code>1 &lt;= m, n &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= skipA &lt;\u00a0m</code></li> <li><code>0 &lt;= skipB &lt;\u00a0n</code></li> <li><code>intersectVal</code> is <code>0</code> if <code>listA</code> and <code>listB</code> do not intersect.</li> <li><code>intersectVal == listA[skipA] == listB[skipB]</code> if <code>listA</code> and <code>listB</code> intersect.</li> </ul> <p> </p> <p>Follow up: Could you write a solution that runs in <code>O(m + n)</code> time and use only <code>O(1)</code> memory?</p>"},{"location":"LeetCode_Problems/0161/","title":"161. One Edit Distance","text":"Problem"},{"location":"LeetCode_Problems/0162/","title":"162. Find Peak Element","text":"Problem <p>A peak element is an element that is strictly greater than its neighbors.</p> <p>Given a 0-indexed integer array <code>nums</code>, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.</p> <p>You may imagine that <code>nums[-1] = nums[n] = -\u221e</code>. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.</p> <p>You must write an algorithm that runs in <code>O(log n)</code> time.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>nums[i] != nums[i + 1]</code> for all valid <code>i</code>.</li> </ul>"},{"location":"LeetCode_Problems/0163/","title":"163. Missing Ranges","text":"Problem"},{"location":"LeetCode_Problems/0164/","title":"164. Maximum Gap","text":"Problem <p>Given an integer array <code>nums</code>, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return <code>0</code>.</p> <p>You must write an algorithm that runs in linear time and uses linear extra space.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0165/","title":"165. Compare Version Numbers","text":"Problem <p>Given two version numbers,\u00a0<code>version1</code> and <code>version2</code>, compare them.</p> <p>Version numbers consist of one or more revisions joined by a dot\u00a0<code>'.'</code>. Each revision\u00a0consists of digits\u00a0and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example\u00a0<code>2.5.33</code>\u00a0and\u00a0<code>0.1</code>\u00a0are valid version numbers.</p> <p>To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their\u00a0integer value ignoring any leading zeros. This means that revisions\u00a0<code>1</code>\u00a0and\u00a0<code>001</code>\u00a0are considered\u00a0equal. If a version number does not specify a revision at an index, then\u00a0treat the revision as\u00a0<code>0</code>. For example, version\u00a0<code>1.0</code> is less than version\u00a0<code>1.1</code>\u00a0because their revision 0s are the same, but their revision 1s are\u00a0<code>0</code>\u00a0and\u00a0<code>1</code>\u00a0respectively, and\u00a0<code>0 &lt; 1</code>.</p> <p>Return the following:</p> <ul> <li>If <code>version1 &lt; version2</code>, return <code>-1</code>.</li> <li>If <code>version1 &gt; version2</code>, return <code>1</code>.</li> <li>Otherwise, return <code>0</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n</pre> <p>Example 2:</p> <pre>\nInput: version1 = \"1.0\", version2 = \"1.0.0\"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".\n</pre> <p>Example 3:</p> <pre>\nInput: version1 = \"0.1\", version2 = \"1.1\"\nOutput: -1\nExplanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 &lt; 1, so version1 &lt; version2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li> <li><code>version1</code> and <code>version2</code>\u00a0only contain digits and <code>'.'</code>.</li> <li><code>version1</code> and <code>version2</code> are valid version numbers.</li> <li>All the given revisions in\u00a0<code>version1</code> and <code>version2</code>\u00a0can be stored in\u00a0a\u00a032-bit integer.</li> </ul>"},{"location":"LeetCode_Problems/0166/","title":"166. Fraction to Recurring Decimal","text":"Problem <p>Given two integers representing the <code>numerator</code> and <code>denominator</code> of a fraction, return the fraction in string format.</p> <p>If the fractional part is repeating, enclose the repeating part in parentheses.</p> <p>If multiple answers are possible, return any of them.</p> <p>It is guaranteed that the length of the answer string is less than <code>10<sup>4</sup></code> for all the given inputs.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: numerator = 1, denominator = 2\nOutput: \"0.5\"\n</pre> <p>Example 2:</p> <pre>\nInput: numerator = 2, denominator = 1\nOutput: \"2\"\n</pre> <p>Example 3:</p> <pre>\nInput: numerator = 4, denominator = 333\nOutput: \"0.(012)\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup> &lt;=\u00a0numerator, denominator &lt;= 2<sup>31</sup> - 1</code></li> <li><code>denominator != 0</code></li> </ul>"},{"location":"LeetCode_Problems/0167/","title":"167. Two Sum II - Input Array Is Sorted","text":"Problem <p>Given a 1-indexed array of integers <code>numbers</code> that is already sorted in non-decreasing order, find two numbers such that they add up to a specific <code>target</code> number. Let these two numbers be <code>numbers[index<sub>1</sub>]</code> and <code>numbers[index<sub>2</sub>]</code> where <code>1 &lt;= index<sub>1</sub> &lt; index<sub>2</sub> &lt;\u00a0numbers.length</code>.</p> <p>Return the indices of the two numbers, <code>index<sub>1</sub></code> and <code>index<sub>2</sub></code>, added by one as an integer array <code>[index<sub>1</sub>, index<sub>2</sub>]</code> of length 2.</p> <p>The tests are generated such that there is exactly one solution. You may not use the same element twice.</p> <p>Your solution must use only constant extra space.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\n</pre> <p>Example 2:</p> <pre>\nInput: numbers = [2,3,4], target = 6\nOutput: [1,3]\nExplanation: The sum of 2 and 4 is 6. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 3. We return [1, 3].\n</pre> <p>Example 3:</p> <pre>\nInput: numbers = [-1,0], target = -1\nOutput: [1,2]\nExplanation: The sum of -1 and 0 is -1. Therefore index<sub>1</sub> = 1, index<sub>2</sub> = 2. We return [1, 2].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= numbers.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li> <li><code>numbers</code> is sorted in non-decreasing order.</li> <li><code>-1000 &lt;= target &lt;= 1000</code></li> <li>The tests are generated such that there is exactly one solution.</li> </ul>"},{"location":"LeetCode_Problems/0168/","title":"168. Excel Sheet Column Title","text":"Problem <p>Given an integer <code>columnNumber</code>, return its corresponding column title as it appears in an Excel sheet.</p> <p>For example:</p> <pre>\nA -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</pre> <p> </p> <p>Example 1:</p> <pre>\nInput: columnNumber = 1\nOutput: \"A\"\n</pre> <p>Example 2:</p> <pre>\nInput: columnNumber = 28\nOutput: \"AB\"\n</pre> <p>Example 3:</p> <pre>\nInput: columnNumber = 701\nOutput: \"ZY\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= columnNumber &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0169/","title":"169. Majority Element","text":"Problem <p>Given an array <code>nums</code> of size <code>n</code>, return the majority element.</p> <p>The majority element is the element that appears more than <code>\u230an / 2\u230b</code> times. You may assume that the majority element always exists in the array.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [3,2,3]\nOutput: 3\n</pre> <p>Example 2:</p> <pre>Input: nums = [2,2,1,1,1,2,2]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul> <p> </p> <p>Follow-up: Could you solve the problem in linear time and in <code>O(1)</code> space?</p>"},{"location":"LeetCode_Problems/0170/","title":"170. Two Sum III - Data structure design","text":"Problem"},{"location":"LeetCode_Problems/0171/","title":"171. Excel Sheet Column Number","text":"Problem <p>Given a string <code>columnTitle</code> that represents the column title as appears in an Excel sheet, return its corresponding column number.</p> <p>For example:</p> <pre>\nA -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</pre> <p> </p> <p>Example 1:</p> <pre>\nInput: columnTitle = \"A\"\nOutput: 1\n</pre> <p>Example 2:</p> <pre>\nInput: columnTitle = \"AB\"\nOutput: 28\n</pre> <p>Example 3:</p> <pre>\nInput: columnTitle = \"ZY\"\nOutput: 701\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= columnTitle.length &lt;= 7</code></li> <li><code>columnTitle</code> consists only of uppercase English letters.</li> <li><code>columnTitle</code> is in the range <code>[\"A\", \"FXSHRXW\"]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0172/","title":"172. Factorial Trailing Zeroes","text":"Problem <p>Given an integer <code>n</code>, return the number of trailing zeroes in <code>n!</code>.</p> <p>Note that <code>n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3\nOutput: 0\nExplanation: 3! = 6, no trailing zero.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5\nOutput: 1\nExplanation: 5! = 120, one trailing zero.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 0\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul> <p> </p> <p>Follow up: Could you write a solution that works in logarithmic time complexity?</p>"},{"location":"LeetCode_Problems/0173/","title":"173. Binary Search Tree Iterator","text":"Problem <p>Implement the <code>BSTIterator</code> class that represents an iterator over the in-order traversal of a binary search tree (BST):</p> <ul> <li><code>BSTIterator(TreeNode root)</code> Initializes an object of the <code>BSTIterator</code> class. The <code>root</code> of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.</li> <li><code>boolean hasNext()</code> Returns <code>true</code> if there exists a number in the traversal to the right of the pointer, otherwise returns <code>false</code>.</li> <li><code>int next()</code> Moves the pointer to the right, then returns the number at the pointer.</li> </ul> <p>Notice that by initializing the pointer to a non-existent smallest number, the first call to <code>next()</code> will return the smallest element in the BST.</p> <p>You may assume that <code>next()</code> calls will always be valid. That is, there will be at least a next number in the in-order traversal when <code>next()</code> is called.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\nOutput\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\nExplanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>6</sup></code></li> <li>At most <code>10<sup>5</sup></code> calls will be made to <code>hasNext</code>, and <code>next</code>.</li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>Could you implement <code>next()</code> and <code>hasNext()</code> to run in average <code>O(1)</code> time and use\u00a0<code>O(h)</code> memory, where <code>h</code> is the height of the tree?</li> </ul>"},{"location":"LeetCode_Problems/0174/","title":"174. Dungeon Game","text":"Problem <p>The demons had captured the princess and imprisoned her in the bottom-right corner of a <code>dungeon</code>. The <code>dungeon</code> consists of <code>m x n</code> rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through <code>dungeon</code> to rescue the princess.</p> <p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to <code>0</code> or below, he dies immediately.</p> <p>Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).</p> <p>To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.</p> <p>Return the knight's minimum initial health so that he can rescue the princess.</p> <p>Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\nOutput: 7\nExplanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.\n</pre> <p>Example 2:</p> <pre>\nInput: dungeon = [[0]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == dungeon.length</code></li> <li><code>n == dungeon[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>-1000 &lt;= dungeon[i][j] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0175/","title":"175. Combine Two Tables","text":"Problem <p>Table: <code>Person</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| personId    | int     |\n| lastName    | varchar |\n| firstName   | varchar |\n+-------------+---------+\npersonId is the primary key (column with unique values) for this table.\nThis table contains information about the ID of some persons and their first and last names.\n</pre> <p> </p> <p>Table: <code>Address</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| addressId   | int     |\n| personId    | int     |\n| city        | varchar |\n| state       | varchar |\n+-------------+---------+\naddressId is the primary key (column with unique values) for this table.\nEach row of this table contains information about the city and state of one person with ID = PersonId.\n</pre> <p> </p> <p>Write a solution to report the first name, last name, city, and state of each person in the <code>Person</code> table. If the address of a <code>personId</code> is not present in the <code>Address</code> table, report <code>null</code> instead.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nPerson table:\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1        | Wang     | Allen     |\n| 2        | Alice    | Bob       |\n+----------+----------+-----------+\nAddress table:\n+-----------+----------+---------------+------------+\n| addressId | personId | city          | state      |\n+-----------+----------+---------------+------------+\n| 1         | 2        | New York City | New York   |\n| 2         | 3        | Leetcode      | California |\n+-----------+----------+---------------+------------+\nOutput: \n+-----------+----------+---------------+----------+\n| firstName | lastName | city          | state    |\n+-----------+----------+---------------+----------+\n| Allen     | Wang     | Null          | Null     |\n| Bob       | Alice    | New York City | New York |\n+-----------+----------+---------------+----------+\nExplanation: \nThere is no address in the address table for the personId = 1 so we return null in their city and state.\naddressId = 1 contains information about the address of personId = 2.\n</pre>"},{"location":"LeetCode_Problems/0176/","title":"176. Second Highest Salary","text":"Problem <p>Table: <code>Employee</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n</pre> <p> </p> <p>Write a solution to find\u00a0the second highest salary from the <code>Employee</code> table. If there is no second highest salary,\u00a0return\u00a0<code>null (return\u00a0None in Pandas)</code>.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nOutput: \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n</pre> <p>Example 2:</p> <pre>\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nOutput: \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| null                |\n+---------------------+\n</pre>"},{"location":"LeetCode_Problems/0177/","title":"177. Nth Highest Salary","text":"Problem <p>Table: <code>Employee</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n</pre> <p> </p> <p>Write a solution to find the <code>n<sup>th</sup></code> highest salary from the <code>Employee</code> table. If there is no <code>n<sup>th</sup></code> highest salary, return\u00a0<code>null</code>.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nn = 2\nOutput: \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+\n</pre> <p>Example 2:</p> <pre>\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nn = 2\nOutput: \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| null                   |\n+------------------------+\n</pre>"},{"location":"LeetCode_Problems/0178/","title":"178. Rank Scores","text":"Problem <p>Table: <code>Scores</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| score       | decimal |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains the score of a game. Score is a floating point value with two decimal places.\n</pre> <p> </p> <p>Write a solution to find the rank of the scores. The ranking should be calculated according to the following rules:</p> <ul> <li>The scores should be ranked from the highest to the lowest.</li> <li>If there is a tie between two scores, both should have the same ranking.</li> <li>After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.</li> </ul> <p>Return the result table ordered by <code>score</code> in descending order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nScores table:\n+----+-------+\n| id | score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\nOutput: \n+-------+------+\n| score | rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n| 3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+\n</pre>"},{"location":"LeetCode_Problems/0179/","title":"179. Largest Number","text":"Problem <p>Given a list of non-negative integers <code>nums</code>, arrange them such that they form the largest number and return it.</p> <p>Since the result may be very large, so you need to return a string instead of an integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [10,2]\nOutput: \"210\"\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,30,34,5,9]\nOutput: \"9534330\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0180/","title":"180. Consecutive Numbers","text":"Problem <p>Table: <code>Logs</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| num         | varchar |\n+-------------+---------+\nIn SQL, id is the primary key for this table.\nid is an autoincrement column.\n</pre> <p> </p> <p>Find all numbers that appear at least three times consecutively.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nLogs table:\n+----+-----+\n| id | num |\n+----+-----+\n| 1  | 1   |\n| 2  | 1   |\n| 3  | 1   |\n| 4  | 2   |\n| 5  | 1   |\n| 6  | 2   |\n| 7  | 2   |\n+----+-----+\nOutput: \n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+\nExplanation: 1 is the only number that appears consecutively for at least three times.\n</pre>"},{"location":"LeetCode_Problems/0181/","title":"181. Employees Earning More Than Their Managers","text":"Problem <p>Table: <code>Employee</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| salary      | int     |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\n</pre> <p> </p> <p>Write a solution\u00a0to find the employees who earn more than their managers.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployee table:\n+----+-------+--------+-----------+\n| id | name  | salary | managerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | Null      |\n| 4  | Max   | 90000  | Null      |\n+----+-------+--------+-----------+\nOutput: \n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\nExplanation: Joe is the only employee who earns more than his manager.\n</pre>"},{"location":"LeetCode_Problems/0182/","title":"182. Duplicate Emails","text":"Problem <p>Table: <code>Person</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n</pre> <p> </p> <p>Write a solution to report all the duplicate emails. Note that it's guaranteed that the email\u00a0field is not NULL.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nPerson table:\n+----+---------+\n| id | email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\nOutput: \n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\nExplanation: a@b.com is repeated two times.\n</pre>"},{"location":"LeetCode_Problems/0183/","title":"183. Customers Who Never Order","text":"Problem <p>Table: <code>Customers</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID and name of a customer.\n</pre> <p> </p> <p>Table: <code>Orders</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| customerId  | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\ncustomerId is a foreign key (reference columns) of the ID from the Customers table.\nEach row of this table indicates the ID of an order and the ID of the customer who ordered it.\n</pre> <p> </p> <p>Write a solution to find all customers who never order anything.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nCustomers table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\nOrders table:\n+----+------------+\n| id | customerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\nOutput: \n+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n</pre>"},{"location":"LeetCode_Problems/0184/","title":"184. Department Highest Salary","text":"Problem <p>Table: <code>Employee</code></p> <pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key (column with unique values) for this table.\ndepartmentId is a foreign key (reference columns) of the ID from the <code>Department </code>table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n</pre> <p> </p> <p>Table: <code>Department</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table. It is guaranteed that department name is not <code>NULL.</code>\nEach row of this table indicates the ID of a department and its name.\n</pre> <p> </p> <p>Write a solution to find employees who have the highest salary in each of the departments.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Jim   | 90000  | 1            |\n| 3  | Henry | 80000  | 2            |\n| 4  | Sam   | 60000  | 2            |\n| 5  | Max   | 90000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+\nOutput: \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Jim      | 90000  |\n| Sales      | Henry    | 80000  |\n| IT         | Max      | 90000  |\n+------------+----------+--------+\nExplanation: Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.\n</pre>"},{"location":"LeetCode_Problems/0185/","title":"185. Department Top Three Salaries","text":"Problem <p>Table: <code>Employee</code></p> <pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key (column with unique values) for this table.\ndepartmentId is a foreign key (reference column) of the ID from the <code>Department </code>table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n</pre> <p> </p> <p>Table: <code>Department</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of a department and its name.\n</pre> <p> </p> <p>A company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.</p> <p>Write a solution to find the employees who are high earners in each of the departments.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 85000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n| 7  | Will  | 70000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+\nOutput: \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Joe      | 85000  |\n| IT         | Randy    | 85000  |\n| IT         | Will     | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+\nExplanation: \nIn the IT department:\n- Max earns the highest unique salary\n- Both Randy and Joe earn the second-highest unique salary\n- Will earns the third-highest unique salary\n\nIn the Sales department:\n- Henry earns the highest salary\n- Sam earns the second-highest salary\n- There is no third-highest salary as there are only two employees\n</pre>"},{"location":"LeetCode_Problems/0186/","title":"186. Reverse Words in a String II","text":"Problem"},{"location":"LeetCode_Problems/0187/","title":"187. Repeated DNA Sequences","text":"Problem <p>The DNA sequence is composed of a series of nucleotides abbreviated as <code>'A'</code>, <code>'C'</code>, <code>'G'</code>, and <code>'T'</code>.</p> <ul> <li>For example, <code>\"ACGAATTCCG\"</code> is a DNA sequence.</li> </ul> <p>When studying DNA, it is useful to identify repeated sequences within the DNA.</p> <p>Given a string <code>s</code> that represents a DNA sequence, return all the <code>10</code>-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n</pre> <p>Example 2:</p> <pre>Input: s = \"AAAAAAAAAAAAA\"\nOutput: [\"AAAAAAAAAA\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'A'</code>, <code>'C'</code>, <code>'G'</code>, or <code>'T'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0188/","title":"188. Best Time to Buy and Sell Stock IV","text":"Problem <p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day, and an integer <code>k</code>.</p> <p>Find the maximum profit you can achieve. You may complete at most <code>k</code> transactions: i.e. you may buy at most <code>k</code> times and sell at most <code>k</code> times.</p> <p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: k = 2, prices = [2,4,1]\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n</pre> <p>Example 2:</p> <pre>\nInput: k = 2, prices = [3,2,6,5,0,3]\nOutput: 7\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= 100</code></li> <li><code>1 &lt;= prices.length &lt;= 1000</code></li> <li><code>0 &lt;= prices[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0189/","title":"189. Rotate Array","text":"Problem <p>Given an integer array <code>nums</code>, rotate the array to the right by <code>k</code> steps, where <code>k</code> is non-negative.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.</li> <li>Could you do it in-place with <code>O(1)</code> extra space?</li> </ul>"},{"location":"LeetCode_Problems/0190/","title":"190. Reverse Bits","text":"Problem <p>Reverse bits of a given 32 bits unsigned integer.</p> <p>Note:</p> <ul> <li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.</li> <li>In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer <code>-3</code> and the output represents the signed integer <code>-1073741825</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 00000010100101000001111010011100\nOutput:    964176192 (00111001011110000010100101000000)\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 11111111111111111111111111111101\nOutput:   3221225471 (10111111111111111111111111111111)\nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The input must be a binary string of length <code>32</code></li> </ul> <p> </p> <p>Follow up: If this function is called many times, how would you optimize it?</p>"},{"location":"LeetCode_Problems/0191/","title":"191. Number of 1 Bits","text":"Problem <p>Write a function that takes\u00a0the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).</p> <p>Note:</p> <ul> <li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.</li> <li>In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. <code>-3</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 00000000000000000000000000001011\nOutput: 3\nExplanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 00000000000000000000000010000000\nOutput: 1\nExplanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 11111111111111111111111111111101\nOutput: 31\nExplanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The input must be a binary string of length <code>32</code>.</li> </ul> <p> </p> <p>Follow up: If this function is called many times, how would you optimize it?</p>"},{"location":"LeetCode_Problems/0192/","title":"192. Word Frequency","text":"Problem <p>Write a bash script to calculate the frequency of each word in a text file <code>words.txt</code>.</p> <p>For simplicity sake, you may assume:</p> <ul> <li><code>words.txt</code> contains only lowercase characters and space <code>' '</code> characters.</li> <li>Each word must consist of lowercase characters only.</li> <li>Words are separated by one or more whitespace characters.</li> </ul> <p>Example:</p> <p>Assume that <code>words.txt</code> has the following content:</p> <pre>\nthe day is sunny the the\nthe sunny is is\n</pre> <p>Your script should output the following, sorted by descending frequency:</p> <pre>\nthe 4\nis 3\nsunny 2\nday 1\n</pre> <p>Note:</p> <ul> <li>Don't worry about handling ties, it is guaranteed that each word's frequency count is unique.</li> <li>Could you write it in one-line using Unix pipes?</li> </ul>"},{"location":"LeetCode_Problems/0193/","title":"193. Valid Phone Numbers","text":"Problem <p>Given a text file <code>file.txt</code> that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.</p> <p>You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)</p> <p>You may also assume each line in the text file must not contain leading or trailing white spaces.</p> <p>Example:</p> <p>Assume that <code>file.txt</code> has the following content:</p> <pre>\n987-123-4567\n123 456 7890\n(123) 456-7890\n</pre> <p>Your script should output the following valid phone numbers:</p> <pre>\n987-123-4567\n(123) 456-7890\n</pre>"},{"location":"LeetCode_Problems/0194/","title":"194. Transpose File","text":"Problem <p>Given a text file <code>file.txt</code>, transpose its content.</p> <p>You may assume that each row has the same number of columns, and each field is separated by the <code>' '</code> character.</p> <p>Example:</p> <p>If <code>file.txt</code> has the following content:</p> <pre>\nname age\nalice 21\nryan 30\n</pre> <p>Output the following:</p> <pre>\nname alice ryan\nage 21 30\n</pre>"},{"location":"LeetCode_Problems/0195/","title":"195. Tenth Line","text":"Problem <p>Given a text file\u00a0<code>file.txt</code>, print\u00a0just the 10th line of the\u00a0file.</p> <p>Example:</p> <p>Assume that <code>file.txt</code> has the following content:</p> <pre>\nLine 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\nLine 10\n</pre> <p>Your script should output the tenth line, which is:</p> <pre>\nLine 10\n</pre> Note: 1. If the file contains less than 10 lines, what should you output? 2. There's at least three different solutions. Try to explore all possibilities."},{"location":"LeetCode_Problems/0196/","title":"196. Delete Duplicate Emails","text":"Problem <p>Table: <code>Person</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n</pre> <p> </p> <p>Write a solution to delete all duplicate emails, keeping only one unique email with the smallest <code>id</code>.</p> <p>For SQL users, please note that you are supposed to write a <code>DELETE</code> statement and not a <code>SELECT</code> one.</p> <p>For Pandas users, please note that you are supposed to modify <code>Person</code> in place.</p> <p>After running your script, the answer shown is the <code>Person</code> table. The driver will first compile and run your piece of code and then show the <code>Person</code> table. The final order of the <code>Person</code> table does not matter.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nPerson table:\n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+\nOutput: \n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+\nExplanation: john@example.com is repeated two times. We keep the row with the smallest Id = 1.\n</pre>"},{"location":"LeetCode_Problems/0197/","title":"197. Rising Temperature","text":"Problem <p>Table: <code>Weather</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| recordDate    | date    |\n| temperature   | int     |\n+---------------+---------+\nid is the column with unique values for this table.\nThis table contains information about the temperature on a certain day.\n</pre> <p> </p> <p>Write a solution to find all dates' <code>Id</code> with higher temperatures compared to its previous dates (yesterday).</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nWeather table:\n+----+------------+-------------+\n| id | recordDate | temperature |\n+----+------------+-------------+\n| 1  | 2015-01-01 | 10          |\n| 2  | 2015-01-02 | 25          |\n| 3  | 2015-01-03 | 20          |\n| 4  | 2015-01-04 | 30          |\n+----+------------+-------------+\nOutput: \n+----+\n| id |\n+----+\n| 2  |\n| 4  |\n+----+\nExplanation: \nIn 2015-01-02, the temperature was higher than the previous day (10 -&gt; 25).\nIn 2015-01-04, the temperature was higher than the previous day (20 -&gt; 30).\n</pre>"},{"location":"LeetCode_Problems/0198/","title":"198. House Robber","text":"Problem <p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.</p> <p>Given an integer array <code>nums</code> representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 400</code></li> </ul>"},{"location":"LeetCode_Problems/0199/","title":"199. Binary Tree Right Side View","text":"Problem <p>Given the <code>root</code> of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1,null,3]\nOutput: [1,3]\n</pre> <p>Example 3:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0200/","title":"200. Number of Islands","text":"Problem <p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>'1'</code>s (land) and <code>'0'</code>s (water), return the number of islands.</p> <p>An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>grid[i][j]</code> is <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0201/","title":"201. Bitwise AND of Numbers Range","text":"Problem <p>Given two integers <code>left</code> and <code>right</code> that represent the range <code>[left, right]</code>, return the bitwise AND of all numbers in this range, inclusive.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: left = 5, right = 7\nOutput: 4\n</pre> <p>Example 2:</p> <pre>\nInput: left = 0, right = 0\nOutput: 0\n</pre> <p>Example 3:</p> <pre>\nInput: left = 1, right = 2147483647\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= left &lt;= right &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0202/","title":"202. Happy Number","text":"Problem <p>Write an algorithm to determine if a number <code>n</code> is happy.</p> <p>A happy number is a number defined by the following process:</p> <ul> <li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li> <li>Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.</li> <li>Those numbers for which this process ends in 1 are happy.</li> </ul> <p>Return <code>true</code> if <code>n</code> is a happy number, and <code>false</code> if not.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 19\nOutput: true\nExplanation:\n1<sup>2</sup> + 9<sup>2</sup> = 82\n8<sup>2</sup> + 2<sup>2</sup> = 68\n6<sup>2</sup> + 8<sup>2</sup> = 100\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0203/","title":"203. Remove Linked List Elements","text":"Problem <p>Given the <code>head</code> of a linked list and an integer <code>val</code>, remove all the nodes of the linked list that has <code>Node.val == val</code>, and return the new head.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]\n</pre> <p>Example 2:</p> <pre>\nInput: head = [], val = 1\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: head = [7,7,7,7], val = 7\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 50</code></li> <li><code>0 &lt;= val &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/0204/","title":"204. Count Primes","text":"Problem <p>Given an integer <code>n</code>, return the number of prime numbers that are strictly less than <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 0\nOutput: 0\n</pre> <p>Example 3:</p> <pre>\nInput: n = 1\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 5 * 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0205/","title":"205. Isomorphic Strings","text":"Problem <p>Given two strings <code>s</code> and <code>t</code>, determine if they are isomorphic.</p> <p>Two strings <code>s</code> and <code>t</code> are isomorphic if the characters in <code>s</code> can be replaced to get <code>t</code>.</p> <p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"egg\", t = \"add\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: s = \"foo\", t = \"bar\"\nOutput: false\n</pre> <p>Example 3:</p> <pre>Input: s = \"paper\", t = \"title\"\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>t.length == s.length</code></li> <li><code>s</code> and <code>t</code> consist of any valid ascii character.</li> </ul>"},{"location":"LeetCode_Problems/0206/","title":"206. Reverse Linked List","text":"Problem <p>Given the <code>head</code> of a singly linked list, reverse the list, and return the reversed list.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,2]\nOutput: [2,1]\n</pre> <p>Example 3:</p> <pre>\nInput: head = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li> <li><code>-5000 &lt;= Node.val &lt;= 5000</code></li> </ul> <p> </p> <p>Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?</p>"},{"location":"LeetCode_Problems/0207/","title":"207. Course Schedule","text":"Problem <p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you must take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p> <ul> <li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li> </ul> <p>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n</pre> <p>Example 2:</p> <pre>\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= numCourses &lt;= 2000</code></li> <li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li> <li><code>prerequisites[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li> <li>All the pairs prerequisites[i] are unique.</li> </ul>"},{"location":"LeetCode_Problems/0208/","title":"208. Implement Trie (Prefix Tree)","text":"Problem <p>A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p> <p>Implement the Trie class:</p> <ul> <li><code>Trie()</code> Initializes the trie object.</li> <li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li> <li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li> <li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li> <li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li> <li>At most <code>3 * 10<sup>4</sup></code> calls in total will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li> </ul>"},{"location":"LeetCode_Problems/0209/","title":"209. Minimum Size Subarray Sum","text":"Problem <p>Given an array of positive integers <code>nums</code> and a positive integer <code>target</code>, return the minimal length of a subarray whose sum is greater than or equal to <code>target</code>. If there is no such subarray, return <code>0</code> instead.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.\n</pre> <p>Example 2:</p> <pre>\nInput: target = 4, nums = [1,4,4]\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul> <p> </p> <p>Follow up: If you have figured out the <code>O(n)</code> solution, try coding another solution of which the time complexity is <code>O(n log(n))</code>.</p>"},{"location":"LeetCode_Problems/0210/","title":"210. Course Schedule II","text":"Problem <p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you must take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p> <ul> <li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li> </ul> <p>Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: [0,1]\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n</pre> <p>Example 2:</p> <pre>\nInput: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,2,1,3]\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n</pre> <p>Example 3:</p> <pre>\nInput: numCourses = 1, prerequisites = []\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= numCourses &lt;= 2000</code></li> <li><code>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li> <li><code>prerequisites[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>All the pairs <code>[a<sub>i</sub>, b<sub>i</sub>]</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/0211/","title":"211. Design Add and Search Words Data Structure","text":"Problem <p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p> <p>Implement the <code>WordDictionary</code> class:</p> <ul> <li><code>WordDictionary()</code>\u00a0Initializes the object.</li> <li><code>void addWord(word)</code> Adds <code>word</code> to the data structure, it can be matched later.</li> <li><code>bool search(word)</code>\u00a0Returns <code>true</code> if there is any string in the data structure that matches <code>word</code>\u00a0or <code>false</code> otherwise. <code>word</code> may contain dots <code>'.'</code> where dots can be matched with any letter.</li> </ul> <p> </p> <p>Example:</p> <pre>\nInput\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\nOutput\n[null,null,null,null,false,true,true,true]\n\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 25</code></li> <li><code>word</code> in <code>addWord</code> consists of lowercase English letters.</li> <li><code>word</code> in <code>search</code> consist of <code>'.'</code> or lowercase English letters.</li> <li>There will be at most <code>2</code> dots in <code>word</code> for <code>search</code> queries.</li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>addWord</code> and <code>search</code>.</li> </ul>"},{"location":"LeetCode_Problems/0212/","title":"212. Word Search II","text":"Problem <p>Given an <code>m x n</code> <code>board</code>\u00a0of characters and a list of strings <code>words</code>, return all words on the board.</p> <p>Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\nOutput: [\"eat\",\"oath\"]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 12</code></li> <li><code>board[i][j]</code> is a lowercase English letter.</li> <li><code>1 &lt;= words.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> <li>All the strings of <code>words</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0213/","title":"213. House Robber II","text":"Problem <p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\u00a0it will automatically contact the police if two adjacent houses were broken into on the same night.</p> <p>Given an integer array <code>nums</code> representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0214/","title":"214. Shortest Palindrome","text":"Problem <p>You are given a string <code>s</code>. You can convert <code>s</code> to a palindrome by adding characters in front of it.</p> <p>Return the shortest palindrome you can find by performing this transformation.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"aacecaaa\"\nOutput: \"aaacecaaa\"\n</pre> <p>Example 2:</p> <pre>Input: s = \"abcd\"\nOutput: \"dcbabcd\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s</code> consists of lowercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/0215/","title":"215. Kth Largest Element in an Array","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the <code>k<sup>th</sup></code> largest element in the array.</p> <p>Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p> <p>Can you solve it without sorting?</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\n</pre> <p>Example 2:</p> <pre>Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0216/","title":"216. Combination Sum III","text":"Problem <p>Find all valid combinations of <code>k</code> numbers that sum up to <code>n</code> such that the following conditions are true:</p> <ul> <li>Only numbers <code>1</code> through <code>9</code> are used.</li> <li>Each number is used at most once.</li> </ul> <p>Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\nExplanation:\n1 + 2 + 4 = 7\nThere are no other valid combinations.</pre> <p>Example 2:</p> <pre>\nInput: k = 3, n = 9\nOutput: [[1,2,6],[1,3,5],[2,3,4]]\nExplanation:\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n</pre> <p>Example 3:</p> <pre>\nInput: k = 4, n = 1\nOutput: []\nExplanation: There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 &gt; 1, there are no valid combination.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= k &lt;= 9</code></li> <li><code>1 &lt;= n &lt;= 60</code></li> </ul>"},{"location":"LeetCode_Problems/0217/","title":"217. Contains Duplicate","text":"Problem <p>Given an integer array <code>nums</code>, return <code>true</code> if any value appears at least twice in the array, and return <code>false</code> if every element is distinct.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,2,3,1]\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: nums = [1,2,3,4]\nOutput: false\n</pre> <p>Example 3:</p> <pre>Input: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0218/","title":"218. The Skyline Problem","text":"Problem <p>A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.</p> <p>The geometric information of each building is given in the array <code>buildings</code> where <code>buildings[i] = [left<sub>i</sub>, right<sub>i</sub>, height<sub>i</sub>]</code>:</p> <ul> <li><code>left<sub>i</sub></code> is the x coordinate of the left edge of the <code>i<sup>th</sup></code> building.</li> <li><code>right<sub>i</sub></code> is the x coordinate of the right edge of the <code>i<sup>th</sup></code> building.</li> <li><code>height<sub>i</sub></code> is the height of the <code>i<sup>th</sup></code> building.</li> </ul> <p>You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height <code>0</code>.</p> <p>The skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form <code>[[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]</code>. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate <code>0</code> and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.</p> <p>Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...,[2 3],[4 5],[12 7],...]</code></p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation:\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n</pre> <p>Example 2:</p> <pre>\nInput: buildings = [[0,2,3],[2,5,3]]\nOutput: [[0,3],[5,0]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= buildings.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li> <li><code>1 &lt;= height<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li> <li><code>buildings</code> is sorted by <code>left<sub>i</sub></code> in\u00a0non-decreasing order.</li> </ul>"},{"location":"LeetCode_Problems/0219/","title":"219. Contains Duplicate II","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> if there are two distinct indices <code>i</code> and <code>j</code> in the array such that <code>nums[i] == nums[j]</code> and <code>abs(i - j) &lt;= k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,1], k = 3\nOutput: true\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,0,1,1], k = 1\nOutput: true\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,1,2,3], k = 2\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0220/","title":"220. Contains Duplicate III","text":"Problem <p>You are given an integer array <code>nums</code> and two integers <code>indexDiff</code> and <code>valueDiff</code>.</p> <p>Find a pair of indices <code>(i, j)</code> such that:</p> <ul> <li><code>i != j</code>,</li> <li><code>abs(i - j) &lt;= indexDiff</code>.</li> <li><code>abs(nums[i] - nums[j]) &lt;= valueDiff</code>, and</li> </ul> <p>Return <code>true</code> if such pair exists or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\nOutput: true\nExplanation: We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --&gt; 0 != 3\nabs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3\nabs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\nOutput: false\nExplanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= indexDiff &lt;= nums.length</code></li> <li><code>0 &lt;= valueDiff &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0221/","title":"221. Maximal Square","text":"Problem <p>Given an <code>m x n</code> binary <code>matrix</code> filled with <code>0</code>'s and <code>1</code>'s, find the largest square containing only <code>1</code>'s and return its area.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: matrix = [[\"0\"]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>matrix[i][j]</code> is <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0222/","title":"222. Count Complete Tree Nodes","text":"Problem <p>Given the <code>root</code> of a complete binary tree, return the number of the nodes in the tree.</p> <p>According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between <code>1</code> and <code>2<sup>h</sup></code> nodes inclusive at the last level <code>h</code>.</p> <p>Design an algorithm that runs in less than\u00a0<code>O(n)</code>\u00a0time complexity.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,6]\nOutput: 6\n</pre> <p>Example 2:</p> <pre>\nInput: root = []\nOutput: 0\n</pre> <p>Example 3:</p> <pre>\nInput: root = [1]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 5 * 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 5 * 10<sup>4</sup></code></li> <li>The tree is guaranteed to be complete.</li> </ul>"},{"location":"LeetCode_Problems/0223/","title":"223. Rectangle Area","text":"Problem <p>Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.</p> <p>The first rectangle is defined by its bottom-left corner <code>(ax1, ay1)</code> and its top-right corner <code>(ax2, ay2)</code>.</p> <p>The second rectangle is defined by its bottom-left corner <code>(bx1, by1)</code> and its top-right corner <code>(bx2, by2)</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\nOutput: 45\n</pre> <p>Example 2:</p> <pre>\nInput: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\nOutput: 16\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-10<sup>4</sup> &lt;= ax1 &lt;= ax2 &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= ay1 &lt;= ay2 &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= bx1 &lt;= bx2 &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= by1 &lt;= by2 &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0224/","title":"224. Basic Calculator","text":"Problem <p>Given a string <code>s</code> representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.</p> <p>Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"1 + 1\"\nOutput: 2\n</pre> <p>Example 2:</p> <pre>\nInput: s = \" 2-1 + 2 \"\nOutput: 3\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li> <li><code>s</code> consists of digits, <code>'+'</code>, <code>'-'</code>, <code>'('</code>, <code>')'</code>, and <code>' '</code>.</li> <li><code>s</code> represents a valid expression.</li> <li><code>'+'</code> is not used as a unary operation (i.e., <code>\"+1\"</code> and <code>\"+(2 + 3)\"</code> is invalid).</li> <li><code>'-'</code> could be used as a unary operation (i.e., <code>\"-1\"</code> and <code>\"-(2 + 3)\"</code> is valid).</li> <li>There will be no two consecutive operators in the input.</li> <li>Every number and running calculation will fit in a signed 32-bit integer.</li> </ul>"},{"location":"LeetCode_Problems/0225/","title":"225. Implement Stack using Queues","text":"Problem <p>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (<code>push</code>, <code>top</code>, <code>pop</code>, and <code>empty</code>).</p> <p>Implement the <code>MyStack</code> class:</p> <ul> <li><code>void push(int x)</code> Pushes element x to the top of the stack.</li> <li><code>int pop()</code> Removes the element on the top of the stack and returns it.</li> <li><code>int top()</code> Returns the element on the top of the stack.</li> <li><code>boolean empty()</code> Returns <code>true</code> if the stack is empty, <code>false</code> otherwise.</li> </ul> <p>Notes:</p> <ul> <li>You must use only standard operations of a queue, which means that only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code> and <code>is empty</code> operations are valid.</li> <li>Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\n\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= x &lt;= 9</code></li> <li>At most <code>100</code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, and <code>empty</code>.</li> <li>All the calls to <code>pop</code> and <code>top</code> are valid.</li> </ul> <p> </p> <p>Follow-up: Can you implement the stack using only one queue?</p>"},{"location":"LeetCode_Problems/0226/","title":"226. Invert Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, invert the tree, and return its root.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [2,1,3]\nOutput: [2,3,1]\n</pre> <p>Example 3:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0227/","title":"227. Basic Calculator II","text":"Problem <p>Given a string <code>s</code> which represents an expression, evaluate this expression and return its value.\u00a0</p> <p>The integer division should truncate toward zero.</p> <p>You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>.</p> <p>Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"3+2*2\"\nOutput: 7\n</pre> <p>Example 2:</p> <pre>Input: s = \" 3/2 \"\nOutput: 1\n</pre> <p>Example 3:</p> <pre>Input: s = \" 3+5 / 2 \"\nOutput: 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li> <li><code>s</code> consists of integers and operators <code>('+', '-', '*', '/')</code> separated by some number of spaces.</li> <li><code>s</code> represents a valid expression.</li> <li>All the integers in the expression are non-negative integers in the range <code>[0, 2<sup>31</sup> - 1]</code>.</li> <li>The answer is guaranteed to fit in a 32-bit integer.</li> </ul>"},{"location":"LeetCode_Problems/0228/","title":"228. Summary Ranges","text":"Problem <p>You are given a sorted unique integer array <code>nums</code>.</p> <p>A range <code>[a,b]</code> is the set of all integers from <code>a</code> to <code>b</code> (inclusive).</p> <p>Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of <code>nums</code> is covered by exactly one of the ranges, and there is no integer <code>x</code> such that <code>x</code> is in one of the ranges but not in <code>nums</code>.</p> <p>Each range <code>[a,b]</code> in the list should be output as:</p> <ul> <li><code>\"a-&gt;b\"</code> if <code>a != b</code></li> <li><code>\"a\"</code> if <code>a == b</code></li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,2,4,5,7]\nOutput: [\"0-&gt;2\",\"4-&gt;5\",\"7\"]\nExplanation: The ranges are:\n[0,2] --&gt; \"0-&gt;2\"\n[4,5] --&gt; \"4-&gt;5\"\n[7,7] --&gt; \"7\"\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,2,3,4,6,8,9]\nOutput: [\"0\",\"2-&gt;4\",\"6\",\"8-&gt;9\"]\nExplanation: The ranges are:\n[0,0] --&gt; \"0\"\n[2,4] --&gt; \"2-&gt;4\"\n[6,6] --&gt; \"6\"\n[8,9] --&gt; \"8-&gt;9\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 20</code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li>All the values of <code>nums</code> are unique.</li> <li><code>nums</code> is sorted in ascending order.</li> </ul>"},{"location":"LeetCode_Problems/0229/","title":"229. Majority Element II","text":"Problem <p>Given an integer array of size <code>n</code>, find all elements that appear more than <code>\u230a n/3 \u230b</code> times.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,2,3]\nOutput: [3]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1]\nOutput: [1]\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2]\nOutput: [1,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul> <p> </p> <p>Follow up: Could you solve the problem in linear time and in <code>O(1)</code> space?</p>"},{"location":"LeetCode_Problems/0230/","title":"230. Kth Smallest Element in a BST","text":"Problem <p>Given the <code>root</code> of a binary search tree, and an integer <code>k</code>, return the <code>k<sup>th</sup></code> smallest value (1-indexed) of all the values of the nodes in the tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,1,4,null,2], k = 1\nOutput: 1\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is <code>n</code>.</li> <li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> </ul> <p> </p> <p>Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?</p>"},{"location":"LeetCode_Problems/0231/","title":"231. Power of Two","text":"Problem <p>Given an integer <code>n</code>, return <code>true</code> if it is a power of two. Otherwise, return <code>false</code>.</p> <p>An integer <code>n</code> is a power of two, if there exists an integer <code>x</code> such that <code>n == 2<sup>x</sup></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: true\nExplanation: 2<sup>0</sup> = 1\n</pre> <p>Example 2:</p> <pre>\nInput: n = 16\nOutput: true\nExplanation: 2<sup>4</sup> = 16\n</pre> <p>Example 3:</p> <pre>\nInput: n = 3\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul> <p> </p> <p>Follow up: Could you solve it without loops/recursion?</p>"},{"location":"LeetCode_Problems/0232/","title":"232. Implement Queue using Stacks","text":"Problem <p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<code>push</code>, <code>peek</code>, <code>pop</code>, and <code>empty</code>).</p> <p>Implement the <code>MyQueue</code> class:</p> <ul> <li><code>void push(int x)</code> Pushes element x to the back of the queue.</li> <li><code>int pop()</code> Removes the element from the front of the queue and returns it.</li> <li><code>int peek()</code> Returns the element at the front of the queue.</li> <li><code>boolean empty()</code> Returns <code>true</code> if the queue is empty, <code>false</code> otherwise.</li> </ul> <p>Notes:</p> <ul> <li>You must use only standard operations of a stack, which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li> <li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 1, 1, false]\n\nExplanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= x &lt;= 9</code></li> <li>At most <code>100</code>\u00a0calls will be made to <code>push</code>, <code>pop</code>, <code>peek</code>, and <code>empty</code>.</li> <li>All the calls to <code>pop</code> and <code>peek</code> are valid.</li> </ul> <p> </p> <p>Follow-up: Can you implement the queue such that each operation is amortized <code>O(1)</code> time complexity? In other words, performing <code>n</code> operations will take overall <code>O(n)</code> time even if one of those operations may take longer.</p>"},{"location":"LeetCode_Problems/0233/","title":"233. Number of Digit One","text":"Problem <p>Given an integer <code>n</code>, count the total number of digit <code>1</code> appearing in all non-negative integers less than or equal to <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 13\nOutput: 6\n</pre> <p>Example 2:</p> <pre>\nInput: n = 0\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0234/","title":"234. Palindrome Linked List","text":"Problem <p>Given the <code>head</code> of a singly linked list, return <code>true</code> if it is a palindrome or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,2,1]\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,2]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> </ul> <p> </p> <p>Follow up: Could you do it in <code>O(n)</code> time and <code>O(1)</code> space?</p>"},{"location":"LeetCode_Problems/0235/","title":"235. Lowest Common Ancestor of a Binary Search Tree","text":"Problem <p>Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.</p> <p>According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow a node to be a descendant of itself).\u201d</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n</pre> <p>Example 3:</p> <pre>\nInput: root = [2,1], p = 2, q = 1\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li> <li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li> <li>All <code>Node.val</code> are unique.</li> <li><code>p != q</code></li> <li><code>p</code> and <code>q</code> will exist in the BST.</li> </ul>"},{"location":"LeetCode_Problems/0236/","title":"236. Lowest Common Ancestor of a Binary Tree","text":"Problem <p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p> <p>According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow a node to be a descendant of itself).\u201d</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n</pre> <p>Example 3:</p> <pre>\nInput: root = [1,2], p = 1, q = 2\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li> <li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li> <li>All <code>Node.val</code> are unique.</li> <li><code>p != q</code></li> <li><code>p</code> and <code>q</code> will exist in the tree.</li> </ul>"},{"location":"LeetCode_Problems/0237/","title":"237. Delete Node in a Linked List","text":"Problem <p>There is a singly-linked list <code>head</code> and we want to delete a node <code>node</code> in it.</p> <p>You are given the node to be deleted <code>node</code>. You will not be given access to the first node of <code>head</code>.</p> <p>All the values of the linked list are unique, and it is guaranteed that the given node <code>node</code> is not the last node in the linked list.</p> <p>Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:</p> <ul> <li>The value of the given node should not exist in the linked list.</li> <li>The number of nodes in the linked list should decrease by one.</li> <li>All the values before <code>node</code> should be in the same order.</li> <li>All the values after <code>node</code> should be in the same order.</li> </ul> <p>Custom testing:</p> <ul> <li>For the input, you should provide the entire linked list <code>head</code> and the node to be given <code>node</code>. <code>node</code> should not be the last node of the list and should be an actual node in the list.</li> <li>We will build the linked list and pass the node to your function.</li> <li>The output will be the entire list after calling your function.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\nExplanation: You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of the nodes in the given list is in the range <code>[2, 1000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> <li>The value of each node in the list is unique.</li> <li>The <code>node</code> to be deleted is in the list and is not a tail node.</li> </ul>"},{"location":"LeetCode_Problems/0238/","title":"238. Product of Array Except Self","text":"Problem <p>Given an integer array <code>nums</code>, return an array <code>answer</code> such that <code>answer[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p> <p>The product of any prefix or suffix of <code>nums</code> is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in\u00a0<code>O(n)</code>\u00a0time and without using the division operation.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,2,3,4]\nOutput: [24,12,8,6]\n</pre> <p>Example 2:</p> <pre>Input: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-30 &lt;= nums[i] &lt;= 30</code></li> <li>The product of any prefix or suffix of <code>nums</code> is guaranteed to fit in a 32-bit integer.</li> </ul> <p> </p> <p>Follow up:\u00a0Can you solve the problem in <code>O(1)</code>\u00a0extra\u00a0space complexity? (The output array does not count as extra space for space complexity analysis.)</p>"},{"location":"LeetCode_Problems/0239/","title":"239. Sliding Window Maximum","text":"Problem <p>You are given an array of integers\u00a0<code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p> <p>Return the max sliding window.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1], k = 1\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/0240/","title":"240. Search a 2D Matrix II","text":"Problem <p>Write an efficient algorithm that searches for a value <code>target</code> in an <code>m x n</code> integer matrix <code>matrix</code>. This matrix has the following properties:</p> <ul> <li>Integers in each row are sorted in ascending from left to right.</li> <li>Integers in each column are sorted in ascending from top to bottom.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= n, m &lt;= 300</code></li> <li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li> <li>All the integers in each row are sorted in ascending order.</li> <li>All the integers in each column are sorted in ascending order.</li> <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0241/","title":"241. Different Ways to Add Parentheses","text":"Problem <p>Given a string <code>expression</code> of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.</p> <p>The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed <code>10<sup>4</sup></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: expression = \"2-1-1\"\nOutput: [0,2]\nExplanation:\n((2-1)-1) = 0 \n(2-(1-1)) = 2\n</pre> <p>Example 2:</p> <pre>\nInput: expression = \"2*3-4*5\"\nOutput: [-34,-14,-10,-10,10]\nExplanation:\n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= expression.length &lt;= 20</code></li> <li><code>expression</code> consists of digits and the operator <code>'+'</code>, <code>'-'</code>, and <code>'*'</code>.</li> <li>All the integer values in the input expression are in the range <code>[0, 99]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0242/","title":"242. Valid Anagram","text":"Problem <p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>t</code> is an anagram of <code>s</code>, and <code>false</code> otherwise.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"anagram\", t = \"nagaram\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: s = \"rat\", t = \"car\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li> </ul> <p> </p> <p>Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?</p>"},{"location":"LeetCode_Problems/0243/","title":"243. Shortest Word Distance","text":"Problem"},{"location":"LeetCode_Problems/0244/","title":"244. Shortest Word Distance II","text":"Problem"},{"location":"LeetCode_Problems/0245/","title":"245. Shortest Word Distance III","text":"Problem"},{"location":"LeetCode_Problems/0246/","title":"246. Strobogrammatic Number","text":"Problem"},{"location":"LeetCode_Problems/0247/","title":"247. Strobogrammatic Number II","text":"Problem"},{"location":"LeetCode_Problems/0248/","title":"248. Strobogrammatic Number III","text":"Problem"},{"location":"LeetCode_Problems/0249/","title":"249. Group Shifted Strings","text":"Problem"},{"location":"LeetCode_Problems/0250/","title":"250. Count Univalue Subtrees","text":"Problem"},{"location":"LeetCode_Problems/0251/","title":"251. Flatten 2D Vector","text":"Problem"},{"location":"LeetCode_Problems/0252/","title":"252. Meeting Rooms","text":"Problem"},{"location":"LeetCode_Problems/0253/","title":"253. Meeting Rooms II","text":"Problem"},{"location":"LeetCode_Problems/0254/","title":"254. Factor Combinations","text":"Problem"},{"location":"LeetCode_Problems/0255/","title":"255. Verify Preorder Sequence in Binary Search Tree","text":"Problem"},{"location":"LeetCode_Problems/0256/","title":"256. Paint House","text":"Problem"},{"location":"LeetCode_Problems/0257/","title":"257. Binary Tree Paths","text":"Problem <p>Given the <code>root</code> of a binary tree, return all root-to-leaf paths in any order.</p> <p>A leaf is a node with no children.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,null,5]\nOutput: [\"1-&gt;2-&gt;5\",\"1-&gt;3\"]\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1]\nOutput: [\"1\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0258/","title":"258. Add Digits","text":"Problem <p>Given an integer <code>num</code>, repeatedly add all its digits until the result has only one digit, and return it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 38\nOutput: 2\nExplanation: The process is\n38 --&gt; 3 + 8 --&gt; 11\n11 --&gt; 1 + 1 --&gt; 2 \nSince 2 has only one digit, return it.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 0\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li> </ul> <p> </p> <p>Follow up: Could you do it without any loop/recursion in <code>O(1)</code> runtime?</p>"},{"location":"LeetCode_Problems/0259/","title":"259. 3Sum Smaller","text":"Problem"},{"location":"LeetCode_Problems/0260/","title":"260. Single Number III","text":"Problem <p>Given an integer array <code>nums</code>, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.</p> <p>You must write an\u00a0algorithm that runs in linear runtime complexity and uses\u00a0only constant extra space.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,1,3,2,5]\nOutput: [3,5]\nExplanation:  [5, 3] is also a valid answer.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-1,0]\nOutput: [-1,0]\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [0,1]\nOutput: [1,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li>Each integer in <code>nums</code> will appear twice, only two integers will appear once.</li> </ul>"},{"location":"LeetCode_Problems/0261/","title":"261. Graph Valid Tree","text":"Problem"},{"location":"LeetCode_Problems/0262/","title":"262. Trips and Users","text":"Problem <p>Table: <code>Trips</code></p> <pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| client_id   | int      |\n| driver_id   | int      |\n| city_id     | int      |\n| status      | enum     |\n| request_at  | date     |     \n+-------------+----------+\nid is the primary key (column with unique values) for this table.\nThe table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.\nStatus is an ENUM (category) type of ('completed', 'cancelled_by_driver', 'cancelled_by_client').\n</pre> <p> </p> <p>Table: <code>Users</code></p> <pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| users_id    | int      |\n| banned      | enum     |\n| role        | enum     |\n+-------------+----------+\nusers_id is the primary key (column with unique values) for this table.\nThe table holds all users. Each user has a unique users_id, and role is an ENUM type of ('client', 'driver', 'partner').\nbanned is an ENUM (category) type of ('Yes', 'No').\n</pre> <p> </p> <p>The cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.</p> <p>Write a solution to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between <code>\"2013-10-01\"</code> and <code>\"2013-10-03\"</code>. Round <code>Cancellation Rate</code> to two decimal points.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nTrips table:\n+----+-----------+-----------+---------+---------------------+------------+\n| id | client_id | driver_id | city_id | status              | request_at |\n+----+-----------+-----------+---------+---------------------+------------+\n| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |\n| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |\n| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |\n| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |\n| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |\n| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |\n| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |\n| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |\n| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |\n| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |\n+----+-----------+-----------+---------+---------------------+------------+\nUsers table:\n+----------+--------+--------+\n| users_id | banned | role   |\n+----------+--------+--------+\n| 1        | No     | client |\n| 2        | Yes    | client |\n| 3        | No     | client |\n| 4        | No     | client |\n| 10       | No     | driver |\n| 11       | No     | driver |\n| 12       | No     | driver |\n| 13       | No     | driver |\n+----------+--------+--------+\nOutput: \n+------------+-------------------+\n| Day        | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 | 0.33              |\n| 2013-10-02 | 0.00              |\n| 2013-10-03 | 0.50              |\n+------------+-------------------+\nExplanation: \nOn 2013-10-01:\n  - There were 4 requests in total, 2 of which were canceled.\n  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\n  - Hence there are 3 unbanned requests in total, 1 of which was canceled.\n  - The Cancellation Rate is (1 / 3) = 0.33\nOn 2013-10-02:\n  - There were 3 requests in total, 0 of which were canceled.\n  - The request with Id=6 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned requests in total, 0 of which were canceled.\n  - The Cancellation Rate is (0 / 2) = 0.00\nOn 2013-10-03:\n  - There were 3 requests in total, 1 of which was canceled.\n  - The request with Id=8 was made by a banned client, so it is ignored.\n  - Hence there are 2 unbanned request in total, 1 of which were canceled.\n  - The Cancellation Rate is (1 / 2) = 0.50\n</pre>"},{"location":"LeetCode_Problems/0263/","title":"263. Ugly Number","text":"Problem <p>An ugly number is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p> <p>Given an integer <code>n</code>, return <code>true</code> if <code>n</code> is an ugly number.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 6\nOutput: true\nExplanation: 6 = 2 \u00d7 3\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: true\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 14\nOutput: false\nExplanation: 14 is not ugly since it includes the prime factor 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0264/","title":"264. Ugly Number II","text":"Problem <p>An ugly number is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p> <p>Given an integer <code>n</code>, return the <code>n<sup>th</sup></code> ugly number.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 1\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1690</code></li> </ul>"},{"location":"LeetCode_Problems/0265/","title":"265. Paint House II","text":"Problem"},{"location":"LeetCode_Problems/0266/","title":"266. Palindrome Permutation","text":"Problem"},{"location":"LeetCode_Problems/0267/","title":"267. Palindrome Permutation II","text":"Problem"},{"location":"LeetCode_Problems/0268/","title":"268. Missing Number","text":"Problem <p>Given an array <code>nums</code> containing <code>n</code> distinct numbers in the range <code>[0, n]</code>, return the only number in the range that is missing from the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1]\nOutput: 2\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= n</code></li> <li>All the numbers of <code>nums</code> are unique.</li> </ul> <p> </p> <p>Follow up: Could you implement a solution using only <code>O(1)</code> extra space complexity and <code>O(n)</code> runtime complexity?</p>"},{"location":"LeetCode_Problems/0269/","title":"269. Alien Dictionary","text":"Problem"},{"location":"LeetCode_Problems/0270/","title":"270. Closest Binary Search Tree Value","text":"Problem"},{"location":"LeetCode_Problems/0271/","title":"271. Encode and Decode Strings","text":"Problem"},{"location":"LeetCode_Problems/0272/","title":"272. Closest Binary Search Tree Value II","text":"Problem"},{"location":"LeetCode_Problems/0273/","title":"273. Integer to English Words","text":"Problem <p>Convert a non-negative integer <code>num</code> to its English words representation.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 123\nOutput: \"One Hundred Twenty Three\"\n</pre> <p>Example 2:</p> <pre>\nInput: num = 12345\nOutput: \"Twelve Thousand Three Hundred Forty Five\"\n</pre> <p>Example 3:</p> <pre>\nInput: num = 1234567\nOutput: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0274/","title":"274. H-Index","text":"Problem <p>Given an array of integers <code>citations</code> where <code>citations[i]</code> is the number of citations a researcher received for their <code>i<sup>th</sup></code> paper, return the researcher's h-index.</p> <p>According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of <code>h</code> such that the given researcher has published at least <code>h</code> papers that have each been cited at least <code>h</code> times.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: citations = [3,0,6,1,5]\nOutput: 3\nExplanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: citations = [1,3,1]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == citations.length</code></li> <li><code>1 &lt;= n &lt;= 5000</code></li> <li><code>0 &lt;= citations[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0275/","title":"275. H-Index II","text":"Problem <p>Given an array of integers <code>citations</code> where <code>citations[i]</code> is the number of citations a researcher received for their <code>i<sup>th</sup></code> paper and <code>citations</code> is sorted in ascending order, return the researcher's h-index.</p> <p>According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of <code>h</code> such that the given researcher has published at least <code>h</code> papers that have each been cited at least <code>h</code> times.</p> <p>You must write an algorithm that runs in logarithmic time.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: citations = [0,1,3,5,6]\nOutput: 3\nExplanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: citations = [1,2,100]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == citations.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= citations[i] &lt;= 1000</code></li> <li><code>citations</code> is sorted in ascending order.</li> </ul>"},{"location":"LeetCode_Problems/0276/","title":"276. Paint Fence","text":"Problem"},{"location":"LeetCode_Problems/0277/","title":"277. Find the Celebrity","text":"Problem"},{"location":"LeetCode_Problems/0278/","title":"278. First Bad Version","text":"Problem <p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p> <p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p> <p>You are given an API <code>bool isBadVersion(version)</code> which returns whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5, bad = 4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -&gt; false\ncall isBadVersion(5)\u00a0-&gt; true\ncall isBadVersion(4)\u00a0-&gt; true\nThen 4 is the first bad version.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1, bad = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= bad &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0279/","title":"279. Perfect Squares","text":"Problem <p>Given an integer <code>n</code>, return the least number of perfect square numbers that sum to <code>n</code>.</p> <p>A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, <code>1</code>, <code>4</code>, <code>9</code>, and <code>16</code> are perfect squares while <code>3</code> and <code>11</code> are not.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0280/","title":"280. Wiggle Sort","text":"Problem"},{"location":"LeetCode_Problems/0281/","title":"281. Zigzag Iterator","text":"Problem"},{"location":"LeetCode_Problems/0282/","title":"282. Expression Add Operators","text":"Problem <p>Given a string <code>num</code> that contains only digits and an integer <code>target</code>, return all possibilities to insert the binary operators <code>'+'</code>, <code>'-'</code>, and/or <code>'*'</code> between the digits of <code>num</code> so that the resultant expression evaluates to the <code>target</code> value.</p> <p>Note that operands in the returned expressions should not contain leading zeros.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"123\", target = 6\nOutput: [\"1*2*3\",\"1+2+3\"]\nExplanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"232\", target = 8\nOutput: [\"2*3+2\",\"2+3*2\"]\nExplanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8.\n</pre> <p>Example 3:</p> <pre>\nInput: num = \"3456237490\", target = 9191\nOutput: []\nExplanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num.length &lt;= 10</code></li> <li><code>num</code> consists of only digits.</li> <li><code>-2<sup>31</sup> &lt;= target &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0283/","title":"283. Move Zeroes","text":"Problem <p>Given an integer array <code>nums</code>, move all <code>0</code>'s to the end of it while maintaining the relative order of the non-zero elements.</p> <p>Note that you must do this in-place without making a copy of the array.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]\n</pre> <p>Example 2:</p> <pre>Input: nums = [0]\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> </ul> <p> </p> <p>Follow up: Could you minimize the total number of operations done?</p>"},{"location":"LeetCode_Problems/0284/","title":"284. Peeking Iterator","text":"Problem <p>Design an iterator that supports the <code>peek</code> operation on an existing iterator in addition to the <code>hasNext</code> and the <code>next</code> operations.</p> <p>Implement the <code>PeekingIterator</code> class:</p> <ul> <li><code>PeekingIterator(Iterator&lt;int&gt; nums)</code> Initializes the object with the given integer iterator <code>iterator</code>.</li> <li><code>int next()</code> Returns the next element in the array and moves the pointer to the next element.</li> <li><code>boolean hasNext()</code> Returns <code>true</code> if there are still elements in the array.</li> <li><code>int peek()</code> Returns the next element in the array without moving the pointer.</li> </ul> <p>Note: Each language may have a different implementation of the constructor and <code>Iterator</code>, but they all support the <code>int next()</code> and <code>boolean hasNext()</code> functions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 2, 2, 3, false]\n\nExplanation\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].\npeekingIterator.peek();    // return 2, the pointer does not move [1,2,3].\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li>All the calls to <code>next</code> and <code>peek</code> are valid.</li> <li>At most <code>1000</code> calls will be made to <code>next</code>, <code>hasNext</code>, and <code>peek</code>.</li> </ul> <p> </p> <p>Follow up: How would you extend your design to be generic and work with all types, not just integer?</p>"},{"location":"LeetCode_Problems/0285/","title":"285. Inorder Successor in BST","text":"Problem"},{"location":"LeetCode_Problems/0286/","title":"286. Walls and Gates","text":"Problem"},{"location":"LeetCode_Problems/0287/","title":"287. Find the Duplicate Number","text":"Problem <p>Given an array of integers <code>nums</code> containing\u00a0<code>n + 1</code> integers where each integer is in the range <code>[1, n]</code> inclusive.</p> <p>There is only one repeated number in <code>nums</code>, return this\u00a0repeated\u00a0number.</p> <p>You must solve the problem without modifying the array <code>nums</code>\u00a0and uses only constant extra space.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,4,2,2]\nOutput: 2\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,1,3,4,2]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>nums.length == n + 1</code></li> <li><code>1 &lt;= nums[i] &lt;= n</code></li> <li>All the integers in <code>nums</code> appear only once except for precisely one integer which appears two or more times.</li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>How can we prove that at least one duplicate number must exist in <code>nums</code>?</li> <li>Can you solve the problem in linear runtime complexity?</li> </ul>"},{"location":"LeetCode_Problems/0288/","title":"288. Unique Word Abbreviation","text":"Problem"},{"location":"LeetCode_Problems/0289/","title":"289. Game of Life","text":"Problem <p>According to\u00a0Wikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"</p> <p>The board is made up of an <code>m x n</code> grid of cells, where each cell has an initial state: live (represented by a <code>1</code>) or dead (represented by a <code>0</code>). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p> <ol> <li>Any live cell with fewer than two live neighbors dies as if caused by under-population.</li> <li>Any live cell with two or three live neighbors lives on to the next generation.</li> <li>Any live cell with more than three live neighbors dies, as if by over-population.</li> <li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li> </ol> <p>The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the <code>m x n</code> grid <code>board</code>, return the next state.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\nOutput: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: board = [[1,1],[1,0]]\nOutput: [[1,1],[1,1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 25</code></li> <li><code>board[i][j]</code> is <code>0</code> or <code>1</code>.</li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.</li> <li>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?</li> </ul>"},{"location":"LeetCode_Problems/0290/","title":"290. Word Pattern","text":"Problem <p>Given a <code>pattern</code> and a string <code>s</code>, find if <code>s</code>\u00a0follows the same pattern.</p> <p>Here follow means a full match, such that there is a bijection between a letter in <code>pattern</code> and a non-empty word in <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: pattern = \"abba\", s = \"dog cat cat dog\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>\nInput: pattern = \"abba\", s = \"dog cat cat fish\"\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: pattern = \"aaaa\", s = \"dog cat cat dog\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= pattern.length &lt;= 300</code></li> <li><code>pattern</code> contains only lower-case English letters.</li> <li><code>1 &lt;= s.length &lt;= 3000</code></li> <li><code>s</code> contains only lowercase English letters and spaces <code>' '</code>.</li> <li><code>s</code> does not contain any leading or trailing spaces.</li> <li>All the words in <code>s</code> are separated by a single space.</li> </ul>"},{"location":"LeetCode_Problems/0291/","title":"291. Word Pattern II","text":"Problem"},{"location":"LeetCode_Problems/0292/","title":"292. Nim Game","text":"Problem <p>You are playing the following Nim Game with your friend:</p> <ul> <li>Initially, there is a heap of stones on the table.</li> <li>You and your friend will alternate taking turns, and you go first.</li> <li>On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.</li> <li>The one who removes the last stone is the winner.</li> </ul> <p>Given <code>n</code>, the number of stones in the heap, return <code>true</code> if you can win the game assuming both you and your friend play optimally, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4\nOutput: false\nExplanation: These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: true\n</pre> <p>Example 3:</p> <pre>\nInput: n = 2\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0293/","title":"293. Flip Game","text":"Problem"},{"location":"LeetCode_Problems/0294/","title":"294. Flip Game II","text":"Problem"},{"location":"LeetCode_Problems/0295/","title":"295. Find Median from Data Stream","text":"Problem <p>The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.</p> <ul> <li>For example, for <code>arr = [2,3,4]</code>, the median is <code>3</code>.</li> <li>For example, for <code>arr = [2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li> </ul> <p>Implement the MedianFinder class:</p> <ul> <li><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</li> <li><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</li> <li><code>double findMedian()</code> returns the median of all elements so far. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\n\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-10<sup>5</sup> &lt;= num &lt;= 10<sup>5</sup></code></li> <li>There will be at least one element in the data structure before calling <code>findMedian</code>.</li> <li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>findMedian</code>.</li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>If all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li> <li>If <code>99%</code> of all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li> </ul>"},{"location":"LeetCode_Problems/0296/","title":"296. Best Meeting Point","text":"Problem"},{"location":"LeetCode_Problems/0297/","title":"297. Serialize and Deserialize Binary Tree","text":"Problem <p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p> <p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p> <p>Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]\n</pre> <p>Example 2:</p> <pre>\nInput: root = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0298/","title":"298. Binary Tree Longest Consecutive Sequence","text":"Problem"},{"location":"LeetCode_Problems/0299/","title":"299. Bulls and Cows","text":"Problem <p>You are playing the Bulls and Cows game with your friend.</p> <p>You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:</p> <ul> <li>The number of \"bulls\", which are digits in the guess that are in the correct position.</li> <li>The number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.</li> </ul> <p>Given the secret number <code>secret</code> and your friend's guess <code>guess</code>, return the hint for your friend's guess.</p> <p>The hint should be formatted as <code>\"xAyB\"</code>, where <code>x</code> is the number of bulls and <code>y</code> is the number of cows. Note that both <code>secret</code> and <code>guess</code> may contain duplicate digits.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: secret = \"1807\", guess = \"7810\"\nOutput: \"1A3B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1807\"\n  |\n\"7810\"</pre> <p>Example 2:</p> <pre>\nInput: secret = \"1123\", guess = \"0111\"\nOutput: \"1A1B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1123\"        \"1123\"\n  |      or     |\n\"0111\"        \"0111\"\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= secret.length, guess.length &lt;= 1000</code></li> <li><code>secret.length == guess.length</code></li> <li><code>secret</code> and <code>guess</code> consist of digits only.</li> </ul>"},{"location":"LeetCode_Problems/0300/","title":"300. Longest Increasing Subsequence","text":"Problem <p>Given an integer array <code>nums</code>, return the length of the longest strictly increasing subsequence.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1,0,3,2,3]\nOutput: 4\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [7,7,7,7,7,7,7]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2500</code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul> <p> </p> <p>Follow up:\u00a0Can you come up with an algorithm that runs in\u00a0<code>O(n log(n))</code> time complexity?</p>"},{"location":"LeetCode_Problems/0301/","title":"301. Remove Invalid Parentheses","text":"Problem <p>Given a string <code>s</code> that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.</p> <p>Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"()())()\"\nOutput: [\"(())()\",\"()()()\"]\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"(a)())()\"\nOutput: [\"(a())()\",\"(a)()()\"]\n</pre> <p>Example 3:</p> <pre>\nInput: s = \")(\"\nOutput: [\"\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 25</code></li> <li><code>s</code> consists of lowercase English letters and parentheses <code>'('</code> and <code>')'</code>.</li> <li>There will be at most <code>20</code> parentheses in <code>s</code>.</li> </ul>"},{"location":"LeetCode_Problems/0302/","title":"302. Smallest Rectangle Enclosing Black Pixels","text":"Problem"},{"location":"LeetCode_Problems/0303/","title":"303. Range Sum Query - Immutable","text":"Problem <p>Given an integer array <code>nums</code>, handle multiple queries of the following type:</p> <ol> <li>Calculate the sum of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> inclusive where <code>left &lt;= right</code>.</li> </ol> <p>Implement the <code>NumArray</code> class:</p> <ul> <li><code>NumArray(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li> <li><code>int sumRange(int left, int right)</code> Returns the sum of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> inclusive (i.e. <code>nums[left] + nums[left + 1] + ... + nums[right]</code>).</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\nOutput\n[null, 1, -1, -3]\n\nExplanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= left &lt;= right &lt; nums.length</code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>sumRange</code>.</li> </ul>"},{"location":"LeetCode_Problems/0304/","title":"304. Range Sum Query 2D - Immutable","text":"Problem <p>Given a 2D matrix <code>matrix</code>, handle multiple queries of the following type:</p> <ul> <li>Calculate the sum of the elements of <code>matrix</code> inside the rectangle defined by its upper left corner <code>(row1, col1)</code> and lower right corner <code>(row2, col2)</code>.</li> </ul> <p>Implement the <code>NumMatrix</code> class:</p> <ul> <li><code>NumMatrix(int[][] matrix)</code> Initializes the object with the integer matrix <code>matrix</code>.</li> <li><code>int sumRegion(int row1, int col1, int row2, int col2)</code> Returns the sum of the elements of <code>matrix</code> inside the rectangle defined by its upper left corner <code>(row1, col1)</code> and lower right corner <code>(row2, col2)</code>.</li> </ul> <p>You must design an algorithm where <code>sumRegion</code> works on <code>O(1)</code> time complexity.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\nOutput\n[null, 8, 11, 12]\n\nExplanation\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>-10<sup>4</sup> &lt;= matrix[i][j] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= row1 &lt;= row2 &lt; m</code></li> <li><code>0 &lt;= col1 &lt;= col2 &lt; n</code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>sumRegion</code>.</li> </ul>"},{"location":"LeetCode_Problems/0305/","title":"305. Number of Islands II","text":"Problem"},{"location":"LeetCode_Problems/0306/","title":"306. Additive Number","text":"Problem <p>An additive number is a string whose digits can form an additive sequence.</p> <p>A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.</p> <p>Given a string containing only digits, return <code>true</code> if it is an additive number or <code>false</code> otherwise.</p> <p>Note: Numbers in the additive sequence cannot have leading zeros, so sequence <code>1, 2, 03</code> or <code>1, 02, 3</code> is invalid.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \"112358\"\nOutput: true\nExplanation: \nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n</pre> <p>Example 2:</p> <pre>\nInput: \"199100199\"\nOutput: true\nExplanation: \nThe additive sequence is: 1, 99, 100, 199.\u00a0\n1 + 99 = 100, 99 + 100 = 199\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num.length &lt;= 35</code></li> <li><code>num</code> consists only of digits.</li> </ul> <p> </p> <p>Follow up: How would you handle overflow for very large input integers?</p>"},{"location":"LeetCode_Problems/0307/","title":"307. Range Sum Query - Mutable","text":"Problem <p>Given an integer array <code>nums</code>, handle multiple queries of the following types:</p> <ol> <li>Update the value of an element in <code>nums</code>.</li> <li>Calculate the sum of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> inclusive where <code>left &lt;= right</code>.</li> </ol> <p>Implement the <code>NumArray</code> class:</p> <ul> <li><code>NumArray(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li> <li><code>void update(int index, int val)</code> Updates the value of <code>nums[index]</code> to be <code>val</code>.</li> <li><code>int sumRange(int left, int right)</code> Returns the sum of the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> inclusive (i.e. <code>nums[left] + nums[left + 1] + ... + nums[right]</code>).</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\nOutput\n[null, 9, null, 8]\n\nExplanation\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2);   // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> <li><code>0 &lt;= index &lt; nums.length</code></li> <li><code>-100 &lt;= val &lt;= 100</code></li> <li><code>0 &lt;= left &lt;= right &lt; nums.length</code></li> <li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>update</code> and <code>sumRange</code>.</li> </ul>"},{"location":"LeetCode_Problems/0308/","title":"308. Range Sum Query 2D - Mutable","text":"Problem"},{"location":"LeetCode_Problems/0309/","title":"309. Best Time to Buy and Sell Stock with Cooldown","text":"Problem <p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p> <p>Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:</p> <ul> <li>After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).</li> </ul> <p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: prices = [1,2,3,0,2]\nOutput: 3\nExplanation: transactions = [buy, sell, cooldown, buy, sell]\n</pre> <p>Example 2:</p> <pre>\nInput: prices = [1]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 5000</code></li> <li><code>0 &lt;= prices[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0310/","title":"310. Minimum Height Trees","text":"Problem <p>A tree is an undirected graph in which any two vertices are connected by\u00a0exactly\u00a0one path. In other words, any connected graph without simple cycles is a tree.</p> <p>Given a tree of <code>n</code> nodes\u00a0labelled from <code>0</code> to <code>n - 1</code>, and an array of\u00a0<code>n - 1</code> <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an undirected edge between the two nodes\u00a0<code>a<sub>i</sub></code> and\u00a0<code>b<sub>i</sub></code> in the tree,\u00a0you can choose any node of the tree as the root. When you select a node <code>x</code> as the root, the result tree has height <code>h</code>. Among all possible rooted trees, those with minimum height (i.e. <code>min(h)</code>)\u00a0 are called minimum height trees (MHTs).</p> <p>Return a list of all MHTs' root labels.\u00a0You can return the answer in any order.</p> <p>The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, edges = [[1,0],[1,2],[1,3]]\nOutput: [1]\nExplanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\nOutput: [3,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>All the pairs <code>(a<sub>i</sub>, b<sub>i</sub>)</code> are distinct.</li> <li>The given input is guaranteed to be a tree and there will be no repeated edges.</li> </ul>"},{"location":"LeetCode_Problems/0311/","title":"311. Sparse Matrix Multiplication","text":"Problem"},{"location":"LeetCode_Problems/0312/","title":"312. Burst Balloons","text":"Problem <p>You are given <code>n</code> balloons, indexed from <code>0</code> to <code>n - 1</code>. Each balloon is painted with a number on it represented by an array <code>nums</code>. You are asked to burst all the balloons.</p> <p>If you burst the <code>i<sup>th</sup></code> balloon, you will get <code>nums[i - 1] * nums[i] * nums[i + 1]</code> coins. If <code>i - 1</code> or <code>i + 1</code> goes out of bounds of the array, then treat it as if there is a balloon with a <code>1</code> painted on it.</p> <p>Return the maximum coins you can collect by bursting the balloons wisely.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,1,5,8]\nOutput: 167\nExplanation:\nnums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,5]\nOutput: 10\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 300</code></li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0313/","title":"313. Super Ugly Number","text":"Problem <p>A super ugly number is a positive integer whose prime factors are in the array <code>primes</code>.</p> <p>Given an integer <code>n</code> and an array of integers <code>primes</code>, return the <code>n<sup>th</sup></code> super ugly number.</p> <p>The <code>n<sup>th</sup></code> super ugly number is guaranteed to fit in a 32-bit signed integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 12, primes = [2,7,13,19]\nOutput: 32\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1, primes = [2,3,5]\nOutput: 1\nExplanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= primes.length &lt;= 100</code></li> <li><code>2 &lt;= primes[i] &lt;= 1000</code></li> <li><code>primes[i]</code> is guaranteed to be a prime number.</li> <li>All the values of <code>primes</code> are unique and sorted in ascending order.</li> </ul>"},{"location":"LeetCode_Problems/0314/","title":"314. Binary Tree Vertical Order Traversal","text":"Problem"},{"location":"LeetCode_Problems/0315/","title":"315. Count of Smaller Numbers After Self","text":"Problem <p>Given an integer array <code>nums</code>, return an integer array <code>counts</code> where <code>counts[i]</code> is the number of smaller elements to the right of <code>nums[i]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,2,6,1]\nOutput: [2,1,1,0]\nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-1]\nOutput: [0]\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [-1,-1]\nOutput: [0,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0316/","title":"316. Remove Duplicate Letters","text":"Problem <p>Given a string <code>s</code>, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"bcabc\"\nOutput: \"abc\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul> <p> </p> <p>Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/</p>"},{"location":"LeetCode_Problems/0317/","title":"317. Shortest Distance from All Buildings","text":"Problem"},{"location":"LeetCode_Problems/0318/","title":"318. Maximum Product of Word Lengths","text":"Problem <p>Given a string array <code>words</code>, return the maximum value of <code>length(word[i]) * length(word[j])</code> where the two words do not share common letters. If no such two words exist, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\nOutput: 16\nExplanation: The two words can be \"abcw\", \"xtfn\".\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\nOutput: 4\nExplanation: The two words can be \"ab\", \"cd\".\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\nOutput: 0\nExplanation: No such pair of words.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 1000</code></li> <li><code>words[i]</code> consists only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0319/","title":"319. Bulb Switcher","text":"Problem <p>There are <code>n</code> bulbs that are initially off. You first turn on all the bulbs, then\u00a0you turn off every second bulb.</p> <p>On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the <code>i<sup>th</sup></code> round, you toggle every <code>i</code> bulb. For the <code>n<sup>th</sup></code> round, you only toggle the last bulb.</p> <p>Return the number of bulbs that are on after <code>n</code> rounds.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3\nOutput: 1\nExplanation: At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off]. \nSo you should return 1 because there is only one bulb is on.</pre> <p>Example 2:</p> <pre>\nInput: n = 0\nOutput: 0\n</pre> <p>Example 3:</p> <pre>\nInput: n = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0320/","title":"320. Generalized Abbreviation","text":"Problem"},{"location":"LeetCode_Problems/0321/","title":"321. Create Maximum Number","text":"Problem <p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> of lengths <code>m</code> and <code>n</code> respectively. <code>nums1</code> and <code>nums2</code> represent the digits of two numbers. You are also given an integer <code>k</code>.</p> <p>Create the maximum number of length <code>k &lt;= m + n</code> from digits of the two numbers. The relative order of the digits from the same array must be preserved.</p> <p>Return an array of the <code>k</code> digits representing the answer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\nOutput: [9,8,6,5,3]\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [6,7], nums2 = [6,0,4], k = 5\nOutput: [6,7,6,0,4]\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [3,9], nums2 = [8,9], k = 3\nOutput: [9,8,9]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == nums1.length</code></li> <li><code>n == nums2.length</code></li> <li><code>1 &lt;= m, n &lt;= 500</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 9</code></li> <li><code>1 &lt;= k &lt;= m + n</code></li> </ul>"},{"location":"LeetCode_Problems/0322/","title":"322. Coin Change","text":"Problem <p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p> <p>Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p> <p>You may assume that you have an infinite number of each kind of coin.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1\n</pre> <p>Example 2:</p> <pre>\nInput: coins = [2], amount = 3\nOutput: -1\n</pre> <p>Example 3:</p> <pre>\nInput: coins = [1], amount = 0\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= coins.length &lt;= 12</code></li> <li><code>1 &lt;= coins[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>0 &lt;= amount &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0323/","title":"323. Number of Connected Components in an Undirected Graph","text":"Problem"},{"location":"LeetCode_Problems/0324/","title":"324. Wiggle Sort II","text":"Problem <p>Given an integer array <code>nums</code>, reorder it such that <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>.</p> <p>You may assume the input array always has a valid answer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,5,1,1,6,4]\nOutput: [1,6,1,5,1,4]\nExplanation: [1,4,1,5,1,6] is also accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,2,2,3,1]\nOutput: [2,3,1,3,1,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 5000</code></li> <li>It is guaranteed that there will be an answer for the given input <code>nums</code>.</li> </ul> <p> </p> <p>Follow Up: Can you do it in <code>O(n)</code> time and/or in-place with <code>O(1)</code> extra space?</p>"},{"location":"LeetCode_Problems/0325/","title":"325. Maximum Size Subarray Sum Equals k","text":"Problem"},{"location":"LeetCode_Problems/0326/","title":"326. Power of Three","text":"Problem <p>Given an integer <code>n</code>, return <code>true</code> if it is a power of three. Otherwise, return <code>false</code>.</p> <p>An integer <code>n</code> is a power of three, if there exists an integer <code>x</code> such that <code>n == 3<sup>x</sup></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 27\nOutput: true\nExplanation: 27 = 3<sup>3</sup>\n</pre> <p>Example 2:</p> <pre>\nInput: n = 0\nOutput: false\nExplanation: There is no x where 3<sup>x</sup> = 0.\n</pre> <p>Example 3:</p> <pre>\nInput: n = -1\nOutput: false\nExplanation: There is no x where 3<sup>x</sup> = (-1).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul> <p> </p> <p>Follow up: Could you solve it without loops/recursion?</p>"},{"location":"LeetCode_Problems/0327/","title":"327. Count of Range Sum","text":"Problem <p>Given an integer array <code>nums</code> and two integers <code>lower</code> and <code>upper</code>, return the number of range sums that lie in <code>[lower, upper]</code> inclusive.</p> <p>Range sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and <code>j</code> inclusive, where <code>i &lt;= j</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-2,5,-1], lower = -2, upper = 2\nOutput: 3\nExplanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0], lower = 0, upper = 0\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>-10<sup>5</sup> &lt;= lower &lt;= upper &lt;= 10<sup>5</sup></code></li> <li>The answer is guaranteed to fit in a 32-bit integer.</li> </ul>"},{"location":"LeetCode_Problems/0328/","title":"328. Odd Even Linked List","text":"Problem <p>Given the <code>head</code> of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.</p> <p>The first node is considered odd, and the second node is even, and so on.</p> <p>Note that the relative order inside both the even and odd groups should remain as it was in the input.</p> <p>You must solve the problem\u00a0in <code>O(1)</code>\u00a0extra space complexity and <code>O(n)</code> time complexity.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5]\nOutput: [1,3,5,2,4]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [2,1,3,5,6,4,7]\nOutput: [2,3,6,7,1,5,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the linked list is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>6</sup> &lt;= Node.val &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0329/","title":"329. Longest Increasing Path in a Matrix","text":"Problem <p>Given an <code>m x n</code> integers <code>matrix</code>, return the length of the longest increasing path in <code>matrix</code>.</p> <p>From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is <code>[1, 2, 6, 9]</code>.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[3,4,5],[3,2,6],[2,2,1]]\nOutput: 4\nExplanation: The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.\n</pre> <p>Example 3:</p> <pre>\nInput: matrix = [[1]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0330/","title":"330. Patching Array","text":"Problem <p>Given a sorted integer array <code>nums</code> and an integer <code>n</code>, add/patch elements to the array such that any number in the range <code>[1, n]</code> inclusive can be formed by the sum of some elements in the array.</p> <p>Return the minimum number of patches required.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3], n = 6\nOutput: 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,5,10], n = 20\nOutput: 2\nExplanation: The two patches can be [2, 4].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,2], n = 5\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> is sorted in ascending order.</li> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0331/","title":"331. Verify Preorder Serialization of a Binary Tree","text":"Problem <p>One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as <code>'#'</code>.</p> <p></p> <p>For example, the above binary tree can be serialized to the string <code>\"9,3,4,#,#,1,#,#,2,#,6,#,#\"</code>, where <code>'#'</code> represents a null node.</p> <p>Given a string of comma-separated values <code>preorder</code>, return <code>true</code> if it is a correct preorder traversal serialization of a binary tree.</p> <p>It is guaranteed that each comma-separated value in the string must be either an integer or a character <code>'#'</code> representing null pointer.</p> <p>You may assume that the input format is always valid.</p> <ul> <li>For example, it could never contain two consecutive commas, such as <code>\"1,,3\"</code>.</li> </ul> <p>Note:\u00a0You are not allowed to reconstruct the tree.</p> <p> </p> <p>Example 1:</p> <pre>Input: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: preorder = \"1,#\"\nOutput: false\n</pre> <p>Example 3:</p> <pre>Input: preorder = \"9,#,#,1\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= preorder.length &lt;= 10<sup>4</sup></code></li> <li><code>preorder</code> consist of integers in the range <code>[0, 100]</code> and <code>'#'</code> separated by commas <code>','</code>.</li> </ul>"},{"location":"LeetCode_Problems/0332/","title":"332. Reconstruct Itinerary","text":"Problem <p>You are given a list of airline <code>tickets</code> where <code>tickets[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.</p> <p>All of the tickets belong to a man who departs from <code>\"JFK\"</code>, thus, the itinerary must begin with <code>\"JFK\"</code>. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.</p> <ul> <li>For example, the itinerary <code>[\"JFK\", \"LGA\"]</code> has a smaller lexical order than <code>[\"JFK\", \"LGB\"]</code>.</li> </ul> <p>You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\nOutput: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\nOutput: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\nExplanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= tickets.length &lt;= 300</code></li> <li><code>tickets[i].length == 2</code></li> <li><code>from<sub>i</sub>.length == 3</code></li> <li><code>to<sub>i</sub>.length == 3</code></li> <li><code>from<sub>i</sub></code> and <code>to<sub>i</sub></code> consist of uppercase English letters.</li> <li><code>from<sub>i</sub> != to<sub>i</sub></code></li> </ul>"},{"location":"LeetCode_Problems/0333/","title":"333. Largest BST Subtree","text":"Problem"},{"location":"LeetCode_Problems/0334/","title":"334. Increasing Triplet Subsequence","text":"Problem <p>Given an integer array <code>nums</code>, return <code>true</code> if there exists a triple of indices <code>(i, j, k)</code> such that <code>i &lt; j &lt; k</code> and <code>nums[i] &lt; nums[j] &lt; nums[k]</code>. If no such indices exists, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4,5]\nOutput: true\nExplanation: Any triplet where i &lt; j &lt; k is valid.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,4,3,2,1]\nOutput: false\nExplanation: No triplet exists.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,1,5,0,4,6]\nOutput: true\nExplanation: The triplet (3, 4, 5) is valid because nums[3] == 0 &lt; nums[4] == 4 &lt; nums[5] == 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>5</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> </ul> <p> </p> <p>Follow up: Could you implement a solution that runs in <code>O(n)</code> time complexity and <code>O(1)</code> space complexity?</p>"},{"location":"LeetCode_Problems/0335/","title":"335. Self Crossing","text":"Problem <p>You are given an array of integers <code>distance</code>.</p> <p>You start at the point <code>(0, 0)</code> on an X-Y plane, and you move <code>distance[0]</code> meters to the north, then <code>distance[1]</code> meters to the west, <code>distance[2]</code> meters to the south, <code>distance[3]</code> meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.</p> <p>Return <code>true</code> if your path crosses itself or <code>false</code> if it does not.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: distance = [2,1,1,2]\nOutput: true\nExplanation: The path crosses itself at the point (0, 1).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: distance = [1,2,3,4]\nOutput: false\nExplanation: The path does not cross itself at any point.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: distance = [1,1,1,2,1]\nOutput: true\nExplanation: The path crosses itself at the point (0, 0).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;=\u00a0distance.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;=\u00a0distance[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0336/","title":"336. Palindrome Pairs","text":"Problem <p>You are given a 0-indexed array of unique strings <code>words</code>.</p> <p>A palindrome pair is a pair of integers <code>(i, j)</code> such that:</p> <ul> <li><code>0 &lt;= i, j &lt; words.length</code>,</li> <li><code>i != j</code>, and</li> <li><code>words[i] + words[j]</code> (the concatenation of the two strings) is a palindrome.</li> </ul> <p>Return an array of all the palindrome pairs of <code>words</code>.</p> <p>You must write an algorithm with\u00a0<code>O(sum of words[i].length)</code>\u00a0runtime complexity.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\nOutput: [[0,1],[1,0],[3,2],[2,4]]\nExplanation: The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"bat\",\"tab\",\"cat\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"battab\",\"tabbat\"]\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"a\",\"\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"a\",\"a\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 5000</code></li> <li><code>0 &lt;= words[i].length &lt;= 300</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0337/","title":"337. House Robber III","text":"Problem <p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called <code>root</code>.</p> <p>Besides the <code>root</code>, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p> <p>Given the <code>root</code> of the binary tree, return the maximum amount of money the thief can rob without alerting the police.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,2,3,null,3,null,1]\nOutput: 7\nExplanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [3,4,5,1,3,null,1]\nOutput: 9\nExplanation: Maximum amount of money the thief can rob = 4 + 5 = 9.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0338/","title":"338. Counting Bits","text":"Problem <p>Given an integer <code>n</code>, return an array <code>ans</code> of length <code>n + 1</code> such that for each <code>i</code> (<code>0 &lt;= i &lt;= n</code>), <code>ans[i]</code> is the number of <code>1</code>'s in the binary representation of <code>i</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --&gt; 0\n1 --&gt; 1\n2 --&gt; 10\n3 --&gt; 11\n4 --&gt; 100\n5 --&gt; 101\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>It is very easy to come up with a solution with a runtime of <code>O(n log n)</code>. Can you do it in linear time <code>O(n)</code> and possibly in a single pass?</li> <li>Can you do it without using any built-in function (i.e., like <code>__builtin_popcount</code> in C++)?</li> </ul>"},{"location":"LeetCode_Problems/0339/","title":"339. Nested List Weight Sum","text":"Problem"},{"location":"LeetCode_Problems/0340/","title":"340. Longest Substring with At Most K Distinct Characters","text":"Problem"},{"location":"LeetCode_Problems/0341/","title":"341. Flatten Nested List Iterator","text":"Problem <p>You are given a nested list of integers <code>nestedList</code>. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.</p> <p>Implement the <code>NestedIterator</code> class:</p> <ul> <li><code>NestedIterator(List&lt;NestedInteger&gt; nestedList)</code> Initializes the iterator with the nested list <code>nestedList</code>.</li> <li><code>int next()</code> Returns the next integer in the nested list.</li> <li><code>boolean hasNext()</code> Returns <code>true</code> if there are still some integers in the nested list and <code>false</code> otherwise.</li> </ul> <p>Your code will be tested with the following pseudocode:</p> <pre>\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n</pre> <p>If <code>res</code> matches the expected flattened list, then your code will be judged as correct.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nestedList = [[1,1],2,[1,1]]\nOutput: [1,1,2,1,1]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n</pre> <p>Example 2:</p> <pre>\nInput: nestedList = [1,[4,[6]]]\nOutput: [1,4,6]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nestedList.length &lt;= 500</code></li> <li>The values of the integers in the nested list is in the range <code>[-10<sup>6</sup>, 10<sup>6</sup>]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0342/","title":"342. Power of Four","text":"Problem <p>Given an integer <code>n</code>, return <code>true</code> if it is a power of four. Otherwise, return <code>false</code>.</p> <p>An integer <code>n</code> is a power of four, if there exists an integer <code>x</code> such that <code>n == 4<sup>x</sup></code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 16\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: n = 5\nOutput: false\n</pre> <p>Example 3:</p> <pre>Input: n = 1\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup> &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul> <p> </p> <p>Follow up: Could you solve it without loops/recursion?</p>"},{"location":"LeetCode_Problems/0343/","title":"343. Integer Break","text":"Problem <p>Given an integer <code>n</code>, break it into the sum of <code>k</code> positive integers, where <code>k &gt;= 2</code>, and maximize the product of those integers.</p> <p>Return the maximum product you can get.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: 1\nExplanation: 2 = 1 + 1, 1 \u00d7 1 = 1.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 10\nOutput: 36\nExplanation: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 58</code></li> </ul>"},{"location":"LeetCode_Problems/0344/","title":"344. Reverse String","text":"Problem <p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p> <p>You must do this by modifying the input array in-place with <code>O(1)</code> extra memory.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n</pre> <p>Example 2:</p> <pre>Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is a printable ascii character.</li> </ul>"},{"location":"LeetCode_Problems/0345/","title":"345. Reverse Vowels of a String","text":"Problem <p>Given a string <code>s</code>, reverse only all the vowels in the string and return it.</p> <p>The vowels are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>, and they can appear in both lower and upper cases, more than once.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"hello\"\nOutput: \"holle\"\n</pre> <p>Example 2:</p> <pre>Input: s = \"leetcode\"\nOutput: \"leotcede\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li> <li><code>s</code> consist of printable ASCII characters.</li> </ul>"},{"location":"LeetCode_Problems/0346/","title":"346. Moving Average from Data Stream","text":"Problem"},{"location":"LeetCode_Problems/0347/","title":"347. Top K Frequent Elements","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the <code>k</code> most frequent elements. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\n</pre> <p>Example 2:</p> <pre>Input: nums = [1], k = 1\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li> <li>It is guaranteed that the answer is unique.</li> </ul> <p> </p> <p>Follow up: Your algorithm's time complexity must be better than <code>O(n log n)</code>, where n is the array's size.</p>"},{"location":"LeetCode_Problems/0348/","title":"348. Design Tic-Tac-Toe","text":"Problem"},{"location":"LeetCode_Problems/0349/","title":"349. Intersection of Two Arrays","text":"Problem <p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2]\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [9,4]\nExplanation: [4,9] is also accepted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0350/","title":"350. Intersection of Two Arrays II","text":"Problem <p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>What if the given array is already sorted? How would you optimize your algorithm?</li> <li>What if <code>nums1</code>'s size is small compared to <code>nums2</code>'s size? Which algorithm is better?</li> <li>What if elements of <code>nums2</code> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li> </ul>"},{"location":"LeetCode_Problems/0351/","title":"351. Android Unlock Patterns","text":"Problem"},{"location":"LeetCode_Problems/0352/","title":"352. Data Stream as Disjoint Intervals","text":"Problem <p>Given a data stream input of non-negative integers <code>a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub></code>, summarize the numbers seen so far as a list of disjoint intervals.</p> <p>Implement the <code>SummaryRanges</code> class:</p> <ul> <li><code>SummaryRanges()</code> Initializes the object with an empty stream.</li> <li><code>void addNum(int value)</code> Adds the integer <code>value</code> to the stream.</li> <li><code>int[][] getIntervals()</code> Returns a summary of the integers in the stream currently as a list of disjoint intervals <code>[start<sub>i</sub>, end<sub>i</sub>]</code>. The answer should be sorted by <code>start<sub>i</sub></code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]\nOutput\n[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n\nExplanation\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1);      // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3);      // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7);      // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= value &lt;= 10<sup>4</sup></code></li> <li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>getIntervals</code>.</li> <li>At most <code>10<sup>2</sup></code>\u00a0calls will be made to\u00a0<code>getIntervals</code>.</li> </ul> <p> </p> <p>Follow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?</p>"},{"location":"LeetCode_Problems/0353/","title":"353. Design Snake Game","text":"Problem"},{"location":"LeetCode_Problems/0354/","title":"354. Russian Doll Envelopes","text":"Problem <p>You are given a 2D array of integers <code>envelopes</code> where <code>envelopes[i] = [w<sub>i</sub>, h<sub>i</sub>]</code> represents the width and the height of an envelope.</p> <p>One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.</p> <p>Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).</p> <p>Note: You cannot rotate an envelope.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: envelopes = [[5,4],[6,4],[6,7],[2,3]]\nOutput: 3\nExplanation: The maximum number of envelopes you can Russian doll is <code>3</code> ([2,3] =&gt; [5,4] =&gt; [6,7]).\n</pre> <p>Example 2:</p> <pre>\nInput: envelopes = [[1,1],[1,1],[1,1]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= envelopes.length &lt;= 10<sup>5</sup></code></li> <li><code>envelopes[i].length == 2</code></li> <li><code>1 &lt;= w<sub>i</sub>, h<sub>i</sub> &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0355/","title":"355. Design Twitter","text":"Problem <p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the <code>10</code> most recent tweets in the user's news feed.</p> <p>Implement the <code>Twitter</code> class:</p> <ul> <li><code>Twitter()</code> Initializes your twitter object.</li> <li><code>void postTweet(int userId, int tweetId)</code> Composes a new tweet with ID <code>tweetId</code> by the user <code>userId</code>. Each call to this function will be made with a unique <code>tweetId</code>.</li> <li><code>List&lt;Integer&gt; getNewsFeed(int userId)</code> Retrieves the <code>10</code> most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.</li> <li><code>void follow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started following the user with ID <code>followeeId</code>.</li> <li><code>void unfollow(int followerId, int followeeId)</code> The user with ID <code>followerId</code> started unfollowing the user with ID <code>followeeId</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\nOutput\n[null, null, [5], null, null, [6, 5], null, [5]]\n\nExplanation\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -&gt; [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -&gt; [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -&gt; [5], since user 1 is no longer following user 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= userId, followerId, followeeId &lt;= 500</code></li> <li><code>0 &lt;= tweetId &lt;= 10<sup>4</sup></code></li> <li>All the tweets have unique IDs.</li> <li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>postTweet</code>, <code>getNewsFeed</code>, <code>follow</code>, and <code>unfollow</code>.</li> </ul>"},{"location":"LeetCode_Problems/0356/","title":"356. Line Reflection","text":"Problem"},{"location":"LeetCode_Problems/0357/","title":"357. Count Numbers with Unique Digits","text":"Problem <p>Given an integer <code>n</code>, return the count of all numbers with unique digits, <code>x</code>, where <code>0 &lt;= x &lt; 10<sup>n</sup></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: 91\nExplanation: The answer should be the total numbers in the range of 0 \u2264 x &lt; 100, excluding 11,22,33,44,55,66,77,88,99\n</pre> <p>Example 2:</p> <pre>\nInput: n = 0\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 8</code></li> </ul>"},{"location":"LeetCode_Problems/0358/","title":"358. Rearrange String k Distance Apart","text":"Problem"},{"location":"LeetCode_Problems/0359/","title":"359. Logger Rate Limiter","text":"Problem"},{"location":"LeetCode_Problems/0360/","title":"360. Sort Transformed Array","text":"Problem"},{"location":"LeetCode_Problems/0361/","title":"361. Bomb Enemy","text":"Problem"},{"location":"LeetCode_Problems/0362/","title":"362. Design Hit Counter","text":"Problem"},{"location":"LeetCode_Problems/0363/","title":"363. Max Sum of Rectangle No Larger Than K","text":"Problem <p>Given an <code>m x n</code> matrix <code>matrix</code> and an integer <code>k</code>, return the max sum of a rectangle in the matrix such that its sum is no larger than <code>k</code>.</p> <p>It is guaranteed that there will be a rectangle with a sum no larger than <code>k</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[1,0,1],[0,-2,3]], k = 2\nOutput: 2\nExplanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).\n</pre> <p>Example 2:</p> <pre>\nInput: matrix = [[2,2,-1]], k = 3\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li> <li><code>-10<sup>5</sup> &lt;= k &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Follow up: What if the number of rows is much larger than the number of columns?</p>"},{"location":"LeetCode_Problems/0364/","title":"364. Nested List Weight Sum II","text":"Problem"},{"location":"LeetCode_Problems/0365/","title":"365. Water and Jug Problem","text":"Problem <p>You are given two jugs with capacities <code>jug1Capacity</code> and <code>jug2Capacity</code> liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly <code>targetCapacity</code> liters using these two jugs.</p> <p>If <code>targetCapacity</code> liters of water are measurable, you must have <code>targetCapacity</code> liters of water contained within one or both buckets by the end.</p> <p>Operations allowed:</p> <ul> <li>Fill any of the jugs with water.</li> <li>Empty any of the jugs.</li> <li>Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\nOutput: true\nExplanation: The famous Die Hard example \n</pre> <p>Example 2:</p> <pre>\nInput: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= jug1Capacity, jug2Capacity, targetCapacity &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0366/","title":"366. Find Leaves of Binary Tree","text":"Problem"},{"location":"LeetCode_Problems/0367/","title":"367. Valid Perfect Square","text":"Problem <p>Given a positive integer num, return <code>true</code> if <code>num</code> is a perfect square or <code>false</code> otherwise.</p> <p>A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.</p> <p>You must not use any built-in library function, such as <code>sqrt</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 16\nOutput: true\nExplanation: We return true because 4 * 4 = 16 and 4 is an integer.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 14\nOutput: false\nExplanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0368/","title":"368. Largest Divisible Subset","text":"Problem <p>Given a set of distinct positive integers <code>nums</code>, return the largest subset <code>answer</code> such that every pair <code>(answer[i], answer[j])</code> of elements in this subset satisfies:</p> <ul> <li><code>answer[i] % answer[j] == 0</code>, or</li> <li><code>answer[j] % answer[i] == 0</code></li> </ul> <p>If there are multiple solutions, return any of them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3]\nOutput: [1,2]\nExplanation: [1,3] is also accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,4,8]\nOutput: [1,2,4,8]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>9</sup></code></li> <li>All the integers in <code>nums</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0369/","title":"369. Plus One Linked List","text":"Problem"},{"location":"LeetCode_Problems/0370/","title":"370. Range Addition","text":"Problem"},{"location":"LeetCode_Problems/0371/","title":"371. Sum of Two Integers","text":"Problem <p>Given two integers <code>a</code> and <code>b</code>, return the sum of the two integers without using the operators <code>+</code> and <code>-</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: a = 1, b = 2\nOutput: 3\n</pre> <p>Example 2:</p> <pre>Input: a = 2, b = 3\nOutput: 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-1000 &lt;= a, b &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0372/","title":"372. Super Pow","text":"Problem <p>Your task is to calculate <code>a<sup>b</sup></code> mod <code>1337</code> where <code>a</code> is a positive integer and <code>b</code> is an extremely large positive integer given in the form of an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: a = 2, b = [3]\nOutput: 8\n</pre> <p>Example 2:</p> <pre>\nInput: a = 2, b = [1,0]\nOutput: 1024\n</pre> <p>Example 3:</p> <pre>\nInput: a = 1, b = [4,3,3,8,5,2]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a &lt;= 2<sup>31</sup> - 1</code></li> <li><code>1 &lt;= b.length &lt;= 2000</code></li> <li><code>0 &lt;= b[i] &lt;= 9</code></li> <li><code>b</code> does not contain leading zeros.</li> </ul>"},{"location":"LeetCode_Problems/0373/","title":"373. Find K Pairs with Smallest Sums","text":"Problem <p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> sorted in non-decreasing\u00a0order and an integer <code>k</code>.</p> <p>Define a pair <code>(u, v)</code> which consists of one element from the first array and one element from the second array.</p> <p>Return the <code>k</code> pairs <code>(u<sub>1</sub>, v<sub>1</sub>), (u<sub>2</sub>, v<sub>2</sub>), ..., (u<sub>k</sub>, v<sub>k</sub>)</code> with the smallest sums.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,7,11], nums2 = [2,4,6], k = 3\nOutput: [[1,2],[1,4],[1,6]]\nExplanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,1,2], nums2 = [1,2,3], k = 2\nOutput: [[1,1],[1,1]]\nExplanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [1,2], nums2 = [3], k = 3\nOutput: [[1,3],[2,3]]\nExplanation: All possible pairs are returned from the sequence: [1,3],[2,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li> <li><code>nums1</code> and <code>nums2</code> both are sorted in non-decreasing order.</li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0374/","title":"374. Guess Number Higher or Lower","text":"Problem <p>We are playing the Guess Game. The game is as follows:</p> <p>I pick a number from <code>1</code> to <code>n</code>. You have to guess which number I picked.</p> <p>Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.</p> <p>You call a pre-defined API <code>int guess(int num)</code>, which returns three possible results:</p> <ul> <li><code>-1</code>: Your guess is higher than the number I picked (i.e. <code>num &gt; pick</code>).</li> <li><code>1</code>: Your guess is lower than the number I picked (i.e. <code>num &lt; pick</code>).</li> <li><code>0</code>: your guess is equal to the number I picked (i.e. <code>num == pick</code>).</li> </ul> <p>Return the number that I picked.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10, pick = 6\nOutput: 6\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1, pick = 1\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: n = 2, pick = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> <li><code>1 &lt;= pick &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/0375/","title":"375. Guess Number Higher or Lower II","text":"Problem <p>We are playing the Guessing Game. The game will work as follows:</p> <ol> <li>I pick a number between\u00a0<code>1</code>\u00a0and\u00a0<code>n</code>.</li> <li>You guess a number.</li> <li>If you guess the right number, you win the game.</li> <li>If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.</li> <li>Every time you guess a wrong number\u00a0<code>x</code>, you will pay\u00a0<code>x</code>\u00a0dollars. If you run out of money, you lose the game.</li> </ol> <p>Given a particular\u00a0<code>n</code>, return\u00a0the minimum amount of money you need to\u00a0guarantee a win regardless of what number I pick.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 10\nOutput: 16\nExplanation: The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n\u00a0   - If this is my number, your total is $0. Otherwise, you pay $7.\n\u00a0   - If my number is higher, the range is [8,10]. Guess 9.\n\u00a0       - If this is my number, your total is $7. Otherwise, you pay $9.\n\u00a0       - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n\u00a0       - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n\u00a0   - If my number is lower, the range is [1,6]. Guess 3.\n\u00a0       - If this is my number, your total is $7. Otherwise, you pay $3.\n\u00a0       - If my number is higher, the range is [4,6]. Guess 5.\n\u00a0           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n\u00a0           - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n\u00a0           - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n\u00a0       - If my number is lower, the range is [1,2]. Guess 1.\n\u00a0           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n\u00a0           - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 0\nExplanation:\u00a0There is only one possible number, so you can guess 1 and not have to pay anything.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 2\nOutput: 1\nExplanation:\u00a0There are two possible numbers, 1 and 2.\n- Guess 1.\n\u00a0   - If this is my number, your total is $0. Otherwise, you pay $1.\n\u00a0   - If my number is higher, it must be 2. Guess 2. Your total is $1.\nThe worst case is that you pay $1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 200</code></li> </ul>"},{"location":"LeetCode_Problems/0376/","title":"376. Wiggle Subsequence","text":"Problem <p>A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.</p> <ul> <li>For example, <code>[1, 7, 4, 9, 2, 5]</code> is a wiggle sequence because the differences <code>(6, -3, 5, -7, 3)</code> alternate between positive and negative.</li> <li>In contrast, <code>[1, 4, 7, 2, 5]</code> and <code>[1, 7, 4, 5, 5]</code> are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.</li> </ul> <p>A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.</p> <p>Given an integer array <code>nums</code>, return the length of the longest wiggle subsequence of <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,7,4,9,2,5]\nOutput: 6\nExplanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,17,5,10,13,15,10,5,16,8]\nOutput: 7\nExplanation: There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,4,5,6,7,8,9]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> </ul> <p> </p> <p>Follow up: Could you solve this in <code>O(n)</code> time?</p>"},{"location":"LeetCode_Problems/0377/","title":"377. Combination Sum IV","text":"Problem <p>Given an array of distinct integers <code>nums</code> and a target integer <code>target</code>, return the number of possible combinations that add up to <code>target</code>.</p> <p>The test cases are generated so that the answer can fit in a 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3], target = 4\nOutput: 7\nExplanation:\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [9], target = 3\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li>All the elements of <code>nums</code> are unique.</li> <li><code>1 &lt;= target &lt;= 1000</code></li> </ul> <p> </p> <p>Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?</p>"},{"location":"LeetCode_Problems/0378/","title":"378. Kth Smallest Element in a Sorted Matrix","text":"Problem <p>Given an <code>n x n</code> <code>matrix</code> where each of the rows and columns is sorted in ascending order, return the <code>k<sup>th</sup></code> smallest element in the matrix.</p> <p>Note that it is the <code>k<sup>th</sup></code> smallest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p> <p>You must find a solution with a memory complexity better than <code>O(n<sup>2</sup>)</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\nOutput: 13\nExplanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8<sup>th</sup> smallest number is 13\n</pre> <p>Example 2:</p> <pre>\nInput: matrix = [[-5]], k = 1\nOutput: -5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 300</code></li> <li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li> <li>All the rows and columns of <code>matrix</code> are guaranteed to be sorted in non-decreasing order.</li> <li><code>1 &lt;= k &lt;= n<sup>2</sup></code></li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>Could you solve the problem with a constant memory (i.e., <code>O(1)</code> memory complexity)?</li> <li>Could you solve the problem in <code>O(n)</code> time complexity? The solution may be too advanced for an interview but you may find reading this paper fun.</li> </ul>"},{"location":"LeetCode_Problems/0379/","title":"379. Design Phone Directory","text":"Problem"},{"location":"LeetCode_Problems/0380/","title":"380. Insert Delete GetRandom O(1)","text":"Problem <p>Implement the <code>RandomizedSet</code> class:</p> <ul> <li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li> <li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li> <li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li> <li><code>int getRandom()</code> Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.</li> </ul> <p>You must implement the functions of the class such that each function works in\u00a0average <code>O(1)</code>\u00a0time complexity.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\nOutput\n[null, true, false, true, 2, true, false, 2]\n\nExplanation\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li> <li>At most <code>2 *\u00a0</code><code>10<sup>5</sup></code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li> <li>There will be at least one element in the data structure when <code>getRandom</code> is called.</li> </ul>"},{"location":"LeetCode_Problems/0381/","title":"381. Insert Delete GetRandom O(1) - Duplicates allowed","text":"Problem <p><code>RandomizedCollection</code> is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.</p> <p>Implement the <code>RandomizedCollection</code> class:</p> <ul> <li><code>RandomizedCollection()</code> Initializes the empty <code>RandomizedCollection</code> object.</li> <li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the multiset, even if the item is already present. Returns <code>true</code> if the item is not present, <code>false</code> otherwise.</li> <li><code>bool remove(int val)</code> Removes an item <code>val</code> from the multiset if present. Returns <code>true</code> if the item is present, <code>false</code> otherwise. Note that if <code>val</code> has multiple occurrences in the multiset, we only remove one of them.</li> <li><code>int getRandom()</code> Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of the same values the multiset contains.</li> </ul> <p>You must implement the functions of the class such that each function works on average <code>O(1)</code> time complexity.</p> <p>Note: The test cases are generated such that <code>getRandom</code> will only be called if there is at least one item in the <code>RandomizedCollection</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]\nOutput\n[null, true, false, true, 2, true, 1]\n\nExplanation\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li> <li>At most <code>2 * 10<sup>5</sup></code> calls in total will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li> <li>There will be at least one element in the data structure when <code>getRandom</code> is called.</li> </ul>"},{"location":"LeetCode_Problems/0382/","title":"382. Linked List Random Node","text":"Problem <p>Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.</p> <p>Implement the <code>Solution</code> class:</p> <ul> <li><code>Solution(ListNode head)</code> Initializes the object with the head of the singly-linked list <code>head</code>.</li> <li><code>int getRandom()</code> Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 3, 2, 2, 3]\n\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the linked list will be in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>getRandom</code>.</li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>What if the linked list is extremely large and its length is unknown to you?</li> <li>Could you solve this efficiently without using extra space?</li> </ul>"},{"location":"LeetCode_Problems/0383/","title":"383. Ransom Note","text":"Problem <p>Given two strings <code>ransomNote</code> and <code>magazine</code>, return <code>true</code> if <code>ransomNote</code> can be constructed by using the letters from <code>magazine</code> and <code>false</code> otherwise.</p> <p>Each letter in <code>magazine</code> can only be used once in <code>ransomNote</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: ransomNote = \"a\", magazine = \"b\"\nOutput: false\n</pre> <p>Example 2:</p> <pre>Input: ransomNote = \"aa\", magazine = \"ab\"\nOutput: false\n</pre> <p>Example 3:</p> <pre>Input: ransomNote = \"aa\", magazine = \"aab\"\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 10<sup>5</sup></code></li> <li><code>ransomNote</code> and <code>magazine</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0384/","title":"384. Shuffle an Array","text":"Problem <p>Given an integer array <code>nums</code>, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.</p> <p>Implement the <code>Solution</code> class:</p> <ul> <li><code>Solution(int[] nums)</code> Initializes the object with the integer array <code>nums</code>.</li> <li><code>int[] reset()</code> Resets the array to its original configuration and returns it.</li> <li><code>int[] shuffle()</code> Returns a random shuffling of the array.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]\nOutput\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle();    // Shuffle the array [1,2,3] and return its result.\n                       // Any permutation of [1,2,3] must be equally likely to be returned.\n                       // Example: return [3, 1, 2]\nsolution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 50</code></li> <li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> <li>All the elements of <code>nums</code> are unique.</li> <li>At most <code>10<sup>4</sup></code> calls in total will be made to <code>reset</code> and <code>shuffle</code>.</li> </ul>"},{"location":"LeetCode_Problems/0385/","title":"385. Mini Parser","text":"Problem <p>Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized <code>NestedInteger</code>.</p> <p>Each element is either an integer or a list whose elements may also be integers or other lists.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"324\"\nOutput: 324\nExplanation: You should return a NestedInteger object which contains a single integer 324.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"[123,[456,[789]]]\"\nOutput: [123,[456,[789]]]\nExplanation: Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\n    i.  An integer containing value 456.\n    ii. A nested list with one element:\n         a. An integer containing value 789\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s</code> consists of digits, square brackets <code>\"[]\"</code>, negative sign <code>'-'</code>, and commas <code>','</code>.</li> <li><code>s</code> is the serialization of valid <code>NestedInteger</code>.</li> <li>All the values in the input are in the range <code>[-10<sup>6</sup>, 10<sup>6</sup>]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0386/","title":"386. Lexicographical Numbers","text":"Problem <p>Given an integer <code>n</code>, return all the numbers in the range <code>[1, n]</code> sorted in lexicographical order.</p> <p>You must write an algorithm that runs in\u00a0<code>O(n)</code>\u00a0time and uses <code>O(1)</code> extra space.\u00a0</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 13\nOutput: [1,10,11,12,13,2,3,4,5,6,7,8,9]\n</pre> <p>Example 2:</p> <pre>Input: n = 2\nOutput: [1,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0387/","title":"387. First Unique Character in a String","text":"Problem <p>Given a string <code>s</code>, find the first non-repeating character in it and return its index. If it does not exist, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"leetcode\"\nOutput: 0\n</pre> <p>Example 2:</p> <pre>Input: s = \"loveleetcode\"\nOutput: 2\n</pre> <p>Example 3:</p> <pre>Input: s = \"aabb\"\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0388/","title":"388. Longest Absolute File Path","text":"Problem <p>Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:</p> <p></p> <p>Here, we have <code>dir</code> as the only directory in the root. <code>dir</code> contains two subdirectories, <code>subdir1</code> and <code>subdir2</code>. <code>subdir1</code> contains a file <code>file1.ext</code> and subdirectory <code>subsubdir1</code>. <code>subdir2</code> contains a subdirectory <code>subsubdir2</code>, which contains a file <code>file2.ext</code>.</p> <p>In text form, it looks like this (with \u27f6 representing the tab character):</p> <pre>\ndir\n\u27f6 subdir1\n\u27f6 \u27f6 file1.ext\n\u27f6 \u27f6 subsubdir1\n\u27f6 subdir2\n\u27f6 \u27f6 subsubdir2\n\u27f6 \u27f6 \u27f6 file2.ext\n</pre> <p>If we were to write this representation in code, it will look like this: <code>\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"</code>. Note that the <code>'\\n'</code> and <code>'\\t'</code> are the new-line and tab characters.</p> <p>Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by <code>'/'s</code>. Using the above example, the absolute path to <code>file2.ext</code> is <code>\"dir/subdir2/subsubdir2/file2.ext\"</code>. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form <code>name.extension</code>, where <code>name</code> and <code>extension</code> consist of letters, digits, and/or spaces.</p> <p>Given a string <code>input</code> representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return <code>0</code>.</p> <p>Note that the testcases are generated such that the file system is valid and no file or directory name has length 0.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\nOutput: 20\nExplanation: We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\nOutput: 32\nExplanation: We have two files:\n\"dir/subdir1/file1.ext\" of length 21\n\"dir/subdir2/subsubdir2/file2.ext\" of length 32.\nWe return 32 since it is the longest absolute path to a file.\n</pre> <p>Example 3:</p> <pre>\nInput: input = \"a\"\nOutput: 0\nExplanation: We do not have any files, just a single directory named \"a\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= input.length &lt;= 10<sup>4</sup></code></li> <li><code>input</code> may contain lowercase or uppercase English letters, a new line character <code>'\\n'</code>, a tab character <code>'\\t'</code>, a dot <code>'.'</code>, a space <code>' '</code>, and digits.</li> <li>All file and directory names have positive length.</li> </ul>"},{"location":"LeetCode_Problems/0389/","title":"389. Find the Difference","text":"Problem <p>You are given two strings <code>s</code> and <code>t</code>.</p> <p>String <code>t</code> is generated by random shuffling string <code>s</code> and then add one more letter at a random position.</p> <p>Return the letter that was added to <code>t</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcd\", t = \"abcde\"\nOutput: \"e\"\nExplanation: 'e' is the letter that was added.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"\", t = \"y\"\nOutput: \"y\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 1000</code></li> <li><code>t.length == s.length + 1</code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0390/","title":"390. Elimination Game","text":"Problem <p>You have a list <code>arr</code> of all integers in the range <code>[1, n]</code> sorted in a strictly increasing order. Apply the following algorithm on <code>arr</code>:</p> <ul> <li>Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.</li> <li>Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.</li> <li>Keep repeating the steps again, alternating left to right and right to left, until a single number remains.</li> </ul> <p>Given the integer <code>n</code>, return the last number that remains in <code>arr</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 9\nOutput: 6\nExplanation:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr = [2, 4, 6, 8]\narr = [2, 6]\narr = [6]\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0391/","title":"391. Perfect Rectangle","text":"Problem <p>Given an array <code>rectangles</code> where <code>rectangles[i] = [x<sub>i</sub>, y<sub>i</sub>, a<sub>i</sub>, b<sub>i</sub>]</code> represents an axis-aligned rectangle. The bottom-left point of the rectangle is <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and the top-right point of it is <code>(a<sub>i</sub>, b<sub>i</sub>)</code>.</p> <p>Return <code>true</code> if all the rectangles together form an exact cover of a rectangular region.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\nOutput: true\nExplanation: All 5 rectangles together form an exact cover of a rectangular region.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\nOutput: false\nExplanation: Because there is a gap between the two rectangular regions.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\nOutput: false\nExplanation: Because two of the rectangles overlap with each other.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rectangles.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>rectangles[i].length == 4</code></li> <li><code>-10<sup>5</sup> &lt;= x<sub>i</sub>, y<sub>i</sub>, a<sub>i</sub>, b<sub>i</sub> &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0392/","title":"392. Is Subsequence","text":"Problem <p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if <code>s</code> is a subsequence of <code>t</code>, or <code>false</code> otherwise.</p> <p>A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code> while <code>\"aec\"</code> is not).</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"abc\", t = \"ahbgdc\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: s = \"axc\", t = \"ahbgdc\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 100</code></li> <li><code>0 &lt;= t.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> and <code>t</code> consist only of lowercase English letters.</li> </ul> <p> </p> <p>Follow up: Suppose there are lots of incoming <code>s</code>, say <code>s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>k</sub></code> where <code>k &gt;= 10<sup>9</sup></code>, and you want to check one by one to see if <code>t</code> has its subsequence. In this scenario, how would you change your code?</p>"},{"location":"LeetCode_Problems/0393/","title":"393. UTF-8 Validation","text":"Problem <p>Given an integer array <code>data</code> representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).</p> <p>A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:</p> <ol> <li>For a 1-byte character, the first bit is a <code>0</code>, followed by its Unicode code.</li> <li>For an n-bytes character, the first <code>n</code> bits are all one's, the <code>n + 1</code> bit is <code>0</code>, followed by <code>n - 1</code> bytes with the most significant <code>2</code> bits being <code>10</code>.</li> </ol> <p>This is how the UTF-8 encoding would work:</p> <pre>\n     Number of Bytes   |        UTF-8 Octet Sequence\n                       |              (binary)\n   --------------------+-----------------------------------------\n            1          |   0xxxxxxx\n            2          |   110xxxxx 10xxxxxx\n            3          |   1110xxxx 10xxxxxx 10xxxxxx\n            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</pre> <p><code>x</code> denotes a bit in the binary form of a byte that may be either <code>0</code> or <code>1</code>.</p> <p>Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: data = [197,130,1]\nOutput: true\nExplanation: data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n</pre> <p>Example 2:</p> <pre>\nInput: data = [235,140,4]\nOutput: false\nExplanation: data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that's correct.\nBut the second continuation byte does not start with 10, so it is invalid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= data.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= data[i] &lt;= 255</code></li> </ul>"},{"location":"LeetCode_Problems/0394/","title":"394. Decode String","text":"Problem <p>Given an encoded string, return its decoded string.</p> <p>The encoding rule is: <code>k[encoded_string]</code>, where the <code>encoded_string</code> inside the square brackets is being repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p> <p>You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>.</p> <p>The test cases are generated so that the length of the output will never exceed <code>10<sup>5</sup></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"3[a]2[bc]\"\nOutput: \"aaabcbc\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"3[a2[c]]\"\nOutput: \"accaccacc\"\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"2[abc]3[cd]ef\"\nOutput: \"abcabccdcdcdef\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 30</code></li> <li><code>s</code> consists of lowercase English letters, digits, and square brackets <code>'[]'</code>.</li> <li><code>s</code> is guaranteed to be a valid input.</li> <li>All the integers in <code>s</code> are in the range <code>[1, 300]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0395/","title":"395. Longest Substring with At Least K Repeating Characters","text":"Problem <p>Given a string <code>s</code> and an integer <code>k</code>, return the length of the longest substring of <code>s</code> such that the frequency of each character in this substring is greater than or equal to <code>k</code>.</p> <p>if no such substring exists, return 0.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aaabb\", k = 3\nOutput: 3\nExplanation: The longest substring is \"aaa\", as 'a' is repeated 3 times.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"ababbc\", k = 2\nOutput: 5\nExplanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of only lowercase English letters.</li> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0396/","title":"396. Rotate Function","text":"Problem <p>You are given an integer array <code>nums</code> of length <code>n</code>.</p> <p>Assume <code>arr<sub>k</sub></code> to be an array obtained by rotating <code>nums</code> by <code>k</code> positions clock-wise. We define the rotation function <code>F</code> on <code>nums</code> as follow:</p> <ul> <li><code>F(k) = 0 * arr<sub>k</sub>[0] + 1 * arr<sub>k</sub>[1] + ... + (n - 1) * arr<sub>k</sub>[n - 1].</code></li> </ul> <p>Return the maximum value of <code>F(0), F(1), ..., F(n-1)</code>.</p> <p>The test cases are generated so that the answer fits in a 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,3,2,6]\nOutput: 26\nExplanation:\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [100]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0397/","title":"397. Integer Replacement","text":"Problem <p>Given a positive integer <code>n</code>,\u00a0you can apply one of the following\u00a0operations:</p> <ol> <li>If <code>n</code> is even, replace <code>n</code> with <code>n / 2</code>.</li> <li>If <code>n</code> is odd, replace <code>n</code> with either <code>n + 1</code> or <code>n - 1</code>.</li> </ol> <p>Return the minimum number of operations needed for <code>n</code> to become <code>1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 8\nOutput: 3\nExplanation: 8 -&gt; 4 -&gt; 2 -&gt; 1\n</pre> <p>Example 2:</p> <pre>\nInput: n = 7\nOutput: 4\nExplanation: 7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\nor 7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n</pre> <p>Example 3:</p> <pre>\nInput: n = 4\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0398/","title":"398. Random Pick Index","text":"Problem <p>Given an integer array <code>nums</code> with possible duplicates, randomly output the index of a given <code>target</code> number. You can assume that the given target number must exist in the array.</p> <p>Implement the <code>Solution</code> class:</p> <ul> <li><code>Solution(int[] nums)</code> Initializes the object with the array <code>nums</code>.</li> <li><code>int pick(int target)</code> Picks a random index <code>i</code> from <code>nums</code> where <code>nums[i] == target</code>. If there are multiple valid i's, then each index should have an equal probability of returning.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]\nOutput\n[null, 4, 0, 2]\n\nExplanation\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>target</code> is an integer from <code>nums</code>.</li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>pick</code>.</li> </ul>"},{"location":"LeetCode_Problems/0399/","title":"399. Evaluate Division","text":"Problem <p>You are given an array of variable pairs <code>equations</code> and an array of real numbers <code>values</code>, where <code>equations[i] = [A<sub>i</sub>, B<sub>i</sub>]</code> and <code>values[i]</code> represent the equation <code>A<sub>i</sub> / B<sub>i</sub> = values[i]</code>. Each <code>A<sub>i</sub></code> or <code>B<sub>i</sub></code> is a string that represents a single variable.</p> <p>You are also given some <code>queries</code>, where <code>queries[j] = [C<sub>j</sub>, D<sub>j</sub>]</code> represents the <code>j<sup>th</sup></code> query where you must find the answer for <code>C<sub>j</sub> / D<sub>j</sub> = ?</code>.</p> <p>Return the answers to all queries. If a single answer cannot be determined, return <code>-1.0</code>.</p> <p>Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.</p> <p>Note:\u00a0The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\nOutput: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\nExplanation: \nGiven: a / b = 2.0, b / c = 3.0\nqueries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? \nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\nnote: x is undefined =&gt; -1.0</pre> <p>Example 2:</p> <pre>\nInput: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\nOutput: [3.75000,0.40000,5.00000,0.20000]\n</pre> <p>Example 3:</p> <pre>\nInput: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\nOutput: [0.50000,2.00000,-1.00000,-1.00000]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= equations.length &lt;= 20</code></li> <li><code>equations[i].length == 2</code></li> <li><code>1 &lt;= A<sub>i</sub>.length, B<sub>i</sub>.length &lt;= 5</code></li> <li><code>values.length == equations.length</code></li> <li><code>0.0 &lt; values[i] &lt;= 20.0</code></li> <li><code>1 &lt;= queries.length &lt;= 20</code></li> <li><code>queries[i].length == 2</code></li> <li><code>1 &lt;= C<sub>j</sub>.length, D<sub>j</sub>.length &lt;= 5</code></li> <li><code>A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub></code> consist of lower case English letters and digits.</li> </ul>"},{"location":"LeetCode_Problems/0400/","title":"400. Nth Digit","text":"Problem <p>Given an integer <code>n</code>, return the <code>n<sup>th</sup></code> digit of the infinite integer sequence <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3\nOutput: 3\n</pre> <p>Example 2:</p> <pre>\nInput: n = 11\nOutput: 0\nExplanation: The 11<sup>th</sup> digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0401/","title":"401. Binary Watch","text":"Problem <p>A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent\u00a0the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.</p> <ul> <li>For example, the below binary watch reads <code>\"4:51\"</code>.</li> </ul> <p></p> <p>Given an integer <code>turnedOn</code> which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.</p> <p>The hour must not contain a leading zero.</p> <ul> <li>For example, <code>\"01:00\"</code> is not valid. It should be <code>\"1:00\"</code>.</li> </ul> <p>The minute must\u00a0consist of two digits and may contain a leading zero.</p> <ul> <li>For example, <code>\"10:2\"</code> is not valid. It should be <code>\"10:02\"</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: turnedOn = 1\nOutput: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n</pre> <p>Example 2:</p> <pre>Input: turnedOn = 9\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= turnedOn &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/0402/","title":"402. Remove K Digits","text":"Problem <p>Given string num representing a non-negative integer <code>num</code>, and an integer <code>k</code>, return the smallest possible integer after removing <code>k</code> digits from <code>num</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n</pre> <p>Example 3:</p> <pre>\nInput: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= num.length &lt;= 10<sup>5</sup></code></li> <li><code>num</code> consists of only digits.</li> <li><code>num</code> does not have any leading zeros except for the zero itself.</li> </ul>"},{"location":"LeetCode_Problems/0403/","title":"403. Frog Jump","text":"Problem <p>A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p> <p>Given a list of <code>stones</code>\u00a0positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be <code>1</code> unit.</p> <p>If the frog's last jump was <code>k</code> units, its next jump must be either <code>k - 1</code>, <code>k</code>, or <code>k + 1</code> units. The frog can only jump in the forward direction.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stones = [0,1,3,5,6,8,12,17]\nOutput: true\nExplanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n</pre> <p>Example 2:</p> <pre>\nInput: stones = [0,1,2,3,4,8,9,11]\nOutput: false\nExplanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= stones.length &lt;= 2000</code></li> <li><code>0 &lt;= stones[i] &lt;= 2<sup>31</sup> - 1</code></li> <li><code>stones[0] == 0</code></li> <li><code>stones</code>\u00a0is sorted in a strictly increasing order.</li> </ul>"},{"location":"LeetCode_Problems/0404/","title":"404. Sum of Left Leaves","text":"Problem <p>Given the <code>root</code> of a binary tree, return the sum of all left leaves.</p> <p>A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,9,20,null,null,15,7]\nOutput: 24\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0405/","title":"405. Convert a Number to Hexadecimal","text":"Problem <p>Given an integer <code>num</code>, return a string representing its hexadecimal representation. For negative integers, two\u2019s complement method is used.</p> <p>All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.</p> <p>Note:\u00a0You are not allowed to use any built-in library method to directly solve this problem.</p> <p> </p> <p>Example 1:</p> <pre>Input: num = 26\nOutput: \"1a\"\n</pre> <p>Example 2:</p> <pre>Input: num = -1\nOutput: \"ffffffff\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-2<sup>31</sup> &lt;= num &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0406/","title":"406. Queue Reconstruction by Height","text":"Problem <p>You are given an array of people, <code>people</code>, which are the attributes of some people in a queue (not necessarily in order). Each <code>people[i] = [h<sub>i</sub>, k<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> person of height <code>h<sub>i</sub></code> with exactly <code>k<sub>i</sub></code> other people in front who have a height greater than or equal to <code>h<sub>i</sub></code>.</p> <p>Reconstruct and return the queue that is represented by the input array <code>people</code>. The returned queue should be formatted as an array <code>queue</code>, where <code>queue[j] = [h<sub>j</sub>, k<sub>j</sub>]</code> is the attributes of the <code>j<sup>th</sup></code> person in the queue (<code>queue[0]</code> is the person at the front of the queue).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nExplanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n</pre> <p>Example 2:</p> <pre>\nInput: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\nOutput: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= people.length &lt;= 2000</code></li> <li><code>0 &lt;= h<sub>i</sub> &lt;= 10<sup>6</sup></code></li> <li><code>0 &lt;= k<sub>i</sub> &lt; people.length</code></li> <li>It is guaranteed that the queue can be reconstructed.</li> </ul>"},{"location":"LeetCode_Problems/0407/","title":"407. Trapping Rain Water II","text":"Problem <p>Given an <code>m x n</code> integer matrix <code>heightMap</code> representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\nOutput: 4\nExplanation: After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\nOutput: 10\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == heightMap.length</code></li> <li><code>n == heightMap[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= heightMap[i][j] &lt;= 2 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0408/","title":"408. Valid Word Abbreviation","text":"Problem"},{"location":"LeetCode_Problems/0409/","title":"409. Longest Palindrome","text":"Problem <p>Given a string <code>s</code> which consists of lowercase or uppercase letters, return the length of the longest palindrome\u00a0that can be built with those letters.</p> <p>Letters are case sensitive, for example,\u00a0<code>\"Aa\"</code> is not considered a palindrome here.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abccccdd\"\nOutput: 7\nExplanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"a\"\nOutput: 1\nExplanation: The longest palindrome that can be built is \"a\", whose length is 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2000</code></li> <li><code>s</code> consists of lowercase and/or uppercase English\u00a0letters only.</li> </ul>"},{"location":"LeetCode_Problems/0410/","title":"410. Split Array Largest Sum","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, split <code>nums</code> into <code>k</code> non-empty subarrays such that the largest sum of any subarray is minimized.</p> <p>Return the minimized largest sum of the split.</p> <p>A subarray is a contiguous part of the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [7,2,5,10,8], k = 2\nOutput: 18\nExplanation: There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4,5], k = 2\nOutput: 9\nExplanation: There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= k &lt;= min(50, nums.length)</code></li> </ul>"},{"location":"LeetCode_Problems/0411/","title":"411. Minimum Unique Word Abbreviation","text":"Problem"},{"location":"LeetCode_Problems/0412/","title":"412. Fizz Buzz","text":"Problem <p>Given an integer <code>n</code>, return a string array <code>answer</code> (1-indexed) where:</p> <ul> <li><code>answer[i] == \"FizzBuzz\"</code> if <code>i</code> is divisible by <code>3</code> and <code>5</code>.</li> <li><code>answer[i] == \"Fizz\"</code> if <code>i</code> is divisible by <code>3</code>.</li> <li><code>answer[i] == \"Buzz\"</code> if <code>i</code> is divisible by <code>5</code>.</li> <li><code>answer[i] == i</code> (as a string) if none of the above conditions are true.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: n = 3\nOutput: [\"1\",\"2\",\"Fizz\"]\n</pre> <p>Example 2:</p> <pre>Input: n = 5\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n</pre> <p>Example 3:</p> <pre>Input: n = 15\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0413/","title":"413. Arithmetic Slices","text":"Problem <p>An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p> <ul> <li>For example, <code>[1,3,5,7,9]</code>, <code>[7,7,7,7]</code>, and <code>[3,-1,-5,-9]</code> are arithmetic sequences.</li> </ul> <p>Given an integer array <code>nums</code>, return the number of arithmetic subarrays of <code>nums</code>.</p> <p>A subarray is a contiguous subsequence of the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: 3\nExplanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0414/","title":"414. Third Maximum Number","text":"Problem <p>Given an integer array <code>nums</code>, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,2,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2]\nOutput: 2\nExplanation:\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,2,3,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> </ul> <p> </p> <p>Follow up: Can you find an <code>O(n)</code> solution?</p>"},{"location":"LeetCode_Problems/0415/","title":"415. Add Strings","text":"Problem <p>Given two non-negative integers, <code>num1</code> and <code>num2</code> represented as string, return the sum of <code>num1</code> and <code>num2</code> as a string.</p> <p>You must solve the problem without using any built-in library for handling large integers (such as <code>BigInteger</code>). You must also not convert the inputs to integers directly.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num1 = \"11\", num2 = \"123\"\nOutput: \"134\"\n</pre> <p>Example 2:</p> <pre>\nInput: num1 = \"456\", num2 = \"77\"\nOutput: \"533\"\n</pre> <p>Example 3:</p> <pre>\nInput: num1 = \"0\", num2 = \"0\"\nOutput: \"0\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup></code></li> <li><code>num1</code> and <code>num2</code> consist of only digits.</li> <li><code>num1</code> and <code>num2</code> don't have any leading zeros except for the zero itself.</li> </ul>"},{"location":"LeetCode_Problems/0416/","title":"416. Partition Equal Subset Sum","text":"Problem <p>Given an integer array <code>nums</code>, return <code>true</code> if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0417/","title":"417. Pacific Atlantic Water Flow","text":"Problem <p>There is an <code>m x n</code> rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.</p> <p>The island is partitioned into a grid of square cells. You are given an <code>m x n</code> integer matrix <code>heights</code> where <code>heights[r][c]</code> represents the height above sea level of the cell at coordinate <code>(r, c)</code>.</p> <p>The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.</p> <p>Return a 2D list of grid coordinates <code>result</code> where <code>result[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> denotes that rain water can flow from cell <code>(r<sub>i</sub>, c<sub>i</sub>)</code> to both the Pacific and Atlantic oceans.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\nOutput: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\nExplanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n[0,4]: [0,4] -&gt; Pacific Ocean \n\u00a0      [0,4] -&gt; Atlantic Ocean\n[1,3]: [1,3] -&gt; [0,3] -&gt; Pacific Ocean \n\u00a0      [1,3] -&gt; [1,4] -&gt; Atlantic Ocean\n[1,4]: [1,4] -&gt; [1,3] -&gt; [0,3] -&gt; Pacific Ocean \n\u00a0      [1,4] -&gt; Atlantic Ocean\n[2,2]: [2,2] -&gt; [1,2] -&gt; [0,2] -&gt; Pacific Ocean \n\u00a0      [2,2] -&gt; [2,3] -&gt; [2,4] -&gt; Atlantic Ocean\n[3,0]: [3,0] -&gt; Pacific Ocean \n\u00a0      [3,0] -&gt; [4,0] -&gt; Atlantic Ocean\n[3,1]: [3,1] -&gt; [3,0] -&gt; Pacific Ocean \n\u00a0      [3,1] -&gt; [4,1] -&gt; Atlantic Ocean\n[4,0]: [4,0] -&gt; Pacific Ocean \n       [4,0] -&gt; Atlantic Ocean\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.\n</pre> <p>Example 2:</p> <pre>\nInput: heights = [[1]]\nOutput: [[0,0]]\nExplanation: The water can flow from the only cell to the Pacific and Atlantic oceans.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == heights.length</code></li> <li><code>n == heights[r].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= heights[r][c] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0418/","title":"418. Sentence Screen Fitting","text":"Problem"},{"location":"LeetCode_Problems/0419/","title":"419. Battleships in a Board","text":"Problem <p>Given an <code>m x n</code> matrix <code>board</code> where each cell is a battleship <code>'X'</code> or empty <code>'.'</code>, return the number of the battleships on <code>board</code>.</p> <p>Battleships can only be placed horizontally or vertically on <code>board</code>. In other words, they can only be made of the shape <code>1 x k</code> (<code>1</code> row, <code>k</code> columns) or <code>k x 1</code> (<code>k</code> rows, <code>1</code> column), where <code>k</code> can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\nOutput: 2\n</pre> <p>Example 2:</p> <pre>\nInput: board = [[\".\"]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>board[i][j]</code> is either <code>'.'</code> or <code>'X'</code>.</li> </ul> <p> </p> <p>Follow up: Could you do it in one-pass, using only <code>O(1)</code> extra memory and without modifying the values <code>board</code>?</p>"},{"location":"LeetCode_Problems/0420/","title":"420. Strong Password Checker","text":"Problem <p>A password is considered strong if the below conditions are all met:</p> <ul> <li>It has at least <code>6</code> characters and at most <code>20</code> characters.</li> <li>It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.</li> <li>It does not contain three repeating characters in a row (i.e., <code>\"Baaabb0\"</code> is weak, but <code>\"Baaba0\"</code> is strong).</li> </ul> <p>Given a string <code>password</code>, return the minimum number of steps required to make <code>password</code> strong. if <code>password</code> is already strong, return <code>0</code>.</p> <p>In one step, you can:</p> <ul> <li>Insert one character to <code>password</code>,</li> <li>Delete one character from <code>password</code>, or</li> <li>Replace one character of <code>password</code> with another character.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: password = \"a\"\nOutput: 5\n</pre> <p>Example 2:</p> <pre>Input: password = \"aA1\"\nOutput: 3\n</pre> <p>Example 3:</p> <pre>Input: password = \"1337C0d3\"\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= password.length &lt;= 50</code></li> <li><code>password</code> consists of letters, digits, dot\u00a0<code>'.'</code> or exclamation mark <code>'!'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0421/","title":"421. Maximum XOR of Two Numbers in an Array","text":"Problem <p>Given an integer array <code>nums</code>, return the maximum result of <code>nums[i] XOR nums[j]</code>, where <code>0 &lt;= i &lt;= j &lt; n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,10,5,25,2,8]\nOutput: 28\nExplanation: The maximum result is 5 XOR 25 = 28.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\nOutput: 127\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0422/","title":"422. Valid Word Square","text":"Problem"},{"location":"LeetCode_Problems/0423/","title":"423. Reconstruct Original Digits from English","text":"Problem <p>Given a string <code>s</code> containing an out-of-order English representation of digits <code>0-9</code>, return the digits in ascending order.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"owoztneoer\"\nOutput: \"012\"\n</pre> <p>Example 2:</p> <pre>Input: s = \"fviefuro\"\nOutput: \"45\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is one of the characters <code>[\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"]</code>.</li> <li><code>s</code> is guaranteed to be valid.</li> </ul>"},{"location":"LeetCode_Problems/0424/","title":"424. Longest Repeating Character Replacement","text":"Problem <p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most <code>k</code> times.</p> <p>Return the length of the longest substring containing the same letter you can get after performing the above operations.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ABAB\", k = 2\nOutput: 4\nExplanation: Replace the two 'A's with two 'B's or vice versa.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"AABABBA\", k = 1\nOutput: 4\nExplanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only uppercase English letters.</li> <li><code>0 &lt;= k &lt;= s.length</code></li> </ul>"},{"location":"LeetCode_Problems/0425/","title":"425. Word Squares","text":"Problem"},{"location":"LeetCode_Problems/0426/","title":"426. Convert Binary Search Tree to Sorted Doubly Linked List","text":"Problem"},{"location":"LeetCode_Problems/0427/","title":"427. Construct Quad Tree","text":"Problem <p>Given a <code>n * n</code> matrix <code>grid</code> of <code>0's</code> and <code>1's</code> only. We want to represent <code>grid</code> with a Quad-Tree.</p> <p>Return the root of the Quad-Tree representing <code>grid</code>.</p> <p>A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:</p> <ul> <li><code>val</code>: True if the node represents a grid of 1's or False if the node represents a grid of 0's. Notice that you can assign the <code>val</code> to True or False when <code>isLeaf</code> is False, and both are accepted in the answer.</li> <li><code>isLeaf</code>: True if the node is a leaf node on the tree or False if the node has four children.</li> </ul> <pre>\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}</pre> <p>We can construct a Quad-Tree from a two-dimensional area using the following steps:</p> <ol> <li>If the current grid has the same value (i.e all <code>1's</code> or all <code>0's</code>) set <code>isLeaf</code> True and set <code>val</code> to the value of the grid and set the four children to Null and stop.</li> <li>If the current grid has different values, set <code>isLeaf</code> to False and set <code>val</code> to any value and divide the current grid into four sub-grids as shown in the photo.</li> <li>Recurse for each of the children with the proper sub-grid.</li> </ol> <p></p> <p>If you want to know more about the Quad-Tree, you can refer to the wiki.</p> <p>Quad-Tree format:</p> <p>You don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where <code>null</code> signifies a path terminator where no node exists below.</p> <p>It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list <code>[isLeaf, val]</code>.</p> <p>If the value of <code>isLeaf</code> or <code>val</code> is True we represent it as 1 in the list <code>[isLeaf, val]</code> and if the value of <code>isLeaf</code> or <code>val</code> is False we represent it as 0.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,1],[1,0]]\nOutput: [[0,1],[1,0],[1,1],[1,1],[1,0]]\nExplanation: The explanation of this example is shown below:\nNotice that 0 represents False and 1 represents True in the photo representing the Quad-Tree.\n\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\nOutput: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nExplanation: All values in the grid are not the same. We divide the grid into four sub-grids.\nThe topLeft, bottomLeft and bottomRight each has the same value.\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\nExplanation is shown in the photo below:\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>n == 2<sup>x</sup></code> where <code>0 &lt;= x &lt;= 6</code></li> </ul>"},{"location":"LeetCode_Problems/0428/","title":"428. Serialize and Deserialize N-ary Tree","text":"Problem"},{"location":"LeetCode_Problems/0429/","title":"429. N-ary Tree Level Order Traversal","text":"Problem <p>Given an n-ary tree, return the level order traversal of its nodes' values.</p> <p>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [[1],[3,2,4],[5,6]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The height of the n-ary tree is less than or equal to <code>1000</code></li> <li>The total number of nodes is between <code>[0, 10<sup>4</sup>]</code></li> </ul>"},{"location":"LeetCode_Problems/0430/","title":"430. Flatten a Multilevel Doubly Linked List","text":"Problem <p>You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.</p> <p>Given the <code>head</code> of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let <code>curr</code> be a node with a child list. The nodes in the child list should appear after <code>curr</code> and before <code>curr.next</code> in the flattened list.</p> <p>Return the <code>head</code> of the flattened list. The nodes in the list must have all of their child pointers set to <code>null</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nExplanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,2,null,3]\nOutput: [1,3,2]\nExplanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:\n\n</pre> <p>Example 3:</p> <pre>\nInput: head = []\nOutput: []\nExplanation: There could be empty list in the input.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of Nodes will not exceed <code>1000</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>How the multilevel linked list is represented in test cases:</p> <p>We use the multilevel linked list from Example 1 above:</p> <pre>\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL</pre> <p>The serialization of each level is as follows:</p> <pre>\n[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\n</pre> <p>To serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:</p> <pre>\n[1,    2,    3, 4, 5, 6, null]\n             |\n[null, null, 7,    8, 9, 10, null]\n                   |\n[            null, 11, 12, null]\n</pre> <p>Merging the serialization of each level and removing trailing nulls we obtain:</p> <pre>\n[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n</pre>"},{"location":"LeetCode_Problems/0431/","title":"431. Encode N-ary Tree to Binary Tree","text":"Problem"},{"location":"LeetCode_Problems/0432/","title":"432. All O`one Data Structure","text":"Problem <p>Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.</p> <p>Implement the <code>AllOne</code> class:</p> <ul> <li><code>AllOne()</code> Initializes the object of the data structure.</li> <li><code>inc(String key)</code> Increments the count of the string <code>key</code> by <code>1</code>. If <code>key</code> does not exist in the data structure, insert it with count <code>1</code>.</li> <li><code>dec(String key)</code> Decrements the count of the string <code>key</code> by <code>1</code>. If the count of <code>key</code> is <code>0</code> after the decrement, remove it from the data structure. It is guaranteed that <code>key</code> exists in the data structure before the decrement.</li> <li><code>getMaxKey()</code> Returns one of the keys with the maximal count. If no element exists, return an empty string <code>\"\"</code>.</li> <li><code>getMinKey()</code> Returns one of the keys with the minimum count. If no element exists, return an empty string <code>\"\"</code>.</li> </ul> <p>Note that each function must run in <code>O(1)</code> average time complexity.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\nOutput\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n\nExplanation\nAllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"leet\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= key.length &lt;= 10</code></li> <li><code>key</code> consists of lowercase English letters.</li> <li>It is guaranteed that for each call to <code>dec</code>, <code>key</code> is existing in the data structure.</li> <li>At most <code>5 * 10<sup>4</sup></code>\u00a0calls will be made to <code>inc</code>, <code>dec</code>, <code>getMaxKey</code>, and <code>getMinKey</code>.</li> </ul>"},{"location":"LeetCode_Problems/0433/","title":"433. Minimum Genetic Mutation","text":"Problem <p>A gene string can be represented by an 8-character long string, with choices from <code>'A'</code>, <code>'C'</code>, <code>'G'</code>, and <code>'T'</code>.</p> <p>Suppose we need to investigate a mutation from a gene string <code>startGene</code> to a gene string <code>endGene</code> where one mutation is defined as one single character changed in the gene string.</p> <ul> <li>For example, <code>\"AACCGGTT\" --&gt; \"AACCGGTA\"</code> is one mutation.</li> </ul> <p>There is also a gene bank <code>bank</code> that records all the valid gene mutations. A gene must be in <code>bank</code> to make it a valid gene string.</p> <p>Given the two gene strings <code>startGene</code> and <code>endGene</code> and the gene bank <code>bank</code>, return the minimum number of mutations needed to mutate from <code>startGene</code> to <code>endGene</code>. If there is no such a mutation, return <code>-1</code>.</p> <p>Note that the starting point is assumed to be valid, so it might not be included in the bank.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"]\nOutput: 1\n</pre> <p>Example 2:</p> <pre>\nInput: startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= bank.length &lt;= 10</code></li> <li><code>startGene.length == endGene.length == bank[i].length == 8</code></li> <li><code>startGene</code>, <code>endGene</code>, and <code>bank[i]</code> consist of only the characters <code>['A', 'C', 'G', 'T']</code>.</li> </ul>"},{"location":"LeetCode_Problems/0434/","title":"434. Number of Segments in a String","text":"Problem <p>Given a string <code>s</code>, return the number of segments in the string.</p> <p>A segment is defined to be a contiguous sequence of non-space characters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"Hello, my name is John\"\nOutput: 5\nExplanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"Hello\"\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= s.length &lt;= 300</code></li> <li><code>s</code> consists of lowercase and uppercase English letters, digits, or one of the following characters <code>\"!@#$%^&amp;*()_+-=',.:\"</code>.</li> <li>The only space character in <code>s</code> is <code>' '</code>.</li> </ul>"},{"location":"LeetCode_Problems/0435/","title":"435. Non-overlapping Intervals","text":"Problem <p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\nOutput: 1\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\n</pre> <p>Example 2:</p> <pre>\nInput: intervals = [[1,2],[1,2],[1,2]]\nOutput: 2\nExplanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n</pre> <p>Example 3:</p> <pre>\nInput: intervals = [[1,2],[2,3]]\nOutput: 0\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li> <li><code>intervals[i].length == 2</code></li> <li><code>-5 * 10<sup>4</sup> &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0436/","title":"436. Find Right Interval","text":"Problem <p>You are given an array of <code>intervals</code>, where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> and each <code>start<sub>i</sub></code> is unique.</p> <p>The right interval for an interval <code>i</code> is an interval <code>j</code> such that <code>start<sub>j</sub> &gt;= end<sub>i</sub></code> and <code>start<sub>j</sub></code> is minimized. Note that <code>i</code> may equal <code>j</code>.</p> <p>Return an array of right interval indices for each interval <code>i</code>. If no right interval exists for interval <code>i</code>, then put <code>-1</code> at index <code>i</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: intervals = [[1,2]]\nOutput: [-1]\nExplanation: There is only one interval in the collection, so it outputs -1.\n</pre> <p>Example 2:</p> <pre>\nInput: intervals = [[3,4],[2,3],[1,2]]\nOutput: [-1,0,1]\nExplanation: There is no right interval for [3,4].\nThe right interval for [2,3] is [3,4] since start<sub>0</sub> = 3 is the smallest start that is &gt;= end<sub>1</sub> = 3.\nThe right interval for [1,2] is [2,3] since start<sub>1</sub> = 2 is the smallest start that is &gt;= end<sub>2</sub> = 2.\n</pre> <p>Example 3:</p> <pre>\nInput: intervals = [[1,4],[2,3],[3,4]]\nOutput: [-1,2,-1]\nExplanation: There is no right interval for [1,4] and [3,4].\nThe right interval for [2,3] is [3,4] since start<sub>2</sub> = 3 is the smallest start that is &gt;= end<sub>1</sub> = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= intervals.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>intervals[i].length == 2</code></li> <li><code>-10<sup>6</sup> &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>6</sup></code></li> <li>The start point of each interval is unique.</li> </ul>"},{"location":"LeetCode_Problems/0437/","title":"437. Path Sum III","text":"Problem <p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return the number of paths where the sum of the values\u00a0along the path equals <code>targetSum</code>.</p> <p>The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\nOutput: 3\nExplanation: The paths that sum to 8 are shown.\n</pre> <p>Example 2:</p> <pre>\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 1000]</code>.</li> <li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li> <li><code>-1000 &lt;= targetSum &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0438/","title":"438. Find All Anagrams in a String","text":"Problem <p>Given two strings <code>s</code> and <code>p</code>, return an array of all the start indices of <code>p</code>'s anagrams in <code>s</code>. You may return the answer in any order.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"cbaebabacd\", p = \"abc\"\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abab\", p = \"ab\"\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>s</code> and <code>p</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0439/","title":"439. Ternary Expression Parser","text":"Problem"},{"location":"LeetCode_Problems/0440/","title":"440. K-th Smallest in Lexicographical Order","text":"Problem <p>Given two integers <code>n</code> and <code>k</code>, return the <code>k<sup>th</sup></code> lexicographically smallest integer in the range <code>[1, n]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 13, k = 2\nOutput: 10\nExplanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1, k = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0441/","title":"441. Arranging Coins","text":"Problem <p>You have <code>n</code> coins and you want to build a staircase with these coins. The staircase consists of <code>k</code> rows where the <code>i<sup>th</sup></code> row has exactly <code>i</code> coins. The last row of the staircase may be incomplete.</p> <p>Given the integer <code>n</code>, return the number of complete rows of the staircase you will build.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5\nOutput: 2\nExplanation: Because the 3<sup>rd</sup> row is incomplete, we return 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 8\nOutput: 3\nExplanation: Because the 4<sup>th</sup> row is incomplete, we return 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0442/","title":"442. Find All Duplicates in an Array","text":"Problem <p>Given an integer array <code>nums</code> of length <code>n</code> where all the integers of <code>nums</code> are in the range <code>[1, n]</code> and each integer appears once or twice, return an array of all the integers that appears twice.</p> <p>You must write an algorithm that runs in\u00a0<code>O(n)\u00a0</code>time and uses only constant extra space.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [4,3,2,7,8,2,3,1]\nOutput: [2,3]\n</pre> <p>Example 2:</p> <pre>Input: nums = [1,1,2]\nOutput: [1]\n</pre> <p>Example 3:</p> <pre>Input: nums = [1]\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= n</code></li> <li>Each element in <code>nums</code> appears once or twice.</li> </ul>"},{"location":"LeetCode_Problems/0443/","title":"443. String Compression","text":"Problem <p>Given an array of characters <code>chars</code>, compress it using the following algorithm:</p> <p>Begin with an empty string <code>s</code>. For each group of consecutive repeating characters in <code>chars</code>:</p> <ul> <li>If the group's length is <code>1</code>, append the character to <code>s</code>.</li> <li>Otherwise, append the character followed by the group's length.</li> </ul> <p>The compressed string <code>s</code> should not be returned separately, but instead, be stored in the input character array <code>chars</code>. Note that group lengths that are <code>10</code> or longer will be split into multiple characters in <code>chars</code>.</p> <p>After you are done modifying the input array, return the new length of the array.</p> <p>You must write an algorithm that uses only constant extra space.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n</pre> <p>Example 2:</p> <pre>\nInput: chars = [\"a\"]\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\nExplanation: The only group is \"a\", which remains uncompressed since it's a single character.\n</pre> <p>Example 3:</p> <pre>\nInput: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= chars.length &lt;= 2000</code></li> <li><code>chars[i]</code> is a lowercase English letter, uppercase English letter, digit, or symbol.</li> </ul>"},{"location":"LeetCode_Problems/0444/","title":"444. Sequence Reconstruction","text":"Problem"},{"location":"LeetCode_Problems/0445/","title":"445. Add Two Numbers II","text":"Problem <p>You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p> <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: l1 = [7,2,4,3], l2 = [5,6,4]\nOutput: [7,8,0,7]\n</pre> <p>Example 2:</p> <pre>\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [8,0,7]\n</pre> <p>Example 3:</p> <pre>\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li>It is guaranteed that the list represents a number that does not have leading zeros.</li> </ul> <p> </p> <p>Follow up:\u00a0Could you solve it without reversing the input lists?</p>"},{"location":"LeetCode_Problems/0446/","title":"446. Arithmetic Slices II - Subsequence","text":"Problem <p>Given an integer array <code>nums</code>, return the number of all the arithmetic subsequences of <code>nums</code>.</p> <p>A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p> <ul> <li>For example, <code>[1, 3, 5, 7, 9]</code>, <code>[7, 7, 7, 7]</code>, and <code>[3, -1, -5, -9]</code> are arithmetic sequences.</li> <li>For example, <code>[1, 1, 2, 5, 7]</code> is not an arithmetic sequence.</li> </ul> <p>A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.</p> <ul> <li>For example, <code>[2,5,10]</code> is a subsequence of <code>[1,2,1,2,4,1,5,10]</code>.</li> </ul> <p>The test cases are generated so that the answer fits in 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,4,6,8,10]\nOutput: 7\nExplanation: All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [7,7,7,7,7]\nOutput: 16\nExplanation: Any subsequence of this array is arithmetic.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1\u00a0 &lt;= nums.length &lt;= 1000</code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0447/","title":"447. Number of Boomerangs","text":"Problem <p>You are given <code>n</code> <code>points</code> in the plane that are all distinct, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>. A boomerang is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code> (the order of the tuple matters).</p> <p>Return the number of boomerangs.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: points = [[0,0],[1,0],[2,0]]\nOutput: 2\nExplanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].\n</pre> <p>Example 2:</p> <pre>\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: points = [[1,1]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == points.length</code></li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>points[i].length == 2</code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>All the points are unique.</li> </ul>"},{"location":"LeetCode_Problems/0448/","title":"448. Find All Numbers Disappeared in an Array","text":"Problem <p>Given an array <code>nums</code> of <code>n</code> integers where <code>nums[i]</code> is in the range <code>[1, n]</code>, return an array of all the integers in the range <code>[1, n]</code> that do not appear in <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]\n</pre> <p>Example 2:</p> <pre>Input: nums = [1,1]\nOutput: [2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= n</code></li> </ul> <p> </p> <p>Follow up: Could you do it without extra space and in <code>O(n)</code> runtime? You may assume the returned list does not count as extra space.</p>"},{"location":"LeetCode_Problems/0449/","title":"449. Serialize and Deserialize BST","text":"Problem <p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p> <p>Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p> <p>The encoded string should be as compact as possible.</p> <p> </p> <p>Example 1:</p> <pre>Input: root = [2,1,3]\nOutput: [2,1,3]\n</pre> <p>Example 2:</p> <pre>Input: root = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>The input tree is guaranteed to be a binary search tree.</li> </ul>"},{"location":"LeetCode_Problems/0450/","title":"450. Delete Node in a BST","text":"Problem <p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p> <p>Basically, the deletion can be divided into two stages:</p> <ol> <li>Search for a node to remove.</li> <li>If the node is found, delete the node.</li> </ol> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [5,3,6,2,4,null,7], key = 3\nOutput: [5,4,6,2,null,null,7]\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n\n</pre> <p>Example 2:</p> <pre>\nInput: root = [5,3,6,2,4,null,7], key = 0\nOutput: [5,3,6,2,4,null,7]\nExplanation: The tree does not contain a node with value = 0.\n</pre> <p>Example 3:</p> <pre>\nInput: root = [], key = 0\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> <li>Each node has a unique value.</li> <li><code>root</code> is a valid binary search tree.</li> <li><code>-10<sup>5</sup> &lt;= key &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Follow up: Could you solve it with time complexity <code>O(height of tree)</code>?</p>"},{"location":"LeetCode_Problems/0451/","title":"451. Sort Characters By Frequency","text":"Problem <p>Given a string <code>s</code>, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.</p> <p>Return the sorted string. If there are multiple answers, return any of them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"tree\"\nOutput: \"eert\"\nExplanation: 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"cccaaa\"\nOutput: \"aaaccc\"\nExplanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\nNote that \"cacaca\" is incorrect, as the same characters must be together.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"Aabb\"\nOutput: \"bbAa\"\nExplanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li> <li><code>s</code> consists of uppercase and lowercase English letters and digits.</li> </ul>"},{"location":"LeetCode_Problems/0452/","title":"452. Minimum Number of Arrows to Burst Balloons","text":"Problem <p>There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array <code>points</code> where <code>points[i] = [x<sub>start</sub>, x<sub>end</sub>]</code> denotes a balloon whose horizontal diameter stretches between <code>x<sub>start</sub></code> and <code>x<sub>end</sub></code>. You do not know the exact y-coordinates of the balloons.</p> <p>Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with <code>x<sub>start</sub></code> and <code>x<sub>end</sub></code> is burst by an arrow shot at <code>x</code> if <code>x<sub>start</sub> &lt;= x &lt;= x<sub>end</sub></code>. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.</p> <p>Given the array <code>points</code>, return the minimum number of arrows that must be shot to burst all balloons.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: points = [[10,16],[2,8],[1,6],[7,12]]\nOutput: 2\nExplanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n</pre> <p>Example 2:</p> <pre>\nInput: points = [[1,2],[3,4],[5,6],[7,8]]\nOutput: 4\nExplanation: One arrow needs to be shot for each balloon for a total of 4 arrows.\n</pre> <p>Example 3:</p> <pre>\nInput: points = [[1,2],[2,3],[3,4],[4,5]]\nOutput: 2\nExplanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= points.length &lt;= 10<sup>5</sup></code></li> <li><code>points[i].length == 2</code></li> <li><code>-2<sup>31</sup> &lt;= x<sub>start</sub> &lt; x<sub>end</sub> &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0453/","title":"453. Minimum Moves to Equal Array Elements","text":"Problem <p>Given an integer array <code>nums</code> of size <code>n</code>, return the minimum number of moves required to make all array elements equal.</p> <p>In one move, you can increment <code>n - 1</code> elements of the array by <code>1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 3\nExplanation: Only three moves are needed (remember each move increments two elements):\n[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li>The answer is guaranteed to fit in a 32-bit integer.</li> </ul>"},{"location":"LeetCode_Problems/0454/","title":"454. 4Sum II","text":"Problem <p>Given four integer arrays <code>nums1</code>, <code>nums2</code>, <code>nums3</code>, and <code>nums4</code> all of length <code>n</code>, return the number of tuples <code>(i, j, k, l)</code> such that:</p> <ul> <li><code>0 &lt;= i, j, k, l &lt; n</code></li> <li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\nOutput: 2\nExplanation:\nThe two tuples are:\n1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums1.length</code></li> <li><code>n == nums2.length</code></li> <li><code>n == nums3.length</code></li> <li><code>n == nums4.length</code></li> <li><code>1 &lt;= n &lt;= 200</code></li> <li><code>-2<sup>28</sup> &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 2<sup>28</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0455/","title":"455. Assign Cookies","text":"Problem <p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</p> <p>Each child <code>i</code> has a greed factor <code>g[i]</code>, which is the minimum size of a cookie that the child will be content with; and each cookie <code>j</code> has a size <code>s[j]</code>. If <code>s[j] &gt;= g[i]</code>, we can assign the cookie <code>j</code> to the child <code>i</code>, and the child <code>i</code> will be content. Your goal is to maximize the number of your content children and output the maximum number.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: g = [1,2,3], s = [1,1]\nOutput: 1\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n</pre> <p>Example 2:</p> <pre>\nInput: g = [1,2], s = [1,2,3]\nOutput: 2\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= g.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= g[i], s[j] &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0456/","title":"456. 132 Pattern","text":"Problem <p>Given an array of <code>n</code> integers <code>nums</code>, a 132 pattern is a subsequence of three integers <code>nums[i]</code>, <code>nums[j]</code> and <code>nums[k]</code> such that <code>i &lt; j &lt; k</code> and <code>nums[i] &lt; nums[k] &lt; nums[j]</code>.</p> <p>Return <code>true</code> if there is a 132 pattern in <code>nums</code>, otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: false\nExplanation: There is no 132 pattern in the sequence.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,1,4,2]\nOutput: true\nExplanation: There is a 132 pattern in the sequence: [1, 4, 2].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [-1,3,2,0]\nOutput: true\nExplanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0457/","title":"457. Circular Array Loop","text":"Problem <p>You are playing a game involving a circular array of non-zero integers <code>nums</code>. Each <code>nums[i]</code> denotes the number of indices forward/backward you must move if you are located at index <code>i</code>:</p> <ul> <li>If <code>nums[i]</code> is positive, move <code>nums[i]</code> steps forward, and</li> <li>If <code>nums[i]</code> is negative, move <code>nums[i]</code> steps backward.</li> </ul> <p>Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.</p> <p>A cycle in the array consists of a sequence of indices <code>seq</code> of length <code>k</code> where:</p> <ul> <li>Following the movement rules above results in the repeating index sequence <code>seq[0] -&gt; seq[1] -&gt; ... -&gt; seq[k - 1] -&gt; seq[0] -&gt; ...</code></li> <li>Every <code>nums[seq[j]]</code> is either all positive or all negative.</li> <li><code>k &gt; 1</code></li> </ul> <p>Return <code>true</code> if there is a cycle in <code>nums</code>, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [2,-1,1,2,2]\nOutput: true\nExplanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --&gt; 2 --&gt; 3 --&gt; 0 --&gt; ..., and all of its nodes are white (jumping in the same direction).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: nums = [-1,-2,-3,-4,-5,6]\nOutput: false\nExplanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nThe only cycle is of size 1, so we return false.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: nums = [1,-1,5,1,4]\nOutput: true\nExplanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\nWe can see the cycle 0 --&gt; 1 --&gt; 0 --&gt; ..., and while it is of size &gt; 1, it has a node jumping forward and a node jumping backward, so it is not a cycle.\nWe can see the cycle 3 --&gt; 4 --&gt; 3 --&gt; ..., and all of its nodes are white (jumping in the same direction).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> <li><code>nums[i] != 0</code></li> </ul> <p> </p> <p>Follow up: Could you solve it in <code>O(n)</code> time complexity and <code>O(1)</code> extra space complexity?</p>"},{"location":"LeetCode_Problems/0458/","title":"458. Poor Pigs","text":"Problem <p>There are <code>buckets</code> buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have <code>minutesToTest</code> minutes to determine which bucket is poisonous.</p> <p>You can feed the pigs according to these steps:</p> <ol> <li>Choose some live pigs to feed.</li> <li>For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.</li> <li>Wait for <code>minutesToDie</code> minutes. You may not feed any other pigs during this time.</li> <li>After <code>minutesToDie</code> minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.</li> <li>Repeat this process until you run out of time.</li> </ol> <p>Given <code>buckets</code>, <code>minutesToDie</code>, and <code>minutesToTest</code>, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 15\nOutput: 2\nExplanation: We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\nAt time 15, there are 4 possible outcomes:\n- If only the first pig dies, then bucket 1 must be poisonous.\n- If only the second pig dies, then bucket 3 must be poisonous.\n- If both pigs die, then bucket 2 must be poisonous.\n- If neither pig dies, then bucket 4 must be poisonous.\n</pre> <p>Example 2:</p> <pre>\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 30\nOutput: 2\nExplanation: We can determine the poisonous bucket as follows:\nAt time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\nAt time 15, there are 2 possible outcomes:\n- If either pig dies, then the poisonous bucket is the one it was fed.\n- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\nAt time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= buckets &lt;= 1000</code></li> <li><code>1 &lt;=\u00a0minutesToDie &lt;=\u00a0minutesToTest &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0459/","title":"459. Repeated Substring Pattern","text":"Problem <p>Given a string <code>s</code>, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abab\"\nOutput: true\nExplanation: It is the substring \"ab\" twice.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aba\"\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"abcabcabcabc\"\nOutput: true\nExplanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0460/","title":"460. LFU Cache","text":"Problem <p>Design and implement a data structure for a Least Frequently Used (LFU) cache.</p> <p>Implement the <code>LFUCache</code> class:</p> <ul> <li><code>LFUCache(int capacity)</code> Initializes the object with the <code>capacity</code> of the data structure.</li> <li><code>int get(int key)</code> Gets the value of the <code>key</code> if the <code>key</code> exists in the cache. Otherwise, returns <code>-1</code>.</li> <li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if present, or inserts the <code>key</code> if not already present. When the cache reaches its <code>capacity</code>, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used <code>key</code> would be invalidated.</li> </ul> <p>To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.</p> <p>When a key is first inserted into the cache, its use counter is set to <code>1</code> (due to the <code>put</code> operation). The use counter for a key in the cache is incremented either a <code>get</code> or <code>put</code> operation is called on it.</p> <p>The functions\u00a0<code>get</code>\u00a0and\u00a0<code>put</code>\u00a0must each run in <code>O(1)</code> average time complexity.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n\nExplanation\n// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1);      // return 1\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n\u00a0                // cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1);      // return -1 (not found)\nlfu.get(3);      // return 3\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4);      // return 4\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= capacity\u00a0&lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= key &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= value &lt;= 10<sup>9</sup></code></li> <li>At most <code>2 * 10<sup>5</sup></code>\u00a0calls will be made to <code>get</code> and <code>put</code>.</li> </ul> <p> </p> <p> </p>"},{"location":"LeetCode_Problems/0461/","title":"461. Hamming Distance","text":"Problem <p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p> <p>Given two integers <code>x</code> and <code>y</code>, return the Hamming distance between them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: x = 1, y = 4\nOutput: 2\nExplanation:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       \u2191   \u2191\nThe above arrows point to positions where the corresponding bits are different.\n</pre> <p>Example 2:</p> <pre>\nInput: x = 3, y = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;=\u00a0x, y &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0462/","title":"462. Minimum Moves to Equal Array Elements II","text":"Problem <p>Given an integer array <code>nums</code> of size <code>n</code>, return the minimum number of moves required to make all array elements equal.</p> <p>In one move, you can increment or decrement an element of the array by <code>1</code>.</p> <p>Test cases are designed so that the answer will fit in a 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 2\nExplanation:\nOnly two moves are needed (remember each move increments or decrements one element):\n[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,10,2,9]\nOutput: 16\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0463/","title":"463. Island Perimeter","text":"Problem <p>You are given <code>row x col</code> <code>grid</code> representing a map where <code>grid[i][j] = 1</code> represents\u00a0land and <code>grid[i][j] = 0</code> represents water.</p> <p>Grid cells are connected horizontally/vertically (not diagonally). The <code>grid</code> is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).</p> <p>The island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\nOutput: 16\nExplanation: The perimeter is the 16 yellow stripes in the image above.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[1]]\nOutput: 4\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [[1,0]]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>row == grid.length</code></li> <li><code>col == grid[i].length</code></li> <li><code>1 &lt;= row, col &lt;= 100</code></li> <li><code>grid[i][j]</code> is <code>0</code> or <code>1</code>.</li> <li>There is exactly one island in <code>grid</code>.</li> </ul>"},{"location":"LeetCode_Problems/0464/","title":"464. Can I Win","text":"Problem <p>In the \"100 game\" two players take turns adding, to a running total, any integer from <code>1</code> to <code>10</code>. The player who first causes the running total to reach or exceed 100 wins.</p> <p>What if we change the game so that players cannot re-use integers?</p> <p>For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total &gt;= 100.</p> <p>Given two integers <code>maxChoosableInteger</code> and <code>desiredTotal</code>, return <code>true</code> if the first player to move can force a win, otherwise, return <code>false</code>. Assume both players play optimally.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: maxChoosableInteger = 10, desiredTotal = 11\nOutput: false\nExplanation:\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is &gt;= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.\n</pre> <p>Example 2:</p> <pre>\nInput: maxChoosableInteger = 10, desiredTotal = 0\nOutput: true\n</pre> <p>Example 3:</p> <pre>\nInput: maxChoosableInteger = 10, desiredTotal = 1\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= maxChoosableInteger &lt;= 20</code></li> <li><code>0 &lt;= desiredTotal &lt;= 300</code></li> </ul>"},{"location":"LeetCode_Problems/0465/","title":"465. Optimal Account Balancing","text":"Problem"},{"location":"LeetCode_Problems/0466/","title":"466. Count The Repetitions","text":"Problem <p>We define <code>str = [s, n]</code> as the string <code>str</code> which consists of the string <code>s</code> concatenated <code>n</code> times.</p> <ul> <li>For example, <code>str == [\"abc\", 3] ==\"abcabcabc\"</code>.</li> </ul> <p>We define that string <code>s1</code> can be obtained from string <code>s2</code> if we can remove some characters from <code>s2</code> such that it becomes <code>s1</code>.</p> <ul> <li>For example, <code>s1 = \"abc\"</code> can be obtained from <code>s2 = \"abdbec\"</code> based on our definition by removing the bolded underlined characters.</li> </ul> <p>You are given two strings <code>s1</code> and <code>s2</code> and two integers <code>n1</code> and <code>n2</code>. You have the two strings <code>str1 = [s1, n1]</code> and <code>str2 = [s2, n2]</code>.</p> <p>Return the maximum integer <code>m</code> such that <code>str = [str2, m]</code> can be obtained from <code>str1</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\nOutput: 2\n</pre> <p>Example 2:</p> <pre>Input: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length &lt;= 100</code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li> <li><code>1 &lt;= n1, n2 &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0467/","title":"467. Unique Substrings in Wraparound String","text":"Problem <p>We define the string <code>base</code> to be the infinite wraparound string of <code>\"abcdefghijklmnopqrstuvwxyz\"</code>, so <code>base</code> will look like this:</p> <ul> <li><code>\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\"</code>.</li> </ul> <p>Given a string <code>s</code>, return the number of unique non-empty substrings of <code>s</code> are present in <code>base</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"a\"\nOutput: 1\nExplanation: Only the substring \"a\" of s is in base.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"cac\"\nOutput: 2\nExplanation: There are two substrings (\"a\", \"c\") of s in base.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"zab\"\nOutput: 6\nExplanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of s in base.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0468/","title":"468. Validate IP Address","text":"Problem <p>Given a string <code>queryIP</code>, return <code>\"IPv4\"</code> if IP is a valid IPv4 address, <code>\"IPv6\"</code> if IP is a valid IPv6 address or <code>\"Neither\"</code> if IP is not a correct IP of any type.</p> <p>A valid IPv4 address is an IP in the form <code>\"x<sub>1</sub>.x<sub>2</sub>.x<sub>3</sub>.x<sub>4</sub>\"</code> where <code>0 &lt;= x<sub>i</sub> &lt;= 255</code> and <code>x<sub>i</sub></code> cannot contain leading zeros. For example, <code>\"192.168.1.1\"</code> and <code>\"192.168.1.0\"</code> are valid IPv4 addresses while <code>\"192.168.01.1\"</code>, <code>\"192.168.1.00\"</code>, and <code>\"192.168@1.1\"</code> are invalid IPv4 addresses.</p> <p>A valid IPv6 address is an IP in the form <code>\"x<sub>1</sub>:x<sub>2</sub>:x<sub>3</sub>:x<sub>4</sub>:x<sub>5</sub>:x<sub>6</sub>:x<sub>7</sub>:x<sub>8</sub>\"</code> where:</p> <ul> <li><code>1 &lt;= x<sub>i</sub>.length &lt;= 4</code></li> <li><code>x<sub>i</sub></code> is a hexadecimal string which may contain digits, lowercase English letter (<code>'a'</code> to <code>'f'</code>) and upper-case English letters (<code>'A'</code> to <code>'F'</code>).</li> <li>Leading zeros are allowed in <code>x<sub>i</sub></code>.</li> </ul> <p>For example, \"<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334\"</code> and \"<code>2001:db8:85a3:0:0:8A2E:0370:7334\"</code> are valid IPv6 addresses, while \"<code>2001:0db8:85a3::8A2E:037j:7334\"</code> and \"<code>02001:0db8:85a3:0000:0000:8a2e:0370:7334\"</code> are invalid IPv6 addresses.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: queryIP = \"172.16.254.1\"\nOutput: \"IPv4\"\nExplanation: This is a valid IPv4 address, return \"IPv4\".\n</pre> <p>Example 2:</p> <pre>\nInput: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\nOutput: \"IPv6\"\nExplanation: This is a valid IPv6 address, return \"IPv6\".\n</pre> <p>Example 3:</p> <pre>\nInput: queryIP = \"256.256.256.256\"\nOutput: \"Neither\"\nExplanation: This is neither a IPv4 address nor a IPv6 address.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>queryIP</code> consists only of English letters, digits and the characters <code>'.'</code> and <code>':'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0469/","title":"469. Convex Polygon","text":"Problem"},{"location":"LeetCode_Problems/0470/","title":"470. Implement Rand10() Using Rand7()","text":"Problem <p>Given the API <code>rand7()</code> that generates a uniform random integer in the range <code>[1, 7]</code>, write a function <code>rand10()</code> that generates a uniform random integer in the range <code>[1, 10]</code>. You can only call the API <code>rand7()</code>, and you shouldn't call any other API. Please do not use a language's built-in random API.</p> <p>Each test case will have one internal argument <code>n</code>, the number of times that your implemented function <code>rand10()</code> will be called while testing. Note that this is not an argument passed to <code>rand10()</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 1\nOutput: [2]\n</pre> <p>Example 2:</p> <pre>Input: n = 2\nOutput: [2,8]\n</pre> <p>Example 3:</p> <pre>Input: n = 3\nOutput: [3,8,10]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>What is the expected value for the number of calls to <code>rand7()</code> function?</li> <li>Could you minimize the number of calls to <code>rand7()</code>?</li> </ul>"},{"location":"LeetCode_Problems/0471/","title":"471. Encode String with Shortest Length","text":"Problem"},{"location":"LeetCode_Problems/0472/","title":"472. Concatenated Words","text":"Problem <p>Given an array of strings <code>words</code> (without duplicates), return all the concatenated words in the given list of <code>words</code>.</p> <p>A concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct)\u00a0in the given array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\nOutput: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\nExplanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \n\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \n\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".</pre> <p>Example 2:</p> <pre>\nInput: words = [\"cat\",\"dog\",\"catdog\"]\nOutput: [\"catdog\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= words[i].length &lt;= 30</code></li> <li><code>words[i]</code> consists of only lowercase English letters.</li> <li>All the strings of <code>words</code> are unique.</li> <li><code>1 &lt;= sum(words[i].length) &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0473/","title":"473. Matchsticks to Square","text":"Problem <p>You are given an integer array <code>matchsticks</code> where <code>matchsticks[i]</code> is the length of the <code>i<sup>th</sup></code> matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.</p> <p>Return <code>true</code> if you can make this square and <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matchsticks = [1,1,2,2,2]\nOutput: true\nExplanation: You can form a square with length 2, one side of the square came two sticks with length 1.\n</pre> <p>Example 2:</p> <pre>\nInput: matchsticks = [3,3,3,3,4]\nOutput: false\nExplanation: You cannot find a way to form a square with all the matchsticks.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= matchsticks.length &lt;= 15</code></li> <li><code>1 &lt;= matchsticks[i] &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0474/","title":"474. Ones and Zeroes","text":"Problem <p>You are given an array of binary strings <code>strs</code> and two integers <code>m</code> and <code>n</code>.</p> <p>Return the size of the largest subset of <code>strs</code> such that there are at most <code>m</code> <code>0</code>'s and <code>n</code> <code>1</code>'s in the subset.</p> <p>A set <code>x</code> is a subset of a set <code>y</code> if all elements of <code>x</code> are also elements of <code>y</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3\nOutput: 4\nExplanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\nOther valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n{\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.\n</pre> <p>Example 2:</p> <pre>\nInput: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1\nOutput: 2\nExplanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= strs.length &lt;= 600</code></li> <li><code>1 &lt;= strs[i].length &lt;= 100</code></li> <li><code>strs[i]</code> consists only of digits <code>'0'</code> and <code>'1'</code>.</li> <li><code>1 &lt;= m, n &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0475/","title":"475. Heaters","text":"Problem <p>Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.</p> <p>Every house can be warmed, as long as the house is within the heater's warm radius range.\u00a0</p> <p>Given the positions of <code>houses</code> and <code>heaters</code> on a horizontal line, return the minimum radius standard of heaters\u00a0so that those heaters could cover all houses.</p> <p>Notice that\u00a0all the <code>heaters</code> follow your radius standard, and the warm radius will the same.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: houses = [1,2,3], heaters = [2]\nOutput: 1\nExplanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n</pre> <p>Example 2:</p> <pre>\nInput: houses = [1,2,3,4], heaters = [1,4]\nOutput: 1\nExplanation: The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed.\n</pre> <p>Example 3:</p> <pre>\nInput: houses = [1,5], heaters = [2]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= houses.length, heaters.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= houses[i], heaters[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0476/","title":"476. Number Complement","text":"Problem <p>The complement of an integer is the integer you get when you flip all the <code>0</code>'s to <code>1</code>'s and all the <code>1</code>'s to <code>0</code>'s in its binary representation.</p> <ul> <li>For example, The integer <code>5</code> is <code>\"101\"</code> in binary and its complement is <code>\"010\"</code> which is the integer <code>2</code>.</li> </ul> <p>Given an integer <code>num</code>, return its complement.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 5\nOutput: 2\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 1\nOutput: 0\nExplanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt; 2<sup>31</sup></code></li> </ul> <p> </p> <p>Note: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/</p>"},{"location":"LeetCode_Problems/0477/","title":"477. Total Hamming Distance","text":"Problem <p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p> <p>Given an integer array <code>nums</code>, return the sum of Hamming distances between all the pairs of the integers in <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,14,2]\nOutput: 6\nExplanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,14,4]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li>The answer for the given input will fit in a 32-bit integer.</li> </ul>"},{"location":"LeetCode_Problems/0478/","title":"478. Generate Random Point in a Circle","text":"Problem <p>Given the radius and the position of the center of a circle, implement the function <code>randPoint</code> which generates a uniform random point inside the circle.</p> <p>Implement the <code>Solution</code> class:</p> <ul> <li><code>Solution(double radius, double x_center, double y_center)</code> initializes the object with the radius of the circle <code>radius</code> and the position of the center <code>(x_center, y_center)</code>.</li> <li><code>randPoint()</code> returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array <code>[x, y]</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]\nOutput\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n\nExplanation\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;\u00a0radius &lt;= 10<sup>8</sup></code></li> <li><code>-10<sup>7</sup> &lt;= x_center, y_center &lt;= 10<sup>7</sup></code></li> <li>At most <code>3 * 10<sup>4</sup></code> calls will be made to <code>randPoint</code>.</li> </ul>"},{"location":"LeetCode_Problems/0479/","title":"479. Largest Palindrome Product","text":"Problem <p>Given an integer n, return the largest palindromic integer that can be represented as the product of two <code>n</code>-digits integers. Since the answer can be very large, return it modulo <code>1337</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 9\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 8</code></li> </ul>"},{"location":"LeetCode_Problems/0480/","title":"480. Sliding Window Median","text":"Problem <p>The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.</p> <ul> <li>For examples, if <code>arr = [2,3,4]</code>, the median is <code>3</code>.</li> <li>For examples, if <code>arr = [1,2,3,4]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li> </ul> <p>You are given an integer array <code>nums</code> and an integer <code>k</code>. There is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p> <p>Return the median array for each window in the original array. Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\nExplanation: \nWindow position                Median\n---------------                -----\n[1  3  -1] -3  5  3  6  7        1\n 1 [3  -1  -3] 5  3  6  7       -1\n 1  3 [-1  -3  5] 3  6  7       -1\n 1  3  -1 [-3  5  3] 6  7        3\n 1  3  -1  -3 [5  3  6] 7        5\n 1  3  -1  -3  5 [3  6  7]       6\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4,2,3,1,4,2], k = 3\nOutput: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0481/","title":"481. Magical String","text":"Problem <p>A magical string <code>s</code> consists of only <code>'1'</code> and <code>'2'</code> and obeys the following rules:</p> <ul> <li>The string s is magical because concatenating the number of contiguous occurrences of characters <code>'1'</code> and <code>'2'</code> generates the string <code>s</code> itself.</li> </ul> <p>The first few elements of <code>s</code> is <code>s = \"1221121221221121122\u2026\u2026\"</code>. If we group the consecutive <code>1</code>'s and <code>2</code>'s in <code>s</code>, it will be <code>\"1 22 11 2 1 22 1 22 11 2 11 22 ......\"</code> and the occurrences of <code>1</code>'s or <code>2</code>'s in each group are <code>\"1 2 2 1 1 2 1 2 2 1 2 2 ......\"</code>. You can see that the occurrence sequence is <code>s</code> itself.</p> <p>Given an integer <code>n</code>, return the number of <code>1</code>'s in the first <code>n</code> number in the magical string <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 6\nOutput: 3\nExplanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0482/","title":"482. License Key Formatting","text":"Problem <p>You are given a license key represented as a string <code>s</code> that consists of only alphanumeric characters and dashes. The string is separated into <code>n + 1</code> groups by <code>n</code> dashes. You are also given an integer <code>k</code>.</p> <p>We want to reformat the string <code>s</code> such that each group contains exactly <code>k</code> characters, except for the first group, which could be shorter than <code>k</code> but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.</p> <p>Return the reformatted license key.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"5F3Z-2e-9-w\", k = 4\nOutput: \"5F3Z-2E9W\"\nExplanation: The string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"2-5g-3-J\", k = 2\nOutput: \"2-5G-3J\"\nExplanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of English letters, digits, and dashes <code>'-'</code>.</li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0483/","title":"483. Smallest Good Base","text":"Problem <p>Given an integer <code>n</code> represented as a string, return the smallest good base of <code>n</code>.</p> <p>We call <code>k &gt;= 2</code> a good base of <code>n</code>, if all digits of <code>n</code> base <code>k</code> are <code>1</code>'s.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = \"13\"\nOutput: \"3\"\nExplanation: 13 base 3 is 111.\n</pre> <p>Example 2:</p> <pre>\nInput: n = \"4681\"\nOutput: \"8\"\nExplanation: 4681 base 8 is 11111.\n</pre> <p>Example 3:</p> <pre>\nInput: n = \"1000000000000000000\"\nOutput: \"999999999999999999\"\nExplanation: 1000000000000000000 base 999999999999999999 is 11.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n</code> is an integer in the range <code>[3, 10<sup>18</sup>]</code>.</li> <li><code>n</code> does not contain any leading zeros.</li> </ul>"},{"location":"LeetCode_Problems/0484/","title":"484. Find Permutation","text":"Problem"},{"location":"LeetCode_Problems/0485/","title":"485. Max Consecutive Ones","text":"Problem <p>Given a binary array <code>nums</code>, return the maximum number of consecutive <code>1</code>'s in the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,0,1,1,1]\nOutput: 3\nExplanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,0,1,1,0,1]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0486/","title":"486. Predict the Winner","text":"Problem <p>You are given an integer array <code>nums</code>. Two players are playing a game with this array: player 1 and player 2.</p> <p>Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of <code>0</code>. At each turn, the player takes one of the numbers from either end of the array (i.e., <code>nums[0]</code> or <code>nums[nums.length - 1]</code>) which reduces the size of the array by <code>1</code>. The player adds the chosen number to their score. The game ends when there are no more elements in the array.</p> <p>Return <code>true</code> if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return <code>true</code>. You may assume that both players are playing optimally.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,5,2]\nOutput: false\nExplanation: Initially, player 1 can choose between 1 and 2. \nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \nHence, player 1 will never be the winner and you need to return false.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,5,233,7]\nOutput: true\nExplanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 20</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0487/","title":"487. Max Consecutive Ones II","text":"Problem"},{"location":"LeetCode_Problems/0488/","title":"488. Zuma Game","text":"Problem <p>You are playing a variation of the game Zuma.</p> <p>In this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red <code>'R'</code>, yellow <code>'Y'</code>, blue <code>'B'</code>, green <code>'G'</code>, or white <code>'W'</code>. You also have several colored balls in your hand.</p> <p>Your goal is to clear all of the balls from the board. On each turn:</p> <ul> <li>Pick any ball from your hand and insert it in between two balls in the row or on either end of the row.</li> <li>If there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.     <ul> <li>If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.</li> </ul> </li> <li>If there are no more balls on the board, then you win the game.</li> <li>Repeat this process until you either win or do not have any more balls in your hand.</li> </ul> <p>Given a string <code>board</code>, representing the row of balls on the board, and a string <code>hand</code>, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: board = \"WRRBBW\", hand = \"RB\"\nOutput: -1\nExplanation: It is impossible to clear all the balls. The best you can do is:\n- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -&gt; WBBW.\n- Insert 'B' so the board becomes WBBBW. WBBBW -&gt; WW.\nThere are still balls remaining on the board, and you are out of balls to insert.</pre> <p>Example 2:</p> <pre>\nInput: board = \"WWRRBBWW\", hand = \"WRBRW\"\nOutput: 2\nExplanation: To make the board empty:\n- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -&gt; WWBBWW.\n- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -&gt; WWWW -&gt; empty.\n2 balls from your hand were needed to clear the board.\n</pre> <p>Example 3:</p> <pre>\nInput: board = \"G\", hand = \"GGGGG\"\nOutput: 2\nExplanation: To make the board empty:\n- Insert 'G' so the board becomes GG.\n- Insert 'G' so the board becomes GGG. GGG -&gt; empty.\n2 balls from your hand were needed to clear the board.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= board.length &lt;= 16</code></li> <li><code>1 &lt;= hand.length &lt;= 5</code></li> <li><code>board</code> and <code>hand</code> consist of the characters <code>'R'</code>, <code>'Y'</code>, <code>'B'</code>, <code>'G'</code>, and <code>'W'</code>.</li> <li>The initial row of balls on the board will not have any groups of three or more consecutive balls of the same color.</li> </ul>"},{"location":"LeetCode_Problems/0489/","title":"489. Robot Room Cleaner","text":"Problem"},{"location":"LeetCode_Problems/0490/","title":"490. The Maze","text":"Problem"},{"location":"LeetCode_Problems/0491/","title":"491. Non-decreasing Subsequences","text":"Problem <p>Given an integer array <code>nums</code>, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,6,7,7]\nOutput: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,4,3,2,1]\nOutput: [[4,4]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 15</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0492/","title":"492. Construct the Rectangle","text":"Problem <p>A web developer needs to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:</p> <ol> <li>The area of the rectangular web page you designed must equal to the given target area.</li> <li>The width <code>W</code> should not be larger than the length <code>L</code>, which means <code>L &gt;= W</code>.</li> <li>The difference between length <code>L</code> and width <code>W</code> should be as small as possible.</li> </ol> <p>Return an array <code>[L, W]</code> where <code>L</code> and <code>W</code> are the length and width of the\u00a0web page you designed in sequence.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: area = 4\nOutput: [2,2]\nExplanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: area = 37\nOutput: [37,1]\n</pre> <p>Example 3:</p> <pre>\nInput: area = 122122\nOutput: [427,286]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= area &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0493/","title":"493. Reverse Pairs","text":"Problem <p>Given an integer array <code>nums</code>, return the number of reverse pairs in the array.</p> <p>A reverse pair is a pair <code>(i, j)</code> where:</p> <ul> <li><code>0 &lt;= i &lt; j &lt; nums.length</code> and</li> <li><code>nums[i] &gt; 2 * nums[j]</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,2,3,1]\nOutput: 2\nExplanation: The reverse pairs are:\n(1, 4) --&gt; nums[1] = 3, nums[4] = 1, 3 &gt; 2 * 1\n(3, 4) --&gt; nums[3] = 3, nums[4] = 1, 3 &gt; 2 * 1\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,4,3,5,1]\nOutput: 3\nExplanation: The reverse pairs are:\n(1, 4) --&gt; nums[1] = 4, nums[4] = 1, 4 &gt; 2 * 1\n(2, 4) --&gt; nums[2] = 3, nums[4] = 1, 3 &gt; 2 * 1\n(3, 4) --&gt; nums[3] = 5, nums[4] = 1, 5 &gt; 2 * 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0494/","title":"494. Target Sum","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>target</code>.</p> <p>You want to build an expression out of nums by adding one of the symbols <code>'+'</code> and <code>'-'</code> before each integer in nums and then concatenate all the integers.</p> <ul> <li>For example, if <code>nums = [2, 1]</code>, you can add a <code>'+'</code> before <code>2</code> and a <code>'-'</code> before <code>1</code> and concatenate them to build the expression <code>\"+2-1\"</code>.</li> </ul> <p>Return the number of different expressions that you can build, which evaluates to <code>target</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,1,1,1], target = 3\nOutput: 5\nExplanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1], target = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 20</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> <li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li> <li><code>-1000 &lt;= target &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0495/","title":"495. Teemo Attacking","text":"Problem <p>Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly <code>duration</code> seconds. More formally, an attack at second <code>t</code> will mean Ashe is poisoned during the inclusive time interval <code>[t, t + duration - 1]</code>. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end <code>duration</code> seconds after the new attack.</p> <p>You are given a non-decreasing integer array <code>timeSeries</code>, where <code>timeSeries[i]</code> denotes that Teemo attacks Ashe at second <code>timeSeries[i]</code>, and an integer <code>duration</code>.</p> <p>Return the total number of seconds that Ashe is poisoned.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: timeSeries = [1,4], duration = 2\nOutput: 4\nExplanation: Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\n</pre> <p>Example 2:</p> <pre>\nInput: timeSeries = [1,2], duration = 2\nOutput: 3\nExplanation: Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= timeSeries.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= timeSeries[i], duration &lt;= 10<sup>7</sup></code></li> <li><code>timeSeries</code> is sorted in non-decreasing order.</li> </ul>"},{"location":"LeetCode_Problems/0496/","title":"496. Next Greater Element I","text":"Problem <p>The next greater element of some element <code>x</code> in an array is the first greater element that is to the right of <code>x</code> in the same array.</p> <p>You are given two distinct 0-indexed integer arrays <code>nums1</code> and <code>nums2</code>, where <code>nums1</code> is a subset of <code>nums2</code>.</p> <p>For each <code>0 &lt;= i &lt; nums1.length</code>, find the index <code>j</code> such that <code>nums1[i] == nums2[j]</code> and determine the next greater element of <code>nums2[j]</code> in <code>nums2</code>. If there is no next greater element, then the answer for this query is <code>-1</code>.</p> <p>Return an array <code>ans</code> of length <code>nums1.length</code> such that <code>ans[i]</code> is the next greater element as described above.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2]\nOutput: [-1,3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [2,4], nums2 = [1,2,3,4]\nOutput: [3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup></code></li> <li>All integers in <code>nums1</code> and <code>nums2</code> are unique.</li> <li>All the integers of <code>nums1</code> also appear in <code>nums2</code>.</li> </ul> <p> </p> <p>Follow up: Could you find an <code>O(nums1.length + nums2.length)</code> solution?</p>"},{"location":"LeetCode_Problems/0497/","title":"497. Random Point in Non-overlapping Rectangles","text":"Problem <p>You are given an array of non-overlapping axis-aligned rectangles <code>rects</code> where <code>rects[i] = [a<sub>i</sub>, b<sub>i</sub>, x<sub>i</sub>, y<sub>i</sub>]</code> indicates that <code>(a<sub>i</sub>, b<sub>i</sub>)</code> is the bottom-left corner point of the <code>i<sup>th</sup></code> rectangle and <code>(x<sub>i</sub>, y<sub>i</sub>)</code> is the top-right corner point of the <code>i<sup>th</sup></code> rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.</p> <p>Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned.</p> <p>Note that an integer point is a point that has integer coordinates.</p> <p>Implement the <code>Solution</code> class:</p> <ul> <li><code>Solution(int[][] rects)</code> Initializes the object with the given rectangles <code>rects</code>.</li> <li><code>int[] pick()</code> Returns a random integer point <code>[u, v]</code> inside the space covered by one of the given rectangles.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\nOutput\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\n\nExplanation\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rects.length &lt;= 100</code></li> <li><code>rects[i].length == 4</code></li> <li><code>-10<sup>9</sup> &lt;= a<sub>i</sub> &lt; x<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>-10<sup>9</sup> &lt;= b<sub>i</sub> &lt; y<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>x<sub>i</sub> - a<sub>i</sub> &lt;= 2000</code></li> <li><code>y<sub>i</sub> - b<sub>i</sub> &lt;= 2000</code></li> <li>All the rectangles do not overlap.</li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>pick</code>.</li> </ul>"},{"location":"LeetCode_Problems/0498/","title":"498. Diagonal Traverse","text":"Problem <p>Given an <code>m x n</code> matrix <code>mat</code>, return an array of all the elements of the array in a diagonal order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,4,7,5,3,6,8,9]\n</pre> <p>Example 2:</p> <pre>\nInput: mat = [[1,2],[3,4]]\nOutput: [1,2,3,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>5</sup> &lt;= mat[i][j] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0499/","title":"499. The Maze III","text":"Problem"},{"location":"LeetCode_Problems/0500/","title":"500. Keyboard Row","text":"Problem <p>Given an array of strings <code>words</code>, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.</p> <p>In the American keyboard:</p> <ul> <li>the first row consists of the characters <code>\"qwertyuiop\"</code>,</li> <li>the second row consists of the characters <code>\"asdfghjkl\"</code>, and</li> <li>the third row consists of the characters <code>\"zxcvbnm\"</code>.</li> </ul> <p></p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\nOutput: [\"Alaska\",\"Dad\"]\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"omk\"]\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"adsdf\",\"sfd\"]\nOutput: [\"adsdf\",\"sfd\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 20</code></li> <li><code>1 &lt;= words[i].length &lt;= 100</code></li> <li><code>words[i]</code> consists of English letters (both lowercase and uppercase).\u00a0</li> </ul>"},{"location":"LeetCode_Problems/0501/","title":"501. Find Mode in Binary Search Tree","text":"Problem <p>Given the <code>root</code> of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.</p> <p>If the tree has more than one mode, return them in any order.</p> <p>Assume a BST is defined as follows:</p> <ul> <li>The left subtree of a node contains only nodes with keys less than or equal to the node's key.</li> <li>The right subtree of a node contains only nodes with keys greater than or equal to the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,null,2,2]\nOutput: [2]\n</pre> <p>Example 2:</p> <pre>\nInput: root = [0]\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).</p>"},{"location":"LeetCode_Problems/0502/","title":"502. IPO","text":"Problem <p>Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most <code>k</code> distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most <code>k</code> distinct projects.</p> <p>You are given <code>n</code> projects where the <code>i<sup>th</sup></code> project has a pure profit <code>profits[i]</code> and a minimum capital of <code>capital[i]</code> is needed to start it.</p> <p>Initially, you have <code>w</code> capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.</p> <p>Pick a list of at most <code>k</code> distinct projects from given projects to maximize your final capital, and return the final maximized capital.</p> <p>The answer is guaranteed to fit in a 32-bit signed integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\nOutput: 4\nExplanation: Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\n</pre> <p>Example 2:</p> <pre>\nInput: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\nOutput: 6\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= w &lt;= 10<sup>9</sup></code></li> <li><code>n == profits.length</code></li> <li><code>n == capital.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= profits[i] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= capital[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0503/","title":"503. Next Greater Element II","text":"Problem <p>Given a circular integer array <code>nums</code> (i.e., the next element of <code>nums[nums.length - 1]</code> is <code>nums[0]</code>), return the next greater number for every element in <code>nums</code>.</p> <p>The next greater number of a number <code>x</code> is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return <code>-1</code> for this number.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,1]\nOutput: [2,-1,2]\nExplanation: The first 1's next greater number is 2; \nThe number 2 can't find next greater number. \nThe second 1's next greater number needs to search circularly, which is also 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4,3]\nOutput: [2,3,4,-1,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0504/","title":"504. Base 7","text":"Problem <p>Given an integer <code>num</code>, return a string of its base 7 representation.</p> <p> </p> <p>Example 1:</p> <pre>Input: num = 100\nOutput: \"202\"\n</pre> <p>Example 2:</p> <pre>Input: num = -7\nOutput: \"-10\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-10<sup>7</sup> &lt;= num &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0505/","title":"505. The Maze II","text":"Problem"},{"location":"LeetCode_Problems/0506/","title":"506. Relative Ranks","text":"Problem <p>You are given an integer array <code>score</code> of size <code>n</code>, where <code>score[i]</code> is the score of the <code>i<sup>th</sup></code> athlete in a competition. All the scores are guaranteed to be unique.</p> <p>The athletes are placed based on their scores, where the <code>1<sup>st</sup></code> place athlete has the highest score, the <code>2<sup>nd</sup></code> place athlete has the <code>2<sup>nd</sup></code> highest score, and so on. The placement of each athlete determines their rank:</p> <ul> <li>The <code>1<sup>st</sup></code> place athlete's rank is <code>\"Gold Medal\"</code>.</li> <li>The <code>2<sup>nd</sup></code> place athlete's rank is <code>\"Silver Medal\"</code>.</li> <li>The <code>3<sup>rd</sup></code> place athlete's rank is <code>\"Bronze Medal\"</code>.</li> <li>For the <code>4<sup>th</sup></code> place to the <code>n<sup>th</sup></code> place athlete, their rank is their placement number (i.e., the <code>x<sup>th</sup></code> place athlete's rank is <code>\"x\"</code>).</li> </ul> <p>Return an array <code>answer</code> of size <code>n</code> where <code>answer[i]</code> is the rank of the <code>i<sup>th</sup></code> athlete.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: score = [5,4,3,2,1]\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\nExplanation: The placements are [1<sup>st</sup>, 2<sup>nd</sup>, 3<sup>rd</sup>, 4<sup>th</sup>, 5<sup>th</sup>].</pre> <p>Example 2:</p> <pre>\nInput: score = [10,3,8,9,4]\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\nExplanation: The placements are [1<sup>st</sup>, 5<sup>th</sup>, 3<sup>rd</sup>, 2<sup>nd</sup>, 4<sup>th</sup>].\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == score.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= score[i] &lt;= 10<sup>6</sup></code></li> <li>All the values in <code>score</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0507/","title":"507. Perfect Number","text":"Problem <p>A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer <code>x</code> is an integer that can divide <code>x</code> evenly.</p> <p>Given an integer <code>n</code>, return <code>true</code> if <code>n</code> is a perfect number, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 28\nOutput: true\nExplanation: 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 7\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0508/","title":"508. Most Frequent Subtree Sum","text":"Problem <p>Given the <code>root</code> of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.</p> <p>The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [5,2,-3]\nOutput: [2,-3,4]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [5,2,-5]\nOutput: [2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0509/","title":"509. Fibonacci Number","text":"Problem <p>The Fibonacci numbers, commonly denoted <code>F(n)</code> form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p> <pre>\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n &gt; 1.\n</pre> <p>Given <code>n</code>, calculate <code>F(n)</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: 1\nExplanation: F(2) = F(1) + F(0) = 1 + 0 = 1.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3\nOutput: 2\nExplanation: F(3) = F(2) + F(1) = 1 + 1 = 2.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 4\nOutput: 3\nExplanation: F(4) = F(3) + F(2) = 2 + 1 = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 30</code></li> </ul>"},{"location":"LeetCode_Problems/0510/","title":"510. Inorder Successor in BST II","text":"Problem"},{"location":"LeetCode_Problems/0511/","title":"511. Game Play Analysis I","text":"Problem <p>Table: <code>Activity</code></p> <pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| player_id    | int     |\n| device_id    | int     |\n| event_date   | date    |\n| games_played | int     |\n+--------------+---------+\n(player_id, event_date) is the primary key (combination of columns with unique values) of this table.\nThis table shows the activity of players of some games.\nEach row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.\n</pre> <p> </p> <p>Write a solution to find the first login date for each player.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nActivity table:\n+-----------+-----------+------------+--------------+\n| player_id | device_id | event_date | games_played |\n+-----------+-----------+------------+--------------+\n| 1         | 2         | 2016-03-01 | 5            |\n| 1         | 2         | 2016-05-02 | 6            |\n| 2         | 3         | 2017-06-25 | 1            |\n| 3         | 1         | 2016-03-02 | 0            |\n| 3         | 4         | 2018-07-03 | 5            |\n+-----------+-----------+------------+--------------+\nOutput: \n+-----------+-------------+\n| player_id | first_login |\n+-----------+-------------+\n| 1         | 2016-03-01  |\n| 2         | 2017-06-25  |\n| 3         | 2016-03-02  |\n+-----------+-------------+\n</pre>"},{"location":"LeetCode_Problems/0512/","title":"512. Game Play Analysis II","text":"Problem"},{"location":"LeetCode_Problems/0513/","title":"513. Find Bottom Left Tree Value","text":"Problem <p>Given the <code>root</code> of a binary tree, return the leftmost value in the last row of the tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [2,1,3]\nOutput: 1\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,3,4,null,5,6,null,null,7]\nOutput: 7\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0514/","title":"514. Freedom Trail","text":"Problem <p>In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door.</p> <p>Given a string <code>ring</code> that represents the code engraved on the outer ring and another string <code>key</code> that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.</p> <p>Initially, the first character of the ring is aligned at the <code>\"12:00\"</code> direction. You should spell all the characters in <code>key</code> one by one by rotating <code>ring</code> clockwise or anticlockwise to make each character of the string key aligned at the <code>\"12:00\"</code> direction and then by pressing the center button.</p> <p>At the stage of rotating the ring to spell the key character <code>key[i]</code>:</p> <ol> <li>You can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of <code>ring</code>'s characters at the <code>\"12:00\"</code> direction, where this character must equal <code>key[i]</code>.</li> <li>If the character <code>key[i]</code> has been aligned at the <code>\"12:00\"</code> direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.</li> </ol> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: ring = \"godding\", key = \"gd\"\nOutput: 4\nExplanation:\nFor the first key character 'g', since it is already in place, we just need 1 step to spell this character. \nFor the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\nAlso, we need 1 more step for spelling.\nSo the final output is 4.\n</pre> <p>Example 2:</p> <pre>\nInput: ring = \"godding\", key = \"godding\"\nOutput: 13\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= ring.length, key.length &lt;= 100</code></li> <li><code>ring</code> and <code>key</code> consist of only lower case English letters.</li> <li>It is guaranteed that <code>key</code> could always be spelled by rotating <code>ring</code>.</li> </ul>"},{"location":"LeetCode_Problems/0515/","title":"515. Find Largest Value in Each Tree Row","text":"Problem <p>Given the <code>root</code> of a binary tree, return an array of the largest value in each row of the tree (0-indexed).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,3,2,5,3,null,9]\nOutput: [1,3,9]\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1,2,3]\nOutput: [1,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree will be in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0516/","title":"516. Longest Palindromic Subsequence","text":"Problem <p>Given a string <code>s</code>, find the longest palindromic subsequence's length in <code>s</code>.</p> <p>A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"bbbab\"\nOutput: 4\nExplanation: One possible longest palindromic subsequence is \"bbbb\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"cbbd\"\nOutput: 2\nExplanation: One possible longest palindromic subsequence is \"bb\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0517/","title":"517. Super Washing Machines","text":"Problem <p>You have <code>n</code> super washing machines on a line. Initially, each washing machine has some dresses or is empty.</p> <p>For each move, you could choose any <code>m</code> (<code>1 &lt;= m &lt;= n</code>) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.</p> <p>Given an integer array <code>machines</code> representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: machines = [1,0,5]\nOutput: 3\nExplanation:\n1st move:    1     0 &lt;-- 5    =&gt;    1     1     4\n2nd move:    1 &lt;-- 1 &lt;-- 4    =&gt;    2     1     3\n3rd move:    2     1 &lt;-- 3    =&gt;    2     2     2\n</pre> <p>Example 2:</p> <pre>\nInput: machines = [0,3,0]\nOutput: 2\nExplanation:\n1st move:    0 &lt;-- 3     0    =&gt;    1     2     0\n2nd move:    1     2 --&gt; 0    =&gt;    1     1     1\n</pre> <p>Example 3:</p> <pre>\nInput: machines = [0,2,0]\nOutput: -1\nExplanation:\nIt's impossible to make all three washing machines have the same number of dresses.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == machines.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= machines[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0518/","title":"518. Coin Change II","text":"Problem <p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p> <p>Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>0</code>.</p> <p>You may assume that you have an infinite number of each kind of coin.</p> <p>The answer is guaranteed to fit into a signed 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: amount = 5, coins = [1,2,5]\nOutput: 4\nExplanation: there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n</pre> <p>Example 2:</p> <pre>\nInput: amount = 3, coins = [2]\nOutput: 0\nExplanation: the amount of 3 cannot be made up just with coins of 2.\n</pre> <p>Example 3:</p> <pre>\nInput: amount = 10, coins = [10]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= coins.length &lt;= 300</code></li> <li><code>1 &lt;= coins[i] &lt;= 5000</code></li> <li>All the values of <code>coins</code> are unique.</li> <li><code>0 &lt;= amount &lt;= 5000</code></li> </ul>"},{"location":"LeetCode_Problems/0519/","title":"519. Random Flip Matrix","text":"Problem <p>There is an <code>m x n</code> binary grid <code>matrix</code> with all the values set <code>0</code> initially. Design an algorithm to randomly pick an index <code>(i, j)</code> where <code>matrix[i][j] == 0</code> and flips it to <code>1</code>. All the indices <code>(i, j)</code> where <code>matrix[i][j] == 0</code> should be equally likely to be returned.</p> <p>Optimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.</p> <p>Implement the <code>Solution</code> class:</p> <ul> <li><code>Solution(int m, int n)</code> Initializes the object with the size of the binary matrix <code>m</code> and <code>n</code>.</li> <li><code>int[] flip()</code> Returns a random index <code>[i, j]</code> of the matrix where <code>matrix[i][j] == 0</code> and flips it to <code>1</code>.</li> <li><code>void reset()</code> Resets all the values of the matrix to be <code>0</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\n[[3, 1], [], [], [], [], []]\nOutput\n[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]\n\nExplanation\nSolution solution = new Solution(3, 1);\nsolution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\nsolution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\nsolution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\nsolution.reset(); // All the values are reset to 0 and can be returned.\nsolution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 10<sup>4</sup></code></li> <li>There will be at least one free cell for each call to <code>flip</code>.</li> <li>At most <code>1000</code> calls will be made to <code>flip</code> and <code>reset</code>.</li> </ul>"},{"location":"LeetCode_Problems/0520/","title":"520. Detect Capital","text":"Problem <p>We define the usage of capitals in a word to be right when one of the following cases holds:</p> <ul> <li>All letters in this word are capitals, like <code>\"USA\"</code>.</li> <li>All letters in this word are not capitals, like <code>\"leetcode\"</code>.</li> <li>Only the first letter in this word is capital, like <code>\"Google\"</code>.</li> </ul> <p>Given a string <code>word</code>, return <code>true</code> if the usage of capitals in it is right.</p> <p> </p> <p>Example 1:</p> <pre>Input: word = \"USA\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: word = \"FlaG\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 100</code></li> <li><code>word</code> consists of lowercase and uppercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0521/","title":"521. Longest Uncommon Subsequence I","text":"Problem <p>Given two strings <code>a</code> and <code>b</code>, return the length of the longest uncommon subsequence between <code>a</code> and <code>b</code>. If the longest uncommon subsequence does not exist, return <code>-1</code>.</p> <p>An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.</p> <p>A subsequence of a string <code>s</code> is a string that can be obtained after deleting any number of characters from <code>s</code>.</p> <ul> <li>For example, <code>\"abc\"</code> is a subsequence of <code>\"aebdc\"</code> because you can delete the underlined characters in <code>\"aebdc\"</code> to get <code>\"abc\"</code>. Other subsequences of <code>\"aebdc\"</code> include <code>\"aebdc\"</code>, <code>\"aeb\"</code>, and <code>\"\"</code> (empty string).</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: a = \"aba\", b = \"cdc\"\nOutput: 3\nExplanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\nNote that \"cdc\" is also a longest uncommon subsequence.\n</pre> <p>Example 2:</p> <pre>\nInput: a = \"aaa\", b = \"bbb\"\nOutput: 3\nExplanation:\u00a0The longest uncommon subsequences are \"aaa\" and \"bbb\".\n</pre> <p>Example 3:</p> <pre>\nInput: a = \"aaa\", b = \"aaa\"\nOutput: -1\nExplanation:\u00a0Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a.length, b.length &lt;= 100</code></li> <li><code>a</code> and <code>b</code> consist of lower-case English letters.</li> </ul>"},{"location":"LeetCode_Problems/0522/","title":"522. Longest Uncommon Subsequence II","text":"Problem <p>Given an array of strings <code>strs</code>, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return <code>-1</code>.</p> <p>An uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.</p> <p>A subsequence of a string <code>s</code> is a string that can be obtained after deleting any number of characters from <code>s</code>.</p> <ul> <li>For example, <code>\"abc\"</code> is a subsequence of <code>\"aebdc\"</code> because you can delete the underlined characters in <code>\"aebdc\"</code> to get <code>\"abc\"</code>. Other subsequences of <code>\"aebdc\"</code> include <code>\"aebdc\"</code>, <code>\"aeb\"</code>, and <code>\"\"</code> (empty string).</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: strs = [\"aba\",\"cdc\",\"eae\"]\nOutput: 3\n</pre> <p>Example 2:</p> <pre>Input: strs = [\"aaa\",\"aaa\",\"aa\"]\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= strs.length &lt;= 50</code></li> <li><code>1 &lt;= strs[i].length &lt;= 10</code></li> <li><code>strs[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0523/","title":"523. Continuous Subarray Sum","text":"Problem <p>Given an integer array nums and an integer k, return <code>true</code> if <code>nums</code> has a good subarray or <code>false</code> otherwise.</p> <p>A good subarray is a subarray where:</p> <ul> <li>its length is at least two, and</li> <li>the sum of the elements of the subarray is a multiple of <code>k</code>.</li> </ul> <p>Note that:</p> <ul> <li>A subarray is a contiguous part of the array.</li> <li>An integer <code>x</code> is a multiple of <code>k</code> if there exists an integer <code>n</code> such that <code>x = n * k</code>. <code>0</code> is always a multiple of <code>k</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [23,2,4,6,7], k = 6\nOutput: true\nExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [23,2,6,4,7], k = 6\nOutput: true\nExplanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [23,2,6,4,7], k = 13\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= sum(nums[i]) &lt;= 2<sup>31</sup> - 1</code></li> <li><code>1 &lt;= k &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0524/","title":"524. Longest Word in Dictionary through Deleting","text":"Problem <p>Given a string <code>s</code> and a string array <code>dictionary</code>, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\nOutput: \"apple\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\nOutput: \"a\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>1 &lt;= dictionary.length &lt;= 1000</code></li> <li><code>1 &lt;= dictionary[i].length &lt;= 1000</code></li> <li><code>s</code> and <code>dictionary[i]</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0525/","title":"525. Contiguous Array","text":"Problem <p>Given a binary array <code>nums</code>, return the maximum length of a contiguous subarray with an equal number of <code>0</code> and <code>1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1]\nOutput: 2\nExplanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1,0]\nOutput: 2\nExplanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0526/","title":"526. Beautiful Arrangement","text":"Problem <p>Suppose you have <code>n</code> integers labeled <code>1</code> through <code>n</code>. A permutation of those <code>n</code> integers <code>perm</code> (1-indexed) is considered a beautiful arrangement if for every <code>i</code> (<code>1 &lt;= i &lt;= n</code>), either of the following is true:</p> <ul> <li><code>perm[i]</code> is divisible by <code>i</code>.</li> <li><code>i</code> is divisible by <code>perm[i]</code>.</li> </ul> <p>Given an integer <code>n</code>, return the number of the beautiful arrangements that you can construct.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: 2\nExplanation: \nThe first beautiful arrangement is [1,2]:\n    - perm[1] = 1 is divisible by i = 1\n    - perm[2] = 2 is divisible by i = 2\nThe second beautiful arrangement is [2,1]:\n    - perm[1] = 2 is divisible by i = 1\n    - i = 2 is divisible by perm[2] = 1\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 15</code></li> </ul>"},{"location":"LeetCode_Problems/0527/","title":"527. Word Abbreviation","text":"Problem"},{"location":"LeetCode_Problems/0528/","title":"528. Random Pick with Weight","text":"Problem <p>You are given a 0-indexed array of positive integers <code>w</code> where <code>w[i]</code> describes the weight of the <code>i<sup>th</sup></code> index.</p> <p>You need to implement the function <code>pickIndex()</code>, which randomly picks an index in the range <code>[0, w.length - 1]</code> (inclusive) and returns it. The probability of picking an index <code>i</code> is <code>w[i] / sum(w)</code>.</p> <ul> <li>For example, if <code>w = [1, 3]</code>, the probability of picking index <code>0</code> is <code>1 / (1 + 3) = 0.25</code> (i.e., <code>25%</code>), and the probability of picking index <code>1</code> is <code>3 / (1 + 3) = 0.75</code> (i.e., <code>75%</code>).</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Solution\",\"pickIndex\"]\n[[[1]],[]]\nOutput\n[null,0]\n\nExplanation\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\n</pre> <p>Example 2:</p> <pre>\nInput\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]\nOutput\n[null,1,1,1,1,0]\n\nExplanation\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= w.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= w[i] &lt;= 10<sup>5</sup></code></li> <li><code>pickIndex</code> will be called at most <code>10<sup>4</sup></code> times.</li> </ul>"},{"location":"LeetCode_Problems/0529/","title":"529. Minesweeper","text":"Problem <p>Let's play the minesweeper game (Wikipedia, online game)!</p> <p>You are given an <code>m x n</code> char matrix <code>board</code> representing the game board where:</p> <ul> <li><code>'M'</code> represents an unrevealed mine,</li> <li><code>'E'</code> represents an unrevealed empty square,</li> <li><code>'B'</code> represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),</li> <li>digit (<code>'1'</code> to <code>'8'</code>) represents how many mines are adjacent to this revealed square, and</li> <li><code>'X'</code> represents a revealed mine.</li> </ul> <p>You are also given an integer array <code>click</code> where <code>click = [click<sub>r</sub>, click<sub>c</sub>]</code> represents the next click position among all the unrevealed squares (<code>'M'</code> or <code>'E'</code>).</p> <p>Return the board after revealing this position according to the following rules:</p> <ol> <li>If a mine <code>'M'</code> is revealed, then the game is over. You should change it to <code>'X'</code>.</li> <li>If an empty square <code>'E'</code> with no adjacent mines is revealed, then change it to a revealed blank <code>'B'</code> and all of its adjacent unrevealed squares should be revealed recursively.</li> <li>If an empty square <code>'E'</code> with at least one adjacent mine is revealed, then change it to a digit (<code>'1'</code> to <code>'8'</code>) representing the number of adjacent mines.</li> <li>Return the board when no more squares will be revealed.</li> </ol> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>board[i][j]</code> is either <code>'M'</code>, <code>'E'</code>, <code>'B'</code>, or a digit from <code>'1'</code> to <code>'8'</code>.</li> <li><code>click.length == 2</code></li> <li><code>0 &lt;= click<sub>r</sub> &lt; m</code></li> <li><code>0 &lt;= click<sub>c</sub> &lt; n</code></li> <li><code>board[click<sub>r</sub>][click<sub>c</sub>]</code> is either <code>'M'</code> or <code>'E'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0530/","title":"530. Minimum Absolute Difference in BST","text":"Problem <p>Given the <code>root</code> of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [4,2,6,1,3]\nOutput: 1\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Note: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/</p>"},{"location":"LeetCode_Problems/0531/","title":"531. Lonely Pixel I","text":"Problem"},{"location":"LeetCode_Problems/0532/","title":"532. K-diff Pairs in an Array","text":"Problem <p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return the number of unique k-diff pairs in the array.</p> <p>A k-diff pair is an integer pair <code>(nums[i], nums[j])</code>, where the following are true:</p> <ul> <li><code>0 &lt;= i, j &lt; nums.length</code></li> <li><code>i != j</code></li> <li><code>|nums[i] - nums[j]| == k</code></li> </ul> <p>Notice that <code>|val|</code> denotes the absolute value of <code>val</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,1,4,1,5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of unique pairs.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4,5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,3,1,5,4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></code></li> <li><code>0 &lt;= k &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0533/","title":"533. Lonely Pixel II","text":"Problem"},{"location":"LeetCode_Problems/0534/","title":"534. Game Play Analysis III","text":"Problem"},{"location":"LeetCode_Problems/0535/","title":"535. Encode and Decode TinyURL","text":"Problem Note: This is a companion problem to the System Design problem: Design TinyURL. <p>TinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>. Design a class to encode a URL and decode a tiny URL.</p> <p>There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</p> <p>Implement the <code>Solution</code> class:</p> <ul> <li><code>Solution()</code> Initializes the object of the system.</li> <li><code>String encode(String longUrl)</code> Returns a tiny URL for the given <code>longUrl</code>.</li> <li><code>String decode(String shortUrl)</code> Returns the original long URL for the given <code>shortUrl</code>. It is guaranteed that the given <code>shortUrl</code> was encoded by the same object.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: url = \"https://leetcode.com/problems/design-tinyurl\"\nOutput: \"https://leetcode.com/problems/design-tinyurl\"\n\nExplanation:\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after decoding it.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= url.length &lt;= 10<sup>4</sup></code></li> <li><code>url</code> is guranteed to be a valid URL.</li> </ul>"},{"location":"LeetCode_Problems/0536/","title":"536. Construct Binary Tree from String","text":"Problem"},{"location":"LeetCode_Problems/0537/","title":"537. Complex Number Multiplication","text":"Problem <p>A complex number can be represented as a string on the form <code>\"real+imaginaryi\"</code> where:</p> <ul> <li><code>real</code> is the real part and is an integer in the range <code>[-100, 100]</code>.</li> <li><code>imaginary</code> is the imaginary part and is an integer in the range <code>[-100, 100]</code>.</li> <li><code>i<sup>2</sup> == -1</code>.</li> </ul> <p>Given two complex numbers <code>num1</code> and <code>num2</code> as strings, return a string of the complex number that represents their multiplications.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num1 = \"1+1i\", num2 = \"1+1i\"\nOutput: \"0+2i\"\nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\n</pre> <p>Example 2:</p> <pre>\nInput: num1 = \"1+-1i\", num2 = \"1+-1i\"\nOutput: \"0+-2i\"\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>num1</code> and <code>num2</code> are valid complex numbers.</li> </ul>"},{"location":"LeetCode_Problems/0538/","title":"538. Convert BST to Greater Tree","text":"Problem <p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.</p> <p>As a reminder, a binary search tree is a tree that satisfies these constraints:</p> <ul> <li>The left subtree of a node contains only nodes with keys less than the node's key.</li> <li>The right subtree of a node contains only nodes with keys greater than the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</pre> <p>Example 2:</p> <pre>\nInput: root = [0,null,1]\nOutput: [1,null,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>All the values in the tree are unique.</li> <li><code>root</code> is guaranteed to be a valid binary search tree.</li> </ul> <p> </p> <p>Note: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/</p>"},{"location":"LeetCode_Problems/0539/","title":"539. Minimum Time Difference","text":"Problem <p>Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.</p> <p> </p> <p>Example 1:</p> <pre>Input: timePoints = [\"23:59\",\"00:00\"]\nOutput: 1\n</pre> <p>Example 2:</p> <pre>Input: timePoints = [\"00:00\",\"23:59\",\"00:00\"]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= timePoints.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>timePoints[i]</code> is in the format \"HH:MM\".</li> </ul>"},{"location":"LeetCode_Problems/0540/","title":"540. Single Element in a Sorted Array","text":"Problem <p>You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.</p> <p>Return the single element that appears only once.</p> <p>Your solution must run in <code>O(log n)</code> time and <code>O(1)</code> space.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,1,2,3,3,4,4,8,8]\nOutput: 2\n</pre> <p>Example 2:</p> <pre>Input: nums = [3,3,7,7,10,11,11]\nOutput: 10\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0541/","title":"541. Reverse String II","text":"Problem <p>Given a string <code>s</code> and an integer <code>k</code>, reverse the first <code>k</code> characters for every <code>2k</code> characters counting from the start of the string.</p> <p>If there are fewer than <code>k</code> characters left, reverse all of them. If there are less than <code>2k</code> but greater than or equal to <code>k</code> characters, then reverse the first <code>k</code> characters and leave the other as original.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"abcdefg\", k = 2\nOutput: \"bacdfeg\"\n</pre> <p>Example 2:</p> <pre>Input: s = \"abcd\", k = 2\nOutput: \"bacd\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of only lowercase English letters.</li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0542/","title":"542. 01 Matrix","text":"Problem <p>Given an <code>m x n</code> binary matrix <code>mat</code>, return the distance of the nearest <code>0</code> for each cell.</p> <p>The distance between two adjacent cells is <code>1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: [[0,0,0],[0,1,0],[0,0,0]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: mat = [[0,0,0],[0,1,0],[1,1,1]]\nOutput: [[0,0,0],[0,1,0],[1,2,1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>4</sup></code></li> <li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li> <li>There is at least one <code>0</code> in <code>mat</code>.</li> </ul>"},{"location":"LeetCode_Problems/0543/","title":"543. Diameter of Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, return the length of the diameter of the tree.</p> <p>The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the <code>root</code>.</p> <p>The length of a path between two nodes is represented by the number of edges between them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1,2]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0544/","title":"544. Output Contest Matches","text":"Problem"},{"location":"LeetCode_Problems/0545/","title":"545. Boundary of Binary Tree","text":"Problem"},{"location":"LeetCode_Problems/0546/","title":"546. Remove Boxes","text":"Problem <p>You are given several <code>boxes</code> with different colors represented by different positive numbers.</p> <p>You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of <code>k</code> boxes, <code>k &gt;= 1</code>), remove them and get <code>k * k</code> points.</p> <p>Return the maximum points you can get.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: boxes = [1,3,2,2,2,3,4,3,1]\nOutput: 23\nExplanation:\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----&gt; [1, 3, 3, 4, 3, 1] (3*3=9 points) \n----&gt; [1, 3, 3, 3, 1] (1*1=1 points) \n----&gt; [1, 1] (3*3=9 points) \n----&gt; [] (2*2=4 points)\n</pre> <p>Example 2:</p> <pre>\nInput: boxes = [1,1,1]\nOutput: 9\n</pre> <p>Example 3:</p> <pre>\nInput: boxes = [1]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= boxes.length &lt;= 100</code></li> <li><code>1 &lt;= boxes[i]\u00a0&lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0547/","title":"547. Number of Provinces","text":"Problem <p>There are <code>n</code> cities. Some of them are connected, while some are not. If city <code>a</code> is connected directly with city <code>b</code>, and city <code>b</code> is connected directly with city <code>c</code>, then city <code>a</code> is connected indirectly with city <code>c</code>.</p> <p>A province is a group of directly or indirectly connected cities and no other cities outside of the group.</p> <p>You are given an <code>n x n</code> matrix <code>isConnected</code> where <code>isConnected[i][j] = 1</code> if the <code>i<sup>th</sup></code> city and the <code>j<sup>th</sup></code> city are directly connected, and <code>isConnected[i][j] = 0</code> otherwise.</p> <p>Return the total number of provinces.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\nOutput: 2\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 200</code></li> <li><code>n == isConnected.length</code></li> <li><code>n == isConnected[i].length</code></li> <li><code>isConnected[i][j]</code> is <code>1</code> or <code>0</code>.</li> <li><code>isConnected[i][i] == 1</code></li> <li><code>isConnected[i][j] == isConnected[j][i]</code></li> </ul>"},{"location":"LeetCode_Problems/0548/","title":"548. Split Array with Equal Sum","text":"Problem"},{"location":"LeetCode_Problems/0549/","title":"549. Binary Tree Longest Consecutive Sequence II","text":"Problem"},{"location":"LeetCode_Problems/0550/","title":"550. Game Play Analysis IV","text":"Problem <p>Table: <code>Activity</code></p> <pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| player_id    | int     |\n| device_id    | int     |\n| event_date   | date    |\n| games_played | int     |\n+--------------+---------+\n(player_id, event_date) is the primary key (combination of columns with unique values) of this table.\nThis table shows the activity of players of some games.\nEach row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.\n</pre> <p> </p> <p>Write a\u00a0solution\u00a0to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nActivity table:\n+-----------+-----------+------------+--------------+\n| player_id | device_id | event_date | games_played |\n+-----------+-----------+------------+--------------+\n| 1         | 2         | 2016-03-01 | 5            |\n| 1         | 2         | 2016-03-02 | 6            |\n| 2         | 3         | 2017-06-25 | 1            |\n| 3         | 1         | 2016-03-02 | 0            |\n| 3         | 4         | 2018-07-03 | 5            |\n+-----------+-----------+------------+--------------+\nOutput: \n+-----------+\n| fraction  |\n+-----------+\n| 0.33      |\n+-----------+\nExplanation: \nOnly the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33\n</pre>"},{"location":"LeetCode_Problems/0551/","title":"551. Student Attendance Record I","text":"Problem <p>You are given a string <code>s</code> representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p> <ul> <li><code>'A'</code>: Absent.</li> <li><code>'L'</code>: Late.</li> <li><code>'P'</code>: Present.</li> </ul> <p>The student is eligible for an attendance award if they meet both of the following criteria:</p> <ul> <li>The student was absent (<code>'A'</code>) for strictly fewer than 2 days total.</li> <li>The student was never late (<code>'L'</code>) for 3 or more consecutive days.</li> </ul> <p>Return <code>true</code> if the student is eligible for an attendance award, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"PPALLP\"\nOutput: true\nExplanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"PPALLL\"\nOutput: false\nExplanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'A'</code>, <code>'L'</code>, or <code>'P'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0552/","title":"552. Student Attendance Record II","text":"Problem <p>An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:</p> <ul> <li><code>'A'</code>: Absent.</li> <li><code>'L'</code>: Late.</li> <li><code>'P'</code>: Present.</li> </ul> <p>Any student is eligible for an attendance award if they meet both of the following criteria:</p> <ul> <li>The student was absent (<code>'A'</code>) for strictly fewer than 2 days total.</li> <li>The student was never late (<code>'L'</code>) for 3 or more consecutive days.</li> </ul> <p>Given an integer <code>n</code>, return the number of possible attendance records of length <code>n</code> that make a student eligible for an attendance award. The answer may be very large, so return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: 8\nExplanation: There are 8 records with length 2 that are eligible for an award:\n\"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\nOnly \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2).\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 3\n</pre> <p>Example 3:</p> <pre>\nInput: n = 10101\nOutput: 183236316\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0553/","title":"553. Optimal Division","text":"Problem <p>You are given an integer array <code>nums</code>. The adjacent integers in <code>nums</code> will perform the float division.</p> <ul> <li>For example, for <code>nums = [2,3,4]</code>, we will evaluate the expression <code>\"2/3/4\"</code>.</li> </ul> <p>However, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.</p> <p>Return the corresponding expression that has the maximum value in string format.</p> <p>Note: your expression should not contain redundant parenthesis.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1000,100,10,2]\nOutput: \"1000/(100/10/2)\"\nExplanation: 1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in \"1000/((100/10)/2)\" are redundant since they do not influence the operation priority.\nSo you should return \"1000/(100/10/2)\".\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,4]\nOutput: \"2/(3/4)\"\nExplanation: (2/(3/4)) = 8/3 = 2.667\nIt can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10</code></li> <li><code>2 &lt;= nums[i] &lt;= 1000</code></li> <li>There is only one optimal division for the given input.</li> </ul>"},{"location":"LeetCode_Problems/0554/","title":"554. Brick Wall","text":"Problem <p>There is a rectangular brick wall in front of you with <code>n</code> rows of bricks. The <code>i<sup>th</sup></code> row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.</p> <p>Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.</p> <p>Given the 2D array <code>wall</code> that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\nOutput: 2\n</pre> <p>Example 2:</p> <pre>\nInput: wall = [[1],[1],[1]]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == wall.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= wall[i].length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= sum(wall[i].length) &lt;= 2 * 10<sup>4</sup></code></li> <li><code>sum(wall[i])</code> is the same for each row <code>i</code>.</li> <li><code>1 &lt;= wall[i][j] &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0555/","title":"555. Split Concatenated Strings","text":"Problem"},{"location":"LeetCode_Problems/0556/","title":"556. Next Greater Element III","text":"Problem <p>Given a positive integer <code>n</code>, find the smallest integer which has exactly the same digits existing in the integer <code>n</code> and is greater in value than <code>n</code>. If no such positive integer exists, return <code>-1</code>.</p> <p>Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 12\nOutput: 21\n</pre> <p>Example 2:</p> <pre>Input: n = 21\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0557/","title":"557. Reverse Words in a String III","text":"Problem <p>Given a string <code>s</code>, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"Let's take LeetCode contest\"\nOutput: \"s'teL ekat edoCteeL tsetnoc\"\n</pre> <p>Example 2:</p> <pre>Input: s = \"God Ding\"\nOutput: \"doG gniD\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s</code> contains printable ASCII characters.</li> <li><code>s</code> does not contain any leading or trailing spaces.</li> <li>There is at least one word in <code>s</code>.</li> <li>All the words in <code>s</code> are separated by a single space.</li> </ul>"},{"location":"LeetCode_Problems/0558/","title":"558. Logical OR of Two Binary Grids Represented as Quad-Trees","text":"Problem <p>A Binary Matrix is a matrix in which all the elements are either 0 or 1.</p> <p>Given <code>quadTree1</code> and <code>quadTree2</code>. <code>quadTree1</code> represents a <code>n * n</code> binary matrix and <code>quadTree2</code> represents another <code>n * n</code> binary matrix.</p> <p>Return a Quad-Tree representing the <code>n * n</code> binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by <code>quadTree1</code> and <code>quadTree2</code>.</p> <p>Notice that you can assign the value of a node to True or False when <code>isLeaf</code> is False, and both are accepted in the answer.</p> <p>A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:</p> <ul> <li><code>val</code>: True if the node represents a grid of 1's or False if the node represents a grid of 0's.</li> <li><code>isLeaf</code>: True if the node is leaf node on the tree or False if the node has the four children.</li> </ul> <pre>\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n}</pre> <p>We can construct a Quad-Tree from a two-dimensional area using the following steps:</p> <ol> <li>If the current grid has the same value (i.e all <code>1's</code> or all <code>0's</code>) set <code>isLeaf</code> True and set <code>val</code> to the value of the grid and set the four children to Null and stop.</li> <li>If the current grid has different values, set <code>isLeaf</code> to False and set <code>val</code> to any value and divide the current grid into four sub-grids as shown in the photo.</li> <li>Recurse for each of the children with the proper sub-grid.</li> </ol> <p></p> <p>If you want to know more about the Quad-Tree, you can refer to the wiki.</p> <p>Quad-Tree format:</p> <p>The input/output represents the serialized format of a Quad-Tree using level order traversal, where <code>null</code> signifies a path terminator where no node exists below.</p> <p>It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list <code>[isLeaf, val]</code>.</p> <p>If the value of <code>isLeaf</code> or <code>val</code> is True we represent it as 1 in the list <code>[isLeaf, val]</code> and if the value of <code>isLeaf</code> or <code>val</code> is False we represent it as 0.</p> <p> </p> <p>Example 1:</p> <p> </p> <pre>\nInput: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nOutput: [[0,0],[1,1],[1,1],[1,1],[1,0]]\nExplanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\nNotice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.\n\n</pre> <p>Example 2:</p> <pre>\nInput: quadTree1 = [[1,0]], quadTree2 = [[1,0]]\nOutput: [[1,0]]\nExplanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\nThe resulting matrix is of size 1*1 with also zero.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>quadTree1</code> and <code>quadTree2</code> are both valid Quad-Trees each representing a <code>n * n</code> grid.</li> <li><code>n == 2<sup>x</sup></code> where <code>0 &lt;= x &lt;= 9</code>.</li> </ul>"},{"location":"LeetCode_Problems/0559/","title":"559. Maximum Depth of N-ary Tree","text":"Problem <p>Given a n-ary tree, find its maximum depth.</p> <p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p> <p>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: 3\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The total number of nodes is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li>The depth of the n-ary tree is less than or equal to <code>1000</code>.</li> </ul>"},{"location":"LeetCode_Problems/0560/","title":"560. Subarray Sum Equals K","text":"Problem <p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return the total number of subarrays whose sum equals to <code>k</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,1,1], k = 2\nOutput: 2\n</pre> <p>Example 2:</p> <pre>Input: nums = [1,2,3], k = 3\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> <li><code>-10<sup>7</sup> &lt;= k &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0561/","title":"561. Array Partition","text":"Problem <p>Given an integer array <code>nums</code> of <code>2n</code> integers, group these integers into <code>n</code> pairs <code>(a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>)</code> such that the sum of <code>min(a<sub>i</sub>, b<sub>i</sub>)</code> for all <code>i</code> is maximized. Return the maximized sum.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,4,3,2]\nOutput: 4\nExplanation: All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -&gt; min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -&gt; min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -&gt; min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4.</pre> <p>Example 2:</p> <pre>\nInput: nums = [6,2,6,5,1,2]\nOutput: 9\nExplanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>nums.length == 2 * n</code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0562/","title":"562. Longest Line of Consecutive One in Matrix","text":"Problem"},{"location":"LeetCode_Problems/0563/","title":"563. Binary Tree Tilt","text":"Problem <p>Given the <code>root</code> of a binary tree, return the sum of every tree node's tilt.</p> <p>The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as <code>0</code>. The rule is similar if the node does not have a right child.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3]\nOutput: 1\nExplanation: \nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [4,2,9,3,5,null,7]\nOutput: 15\nExplanation: \nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [21,7,14,1,1,2,2,3,3]\nOutput: 9\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0564/","title":"564. Find the Closest Palindrome","text":"Problem <p>Given a string <code>n</code> representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.</p> <p>The closest is defined as the absolute difference minimized between two integers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = \"123\"\nOutput: \"121\"\n</pre> <p>Example 2:</p> <pre>\nInput: n = \"1\"\nOutput: \"0\"\nExplanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n.length &lt;= 18</code></li> <li><code>n</code> consists of only digits.</li> <li><code>n</code> does not have leading zeros.</li> <li><code>n</code> is representing an integer in the range <code>[1, 10<sup>18</sup> - 1]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0565/","title":"565. Array Nesting","text":"Problem <p>You are given an integer array <code>nums</code> of length <code>n</code> where <code>nums</code> is a permutation of the numbers in the range <code>[0, n - 1]</code>.</p> <p>You should build a set <code>s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... }</code> subjected to the following rule:</p> <ul> <li>The first element in <code>s[k]</code> starts with the selection of the element <code>nums[k]</code> of <code>index = k</code>.</li> <li>The next element in <code>s[k]</code> should be <code>nums[nums[k]]</code>, and then <code>nums[nums[nums[k]]]</code>, and so on.</li> <li>We stop adding right before a duplicate element occurs in <code>s[k]</code>.</li> </ul> <p>Return the longest length of a set <code>s[k]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,4,0,3,1,6,2]\nOutput: 4\nExplanation: \nnums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\nOne of the longest sets s[k]:\ns[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1,2]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt; nums.length</code></li> <li>All the values of <code>nums</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0566/","title":"566. Reshape the Matrix","text":"Problem <p>In MATLAB, there is a handy function called <code>reshape</code> which can reshape an <code>m x n</code> matrix into a new one with a different size <code>r x c</code> keeping its original data.</p> <p>You are given an <code>m x n</code> matrix <code>mat</code> and two integers <code>r</code> and <code>c</code> representing the number of rows and the number of columns of the wanted reshaped matrix.</p> <p>The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.</p> <p>If the <code>reshape</code> operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[1,2],[3,4]], r = 1, c = 4\nOutput: [[1,2,3,4]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: mat = [[1,2],[3,4]], r = 2, c = 4\nOutput: [[1,2],[3,4]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-1000 &lt;= mat[i][j] &lt;= 1000</code></li> <li><code>1 &lt;= r, c &lt;= 300</code></li> </ul>"},{"location":"LeetCode_Problems/0567/","title":"567. Permutation in String","text":"Problem <p>Given two strings <code>s1</code> and <code>s2</code>, return <code>true</code> if <code>s2</code> contains a permutation of <code>s1</code>, or <code>false</code> otherwise.</p> <p>In other words, return <code>true</code> if one of <code>s1</code>'s permutations is the substring of <code>s2</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"ab\", s2 = \"eidbaooo\"\nOutput: true\nExplanation: s2 contains one permutation of s1 (\"ba\").\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"ab\", s2 = \"eidboaoo\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length &lt;= 10<sup>4</sup></code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0568/","title":"568. Maximum Vacation Days","text":"Problem"},{"location":"LeetCode_Problems/0569/","title":"569. Median Employee Salary","text":"Problem"},{"location":"LeetCode_Problems/0570/","title":"570. Managers with at Least 5 Direct Reports","text":"Problem <p>Table: <code>Employee</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| department  | varchar |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the name of an employee, their department, and the id of their manager.\nIf managerId is null, then the employee does not have a manager.\nNo employee will be the manager of themself.\n</pre> <p> </p> <p>Write a solution to find managers with at least five direct reports.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployee table:\n+-----+-------+------------+-----------+\n| id  | name  | department | managerId |\n+-----+-------+------------+-----------+\n| 101 | John  | A          | None      |\n| 102 | Dan   | A          | 101       |\n| 103 | James | A          | 101       |\n| 104 | Amy   | A          | 101       |\n| 105 | Anne  | A          | 101       |\n| 106 | Ron   | B          | 101       |\n+-----+-------+------------+-----------+\nOutput: \n+------+\n| name |\n+------+\n| John |\n+------+\n</pre>"},{"location":"LeetCode_Problems/0571/","title":"571. Find Median Given Frequency of Numbers","text":"Problem"},{"location":"LeetCode_Problems/0572/","title":"572. Subtree of Another Tree","text":"Problem <p>Given the roots of two binary trees <code>root</code> and <code>subRoot</code>, return <code>true</code> if there is a subtree of <code>root</code> with the same structure and node values of<code> subRoot</code> and <code>false</code> otherwise.</p> <p>A subtree of a binary tree <code>tree</code> is a tree that consists of a node in <code>tree</code> and all of this node's descendants. The tree <code>tree</code> could also be considered as a subtree of itself.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,4,5,1,2], subRoot = [4,1,2]\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the <code>root</code> tree is in the range <code>[1, 2000]</code>.</li> <li>The number of nodes in the <code>subRoot</code> tree is in the range <code>[1, 1000]</code>.</li> <li><code>-10<sup>4</sup> &lt;= root.val &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= subRoot.val &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0573/","title":"573. Squirrel Simulation","text":"Problem"},{"location":"LeetCode_Problems/0574/","title":"574. Winning Candidate","text":"Problem"},{"location":"LeetCode_Problems/0575/","title":"575. Distribute Candies","text":"Problem <p>Alice has <code>n</code> candies, where the <code>i<sup>th</sup></code> candy is of type <code>candyType[i]</code>. Alice noticed that she started to gain weight, so she visited a doctor.</p> <p>The doctor advised Alice to only eat <code>n / 2</code> of the candies she has (<code>n</code> is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.</p> <p>Given the integer array <code>candyType</code> of length <code>n</code>, return the maximum number of different types of candies she can eat if she only eats <code>n / 2</code> of them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: candyType = [1,1,2,2,3,3]\nOutput: 3\nExplanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.\n</pre> <p>Example 2:</p> <pre>\nInput: candyType = [1,1,2,3]\nOutput: 2\nExplanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.\n</pre> <p>Example 3:</p> <pre>\nInput: candyType = [6,6,6,6]\nOutput: 1\nExplanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == candyType.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>n</code>\u00a0is even.</li> <li><code>-10<sup>5</sup> &lt;= candyType[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0576/","title":"576. Out of Boundary Paths","text":"Problem <p>There is an <code>m x n</code> grid with a ball. The ball is initially at the position <code>[startRow, startColumn]</code>. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most <code>maxMove</code> moves to the ball.</p> <p>Given the five integers <code>m</code>, <code>n</code>, <code>maxMove</code>, <code>startRow</code>, <code>startColumn</code>, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0\nOutput: 6\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1\nOutput: 12\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>0 &lt;= maxMove &lt;= 50</code></li> <li><code>0 &lt;= startRow &lt; m</code></li> <li><code>0 &lt;= startColumn &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/0577/","title":"577. Employee Bonus","text":"Problem <p>Table: <code>Employee</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| empId       | int     |\n| name        | varchar |\n| supervisor  | int     |\n| salary      | int     |\n+-------------+---------+\nempId is the column with unique values for this table.\nEach row of this table indicates the name and the ID of an employee in addition to their salary and the id of their manager.\n</pre> <p> </p> <p>Table: <code>Bonus</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| empId       | int  |\n| bonus       | int  |\n+-------------+------+\nempId is the column of unique values for this table.\nempId is a foreign key (reference column) to empId from the Employee table.\nEach row of this table contains the id of an employee and their respective bonus.\n</pre> <p> </p> <p>Write a solution to report the name and bonus amount of each employee with a bonus less than <code>1000</code>.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployee table:\n+-------+--------+------------+--------+\n| empId | name   | supervisor | salary |\n+-------+--------+------------+--------+\n| 3     | Brad   | null       | 4000   |\n| 1     | John   | 3          | 1000   |\n| 2     | Dan    | 3          | 2000   |\n| 4     | Thomas | 3          | 4000   |\n+-------+--------+------------+--------+\nBonus table:\n+-------+-------+\n| empId | bonus |\n+-------+-------+\n| 2     | 500   |\n| 4     | 2000  |\n+-------+-------+\nOutput: \n+------+-------+\n| name | bonus |\n+------+-------+\n| Brad | null  |\n| John | null  |\n| Dan  | 500   |\n+------+-------+\n</pre>"},{"location":"LeetCode_Problems/0578/","title":"578. Get Highest Answer Rate Question","text":"Problem"},{"location":"LeetCode_Problems/0579/","title":"579. Find Cumulative Salary of an Employee","text":"Problem"},{"location":"LeetCode_Problems/0580/","title":"580. Count Student Number in Departments","text":"Problem"},{"location":"LeetCode_Problems/0581/","title":"581. Shortest Unsorted Continuous Subarray","text":"Problem <p>Given an integer array <code>nums</code>, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.</p> <p>Return the shortest such subarray and output its length.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: 0\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Follow up: Can you solve it in <code>O(n)</code> time complexity?</p>"},{"location":"LeetCode_Problems/0582/","title":"582. Kill Process","text":"Problem"},{"location":"LeetCode_Problems/0583/","title":"583. Delete Operation for Two Strings","text":"Problem <p>Given two strings <code>word1</code> and <code>word2</code>, return the minimum number of steps required to make <code>word1</code> and <code>word2</code> the same.</p> <p>In one step, you can delete exactly one character in either string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word1 = \"sea\", word2 = \"eat\"\nOutput: 2\nExplanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\n</pre> <p>Example 2:</p> <pre>\nInput: word1 = \"leetcode\", word2 = \"etco\"\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word1.length, word2.length &lt;= 500</code></li> <li><code>word1</code> and <code>word2</code> consist of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0584/","title":"584. Find Customer Referee","text":"Problem <p>Table: <code>Customer</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| referee_id  | int     |\n+-------------+---------+\nIn SQL, id is the primary key column for this table.\nEach row of this table indicates the id of a customer, their name, and the id of the customer who referred them.\n</pre> <p> </p> <p>Find the names of the customer that are not referred by the customer with <code>id = 2</code>.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nCustomer table:\n+----+------+------------+\n| id | name | referee_id |\n+----+------+------------+\n| 1  | Will | null       |\n| 2  | Jane | null       |\n| 3  | Alex | 2          |\n| 4  | Bill | null       |\n| 5  | Zack | 1          |\n| 6  | Mark | 2          |\n+----+------+------------+\nOutput: \n+------+\n| name |\n+------+\n| Will |\n| Jane |\n| Bill |\n| Zack |\n+------+\n</pre>"},{"location":"LeetCode_Problems/0585/","title":"585. Investments in 2016","text":"Problem <p>Table: <code>Insurance</code></p> <pre>\n+-------------+-------+\n| Column Name | Type  |\n+-------------+-------+\n| pid         | int   |\n| tiv_2015    | float |\n| tiv_2016    | float |\n| lat         | float |\n| lon         | float |\n+-------------+-------+\npid is the primary key (column with unique values) for this table.\nEach row of this table contains information about one policy where:\npid is the policyholder's policy ID.\ntiv_2015 is the total investment value in 2015 and tiv_2016 is the total investment value in 2016.\nlat is the latitude of the policy holder's city. It's guaranteed that lat is not NULL.\nlon is the longitude of the policy holder's city. It's guaranteed that lon is not NULL.\n</pre> <p> </p> <p>Write a solution to report the sum of all total investment values in 2016 <code>tiv_2016</code>, for all policyholders who:</p> <ul> <li>have the same <code>tiv_2015</code> value as one or more other policyholders, and</li> <li>are not located in the same city as any other policyholder (i.e., the (<code>lat, lon</code>) attribute pairs must be unique).</li> </ul> <p>Round <code>tiv_2016</code> to two decimal places.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nInsurance table:\n+-----+----------+----------+-----+-----+\n| pid | tiv_2015 | tiv_2016 | lat | lon |\n+-----+----------+----------+-----+-----+\n| 1   | 10       | 5        | 10  | 10  |\n| 2   | 20       | 20       | 20  | 20  |\n| 3   | 10       | 30       | 20  | 20  |\n| 4   | 10       | 40       | 40  | 40  |\n+-----+----------+----------+-----+-----+\nOutput: \n+----------+\n| tiv_2016 |\n+----------+\n| 45.00    |\n+----------+\nExplanation: \nThe first record in the table, like the last record, meets both of the two criteria.\nThe tiv_2015 value 10 is the same as the third and fourth records, and its location is unique.\n\nThe second record does not meet any of the two criteria. Its tiv_2015 is not like any other policyholders and its location is the same as the third record, which makes the third record fail, too.\nSo, the result is the sum of tiv_2016 of the first and last record, which is 45.\n</pre>"},{"location":"LeetCode_Problems/0586/","title":"586. Customer Placing the Largest Number of Orders","text":"Problem <p>Table: <code>Orders</code></p> <pre>\n+-----------------+----------+\n| Column Name     | Type     |\n+-----------------+----------+\n| order_number    | int      |\n| customer_number | int      |\n+-----------------+----------+\norder_number is the primary key (column with unique values) for this table.\nThis table contains information about the order ID and the customer ID.\n</pre> <p> </p> <p>Write a solution to find the <code>customer_number</code> for the customer who has placed the largest number of orders.</p> <p>The test cases are generated so that exactly one customer will have placed more orders than any other customer.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nOrders table:\n+--------------+-----------------+\n| order_number | customer_number |\n+--------------+-----------------+\n| 1            | 1               |\n| 2            | 2               |\n| 3            | 3               |\n| 4            | 3               |\n+--------------+-----------------+\nOutput: \n+-----------------+\n| customer_number |\n+-----------------+\n| 3               |\n+-----------------+\nExplanation: \nThe customer with number 3 has two orders, which is greater than either customer 1 or 2 because each of them only has one order. \nSo the result is customer_number 3.\n</pre> <p> </p> <p>Follow up: What if more than one customer has the largest number of orders, can you find all the <code>customer_number</code> in this case?</p>"},{"location":"LeetCode_Problems/0587/","title":"587. Erect the Fence","text":"Problem <p>You are given an array <code>trees</code> where <code>trees[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the location of a tree in the garden.</p> <p>Fence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if all the trees are enclosed.</p> <p>Return the coordinates of trees that are exactly located on the fence perimeter. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\nOutput: [[1,1],[2,0],[4,2],[3,3],[2,4]]\nExplanation: All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: trees = [[1,2],[2,2],[4,2]]\nOutput: [[4,2],[2,2],[1,2]]\nExplanation: The fence forms a line that passes through all the trees.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= trees.length &lt;= 3000</code></li> <li><code>trees[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li> <li>All the given positions are unique.</li> </ul>"},{"location":"LeetCode_Problems/0588/","title":"588. Design In-Memory File System","text":"Problem"},{"location":"LeetCode_Problems/0589/","title":"589. N-ary Tree Preorder Traversal","text":"Problem <p>Given the <code>root</code> of an n-ary tree, return the preorder traversal of its nodes' values.</p> <p>Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [1,3,5,6,2,4]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>The height of the n-ary tree is less than or equal to <code>1000</code>.</li> </ul> <p> </p> <p>Follow up: Recursive solution is trivial, could you do it iteratively?</p>"},{"location":"LeetCode_Problems/0590/","title":"590. N-ary Tree Postorder Traversal","text":"Problem <p>Given the <code>root</code> of an n-ary tree, return the postorder traversal of its nodes' values.</p> <p>Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [5,6,3,2,4,1]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>The height of the n-ary tree is less than or equal to <code>1000</code>.</li> </ul> <p> </p> <p>Follow up: Recursive solution is trivial, could you do it iteratively?</p>"},{"location":"LeetCode_Problems/0591/","title":"591. Tag Validator","text":"Problem <p>Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.</p> <p>A code snippet is valid if all the following rules hold:</p> <ol> <li>The code must be wrapped in a valid closed tag. Otherwise, the code is invalid.</li> <li>A closed tag (not necessarily valid) has exactly the following format : <code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>. Among them, <code>&lt;TAG_NAME&gt;</code> is the start tag, and <code>&lt;/TAG_NAME&gt;</code> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.</li> <li>A valid <code>TAG_NAME</code> only contain upper-case letters, and has length in range [1,9]. Otherwise, the <code>TAG_NAME</code> is invalid.</li> <li>A valid <code>TAG_CONTENT</code> may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <code>&lt;</code>, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the <code>TAG_CONTENT</code> is invalid.</li> <li>A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.</li> <li>A <code>&lt;</code> is unmatched if you cannot find a subsequent <code>&gt;</code>. And when you find a <code>&lt;</code> or <code>&lt;/</code>, all the subsequent characters until the next <code>&gt;</code> should be parsed as TAG_NAME (not necessarily valid).</li> <li>The cdata has the following format : <code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>. The range of <code>CDATA_CONTENT</code> is defined as the characters between <code>&lt;![CDATA[</code> and the first subsequent <code>]]&gt;</code>.</li> <li><code>CDATA_CONTENT</code> may contain any characters. The function of cdata is to forbid the validator to parse <code>CDATA_CONTENT</code>, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.</li> </ol> <p> </p> <p>Example 1:</p> <pre>\nInput: code = \"&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;\"\nOutput: true\nExplanation: \nThe code is wrapped in a closed tag : &lt;DIV&gt; and &lt;/DIV&gt;. \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.\n</pre> <p>Example 2:</p> <pre>\nInput: code = \"&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;\"\nOutput: true\nExplanation:\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -&gt; \"&lt;DIV&gt;\"\nend_tag -&gt; \"&lt;/DIV&gt;\"\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -&gt; \"&gt;&gt;  ![cdata[]] \"\ncdata -&gt; \"&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;\", where the CDATA_CONTENT is \"&lt;div&gt;]&gt;\"\ntext2 -&gt; \"]]&gt;&gt;]\"\nThe reason why start_tag is NOT \"&lt;DIV&gt;&gt;&gt;\" is because of the rule 6.\nThe reason why cdata is NOT \"&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;\" is because of the rule 7.\n</pre> <p>Example 3:</p> <pre>\nInput: code = \"&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;\"\nOutput: false\nExplanation: Unbalanced. If \"&lt;A&gt;\" is closed, then \"&lt;B&gt;\" must be unmatched, and vice versa.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= code.length &lt;= 500</code></li> <li><code>code</code> consists of English letters, digits, <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'/'</code>, <code>'!'</code>, <code>'['</code>, <code>']'</code>, <code>'.'</code>, and <code>' '</code>.</li> </ul>"},{"location":"LeetCode_Problems/0592/","title":"592. Fraction Addition and Subtraction","text":"Problem <p>Given a string <code>expression</code> representing an expression of fraction addition and subtraction, return the calculation result in string format.</p> <p>The final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator <code>1</code>. So in this case, <code>2</code> should be converted to <code>2/1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: expression = \"-1/2+1/2\"\nOutput: \"0/1\"\n</pre> <p>Example 2:</p> <pre>\nInput: expression = \"-1/2+1/2+1/3\"\nOutput: \"1/3\"\n</pre> <p>Example 3:</p> <pre>\nInput: expression = \"1/3-1/2\"\nOutput: \"-1/6\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The input string only contains <code>'0'</code> to <code>'9'</code>, <code>'/'</code>, <code>'+'</code> and <code>'-'</code>. So does the output.</li> <li>Each fraction (input and output) has the format <code>\u00b1numerator/denominator</code>. If the first input fraction or the output is positive, then <code>'+'</code> will be omitted.</li> <li>The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range <code>[1, 10]</code>. If the denominator is <code>1</code>, it means this fraction is actually an integer in a fraction format defined above.</li> <li>The number of given fractions will be in the range <code>[1, 10]</code>.</li> <li>The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.</li> </ul>"},{"location":"LeetCode_Problems/0593/","title":"593. Valid Square","text":"Problem <p>Given the coordinates of four points in 2D space <code>p1</code>, <code>p2</code>, <code>p3</code> and <code>p4</code>, return <code>true</code> if the four points construct a square.</p> <p>The coordinate of a point <code>p<sub>i</sub></code> is represented as <code>[x<sub>i</sub>, y<sub>i</sub>]</code>. The input is not given in any order.</p> <p>A valid square has four equal sides with positive length and four equal angles (90-degree angles).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\nOutput: true\n</pre> <p>Example 2:</p> <pre>\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>p1.length == p2.length == p3.length == p4.length == 2</code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0594/","title":"594. Longest Harmonious Subsequence","text":"Problem <p>We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly <code>1</code>.</p> <p>Given an integer array <code>nums</code>, return the length of its longest harmonious subsequence among all its possible subsequences.</p> <p>A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,2,2,5,2,3,7]\nOutput: 5\nExplanation: The longest harmonious subsequence is [3,2,2,2,3].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,1,1]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0595/","title":"595. Big Countries","text":"Problem <p>Table: <code>World</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| name        | varchar |\n| continent   | varchar |\n| area        | int     |\n| population  | int     |\n| gdp         | bigint  |\n+-------------+---------+\nname is the primary key (column with unique values) for this table.\nEach row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its GDP value.\n</pre> <p> </p> <p>A country is big if:</p> <ul> <li>it has an area of at least\u00a0three million (i.e., <code>3000000 km<sup>2</sup></code>), or</li> <li>it has a population of at least\u00a0twenty-five million (i.e., <code>25000000</code>).</li> </ul> <p>Write a solution to find the name, population, and area of the big countries.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nWorld table:\n+-------------+-----------+---------+------------+--------------+\n| name        | continent | area    | population | gdp          |\n+-------------+-----------+---------+------------+--------------+\n| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |\n| Albania     | Europe    | 28748   | 2831741    | 12960000000  |\n| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |\n| Andorra     | Europe    | 468     | 78115      | 3712000000   |\n| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |\n+-------------+-----------+---------+------------+--------------+\nOutput: \n+-------------+------------+---------+\n| name        | population | area    |\n+-------------+------------+---------+\n| Afghanistan | 25500100   | 652230  |\n| Algeria     | 37100000   | 2381741 |\n+-------------+------------+---------+\n</pre>"},{"location":"LeetCode_Problems/0596/","title":"596. Classes More Than 5 Students","text":"Problem <p>Table: <code>Courses</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| student     | varchar |\n| class       | varchar |\n+-------------+---------+\n(student, class) is the primary key (combination of columns with unique values) for this table.\nEach row of this table indicates the name of a student and the class in which they are enrolled.\n</pre> <p> </p> <p>Write a solution to find all the classes that have at least five students.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nCourses table:\n+---------+----------+\n| student | class    |\n+---------+----------+\n| A       | Math     |\n| B       | English  |\n| C       | Math     |\n| D       | Biology  |\n| E       | Math     |\n| F       | Computer |\n| G       | Math     |\n| H       | Math     |\n| I       | Math     |\n+---------+----------+\nOutput: \n+---------+\n| class   |\n+---------+\n| Math    |\n+---------+\nExplanation: \n- Math has 6 students, so we include it.\n- English has 1 student, so we do not include it.\n- Biology has 1 student, so we do not include it.\n- Computer has 1 student, so we do not include it.\n</pre>"},{"location":"LeetCode_Problems/0597/","title":"597. Friend Requests I: Overall Acceptance Rate","text":"Problem"},{"location":"LeetCode_Problems/0598/","title":"598. Range Addition II","text":"Problem <p>You are given an <code>m x n</code> matrix <code>M</code> initialized with all <code>0</code>'s and an array of operations <code>ops</code>, where <code>ops[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> means <code>M[x][y]</code> should be incremented by one for all <code>0 &lt;= x &lt; a<sub>i</sub></code> and <code>0 &lt;= y &lt; b<sub>i</sub></code>.</p> <p>Count and return the number of maximum integers in the matrix after performing all the operations.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: m = 3, n = 3, ops = [[2,2],[3,3]]\nOutput: 4\nExplanation: The maximum integer in M is 2, and there are four of it in M. So return 4.\n</pre> <p>Example 2:</p> <pre>\nInput: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\nOutput: 4\n</pre> <p>Example 3:</p> <pre>\nInput: m = 3, n = 3, ops = []\nOutput: 9\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 4 * 10<sup>4</sup></code></li> <li><code>0 &lt;= ops.length &lt;= 10<sup>4</sup></code></li> <li><code>ops[i].length == 2</code></li> <li><code>1 &lt;= a<sub>i</sub> &lt;= m</code></li> <li><code>1 &lt;= b<sub>i</sub> &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/0599/","title":"599. Minimum Index Sum of Two Lists","text":"Problem <p>Given two arrays of strings <code>list1</code> and <code>list2</code>, find the common strings with the least index sum.</p> <p>A common string is a string that appeared in both <code>list1</code> and <code>list2</code>.</p> <p>A common string with the least index sum is a common string such that if it appeared at <code>list1[i]</code> and <code>list2[j]</code> then <code>i + j</code> should be the minimum value among all the other common strings.</p> <p>Return all the common strings with the least index sum. Return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]\nOutput: [\"Shogun\"]\nExplanation: The only common string is \"Shogun\".\n</pre> <p>Example 2:</p> <pre>\nInput: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]\nOutput: [\"Shogun\"]\nExplanation: The common string with the least index sum is \"Shogun\" with index sum = (0 + 1) = 1.\n</pre> <p>Example 3:</p> <pre>\nInput: list1 = [\"happy\",\"sad\",\"good\"], list2 = [\"sad\",\"happy\",\"good\"]\nOutput: [\"sad\",\"happy\"]\nExplanation: There are three common strings:\n\"happy\" with index sum = (0 + 1) = 1.\n\"sad\" with index sum = (1 + 0) = 1.\n\"good\" with index sum = (2 + 2) = 4.\nThe strings with the least index sum are \"sad\" and \"happy\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= list1.length, list2.length &lt;= 1000</code></li> <li><code>1 &lt;= list1[i].length, list2[i].length &lt;= 30</code></li> <li><code>list1[i]</code> and <code>list2[i]</code> consist of spaces <code>' '</code> and English letters.</li> <li>All the strings of <code>list1</code> are unique.</li> <li>All the strings of <code>list2</code> are unique.</li> <li>There is at least a common string between <code>list1</code> and <code>list2</code>.</li> </ul>"},{"location":"LeetCode_Problems/0600/","title":"600. Non-negative Integers without Consecutive Ones","text":"Problem <p>Given a positive integer <code>n</code>, return the number of the integers in the range <code>[0, n]</code> whose binary representations do not contain consecutive ones.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5\nOutput: 5\nExplanation:\nHere are the non-negative integers &lt;= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: n = 2\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0601/","title":"601. Human Traffic of Stadium","text":"Problem <p>Table: <code>Stadium</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| visit_date    | date    |\n| people        | int     |\n+---------------+---------+\nvisit_date is the column with unique values for this table.\nEach row of this table contains the visit date and visit id to the stadium with the number of people during the visit.\nAs the id increases, the date increases as well.\n</pre> <p> </p> <p>Write a solution to display the records with three or more rows with consecutive <code>id</code>'s, and the number of people is greater than or equal to 100 for each.</p> <p>Return the result table ordered by <code>visit_date</code> in ascending order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nStadium table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\nOutput: \n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\nExplanation: \nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has &gt;= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids.\n</pre>"},{"location":"LeetCode_Problems/0602/","title":"602. Friend Requests II: Who Has the Most Friends","text":"Problem <p>Table: <code>RequestAccepted</code></p> <pre>\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| requester_id   | int     |\n| accepter_id    | int     |\n| accept_date    | date    |\n+----------------+---------+\n(requester_id, accepter_id) is the primary key (combination of columns with unique values) for this table.\nThis table contains the ID of the user who sent the request, the ID of the user who received the request, and the date when the request was accepted.\n</pre> <p> </p> <p>Write a solution to find the people who have the most friends and the most friends number.</p> <p>The test cases are generated so that only one person has the most friends.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nRequestAccepted table:\n+--------------+-------------+-------------+\n| requester_id | accepter_id | accept_date |\n+--------------+-------------+-------------+\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n+--------------+-------------+-------------+\nOutput: \n+----+-----+\n| id | num |\n+----+-----+\n| 3  | 3   |\n+----+-----+\nExplanation: \nThe person with id 3 is a friend of people 1, 2, and 4, so he has three friends in total, which is the most number than any others.\n</pre> <p> </p> <p>Follow up: In the real world, multiple people could have the same most number of friends. Could you find all these people in this case?</p>"},{"location":"LeetCode_Problems/0603/","title":"603. Consecutive Available Seats","text":"Problem"},{"location":"LeetCode_Problems/0604/","title":"604. Design Compressed String Iterator","text":"Problem"},{"location":"LeetCode_Problems/0605/","title":"605. Can Place Flowers","text":"Problem <p>You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.</p> <p>Given an integer array <code>flowerbed</code> containing <code>0</code>'s and <code>1</code>'s, where <code>0</code> means empty and <code>1</code> means not empty, and an integer <code>n</code>, return <code>true</code> if <code>n</code> new flowers can be planted in the <code>flowerbed</code> without violating the no-adjacent-flowers rule and <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>Input: flowerbed = [1,0,0,0,1], n = 1\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: flowerbed = [1,0,0,0,1], n = 2\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= flowerbed.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>flowerbed[i]</code> is <code>0</code> or <code>1</code>.</li> <li>There are no two adjacent flowers in <code>flowerbed</code>.</li> <li><code>0 &lt;= n &lt;= flowerbed.length</code></li> </ul>"},{"location":"LeetCode_Problems/0606/","title":"606. Construct String from Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.</p> <p>Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4]\nOutput: \"1(2(4))(3)\"\nExplanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\"\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,3,null,4]\nOutput: \"1(2()(4))(3)\"\nExplanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0607/","title":"607. Sales Person","text":"Problem <p>Table: <code>SalesPerson</code></p> <pre>\n+-----------------+---------+\n| Column Name     | Type    |\n+-----------------+---------+\n| sales_id        | int     |\n| name            | varchar |\n| salary          | int     |\n| commission_rate | int     |\n| hire_date       | date    |\n+-----------------+---------+\nsales_id is the primary key (column with unique values) for this table.\nEach row of this table indicates the name and the ID of a salesperson alongside their salary, commission rate, and hire date.\n</pre> <p> </p> <p>Table: <code>Company</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| com_id      | int     |\n| name        | varchar |\n| city        | varchar |\n+-------------+---------+\ncom_id is the primary key (column with unique values) for this table.\nEach row of this table indicates the name and the ID of a company and the city in which the company is located.\n</pre> <p> </p> <p>Table: <code>Orders</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| order_id    | int  |\n| order_date  | date |\n| com_id      | int  |\n| sales_id    | int  |\n| amount      | int  |\n+-------------+------+\norder_id is the primary key (column with unique values) for this table.\ncom_id is a foreign key (reference column) to com_id from the Company table.\nsales_id is a foreign key (reference column) to sales_id from the SalesPerson table.\nEach row of this table contains information about one order. This includes the ID of the company, the ID of the salesperson, the date of the order, and the amount paid.\n</pre> <p> </p> <p>Write a solution to find the names of all the salespersons who did not have any orders related to the company with the name \"RED\".</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nSalesPerson table:\n+----------+------+--------+-----------------+------------+\n| sales_id | name | salary | commission_rate | hire_date  |\n+----------+------+--------+-----------------+------------+\n| 1        | John | 100000 | 6               | 4/1/2006   |\n| 2        | Amy  | 12000  | 5               | 5/1/2010   |\n| 3        | Mark | 65000  | 12              | 12/25/2008 |\n| 4        | Pam  | 25000  | 25              | 1/1/2005   |\n| 5        | Alex | 5000   | 10              | 2/3/2007   |\n+----------+------+--------+-----------------+------------+\nCompany table:\n+--------+--------+----------+\n| com_id | name   | city     |\n+--------+--------+----------+\n| 1      | RED    | Boston   |\n| 2      | ORANGE | New York |\n| 3      | YELLOW | Boston   |\n| 4      | GREEN  | Austin   |\n+--------+--------+----------+\nOrders table:\n+----------+------------+--------+----------+--------+\n| order_id | order_date | com_id | sales_id | amount |\n+----------+------------+--------+----------+--------+\n| 1        | 1/1/2014   | 3      | 4        | 10000  |\n| 2        | 2/1/2014   | 4      | 5        | 5000   |\n| 3        | 3/1/2014   | 1      | 1        | 50000  |\n| 4        | 4/1/2014   | 1      | 4        | 25000  |\n+----------+------------+--------+----------+--------+\nOutput: \n+------+\n| name |\n+------+\n| Amy  |\n| Mark |\n| Alex |\n+------+\nExplanation: \nAccording to orders 3 and 4 in the Orders table, it is easy to tell that only salesperson John and Pam have sales to company RED, so we report all the other names in the table salesperson.\n</pre>"},{"location":"LeetCode_Problems/0608/","title":"608. Tree Node","text":"Problem <p>Table: <code>Tree</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| p_id        | int  |\n+-------------+------+\nid is the column with unique values for this table.\nEach row of this table contains information about the id of a node and the id of its parent node in a tree.\nThe given structure is always a valid tree.\n</pre> <p> </p> <p>Each node in the tree can be one of three types:</p> <ul> <li>\"Leaf\": if the node is a leaf node.</li> <li>\"Root\": if the node is the root of the tree.</li> <li>\"Inner\": If the node is neither a leaf node nor a root node.</li> </ul> <p>Write a solution to report the type of each node in the tree.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n| 3  | 1    |\n| 4  | 2    |\n| 5  | 2    |\n+----+------+\nOutput: \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n| 2  | Inner |\n| 3  | Leaf  |\n| 4  | Leaf  |\n| 5  | Leaf  |\n+----+-------+\nExplanation: \nNode 1 is the root node because its parent node is null and it has child nodes 2 and 3.\nNode 2 is an inner node because it has parent node 1 and child node 4 and 5.\nNodes 3, 4, and 5 are leaf nodes because they have parent nodes and they do not have child nodes.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: \nTree table:\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n+----+------+\nOutput: \n+----+-------+\n| id | type  |\n+----+-------+\n| 1  | Root  |\n+----+-------+\nExplanation: If there is only one node on the tree, you only need to output its root attributes.\n</pre>"},{"location":"LeetCode_Problems/0609/","title":"609. Find Duplicate File in System","text":"Problem <p>Given a list <code>paths</code> of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.</p> <p>A group of duplicate files consists of at least two files that have the same content.</p> <p>A single directory info string in the input list has the following format:</p> <ul> <li><code>\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"</code></li> </ul> <p>It means there are <code>n</code> files <code>(f1.txt, f2.txt ... fn.txt)</code> with content <code>(f1_content, f2_content ... fn_content)</code> respectively in the directory \"<code>root/d1/d2/.../dm\"</code>. Note that <code>n &gt;= 1</code> and <code>m &gt;= 0</code>. If <code>m = 0</code>, it means the directory is just the root directory.</p> <p>The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:</p> <ul> <li><code>\"directory_path/file_name.txt\"</code></li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]\nOutput: [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n</pre> <p>Example 2:</p> <pre>Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]\nOutput: [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= paths.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= paths[i].length &lt;= 3000</code></li> <li><code>1 &lt;= sum(paths[i].length) &lt;= 5 * 10<sup>5</sup></code></li> <li><code>paths[i]</code> consist of English letters, digits, <code>'/'</code>, <code>'.'</code>, <code>'('</code>, <code>')'</code>, and <code>' '</code>.</li> <li>You may assume no files or directories share the same name in the same directory.</li> <li>You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.</li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>Imagine you are given a real file system, how will you search files? DFS or BFS?</li> <li>If the file content is very large (GB level), how will you modify your solution?</li> <li>If you can only read the file by 1kb each time, how will you modify your solution?</li> <li>What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?</li> <li>How to make sure the duplicated files you find are not false positive?</li> </ul>"},{"location":"LeetCode_Problems/0610/","title":"610. Triangle Judgement","text":"Problem <p>Table: <code>Triangle</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| x           | int  |\n| y           | int  |\n| z           | int  |\n+-------------+------+\nIn SQL, (x, y, z) is the primary key column for this table.\nEach row of this table contains the lengths of three line segments.\n</pre> <p> </p> <p>Report for every three line segments whether they can form a triangle.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nTriangle table:\n+----+----+----+\n| x  | y  | z  |\n+----+----+----+\n| 13 | 15 | 30 |\n| 10 | 20 | 15 |\n+----+----+----+\nOutput: \n+----+----+----+----------+\n| x  | y  | z  | triangle |\n+----+----+----+----------+\n| 13 | 15 | 30 | No       |\n| 10 | 20 | 15 | Yes      |\n+----+----+----+----------+\n</pre>"},{"location":"LeetCode_Problems/0611/","title":"611. Valid Triangle Number","text":"Problem <p>Given an integer array <code>nums</code>, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,2,3,4]\nOutput: 3\nExplanation: Valid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,2,3,4]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0612/","title":"612. Shortest Distance in a Plane","text":"Problem"},{"location":"LeetCode_Problems/0613/","title":"613. Shortest Distance in a Line","text":"Problem"},{"location":"LeetCode_Problems/0614/","title":"614. Second Degree Follower","text":"Problem"},{"location":"LeetCode_Problems/0615/","title":"615. Average Salary: Departments VS Company","text":"Problem"},{"location":"LeetCode_Problems/0616/","title":"616. Add Bold Tag in String","text":"Problem"},{"location":"LeetCode_Problems/0617/","title":"617. Merge Two Binary Trees","text":"Problem <p>You are given two binary trees <code>root1</code> and <code>root2</code>.</p> <p>Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.</p> <p>Return the merged tree.</p> <p>Note: The merging process must start from the root nodes of both trees.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\nOutput: [3,4,5,5,4,null,7]\n</pre> <p>Example 2:</p> <pre>\nInput: root1 = [1], root2 = [1,2]\nOutput: [2,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in both trees is in the range <code>[0, 2000]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0618/","title":"618. Students Report By Geography","text":"Problem"},{"location":"LeetCode_Problems/0619/","title":"619. Biggest Single Number","text":"Problem <p>Table: <code>MyNumbers</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| num         | int  |\n+-------------+------+\nThis table may contain duplicates (In other words, there is no primary key for this table in SQL).\nEach row of this table contains an integer.\n</pre> <p> </p> <p>A single number is a number that appeared only once in the <code>MyNumbers</code> table.</p> <p>Find the largest single number. If there is no single number, report <code>null</code>.</p> <p>The result format is in the following example.</p> <p> </p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nMyNumbers table:\n+-----+\n| num |\n+-----+\n| 8   |\n| 8   |\n| 3   |\n| 3   |\n| 1   |\n| 4   |\n| 5   |\n| 6   |\n+-----+\nOutput: \n+-----+\n| num |\n+-----+\n| 6   |\n+-----+\nExplanation: The single numbers are 1, 4, 5, and 6.\nSince 6 is the largest single number, we return it.\n</pre> <p>Example 2:</p> <pre>\nInput: \nMyNumbers table:\n+-----+\n| num |\n+-----+\n| 8   |\n| 8   |\n| 7   |\n| 7   |\n| 3   |\n| 3   |\n| 3   |\n+-----+\nOutput: \n+------+\n| num  |\n+------+\n| null |\n+------+\nExplanation: There are no single numbers in the input table so we return null.\n</pre>"},{"location":"LeetCode_Problems/0620/","title":"620. Not Boring Movies","text":"Problem <p>Table: <code>Cinema</code></p> <pre>\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| id             | int      |\n| movie          | varchar  |\n| description    | varchar  |\n| rating         | float    |\n+----------------+----------+\nid is the primary key (column with unique values) for this table.\nEach row contains information about the name of a movie, its genre, and its rating.\nrating is a 2 decimal places float in the range [0, 10]\n</pre> <p> </p> <p>Write a solution to report the movies with an odd-numbered ID and a description that is not <code>\"boring\"</code>.</p> <p>Return the result table ordered by <code>rating</code> in descending order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nCinema table:\n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 1  | War        | great 3D    | 8.9    |\n| 2  | Science    | fiction     | 8.5    |\n| 3  | irish      | boring      | 6.2    |\n| 4  | Ice song   | Fantacy     | 8.6    |\n| 5  | House card | Interesting | 9.1    |\n+----+------------+-------------+--------+\nOutput: \n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 5  | House card | Interesting | 9.1    |\n| 1  | War        | great 3D    | 8.9    |\n+----+------------+-------------+--------+\nExplanation: \nWe have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer.\n</pre>"},{"location":"LeetCode_Problems/0621/","title":"621. Task Scheduler","text":"Problem <p>Given a characters array <code>tasks</code>, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.</p> <p>However, there is a non-negative integer\u00a0<code>n</code> that represents the cooldown period between\u00a0two same tasks\u00a0(the same letter in the array), that is that there must be at least <code>n</code> units of time between any two same tasks.</p> <p>Return the least number of units of times that the CPU will take to finish all the given tasks.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation: \nA -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B\nThere is at least 2 units of time between any two same tasks.\n</pre> <p>Example 2:</p> <pre>\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\nOutput: 6\nExplanation: On this case any permutation of size 6 would work since n = 0.\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\nAnd so on.\n</pre> <p>Example 3:</p> <pre>\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\nOutput: 16\nExplanation: \nOne possible solution is\nA -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt; idle -&gt; A\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= task.length &lt;= 10<sup>4</sup></code></li> <li><code>tasks[i]</code> is upper-case English letter.</li> <li>The integer <code>n</code> is in the range <code>[0, 100]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0622/","title":"622. Design Circular Queue","text":"Problem <p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".</p> <p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p> <p>Implement the <code>MyCircularQueue</code> class:</p> <ul> <li><code>MyCircularQueue(k)</code> Initializes the object with the size of the queue to be <code>k</code>.</li> <li><code>int Front()</code> Gets the front item from the queue. If the queue is empty, return <code>-1</code>.</li> <li><code>int Rear()</code> Gets the last item from the queue. If the queue is empty, return <code>-1</code>.</li> <li><code>boolean enQueue(int value)</code> Inserts an element into the circular queue. Return <code>true</code> if the operation is successful.</li> <li><code>boolean deQueue()</code> Deletes an element from the circular queue. Return <code>true</code> if the operation is successful.</li> <li><code>boolean isEmpty()</code> Checks whether the circular queue is empty or not.</li> <li><code>boolean isFull()</code> Checks whether the circular queue is full or not.</li> </ul> <p>You must solve the problem without using the built-in queue data structure in your programming language.\u00a0</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\nOutput\n[null, true, true, true, false, 3, true, true, true, 4]\n\nExplanation\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear();     // return 3\nmyCircularQueue.isFull();   // return True\nmyCircularQueue.deQueue();  // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear();     // return 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= 1000</code></li> <li><code>0 &lt;= value &lt;= 1000</code></li> <li>At most <code>3000</code> calls will be made to\u00a0<code>enQueue</code>, <code>deQueue</code>,\u00a0<code>Front</code>,\u00a0<code>Rear</code>,\u00a0<code>isEmpty</code>, and\u00a0<code>isFull</code>.</li> </ul>"},{"location":"LeetCode_Problems/0623/","title":"623. Add One Row to Tree","text":"Problem <p>Given the <code>root</code> of a binary tree and two integers <code>val</code> and <code>depth</code>, add a row of nodes with value <code>val</code> at the given depth <code>depth</code>.</p> <p>Note that the <code>root</code> node is at depth <code>1</code>.</p> <p>The adding rule is:</p> <ul> <li>Given the integer <code>depth</code>, for each not null tree node <code>cur</code> at the depth <code>depth - 1</code>, create two tree nodes with value <code>val</code> as <code>cur</code>'s left subtree root and right subtree root.</li> <li><code>cur</code>'s original left subtree should be the left subtree of the new left subtree root.</li> <li><code>cur</code>'s original right subtree should be the right subtree of the new right subtree root.</li> <li>If <code>depth == 1</code> that means there is no depth <code>depth - 1</code> at all, then create a tree node with value <code>val</code> as the new root of the whole original tree, and the original tree is the new root's left subtree.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [4,2,6,3,1,5], val = 1, depth = 2\nOutput: [4,1,1,2,null,null,6,3,1,5]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [4,2,null,3,1], val = 1, depth = 3\nOutput: [4,2,null,1,1,3,null,null,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li>The depth of the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <li><code>-10<sup>5</sup> &lt;= val &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= depth &lt;= the depth of tree + 1</code></li> </ul>"},{"location":"LeetCode_Problems/0624/","title":"624. Maximum Distance in Arrays","text":"Problem"},{"location":"LeetCode_Problems/0625/","title":"625. Minimum Factorization","text":"Problem"},{"location":"LeetCode_Problems/0626/","title":"626. Exchange Seats","text":"Problem <p>Table: <code>Seat</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| student     | varchar |\n+-------------+---------+\nid is the primary key (unique value) column for this table.\nEach row of this table indicates the name and the ID of a student.\nid is a continuous increment.\n</pre> <p> </p> <p>Write a solution to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.</p> <p>Return the result table ordered by <code>id</code> in ascending order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nSeat table:\n+----+---------+\n| id | student |\n+----+---------+\n| 1  | Abbot   |\n| 2  | Doris   |\n| 3  | Emerson |\n| 4  | Green   |\n| 5  | Jeames  |\n+----+---------+\nOutput: \n+----+---------+\n| id | student |\n+----+---------+\n| 1  | Doris   |\n| 2  | Abbot   |\n| 3  | Green   |\n| 4  | Emerson |\n| 5  | Jeames  |\n+----+---------+\nExplanation: \nNote that if the number of students is odd, there is no need to change the last one's seat.\n</pre>"},{"location":"LeetCode_Problems/0627/","title":"627. Swap Salary","text":"Problem <p>Table: <code>Salary</code></p> <pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| id          | int      |\n| name        | varchar  |\n| sex         | ENUM     |\n| salary      | int      |\n+-------------+----------+\nid is the primary key (column with unique values) for this table.\nThe sex column is ENUM (category) value of type ('m', 'f').\nThe table contains information about an employee.\n</pre> <p> </p> <p>Write a solution to swap all <code>'f'</code> and <code>'m'</code> values (i.e., change all <code>'f'</code> values to <code>'m'</code> and vice versa) with a single update statement and no intermediate temporary tables.</p> <p>Note that you must write a single update statement, do not write any select statement for this problem.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nSalary table:\n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n+----+------+-----+--------+\nOutput: \n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n+----+------+-----+--------+\nExplanation: \n(1, A) and (3, C) were changed from 'm' to 'f'.\n(2, B) and (4, D) were changed from 'f' to 'm'.\n</pre>"},{"location":"LeetCode_Problems/0628/","title":"628. Maximum Product of Three Numbers","text":"Problem <p>Given an integer array <code>nums</code>, find three numbers whose product is maximum and return the maximum product.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,2,3]\nOutput: 6\n</pre> <p>Example 2:</p> <pre>Input: nums = [1,2,3,4]\nOutput: 24\n</pre> <p>Example 3:</p> <pre>Input: nums = [-1,-2,-3]\nOutput: -6\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;=\u00a010<sup>4</sup></code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0629/","title":"629. K Inverse Pairs Array","text":"Problem <p>For an integer array <code>nums</code>, an inverse pair is a pair of integers <code>[i, j]</code> where <code>0 &lt;= i &lt; j &lt; nums.length</code> and <code>nums[i] &gt; nums[j]</code>.</p> <p>Given two integers n and k, return the number of different arrays consist of numbers from <code>1</code> to <code>n</code> such that there are exactly <code>k</code> inverse pairs. Since the answer can be huge, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, k = 0\nOutput: 1\nExplanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, k = 1\nOutput: 2\nExplanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= k &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0630/","title":"630. Course Schedule III","text":"Problem <p>There are <code>n</code> different online courses numbered from <code>1</code> to <code>n</code>. You are given an array <code>courses</code> where <code>courses[i] = [duration<sub>i</sub>, lastDay<sub>i</sub>]</code> indicate that the <code>i<sup>th</sup></code> course should be taken continuously for <code>duration<sub>i</sub></code> days and must be finished before or on <code>lastDay<sub>i</sub></code>.</p> <p>You will start on the <code>1<sup>st</sup></code> day and you cannot take two or more courses simultaneously.</p> <p>Return the maximum number of courses that you can take.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]\nOutput: 3\nExplanation: \nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1<sup>st</sup> course, it costs 100 days so you will finish it on the 100<sup>th</sup> day, and ready to take the next course on the 101<sup>st</sup> day.\nSecond, take the 3<sup>rd</sup> course, it costs 1000 days so you will finish it on the 1100<sup>th</sup> day, and ready to take the next course on the 1101<sup>st</sup> day. \nThird, take the 2<sup>nd</sup> course, it costs 200 days so you will finish it on the 1300<sup>th</sup> day. \nThe 4<sup>th</sup> course cannot be taken now, since you will finish it on the 3300<sup>th</sup> day, which exceeds the closed date.\n</pre> <p>Example 2:</p> <pre>\nInput: courses = [[1,2]]\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: courses = [[3,2],[4,3]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= courses.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= duration<sub>i</sub>, lastDay<sub>i</sub> &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0631/","title":"631. Design Excel Sum Formula","text":"Problem"},{"location":"LeetCode_Problems/0632/","title":"632. Smallest Range Covering Elements from K Lists","text":"Problem <p>You have <code>k</code> lists of sorted integers in non-decreasing\u00a0order. Find the smallest range that includes at least one number from each of the <code>k</code> lists.</p> <p>We define the range <code>[a, b]</code> is smaller than range <code>[c, d]</code> if <code>b - a &lt; d - c</code> or <code>a &lt; c</code> if <code>b - a == d - c</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\nOutput: [20,24]\nExplanation: \nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [[1,2,3],[1,2,3],[1,2,3]]\nOutput: [1,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums.length == k</code></li> <li><code>1 &lt;= k &lt;= 3500</code></li> <li><code>1 &lt;= nums[i].length &lt;= 50</code></li> <li><code>-10<sup>5</sup> &lt;= nums[i][j] &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code>\u00a0is sorted in non-decreasing order.</li> </ul>"},{"location":"LeetCode_Problems/0633/","title":"633. Sum of Square Numbers","text":"Problem <p>Given a non-negative integer <code>c</code>, decide whether there're two integers <code>a</code> and <code>b</code> such that <code>a<sup>2</sup> + b<sup>2</sup> = c</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: c = 5\nOutput: true\nExplanation: 1 * 1 + 2 * 2 = 5\n</pre> <p>Example 2:</p> <pre>\nInput: c = 3\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= c &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0634/","title":"634. Find the Derangement of An Array","text":"Problem"},{"location":"LeetCode_Problems/0635/","title":"635. Design Log Storage System","text":"Problem"},{"location":"LeetCode_Problems/0636/","title":"636. Exclusive Time of Functions","text":"Problem <p>On a single-threaded CPU, we execute a program containing <code>n</code> functions. Each function has a unique ID between <code>0</code> and <code>n-1</code>.</p> <p>Function calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.</p> <p>You are given a list <code>logs</code>, where <code>logs[i]</code> represents the <code>i<sup>th</sup></code> log message formatted as a string <code>\"{function_id}:{\"start\" | \"end\"}:{timestamp}\"</code>. For example, <code>\"0:start:3\"</code> means a function call with function ID <code>0</code> started at the beginning of timestamp <code>3</code>, and <code>\"1:end:2\"</code> means a function call with function ID <code>1</code> ended at the end of timestamp <code>2</code>. Note that a function can be called multiple times, possibly recursively.</p> <p>A function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for <code>2</code> time units and another call executing for <code>1</code> time unit, the exclusive time is <code>2 + 1 = 3</code>.</p> <p>Return the exclusive time of each function in an array, where the value at the <code>i<sup>th</sup></code> index represents the exclusive time for the function with ID <code>i</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]\nOutput: [3,4]\nExplanation:\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]\nOutput: [8]\nExplanation:\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls itself again.\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]\nOutput: [7,1]\nExplanation:\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls function 1.\nFunction 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= logs.length &lt;= 500</code></li> <li><code>0 &lt;= function_id &lt; n</code></li> <li><code>0 &lt;= timestamp &lt;= 10<sup>9</sup></code></li> <li>No two start events will happen at the same timestamp.</li> <li>No two end events will happen at the same timestamp.</li> <li>Each function has an <code>\"end\"</code> log for each <code>\"start\"</code> log.</li> </ul>"},{"location":"LeetCode_Problems/0637/","title":"637. Average of Levels in Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,9,20,null,null,15,7]\nOutput: [3.00000,14.50000,11.00000]\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\nHence return [3, 14.5, 11].\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [3,9,20,15,7]\nOutput: [3.00000,14.50000,11.00000]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0638/","title":"638. Shopping Offers","text":"Problem <p>In LeetCode Store, there are <code>n</code> items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.</p> <p>You are given an integer array <code>price</code> where <code>price[i]</code> is the price of the <code>i<sup>th</sup></code> item, and an integer array <code>needs</code> where <code>needs[i]</code> is the number of pieces of the <code>i<sup>th</sup></code> item you want to buy.</p> <p>You are also given an array <code>special</code> where <code>special[i]</code> is of size <code>n + 1</code> where <code>special[i][j]</code> is the number of pieces of the <code>j<sup>th</sup></code> item in the <code>i<sup>th</sup></code> offer and <code>special[i][n]</code> (i.e., the last integer in the array) is the price of the <code>i<sup>th</sup></code> offer.</p> <p>Return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]\nOutput: 14\nExplanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B. \nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\n</pre> <p>Example 2:</p> <pre>\nInput: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]\nOutput: 11\nExplanation: The price of A is $2, and $3 for B, $4 for C. \nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \nYou cannot add more items, though only $9 for 2A ,2B and 1C.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == price.length == needs.length</code></li> <li><code>1 &lt;= n &lt;= 6</code></li> <li><code>0 &lt;= price[i], needs[i] &lt;= 10</code></li> <li><code>1 &lt;= special.length &lt;= 100</code></li> <li><code>special[i].length == n + 1</code></li> <li><code>0 &lt;= special[i][j] &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/0639/","title":"639. Decode Ways II","text":"Problem <p>A message containing letters from <code>A-Z</code> can be encoded into numbers using the following mapping:</p> <pre>\n'A' -&gt; \"1\"\n'B' -&gt; \"2\"\n...\n'Z' -&gt; \"26\"\n</pre> <p>To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, <code>\"11106\"</code> can be mapped into:</p> <ul> <li><code>\"AAJF\"</code> with the grouping <code>(1 1 10 6)</code></li> <li><code>\"KJF\"</code> with the grouping <code>(11 10 6)</code></li> </ul> <p>Note that the grouping <code>(1 11 06)</code> is invalid because <code>\"06\"</code> cannot be mapped into <code>'F'</code> since <code>\"6\"</code> is different from <code>\"06\"</code>.</p> <p>In addition to the mapping above, an encoded message may contain the <code>'*'</code> character, which can represent any digit from <code>'1'</code> to <code>'9'</code> (<code>'0'</code> is excluded). For example, the encoded message <code>\"1*\"</code> may represent any of the encoded messages <code>\"11\"</code>, <code>\"12\"</code>, <code>\"13\"</code>, <code>\"14\"</code>, <code>\"15\"</code>, <code>\"16\"</code>, <code>\"17\"</code>, <code>\"18\"</code>, or <code>\"19\"</code>. Decoding <code>\"1*\"</code> is equivalent to decoding any of the encoded messages it can represent.</p> <p>Given a string <code>s</code> consisting of digits and <code>'*'</code> characters, return the number of ways to decode it.</p> <p>Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"*\"\nOutput: 9\nExplanation: The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\nEach of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\nHence, there are a total of 9 ways to decode \"*\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"1*\"\nOutput: 18\nExplanation: The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\nEach of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\nHence, there are a total of 9 * 2 = 18 ways to decode \"1*\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"2*\"\nOutput: 15\nExplanation: The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\n\"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\nHence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is a digit or <code>'*'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0640/","title":"640. Solve the Equation","text":"Problem <p>Solve a given equation and return the value of <code>'x'</code> in the form of a string <code>\"x=#value\"</code>. The equation contains only <code>'+'</code>, <code>'-'</code> operation, the variable <code>'x'</code> and its coefficient. You should return <code>\"No solution\"</code> if there is no solution for the equation, or <code>\"Infinite solutions\"</code> if there are infinite solutions for the equation.</p> <p>If there is exactly one solution for the equation, we ensure that the value of <code>'x'</code> is an integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: equation = \"x+5-3+x=6+x-2\"\nOutput: \"x=2\"\n</pre> <p>Example 2:</p> <pre>\nInput: equation = \"x=x\"\nOutput: \"Infinite solutions\"\n</pre> <p>Example 3:</p> <pre>\nInput: equation = \"2x=x\"\nOutput: \"x=0\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= equation.length &lt;= 1000</code></li> <li><code>equation</code> has exactly one <code>'='</code>.</li> <li><code>equation</code> consists of integers with an absolute value in the range <code>[0, 100]</code> without any leading zeros, and the variable <code>'x'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0641/","title":"641. Design Circular Deque","text":"Problem <p>Design your implementation of the circular double-ended queue (deque).</p> <p>Implement the <code>MyCircularDeque</code> class:</p> <ul> <li><code>MyCircularDeque(int k)</code> Initializes the deque with a maximum size of <code>k</code>.</li> <li><code>boolean insertFront()</code> Adds an item at the front of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li> <li><code>boolean insertLast()</code> Adds an item at the rear of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li> <li><code>boolean deleteFront()</code> Deletes an item from the front of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li> <li><code>boolean deleteLast()</code> Deletes an item from the rear of Deque. Returns <code>true</code> if the operation is successful, or <code>false</code> otherwise.</li> <li><code>int getFront()</code> Returns the front item from the Deque. Returns <code>-1</code> if the deque is empty.</li> <li><code>int getRear()</code> Returns the last item from Deque. Returns <code>-1</code> if the deque is empty.</li> <li><code>boolean isEmpty()</code> Returns <code>true</code> if the deque is empty, or <code>false</code> otherwise.</li> <li><code>boolean isFull()</code> Returns <code>true</code> if the deque is full, or <code>false</code> otherwise.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\nOutput\n[null, true, true, true, false, 2, true, true, true, 4]\n\nExplanation\nMyCircularDeque myCircularDeque = new MyCircularDeque(3);\nmyCircularDeque.insertLast(1);  // return True\nmyCircularDeque.insertLast(2);  // return True\nmyCircularDeque.insertFront(3); // return True\nmyCircularDeque.insertFront(4); // return False, the queue is full.\nmyCircularDeque.getRear();      // return 2\nmyCircularDeque.isFull();       // return True\nmyCircularDeque.deleteLast();   // return True\nmyCircularDeque.insertFront(4); // return True\nmyCircularDeque.getFront();     // return 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= 1000</code></li> <li><code>0 &lt;= value &lt;= 1000</code></li> <li>At most <code>2000</code> calls will be made to <code>insertFront</code>, <code>insertLast</code>, <code>deleteFront</code>, <code>deleteLast</code>, <code>getFront</code>, <code>getRear</code>, <code>isEmpty</code>, <code>isFull</code>.</li> </ul>"},{"location":"LeetCode_Problems/0642/","title":"642. Design Search Autocomplete System","text":"Problem"},{"location":"LeetCode_Problems/0643/","title":"643. Maximum Average Subarray I","text":"Problem <p>You are given an integer array <code>nums</code> consisting of <code>n</code> elements, and an integer <code>k</code>.</p> <p>Find a contiguous subarray whose length is equal to <code>k</code> that has the maximum average value and return this value. Any answer with a calculation error less than <code>10<sup>-5</sup></code> will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,12,-5,-6,50,3], k = 4\nOutput: 12.75000\nExplanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5], k = 1\nOutput: 5.00000\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0644/","title":"644. Maximum Average Subarray II","text":"Problem"},{"location":"LeetCode_Problems/0645/","title":"645. Set Mismatch","text":"Problem <p>You have a set of integers <code>s</code>, which originally contains all the numbers from <code>1</code> to <code>n</code>. Unfortunately, due to some error, one of the numbers in <code>s</code> got duplicated to another number in the set, which results in repetition of one number and loss of another number.</p> <p>You are given an integer array <code>nums</code> representing the data status of this set after the error.</p> <p>Find the number that occurs twice and the number that is missing and return them in the form of an array.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,2,2,4]\nOutput: [2,3]\n</pre> <p>Example 2:</p> <pre>Input: nums = [1,1]\nOutput: [1,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0646/","title":"646. Maximum Length of Pair Chain","text":"Problem <p>You are given an array of <code>n</code> pairs <code>pairs</code> where <code>pairs[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> and <code>left<sub>i</sub> &lt; right<sub>i</sub></code>.</p> <p>A pair <code>p2 = [c, d]</code> follows a pair <code>p1 = [a, b]</code> if <code>b &lt; c</code>. A chain of pairs can be formed in this fashion.</p> <p>Return the length longest chain which can be formed.</p> <p>You do not need to use up all the given intervals. You can select pairs in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: pairs = [[1,2],[2,3],[3,4]]\nOutput: 2\nExplanation: The longest chain is [1,2] -&gt; [3,4].\n</pre> <p>Example 2:</p> <pre>\nInput: pairs = [[1,2],[7,8],[4,5]]\nOutput: 3\nExplanation: The longest chain is [1,2] -&gt; [4,5] -&gt; [7,8].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == pairs.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>-1000 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0647/","title":"647. Palindromic Substrings","text":"Problem <p>Given a string <code>s</code>, return the number of palindromic substrings in it.</p> <p>A string is a palindrome when it reads the same backward as forward.</p> <p>A substring is a contiguous sequence of characters within the string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0648/","title":"648. Replace Words","text":"Problem <p>In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root <code>\"an\"</code> is followed by the successor word <code>\"other\"</code>, we can form a new word <code>\"another\"</code>.</p> <p>Given a <code>dictionary</code> consisting of many roots and a <code>sentence</code> consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.</p> <p>Return the <code>sentence</code> after the replacement.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\nOutput: \"the cat was rat by the bat\"\n</pre> <p>Example 2:</p> <pre>\nInput: dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"\nOutput: \"a a b c\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= dictionary.length &lt;= 1000</code></li> <li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li> <li><code>dictionary[i]</code> consists of only lower-case letters.</li> <li><code>1 &lt;= sentence.length &lt;= 10<sup>6</sup></code></li> <li><code>sentence</code> consists of only lower-case letters and spaces.</li> <li>The number of words in <code>sentence</code> is in the range <code>[1, 1000]</code></li> <li>The length of each word in <code>sentence</code> is in the range <code>[1, 1000]</code></li> <li>Every two consecutive words in <code>sentence</code> will be separated by exactly one space.</li> <li><code>sentence</code> does not have leading or trailing spaces.</li> </ul>"},{"location":"LeetCode_Problems/0649/","title":"649. Dota2 Senate","text":"Problem <p>In the world of Dota2, there are two parties: the Radiant and the Dire.</p> <p>The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:</p> <ul> <li>Ban one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.</li> <li>Announce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.</li> </ul> <p>Given a string <code>senate</code> representing each senator's party belonging. The character <code>'R'</code> and <code>'D'</code> represent the Radiant party and the Dire party. Then if there are <code>n</code> senators, the size of the given string will be <code>n</code>.</p> <p>The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.</p> <p>Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be <code>\"Radiant\"</code> or <code>\"Dire\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: senate = \"RD\"\nOutput: \"Radiant\"\nExplanation: \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n</pre> <p>Example 2:</p> <pre>\nInput: senate = \"RDD\"\nOutput: \"Dire\"\nExplanation: \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator's right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == senate.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>senate[i]</code> is either <code>'R'</code> or <code>'D'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0650/","title":"650. 2 Keys Keyboard","text":"Problem <p>There is only one character <code>'A'</code> on the screen of a notepad. You can perform one of two operations on this notepad for each step:</p> <ul> <li>Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).</li> <li>Paste: You can paste the characters which are copied last time.</li> </ul> <p>Given an integer <code>n</code>, return the minimum number of operations to get the character <code>'A'</code> exactly <code>n</code> times on the screen.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3\nOutput: 3\nExplanation: Initially, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0651/","title":"651. 4 Keys Keyboard","text":"Problem"},{"location":"LeetCode_Problems/0652/","title":"652. Find Duplicate Subtrees","text":"Problem <p>Given the <code>root</code>\u00a0of a binary tree, return all duplicate subtrees.</p> <p>For each kind of duplicate subtrees, you only need to return the root node of any one of them.</p> <p>Two trees are duplicate if they have the same structure with the same node values.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4,null,2,4,null,null,4]\nOutput: [[2,4],[4]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [2,1,1]\nOutput: [[1]]\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [2,2,2,3,null,3,null]\nOutput: [[2,3],[3]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of the nodes in the tree will be in the range <code>[1, 5000]</code></li> <li><code>-200 &lt;= Node.val &lt;= 200</code></li> </ul>"},{"location":"LeetCode_Problems/0653/","title":"653. Two Sum IV - Input is a BST","text":"Problem <p>Given the <code>root</code> of a binary search tree and an integer <code>k</code>, return <code>true</code> if there exist two elements in the BST such that their sum is equal to <code>k</code>, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [5,3,6,2,4,null,7], k = 9\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [5,3,6,2,4,null,7], k = 28\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li><code>root</code> is guaranteed to be a valid binary search tree.</li> <li><code>-10<sup>5</sup> &lt;= k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0654/","title":"654. Maximum Binary Tree","text":"Problem <p>You are given an integer array <code>nums</code> with no duplicates. A maximum binary tree can be built recursively from <code>nums</code> using the following algorithm:</p> <ol> <li>Create a root node whose value is the maximum value in <code>nums</code>.</li> <li>Recursively build the left subtree on the subarray prefix to the left of the maximum value.</li> <li>Recursively build the right subtree on the subarray suffix to the right of the maximum value.</li> </ol> <p>Return the maximum binary tree built from <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [3,2,1,6,0,5]\nOutput: [6,3,5,null,2,0,null,null,1]\nExplanation: The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n        - Empty array, so no child.\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n            - Empty array, so no child.\n            - Only one element, so child is a node with value 1.\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n        - Only one element, so child is a node with value 0.\n        - Empty array, so no child.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: nums = [3,2,1]\nOutput: [3,null,2,null,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> <li>All integers in <code>nums</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0655/","title":"655. Print Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, construct a 0-indexed <code>m x n</code> string matrix <code>res</code> that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:</p> <ul> <li>The height of the tree is <code>height</code>\u00a0and the number of rows <code>m</code> should be equal to <code>height + 1</code>.</li> <li>The number of columns <code>n</code> should be equal to <code>2<sup>height+1</sup> - 1</code>.</li> <li>Place the root node in the middle of the top row (more formally, at location <code>res[0][(n-1)/2]</code>).</li> <li>For each node that has been placed in the matrix at position <code>res[r][c]</code>, place its left child at <code>res[r+1][c-2<sup>height-r-1</sup>]</code> and its right child at <code>res[r+1][c+2<sup>height-r-1</sup>]</code>.</li> <li>Continue this process until all the nodes in the tree have been placed.</li> <li>Any empty cells should contain the empty string <code>\"\"</code>.</li> </ul> <p>Return the constructed matrix <code>res</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2]\nOutput: \n[[\"\",\"1\",\"\"],\n\u00a0[\"2\",\"\",\"\"]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,3,null,4]\nOutput: \n[[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],\n\u00a0[\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],\n\u00a0[\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 2<sup>10</sup>]</code>.</li> <li><code>-99 &lt;= Node.val &lt;= 99</code></li> <li>The depth of the tree will be in the range <code>[1, 10]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0656/","title":"656. Coin Path","text":"Problem"},{"location":"LeetCode_Problems/0657/","title":"657. Robot Return to Origin","text":"Problem <p>There is a robot starting at the position <code>(0, 0)</code>, the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at <code>(0, 0)</code> after it completes its moves.</p> <p>You are given a string <code>moves</code> that represents the move sequence of the robot where <code>moves[i]</code> represents its <code>i<sup>th</sup></code> move. Valid moves are <code>'R'</code> (right), <code>'L'</code> (left), <code>'U'</code> (up), and <code>'D'</code> (down).</p> <p>Return <code>true</code> if the robot returns to the origin after it finishes all of its moves, or <code>false</code> otherwise.</p> <p>Note: The way that the robot is \"facing\" is irrelevant. <code>'R'</code> will always make the robot move to the right once, <code>'L'</code> will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: moves = \"UD\"\nOutput: true\nExplanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: moves = \"LL\"\nOutput: false\nExplanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= moves.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>moves</code> only contains the characters <code>'U'</code>, <code>'D'</code>, <code>'L'</code> and <code>'R'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0658/","title":"658. Find K Closest Elements","text":"Problem <p>Given a sorted integer array <code>arr</code>, two integers <code>k</code> and <code>x</code>, return the <code>k</code> closest integers to <code>x</code> in the array. The result should also be sorted in ascending order.</p> <p>An integer <code>a</code> is closer to <code>x</code> than an integer <code>b</code> if:</p> <ul> <li><code>|a - x| &lt; |b - x|</code>, or</li> <li><code>|a - x| == |b - x|</code> and <code>a &lt; b</code></li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: arr = [1,2,3,4,5], k = 4, x = 3\nOutput: [1,2,3,4]\n</pre> <p>Example 2:</p> <pre>Input: arr = [1,2,3,4,5], k = 4, x = -1\nOutput: [1,2,3,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= arr.length</code></li> <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>arr</code> is sorted in ascending order.</li> <li><code>-10<sup>4</sup> &lt;= arr[i], x &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0659/","title":"659. Split Array into Consecutive Subsequences","text":"Problem <p>You are given an integer array <code>nums</code> that is sorted in non-decreasing order.</p> <p>Determine if it is possible to split <code>nums</code> into one or more subsequences such that both of the following conditions are true:</p> <ul> <li>Each subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer).</li> <li>All subsequences have a length of <code>3</code> or more.</li> </ul> <p>Return <code>true</code> if you can split <code>nums</code> according to the above conditions, or <code>false</code> otherwise.</p> <p>A subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., <code>[1,3,5]</code> is a subsequence of <code>[1,2,3,4,5]</code> while <code>[1,3,2]</code> is not).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,3,4,5]\nOutput: true\nExplanation: nums can be split into the following subsequences:\n[1,2,3,3,4,5] --&gt; 1, 2, 3\n[1,2,3,3,4,5] --&gt; 3, 4, 5\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,3,4,4,5,5]\nOutput: true\nExplanation: nums can be split into the following subsequences:\n[1,2,3,3,4,4,5,5] --&gt; 1, 2, 3, 4, 5\n[1,2,3,3,4,4,5,5] --&gt; 3, 4, 5\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,4,4,5]\nOutput: false\nExplanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> <li><code>nums</code> is sorted in non-decreasing order.</li> </ul>"},{"location":"LeetCode_Problems/0660/","title":"660. Remove 9","text":"Problem"},{"location":"LeetCode_Problems/0661/","title":"661. Image Smoother","text":"Problem <p>An image smoother is a filter of the size <code>3 x 3</code> that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).</p> <p></p> <p>Given an <code>m x n</code> integer matrix <code>img</code> representing the grayscale of an image, return the image after applying the smoother on each cell of it.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: img = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[0,0,0],[0,0,0],[0,0,0]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: img = [[100,200,100],[200,50,200],[100,200,100]]\nOutput: [[137,141,137],[141,138,141],[137,141,137]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == img.length</code></li> <li><code>n == img[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>0 &lt;= img[i][j] &lt;= 255</code></li> </ul>"},{"location":"LeetCode_Problems/0662/","title":"662. Maximum Width of Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, return the maximum width of the given tree.</p> <p>The maximum width of a tree is the maximum width among all levels.</p> <p>The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.</p> <p>It is guaranteed that the answer will in the range of a 32-bit signed integer.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,3,2,5,3,null,9]\nOutput: 4\nExplanation: The maximum width exists in the third level with length 4 (5,3,null,9).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,3,2,5,null,null,9,6,null,7]\nOutput: 7\nExplanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [1,3,2,5]\nOutput: 2\nExplanation: The maximum width exists in the second level with length 2 (3,2).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 3000]</code>.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0663/","title":"663. Equal Tree Partition","text":"Problem"},{"location":"LeetCode_Problems/0664/","title":"664. Strange Printer","text":"Problem <p>There is a strange printer with the following two special properties:</p> <ul> <li>The printer can only print a sequence of the same character each time.</li> <li>At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.</li> </ul> <p>Given a string <code>s</code>, return the minimum number of turns the printer needed to print it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aaabbb\"\nOutput: 2\nExplanation: Print \"aaa\" first and then print \"bbb\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aba\"\nOutput: 2\nExplanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0665/","title":"665. Non-decreasing Array","text":"Problem <p>Given an array <code>nums</code> with <code>n</code> integers, your task is to check if it could become non-decreasing by modifying at most one element.</p> <p>We define an array is non-decreasing if <code>nums[i] &lt;= nums[i + 1]</code> holds for every <code>i</code> (0-based) such that (<code>0 &lt;= i &lt;= n - 2</code>).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,2,3]\nOutput: true\nExplanation: You could modify the first 4 to 1 to get a non-decreasing array.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,2,1]\nOutput: false\nExplanation: You cannot get a non-decreasing array by modifying at most one element.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0666/","title":"666. Path Sum IV","text":"Problem"},{"location":"LeetCode_Problems/0667/","title":"667. Beautiful Arrangement II","text":"Problem <p>Given two integers <code>n</code> and <code>k</code>, construct a list <code>answer</code> that contains <code>n</code> different positive integers ranging from <code>1</code> to <code>n</code> and obeys the following requirement:</p> <ul> <li>Suppose this list is <code>answer =\u00a0[a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... , a<sub>n</sub>]</code>, then the list <code>[|a<sub>1</sub> - a<sub>2</sub>|, |a<sub>2</sub> - a<sub>3</sub>|, |a<sub>3</sub> - a<sub>4</sub>|, ... , |a<sub>n-1</sub> - a<sub>n</sub>|]</code> has exactly <code>k</code> distinct integers.</li> </ul> <p>Return the list <code>answer</code>. If there multiple valid answers, return any of them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, k = 1\nOutput: [1,2,3]\nExplanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, k = 2\nOutput: [1,3,2]\nExplanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt; n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0668/","title":"668. Kth Smallest Number in Multiplication Table","text":"Problem <p>Nearly everyone has used the Multiplication Table. The multiplication table of size <code>m x n</code> is an integer matrix <code>mat</code> where <code>mat[i][j] == i * j</code> (1-indexed).</p> <p>Given three integers <code>m</code>, <code>n</code>, and <code>k</code>, return the <code>k<sup>th</sup></code> smallest element in the <code>m x n</code> multiplication table.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: m = 3, n = 3, k = 5\nOutput: 3\nExplanation: The 5<sup>th</sup> smallest number is 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: m = 2, n = 3, k = 6\nOutput: 6\nExplanation: The 6<sup>th</sup> smallest number is 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= k &lt;= m * n</code></li> </ul>"},{"location":"LeetCode_Problems/0669/","title":"669. Trim a Binary Search Tree","text":"Problem <p>Given the <code>root</code> of a binary search tree and the lowest and highest boundaries as <code>low</code> and <code>high</code>, trim the tree so that all its elements lies in <code>[low, high]</code>. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.</p> <p>Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,0,2], low = 1, high = 2\nOutput: [1,null,2]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [3,0,4,null,2,null,null,1], low = 1, high = 3\nOutput: [3,2,null,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> <li>The value of each node in the tree is unique.</li> <li><code>root</code> is guaranteed to be a valid binary search tree.</li> <li><code>0 &lt;= low &lt;= high &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0670/","title":"670. Maximum Swap","text":"Problem <p>You are given an integer <code>num</code>. You can swap two digits at most once to get the maximum valued number.</p> <p>Return the maximum valued number you can get.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 2736\nOutput: 7236\nExplanation: Swap the number 2 and the number 7.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 9973\nOutput: 9973\nExplanation: No swap.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0671/","title":"671. Second Minimum Node In a Binary Tree","text":"Problem <p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly <code>two</code> or <code>zero</code> sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property\u00a0<code>root.val = min(root.left.val, root.right.val)</code>\u00a0always holds.</p> <p>Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.</p> <p>If no such second minimum value exists, output -1 instead.</p> <p> </p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [2,2,5,null,null,5,7]\nOutput: 5\nExplanation: The smallest value is 2, the second smallest value is 5.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [2,2,2]\nOutput: -1\nExplanation: The smallest value is 2, but there isn't any second smallest value.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 25]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li> <li><code>root.val == min(root.left.val, root.right.val)</code>\u00a0for each internal node of the tree.</li> </ul>"},{"location":"LeetCode_Problems/0672/","title":"672. Bulb Switcher II","text":"Problem <p>There is a room with <code>n</code> bulbs labeled from <code>1</code> to <code>n</code> that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where:</p> <ul> <li>Button 1: Flips the status of all the bulbs.</li> <li>Button 2: Flips the status of all the bulbs with even labels (i.e., <code>2, 4, ...</code>).</li> <li>Button 3: Flips the status of all the bulbs with odd labels (i.e., <code>1, 3, ...</code>).</li> <li>Button 4: Flips the status of all the bulbs with a label <code>j = 3k + 1</code> where <code>k = 0, 1, 2, ...</code> (i.e., <code>1, 4, 7, 10, ...</code>).</li> </ul> <p>You must make exactly <code>presses</code> button presses in total. For each press, you may pick any of the four buttons to press.</p> <p>Given the two integers <code>n</code> and <code>presses</code>, return the number of different possible statuses after performing all <code>presses</code> button presses.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1, presses = 1\nOutput: 2\nExplanation: Status can be:\n- [off] by pressing button 1\n- [on] by pressing button 2\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, presses = 1\nOutput: 3\nExplanation: Status can be:\n- [off, off] by pressing button 1\n- [on, off] by pressing button 2\n- [off, on] by pressing button 3\n</pre> <p>Example 3:</p> <pre>\nInput: n = 3, presses = 1\nOutput: 4\nExplanation: Status can be:\n- [off, off, off] by pressing button 1\n- [off, on, off] by pressing button 2\n- [on, off, on] by pressing button 3\n- [off, on, on] by pressing button 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= presses &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0673/","title":"673. Number of Longest Increasing Subsequence","text":"Problem <p>Given an integer array\u00a0<code>nums</code>, return the number of longest increasing subsequences.</p> <p>Notice that the sequence has to be strictly increasing.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,5,4,7]\nOutput: 2\nExplanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,2,2,2]\nOutput: 5\nExplanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2000</code></li> <li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0674/","title":"674. Longest Continuous Increasing Subsequence","text":"Problem <p>Given an unsorted array of integers <code>nums</code>, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.</p> <p>A continuous increasing subsequence is defined by two indices <code>l</code> and <code>r</code> (<code>l &lt; r</code>) such that it is <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> and for each <code>l &lt;= i &lt; r</code>, <code>nums[i] &lt; nums[i + 1]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,5,4,7]\nOutput: 3\nExplanation: The longest continuous increasing subsequence is [1,3,5] with length 3.\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,2,2,2]\nOutput: 1\nExplanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\nincreasing.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0675/","title":"675. Cut Off Trees for Golf Event","text":"Problem <p>You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an <code>m x n</code> matrix. In this matrix:</p> <ul> <li><code>0</code> means the cell cannot be walked through.</li> <li><code>1</code> represents an empty cell that can be walked through.</li> <li>A number greater than <code>1</code> represents a tree in a cell that can be walked through, and this number is the tree's height.</li> </ul> <p>In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.</p> <p>You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes <code>1</code> (an empty cell).</p> <p>Starting from the point <code>(0, 0)</code>, return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return <code>-1</code>.</p> <p>Note: The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: forest = [[1,2,3],[0,0,4],[7,6,5]]\nOutput: 6\nExplanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: forest = [[1,2,3],[0,0,0],[7,6,5]]\nOutput: -1\nExplanation: The trees in the bottom row cannot be accessed as the middle row is blocked.\n</pre> <p>Example 3:</p> <pre>\nInput: forest = [[2,3,4],[0,0,5],[8,7,6]]\nOutput: 6\nExplanation: You can follow the same path as Example 1 to cut off all the trees.\nNote that you can cut off the first tree at (0, 0) before making any steps.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == forest.length</code></li> <li><code>n == forest[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>0 &lt;= forest[i][j] &lt;= 10<sup>9</sup></code></li> <li>Heights of all trees are distinct.</li> </ul>"},{"location":"LeetCode_Problems/0676/","title":"676. Implement Magic Dictionary","text":"Problem <p>Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.</p> <p>Implement the\u00a0<code>MagicDictionary</code>\u00a0class:</p> <ul> <li><code>MagicDictionary()</code>\u00a0Initializes the object.</li> <li><code>void buildDict(String[]\u00a0dictionary)</code>\u00a0Sets the data structure\u00a0with an array of distinct strings <code>dictionary</code>.</li> <li><code>bool search(String searchWord)</code> Returns <code>true</code> if you can change exactly one character in <code>searchWord</code> to match any string in the data structure, otherwise returns <code>false</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\nOutput\n[null, null, false, true, false, false]\n\nExplanation\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // return False\nmagicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True\nmagicDictionary.search(\"hell\"); // return False\nmagicDictionary.search(\"leetcoded\"); // return False\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;=\u00a0dictionary.length &lt;= 100</code></li> <li><code>1 &lt;=\u00a0dictionary[i].length &lt;= 100</code></li> <li><code>dictionary[i]</code> consists of only lower-case English letters.</li> <li>All the strings in\u00a0<code>dictionary</code>\u00a0are distinct.</li> <li><code>1 &lt;=\u00a0searchWord.length &lt;= 100</code></li> <li><code>searchWord</code>\u00a0consists of only lower-case English letters.</li> <li><code>buildDict</code>\u00a0will be called only once before <code>search</code>.</li> <li>At most <code>100</code> calls will be made to <code>search</code>.</li> </ul>"},{"location":"LeetCode_Problems/0677/","title":"677. Map Sum Pairs","text":"Problem <p>Design a map that allows you to do the following:</p> <ul> <li>Maps a string key to a given value.</li> <li>Returns the sum of the values that have a key with a prefix equal to a given string.</li> </ul> <p>Implement the <code>MapSum</code> class:</p> <ul> <li><code>MapSum()</code> Initializes the <code>MapSum</code> object.</li> <li><code>void insert(String key, int val)</code> Inserts the <code>key-val</code> pair into the map. If the <code>key</code> already existed, the original <code>key-value</code> pair will be overridden to the new one.</li> <li><code>int sum(string prefix)</code> Returns the sum of all the pairs' value whose <code>key</code> starts with the <code>prefix</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\nOutput\n[null, null, 3, null, 5]\n\nExplanation\nMapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);  \nmapSum.sum(\"ap\");           // return 3 (apple = 3)\nmapSum.insert(\"app\", 2);    \nmapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= key.length, prefix.length &lt;= 50</code></li> <li><code>key</code> and <code>prefix</code> consist of only lowercase English letters.</li> <li><code>1 &lt;= val &lt;= 1000</code></li> <li>At most <code>50</code> calls will be made to <code>insert</code> and <code>sum</code>.</li> </ul>"},{"location":"LeetCode_Problems/0678/","title":"678. Valid Parenthesis String","text":"Problem <p>Given a string <code>s</code> containing only three types of characters: <code>'('</code>, <code>')'</code> and <code>'*'</code>, return <code>true</code> if <code>s</code> is valid.</p> <p>The following rules define a valid string:</p> <ul> <li>Any left parenthesis <code>'('</code> must have a corresponding right parenthesis <code>')'</code>.</li> <li>Any right parenthesis <code>')'</code> must have a corresponding left parenthesis <code>'('</code>.</li> <li>Left parenthesis <code>'('</code> must go before the corresponding right parenthesis <code>')'</code>.</li> <li><code>'*'</code> could be treated as a single right parenthesis <code>')'</code> or a single left parenthesis <code>'('</code> or an empty string <code>\"\"</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: s = \"()\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: s = \"(*)\"\nOutput: true\n</pre> <p>Example 3:</p> <pre>Input: s = \"(*))\"\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s[i]</code> is <code>'('</code>, <code>')'</code> or <code>'*'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0679/","title":"679. 24 Game","text":"Problem <p>You are given an integer array <code>cards</code> of length <code>4</code>. You have four cards, each containing a number in the range <code>[1, 9]</code>. You should arrange the numbers on these cards in a mathematical expression using the operators <code>['+', '-', '*', '/']</code> and the parentheses <code>'('</code> and <code>')'</code> to get the value 24.</p> <p>You are restricted with the following rules:</p> <ul> <li>The division operator <code>'/'</code> represents real division, not integer division.      <ul> <li>For example, <code>4 / (1 - 2 / 3) = 4 / (1 / 3) = 12</code>.</li> </ul> </li> <li>Every operation done is between two numbers. In particular, we cannot use <code>'-'</code> as a unary operator.     <ul> <li>For example, if <code>cards = [1, 1, 1, 1]</code>, the expression <code>\"-1 - 1 - 1 - 1\"</code> is not allowed.</li> </ul> </li> <li>You cannot concatenate numbers together     <ul> <li>For example, if <code>cards = [1, 2, 1, 2]</code>, the expression <code>\"12 + 12\"</code> is not valid.</li> </ul> </li> </ul> <p>Return <code>true</code> if you can get such expression that evaluates to <code>24</code>, and <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: cards = [4,1,8,7]\nOutput: true\nExplanation: (8-4) * (7-1) = 24\n</pre> <p>Example 2:</p> <pre>\nInput: cards = [1,2,1,2]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>cards.length == 4</code></li> <li><code>1 &lt;= cards[i] &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/0680/","title":"680. Valid Palindrome II","text":"Problem <p>Given a string <code>s</code>, return <code>true</code> if the <code>s</code> can be palindrome after deleting at most one character from it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aba\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abca\"\nOutput: true\nExplanation: You could delete the character 'c'.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"abc\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0681/","title":"681. Next Closest Time","text":"Problem"},{"location":"LeetCode_Problems/0682/","title":"682. Baseball Game","text":"Problem <p>You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.</p> <p>You are given a list of strings <code>operations</code>, where <code>operations[i]</code> is the <code>i<sup>th</sup></code> operation you must apply to the record and is one of the following:</p> <ul> <li>An integer <code>x</code>.      <ul> <li>Record a new score of <code>x</code>.</li> </ul> </li> <li><code>'+'</code>.     <ul> <li>Record a new score that is the sum of the previous two scores.</li> </ul> </li> <li><code>'D'</code>.     <ul> <li>Record a new score that is the double of the previous score.</li> </ul> </li> <li><code>'C'</code>.     <ul> <li>Invalidate the previous score, removing it from the record.</li> </ul> </li> </ul> <p>Return the sum of all the scores on the record after applying all the operations.</p> <p>The test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]\nOutput: 30\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"2\" - Add 2 to the record, record is now [5, 2].\n\"C\" - Invalidate and remove the previous score, record is now [5].\n\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30.\n</pre> <p>Example 2:</p> <pre>\nInput: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\nOutput: 27\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"-2\" - Add -2 to the record, record is now [5, -2].\n\"4\" - Add 4 to the record, record is now [5, -2, 4].\n\"C\" - Invalidate and remove the previous score, record is now [5, -2].\n\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\n\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.\n</pre> <p>Example 3:</p> <pre>\nInput: ops = [\"1\",\"C\"]\nOutput: 0\nExplanation:\n\"1\" - Add 1 to the record, record is now [1].\n\"C\" - Invalidate and remove the previous score, record is now [].\nSince the record is empty, the total sum is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= operations.length &lt;= 1000</code></li> <li><code>operations[i]</code> is <code>\"C\"</code>, <code>\"D\"</code>, <code>\"+\"</code>, or a string representing an integer in the range <code>[-3 * 10<sup>4</sup>, 3 * 10<sup>4</sup>]</code>.</li> <li>For operation <code>\"+\"</code>, there will always be at least two previous scores on the record.</li> <li>For operations <code>\"C\"</code> and <code>\"D\"</code>, there will always be at least one previous score on the record.</li> </ul>"},{"location":"LeetCode_Problems/0683/","title":"683. K Empty Slots","text":"Problem"},{"location":"LeetCode_Problems/0684/","title":"684. Redundant Connection","text":"Problem <p>In this problem, a tree is an undirected graph that is connected and has no cycles.</p> <p>You are given a graph that started as a tree with <code>n</code> nodes labeled from <code>1</code> to <code>n</code>, with one additional edge added. The added edge has two different vertices chosen from <code>1</code> to <code>n</code>, and was not an edge that already existed. The graph is represented as an array <code>edges</code> of length <code>n</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the graph.</p> <p>Return an edge that can be removed so that the resulting graph is a tree of <code>n</code> nodes. If there are multiple answers, return the answer that occurs last in the input.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: edges = [[1,2],[1,3],[2,3]]\nOutput: [2,3]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]\nOutput: [1,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == edges.length</code></li> <li><code>3 &lt;= n &lt;= 1000</code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= edges.length</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>There are no repeated edges.</li> <li>The given graph is connected.</li> </ul>"},{"location":"LeetCode_Problems/0685/","title":"685. Redundant Connection II","text":"Problem <p>In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.</p> <p>The given input is a directed graph that started as a rooted tree with <code>n</code> nodes (with distinct values from <code>1</code> to <code>n</code>), with one additional directed edge added. The added edge has two different vertices chosen from <code>1</code> to <code>n</code>, and was not an edge that already existed.</p> <p>The resulting graph is given as a 2D-array of <code>edges</code>. Each element of <code>edges</code> is a pair <code>[u<sub>i</sub>, v<sub>i</sub>]</code> that represents a directed edge connecting nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>, where <code>u<sub>i</sub></code> is a parent of child <code>v<sub>i</sub></code>.</p> <p>Return an edge that can be removed so that the resulting graph is a rooted tree of <code>n</code> nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: edges = [[1,2],[1,3],[2,3]]\nOutput: [2,3]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]\nOutput: [4,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == edges.length</code></li> <li><code>3 &lt;= n &lt;= 1000</code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> </ul>"},{"location":"LeetCode_Problems/0686/","title":"686. Repeated String Match","text":"Problem <p>Given two strings <code>a</code> and <code>b</code>, return the minimum number of times you should repeat string <code>a</code> so that string <code>b</code> is a substring of it. If it is impossible for <code>b</code>\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of <code>a</code> after repeating it, return <code>-1</code>.</p> <p>Notice: string <code>\"abc\"</code> repeated 0 times is <code>\"\"</code>, repeated 1 time is <code>\"abc\"</code> and repeated 2 times is <code>\"abcabc\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: a = \"abcd\", b = \"cdabcdab\"\nOutput: 3\nExplanation: We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it.\n</pre> <p>Example 2:</p> <pre>\nInput: a = \"a\", b = \"aa\"\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li> <li><code>a</code> and <code>b</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0687/","title":"687. Longest Univalue Path","text":"Problem <p>Given the <code>root</code> of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.</p> <p>The length of the path between two nodes is represented by the number of edges between them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [5,4,5,1,1,null,5]\nOutput: 2\nExplanation: The shown image shows that the longest path of the same value (i.e. 5).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,4,5,4,4,null,5]\nOutput: 2\nExplanation: The shown image shows that the longest path of the same value (i.e. 4).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li> <li><code>-1000 &lt;= Node.val &lt;= 1000</code></li> <li>The depth of the tree will not exceed <code>1000</code>.</li> </ul>"},{"location":"LeetCode_Problems/0688/","title":"688. Knight Probability in Chessboard","text":"Problem <p>On an <code>n x n</code> chessboard, a knight starts at the cell <code>(row, column)</code> and attempts to make exactly <code>k</code> moves. The rows and columns are 0-indexed, so the top-left cell is <code>(0, 0)</code>, and the bottom-right cell is <code>(n - 1, n - 1)</code>.</p> <p>A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.</p> <p></p> <p>Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.</p> <p>The knight continues moving until it has made exactly <code>k</code> moves or has moved off the chessboard.</p> <p>Return the probability that the knight remains on the board after it has stopped moving.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, k = 2, row = 0, column = 0\nOutput: 0.06250\nExplanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1, k = 0, row = 0, column = 0\nOutput: 1.00000\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 25</code></li> <li><code>0 &lt;= k &lt;= 100</code></li> <li><code>0 &lt;= row, column &lt;= n - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0689/","title":"689. Maximum Sum of 3 Non-Overlapping Subarrays","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, find three non-overlapping subarrays of length <code>k</code> with maximum sum and return them.</p> <p>Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,1,2,6,7,5,1], k = 2\nOutput: [0,3,5]\nExplanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,1,2,1,2,1,2,1], k = 2\nOutput: [0,2,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;\u00a02<sup>16</sup></code></li> <li><code>1 &lt;= k &lt;= floor(nums.length / 3)</code></li> </ul>"},{"location":"LeetCode_Problems/0690/","title":"690. Employee Importance","text":"Problem <p>You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.</p> <p>You are given an array of employees <code>employees</code> where:</p> <ul> <li><code>employees[i].id</code> is the ID of the <code>i<sup>th</sup></code> employee.</li> <li><code>employees[i].importance</code> is the importance value of the <code>i<sup>th</sup></code> employee.</li> <li><code>employees[i].subordinates</code> is a list of the IDs of the direct subordinates of the <code>i<sup>th</sup></code> employee.</li> </ul> <p>Given an integer <code>id</code> that represents an employee's ID, return the total importance value of this employee and all their direct and indirect subordinates.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1\nOutput: 11\nExplanation: Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\nThey both have an importance value of 3.\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: employees = [[1,2,[5]],[5,-3,[]]], id = 5\nOutput: -3\nExplanation: Employee 5 has an importance value of -3 and has no direct subordinates.\nThus, the total importance value of employee 5 is -3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= employees.length &lt;= 2000</code></li> <li><code>1 &lt;= employees[i].id &lt;= 2000</code></li> <li>All <code>employees[i].id</code> are unique.</li> <li><code>-100 &lt;= employees[i].importance &lt;= 100</code></li> <li>One employee has at most one direct leader and may have several subordinates.</li> <li>The IDs in <code>employees[i].subordinates</code> are valid IDs.</li> </ul>"},{"location":"LeetCode_Problems/0691/","title":"691. Stickers to Spell Word","text":"Problem <p>We are given <code>n</code> different types of <code>stickers</code>. Each sticker has a lowercase English word on it.</p> <p>You would like to spell out the given string <code>target</code> by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.</p> <p>Return the minimum number of stickers that you need to spell out <code>target</code>. If the task is impossible, return <code>-1</code>.</p> <p>Note: In all test cases, all words were chosen randomly from the <code>1000</code> most common US English words, and <code>target</code> was chosen as a concatenation of two random words.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"\nOutput: 3\nExplanation:\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\nAlso, this is the minimum number of stickers necessary to form the target string.\n</pre> <p>Example 2:</p> <pre>\nInput: stickers = [\"notice\",\"possible\"], target = \"basicbasic\"\nOutput: -1\nExplanation:\nWe cannot form the target \"basicbasic\" from cutting letters from the given stickers.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == stickers.length</code></li> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>1 &lt;= stickers[i].length &lt;= 10</code></li> <li><code>1 &lt;= target.length &lt;= 15</code></li> <li><code>stickers[i]</code> and <code>target</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0692/","title":"692. Top K Frequent Words","text":"Problem <p>Given an array of strings <code>words</code> and an integer <code>k</code>, return the <code>k</code> most frequent strings.</p> <p>Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2\nOutput: [\"i\",\"love\"]\nExplanation: \"i\" and \"love\" are the two most frequent words.\nNote that \"i\" comes before \"love\" due to a lower alphabetical order.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4\nOutput: [\"the\",\"is\",\"sunny\",\"day\"]\nExplanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 500</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> <li><code>k</code> is in the range <code>[1, The number of unique words[i]]</code></li> </ul> <p> </p> <p>Follow-up: Could you solve it in <code>O(n log(k))</code> time and <code>O(n)</code> extra space?</p>"},{"location":"LeetCode_Problems/0693/","title":"693. Binary Number with Alternating Bits","text":"Problem <p>Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5\nOutput: true\nExplanation: The binary representation of 5 is: 101\n</pre> <p>Example 2:</p> <pre>\nInput: n = 7\nOutput: false\nExplanation: The binary representation of 7 is: 111.</pre> <p>Example 3:</p> <pre>\nInput: n = 11\nOutput: false\nExplanation: The binary representation of 11 is: 1011.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/0694/","title":"694. Number of Distinct Islands","text":"Problem"},{"location":"LeetCode_Problems/0695/","title":"695. Max Area of Island","text":"Problem <p>You are given an <code>m x n</code> binary matrix <code>grid</code>. An island is a group of <code>1</code>'s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p> <p>The area of an island is the number of cells with a value <code>1</code> in the island.</p> <p>Return the maximum area of an island in <code>grid</code>. If there is no island, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\nOutput: 6\nExplanation: The answer is not 11, because the island must be connected 4-directionally.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[0,0,0,0,0,0,0,0]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0696/","title":"696. Count Binary Substrings","text":"Problem <p>Given a binary string <code>s</code>, return the number of non-empty substrings that have the same number of <code>0</code>'s and <code>1</code>'s, and all the <code>0</code>'s and all the <code>1</code>'s in these substrings are grouped consecutively.</p> <p>Substrings that occur multiple times are counted the number of times they occur.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"00110011\"\nOutput: 6\nExplanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\nNotice that some of these substrings repeat and are counted the number of times they occur.\nAlso, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"10101\"\nOutput: 4\nExplanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0697/","title":"697. Degree of an Array","text":"Problem <p>Given a non-empty array of non-negative integers <code>nums</code>, the degree of this array is defined as the maximum frequency of any one of its elements.</p> <p>Your task is to find the smallest possible length of a (contiguous) subarray of <code>nums</code>, that has the same degree as <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,2,3,1]\nOutput: 2\nExplanation: \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,2,3,1,4,2]\nOutput: 6\nExplanation: \nThe degree is 3 because the element 2 is repeated 3 times.\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums.length</code> will be between 1 and 50,000.</li> <li><code>nums[i]</code> will be an integer between 0 and 49,999.</li> </ul>"},{"location":"LeetCode_Problems/0698/","title":"698. Partition to K Equal Sum Subsets","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> if it is possible to divide this array into <code>k</code> non-empty subsets whose sums are all equal.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,3,2,3,5,2,1], k = 4\nOutput: true\nExplanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4], k = 3\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 16</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li>The frequency of each element is in the range <code>[1, 4]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0699/","title":"699. Falling Squares","text":"Problem <p>There are several squares being dropped onto the X-axis of a 2D plane.</p> <p>You are given a 2D integer array <code>positions</code> where <code>positions[i] = [left<sub>i</sub>, sideLength<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> square with a side length of <code>sideLength<sub>i</sub></code> that is dropped with its left edge aligned with X-coordinate <code>left<sub>i</sub></code>.</p> <p>Each square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands on the top side of another square or on the X-axis. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.</p> <p>After each square is dropped, you must record the height of the current tallest stack of squares.</p> <p>Return an integer array <code>ans</code> where <code>ans[i]</code> represents the height described above after dropping the <code>i<sup>th</sup></code> square.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: positions = [[1,2],[2,3],[6,1]]\nOutput: [2,5,5]\nExplanation:\nAfter the first drop, the tallest stack is square 1 with a height of 2.\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\nThus, we return an answer of [2, 5, 5].\n</pre> <p>Example 2:</p> <pre>\nInput: positions = [[100,100],[200,100]]\nOutput: [100,100]\nExplanation:\nAfter the first drop, the tallest stack is square 1 with a height of 100.\nAfter the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\nThus, we return an answer of [100, 100].\nNote that square 2 only brushes the right side of square 1, which does not count as landing on it.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= positions.length &lt;= 1000</code></li> <li><code>1 &lt;= left<sub>i</sub> &lt;= 10<sup>8</sup></code></li> <li><code>1 &lt;= sideLength<sub>i</sub> &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0700/","title":"700. Search in a Binary Search Tree","text":"Problem <p>You are given the <code>root</code> of a binary search tree (BST) and an integer <code>val</code>.</p> <p>Find the node in the BST that the node's value equals <code>val</code> and return the subtree rooted with that node. If such a node does not exist, return <code>null</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [4,2,7,1,3], val = 2\nOutput: [2,1,3]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [4,2,7,1,3], val = 5\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 5000]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>7</sup></code></li> <li><code>root</code> is a binary search tree.</li> <li><code>1 &lt;= val &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0701/","title":"701. Insert into a Binary Search Tree","text":"Problem <p>You are given the <code>root</code> node of a binary search tree (BST) and a <code>value</code> to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.</p> <p>Notice\u00a0that there may exist\u00a0multiple valid ways for the\u00a0insertion, as long as the tree remains a BST after insertion. You can return any of them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [4,2,7,1,3], val = 5\nOutput: [4,2,7,1,3,5]\nExplanation: Another accepted tree is:\n\n</pre> <p>Example 2:</p> <pre>\nInput: root = [40,20,60,10,30,50,70], val = 25\nOutput: [40,20,60,10,30,50,70,null,null,25]\n</pre> <p>Example 3:</p> <pre>\nInput: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\nOutput: [4,2,7,1,3,5]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in\u00a0the tree will be in the range <code>[0,\u00a010<sup>4</sup>]</code>.</li> <li><code>-10<sup>8</sup> &lt;= Node.val &lt;= 10<sup>8</sup></code></li> <li>All the values <code>Node.val</code> are unique.</li> <li><code>-10<sup>8</sup> &lt;= val &lt;= 10<sup>8</sup></code></li> <li>It's guaranteed that <code>val</code> does not exist in the original BST.</li> </ul>"},{"location":"LeetCode_Problems/0702/","title":"702. Search in a Sorted Array of Unknown Size","text":"Problem"},{"location":"LeetCode_Problems/0703/","title":"703. Kth Largest Element in a Stream","text":"Problem <p>Design a class to find the <code>k<sup>th</sup></code> largest element in a stream. Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p> <p>Implement <code>KthLargest</code> class:</p> <ul> <li><code>KthLargest(int k, int[] nums)</code> Initializes the object with the integer <code>k</code> and the stream of integers <code>nums</code>.</li> <li><code>int add(int val)</code> Appends the integer <code>val</code> to the stream and returns the element representing the <code>k<sup>th</sup></code> largest element in the stream.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\n\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= val &lt;= 10<sup>4</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>add</code>.</li> <li>It is guaranteed that there will be at least <code>k</code> elements in the array when you search for the <code>k<sup>th</sup></code> element.</li> </ul>"},{"location":"LeetCode_Problems/0704/","title":"704. Binary Search","text":"Problem <p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt; nums[i], target &lt; 10<sup>4</sup></code></li> <li>All the integers in <code>nums</code> are unique.</li> <li><code>nums</code> is sorted in ascending order.</li> </ul>"},{"location":"LeetCode_Problems/0705/","title":"705. Design HashSet","text":"Problem <p>Design a HashSet without using any built-in hash table libraries.</p> <p>Implement <code>MyHashSet</code> class:</p> <ul> <li><code>void add(key)</code> Inserts the value <code>key</code> into the HashSet.</li> <li><code>bool contains(key)</code> Returns whether the value <code>key</code> exists in the HashSet or not.</li> <li><code>void remove(key)</code> Removes the value <code>key</code> in the HashSet. If <code>key</code> does not exist in the HashSet, do nothing.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\nOutput\n[null, null, null, true, false, null, true, null, false]\n\nExplanation\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // return False, (already removed)</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= key &lt;= 10<sup>6</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>add</code>, <code>remove</code>, and <code>contains</code>.</li> </ul>"},{"location":"LeetCode_Problems/0706/","title":"706. Design HashMap","text":"Problem <p>Design a HashMap without using any built-in hash table libraries.</p> <p>Implement the <code>MyHashMap</code> class:</p> <ul> <li><code>MyHashMap()</code> initializes the object with an empty map.</li> <li><code>void put(int key, int value)</code> inserts a <code>(key, value)</code> pair into the HashMap. If the <code>key</code> already exists in the map, update the corresponding <code>value</code>.</li> <li><code>int get(int key)</code> returns the <code>value</code> to which the specified <code>key</code> is mapped, or <code>-1</code> if this map contains no mapping for the <code>key</code>.</li> <li><code>void remove(key)</code> removes the <code>key</code> and its corresponding <code>value</code> if the map contains the mapping for the <code>key</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\nOutput\n[null, null, null, 1, -1, null, 1, null, -1]\n\nExplanation\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= key, value &lt;= 10<sup>6</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>put</code>, <code>get</code>, and <code>remove</code>.</li> </ul>"},{"location":"LeetCode_Problems/0707/","title":"707. Design Linked List","text":"Problem <p>Design your implementation of the linked list. You can choose to use a singly or doubly linked list. A node in a singly linked list should have two attributes: <code>val</code> and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code> is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.</p> <p>Implement the <code>MyLinkedList</code> class:</p> <ul> <li><code>MyLinkedList()</code> Initializes the <code>MyLinkedList</code> object.</li> <li><code>int get(int index)</code> Get the value of the <code>index<sup>th</sup></code> node in the linked list. If the index is invalid, return <code>-1</code>.</li> <li><code>void addAtHead(int val)</code> Add a node of value <code>val</code> before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</li> <li><code>void addAtTail(int val)</code> Append a node of value <code>val</code> as the last element of the linked list.</li> <li><code>void addAtIndex(int index, int val)</code> Add a node of value <code>val</code> before the <code>index<sup>th</sup></code> node in the linked list. If <code>index</code> equals the length of the linked list, the node will be appended to the end of the linked list. If <code>index</code> is greater than the length, the node will not be inserted.</li> <li><code>void deleteAtIndex(int index)</code> Delete the <code>index<sup>th</sup></code> node in the linked list, if the index is valid.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n[[], [1], [3], [1, 2], [1], [1], [1]]\nOutput\n[null, null, null, null, 2, null, 3]\n\nExplanation\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1-&gt;2-&gt;3\nmyLinkedList.get(1);              // return 2\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1-&gt;3\nmyLinkedList.get(1);              // return 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= index, val &lt;= 1000</code></li> <li>Please do not use the built-in LinkedList library.</li> <li>At most <code>2000</code> calls will be made to <code>get</code>, <code>addAtHead</code>, <code>addAtTail</code>, <code>addAtIndex</code> and <code>deleteAtIndex</code>.</li> </ul>"},{"location":"LeetCode_Problems/0708/","title":"708. Insert into a Sorted Circular Linked List","text":"Problem"},{"location":"LeetCode_Problems/0709/","title":"709. To Lower Case","text":"Problem <p>Given a string <code>s</code>, return the string after replacing every uppercase letter with the same lowercase letter.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"Hello\"\nOutput: \"hello\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"here\"\nOutput: \"here\"\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"LOVELY\"\nOutput: \"lovely\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of printable ASCII characters.</li> </ul>"},{"location":"LeetCode_Problems/0710/","title":"710. Random Pick with Blacklist","text":"Problem <p>You are given an integer <code>n</code> and an array of unique integers <code>blacklist</code>. Design an algorithm to pick a random integer in the range <code>[0, n - 1]</code> that is not in <code>blacklist</code>. Any integer that is in the mentioned range and not in <code>blacklist</code> should be equally likely to be returned.</p> <p>Optimize your algorithm such that it minimizes the number of calls to the built-in random function of your language.</p> <p>Implement the <code>Solution</code> class:</p> <ul> <li><code>Solution(int n, int[] blacklist)</code> Initializes the object with the integer <code>n</code> and the blacklisted integers <code>blacklist</code>.</li> <li><code>int pick()</code> Returns a random integer in the range <code>[0, n - 1]</code> and not in <code>blacklist</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[7, [2, 3, 5]], [], [], [], [], [], [], []]\nOutput\n[null, 0, 4, 1, 6, 1, 0, 4]\n\nExplanation\nSolution solution = new Solution(7, [2, 3, 5]);\nsolution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\nsolution.pick(); // return 4\nsolution.pick(); // return 1\nsolution.pick(); // return 6\nsolution.pick(); // return 1\nsolution.pick(); // return 0\nsolution.pick(); // return 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= blacklist.length &lt;= min(10<sup>5</sup>, n - 1)</code></li> <li><code>0 &lt;= blacklist[i] &lt; n</code></li> <li>All the values of <code>blacklist</code> are unique.</li> <li>At most <code>2 * 10<sup>4</sup></code> calls will be made to <code>pick</code>.</li> </ul>"},{"location":"LeetCode_Problems/0711/","title":"711. Number of Distinct Islands II","text":"Problem"},{"location":"LeetCode_Problems/0712/","title":"712. Minimum ASCII Delete Sum for Two Strings","text":"Problem <p>Given two strings <code>s1</code> and\u00a0<code>s2</code>, return the lowest ASCII sum of deleted characters to make two strings equal.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"sea\", s2 = \"eat\"\nOutput: 231\nExplanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\nDeleting \"t\" from \"eat\" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"delete\", s2 = \"leet\"\nOutput: 403\nExplanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length &lt;= 1000</code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0713/","title":"713. Subarray Product Less Than K","text":"Problem <p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than <code>k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [10,5,2,6], k = 100\nOutput: 8\nExplanation: The 8 subarrays that have product less than 100 are:\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3], k = 0\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li><code>0 &lt;= k &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0714/","title":"714. Best Time to Buy and Sell Stock with Transaction Fee","text":"Problem <p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day, and an integer <code>fee</code> representing a transaction fee.</p> <p>Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.</p> <p>Note:</p> <ul> <li>You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</li> <li>The transaction fee is only charged once for each stock purchase and sale.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: prices = [1,3,2,8,4,9], fee = 2\nOutput: 8\nExplanation: The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n</pre> <p>Example 2:</p> <pre>\nInput: prices = [1,3,7,5,10,3], fee = 3\nOutput: 6\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= prices[i] &lt; 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= fee &lt; 5 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0715/","title":"715. Range Module","text":"Problem <p>A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.</p> <p>A half-open interval <code>[left, right)</code> denotes all the real numbers <code>x</code> where <code>left &lt;= x &lt; right</code>.</p> <p>Implement the <code>RangeModule</code> class:</p> <ul> <li><code>RangeModule()</code> Initializes the object of the data structure.</li> <li><code>void addRange(int left, int right)</code> Adds the half-open interval <code>[left, right)</code>, tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval <code>[left, right)</code> that are not already tracked.</li> <li><code>boolean queryRange(int left, int right)</code> Returns <code>true</code> if every real number in the interval <code>[left, right)</code> is currently being tracked, and <code>false</code> otherwise.</li> <li><code>void removeRange(int left, int right)</code> Stops tracking every real number currently being tracked in the half-open interval <code>[left, right)</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]\n[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]\nOutput\n[null, null, null, true, false, true]\n\nExplanation\nRangeModule rangeModule = new RangeModule();\nrangeModule.addRange(10, 20);\nrangeModule.removeRange(14, 16);\nrangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)\nrangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\nrangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= left &lt; right &lt;= 10<sup>9</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>addRange</code>, <code>queryRange</code>, and <code>removeRange</code>.</li> </ul>"},{"location":"LeetCode_Problems/0716/","title":"716. Max Stack","text":"Problem"},{"location":"LeetCode_Problems/0717/","title":"717. 1-bit and 2-bit Characters","text":"Problem <p>We have two special characters:</p> <ul> <li>The first character can be represented by one bit <code>0</code>.</li> <li>The second character can be represented by two bits (<code>10</code> or <code>11</code>).</li> </ul> <p>Given a binary array <code>bits</code> that ends with <code>0</code>, return <code>true</code> if the last character must be a one-bit character.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: bits = [1,0,0]\nOutput: true\nExplanation: The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character.\n</pre> <p>Example 2:</p> <pre>\nInput: bits = [1,1,1,0]\nOutput: false\nExplanation: The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= bits.length &lt;= 1000</code></li> <li><code>bits[i]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0718/","title":"718. Maximum Length of Repeated Subarray","text":"Problem <p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return the maximum length of a subarray that appears in both arrays.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\nOutput: 3\nExplanation: The repeated subarray with maximum length is [3,2,1].\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\nOutput: 5\nExplanation: The repeated subarray with maximum length is [0,0,0,0,0].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0719/","title":"719. Find K-th Smallest Pair Distance","text":"Problem <p>The distance of a pair of integers <code>a</code> and <code>b</code> is defined as the absolute difference between <code>a</code> and <code>b</code>.</p> <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the <code>k<sup>th</sup></code> smallest distance among all the pairs <code>nums[i]</code> and <code>nums[j]</code> where <code>0 &lt;= i &lt; j &lt; nums.length</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,1], k = 1\nOutput: 0\nExplanation: Here are all the pairs:\n(1,3) -&gt; 2\n(1,1) -&gt; 0\n(3,1) -&gt; 2\nThen the 1<sup>st</sup> smallest distance pair is (1,1), and its distance is 0.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1], k = 2\nOutput: 0\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,6,1], k = 3\nOutput: 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= k &lt;= n * (n - 1) / 2</code></li> </ul>"},{"location":"LeetCode_Problems/0720/","title":"720. Longest Word in Dictionary","text":"Problem <p>Given an array of strings <code>words</code> representing an English Dictionary, return the longest word in <code>words</code> that can be built one character at a time by other words in <code>words</code>.</p> <p>If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.</p> <p>Note that the word should be built from left to right with each additional character being added to the end of a previous word.\u00a0</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]\nOutput: \"world\"\nExplanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]\nOutput: \"apple\"\nExplanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 30</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0721/","title":"721. Accounts Merge","text":"Problem <p>Given a list of <code>accounts</code> where each element <code>accounts[i]</code> is a list of strings, where the first element <code>accounts[i][0]</code> is a name, and the rest of the elements are emails representing emails of the account.</p> <p>Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.</p> <p>After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\nOutput: [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\nExplanation:\nThe first and second John's are the same person as they have the common email \"johnsmith@mail.com\".\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]\nOutput: [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= accounts.length &lt;= 1000</code></li> <li><code>2 &lt;= accounts[i].length &lt;= 10</code></li> <li><code>1 &lt;= accounts[i][j].length &lt;= 30</code></li> <li><code>accounts[i][0]</code> consists of English letters.</li> <li><code>accounts[i][j] (for j &gt; 0)</code> is a valid email.</li> </ul>"},{"location":"LeetCode_Problems/0722/","title":"722. Remove Comments","text":"Problem <p>Given a C++ program, remove comments from it. The program source is an array of strings <code>source</code> where <code>source[i]</code> is the <code>i<sup>th</sup></code> line of the source code. This represents the result of splitting the original source code string by the newline character <code>'\\n'</code>.</p> <p>In C++, there are two types of comments, line comments, and block comments.</p> <ul> <li>The string <code>\"//\"</code> denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.</li> <li>The string <code>\"/*\"</code> denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of <code>\"*/\"</code> should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string <code>\"/*/\"</code> does not yet end the block comment, as the ending would be overlapping the beginning.</li> </ul> <p>The first effective comment takes precedence over others.</p> <ul> <li>For example, if the string <code>\"//\"</code> occurs in a block comment, it is ignored.</li> <li>Similarly, if the string <code>\"/*\"</code> occurs in a line or block comment, it is also ignored.</li> </ul> <p>If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.</p> <p>There will be no control characters, single quote, or double quote characters.</p> <ul> <li>For example, <code>source = \"string s = \"/* Not a comment. */\";\"</code> will not be a test case.</li> </ul> <p>Also, nothing else such as defines or macros will interfere with the comments.</p> <p>It is guaranteed that every open block comment will eventually be closed, so <code>\"/*\"</code> outside of a line or block comment always starts a new comment.</p> <p>Finally, implicit newline characters can be deleted by block comments. Please see the examples below for details.</p> <p>After removing the comments from the source code, return the source code in the same format.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\nOutput: [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\nExplanation: The line by line code is visualized as below:\n/*Test program */\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n   comment for \n   testing */\na = b + c;\n}\nThe string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\nThe line by line output code is visualized as below:\nint main()\n{ \n\nint a, b, c;\na = b + c;\n}\n</pre> <p>Example 2:</p> <pre>\nInput: source = [\"a/*comment\", \"line\", \"more_comment*/b\"]\nOutput: [\"ab\"]\nExplanation: The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= source.length &lt;= 100</code></li> <li><code>0 &lt;= source[i].length &lt;= 80</code></li> <li><code>source[i]</code> consists of printable ASCII characters.</li> <li>Every open block comment is eventually closed.</li> <li>There are no single-quote or\u00a0double-quote in the input.</li> </ul>"},{"location":"LeetCode_Problems/0723/","title":"723. Candy Crush","text":"Problem"},{"location":"LeetCode_Problems/0724/","title":"724. Find Pivot Index","text":"Problem <p>Given an array of integers <code>nums</code>, calculate the pivot index of this array.</p> <p>The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.</p> <p>If the index is on the left edge of the array, then the left sum is <code>0</code> because there are no elements to the left. This also applies to the right edge of the array.</p> <p>Return the leftmost pivot index. If no such index exists, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,7,3,6,5,6]\nOutput: 3\nExplanation:\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3]\nOutput: -1\nExplanation:\nThere is no index that satisfies the conditions in the problem statement.</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,1,-1]\nOutput: 0\nExplanation:\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> </ul> <p> </p> <p>Note: This question is the same as\u00a01991:\u00a0https://leetcode.com/problems/find-the-middle-index-in-array/</p>"},{"location":"LeetCode_Problems/0725/","title":"725. Split Linked List in Parts","text":"Problem <p>Given the <code>head</code> of a singly linked list and an integer <code>k</code>, split the linked list into <code>k</code> consecutive linked list parts.</p> <p>The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.</p> <p>The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.</p> <p>Return an array of the <code>k</code> parts.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3], k = 5\nOutput: [[1],[2],[3],[],[]]\nExplanation:\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5,6,7,8,9,10], k = 3\nOutput: [[1,2,3,4],[5,6,7],[8,9,10]]\nExplanation:\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[0, 1000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> <li><code>1 &lt;= k &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/0726/","title":"726. Number of Atoms","text":"Problem <p>Given a string <code>formula</code> representing a chemical formula, return the count of each atom.</p> <p>The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.</p> <p>One or more digits representing that element's count may follow if the count is greater than <code>1</code>. If the count is <code>1</code>, no digits will follow.</p> <ul> <li>For example, <code>\"H2O\"</code> and <code>\"H2O2\"</code> are possible, but <code>\"H1O2\"</code> is impossible.</li> </ul> <p>Two formulas are concatenated together to produce another formula.</p> <ul> <li>For example, <code>\"H2O2He3Mg4\"</code> is also a formula.</li> </ul> <p>A formula placed in parentheses, and a count (optionally added) is also a formula.</p> <ul> <li>For example, <code>\"(H2O2)\"</code> and <code>\"(H2O2)3\"</code> are formulas.</li> </ul> <p>Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than <code>1</code>), followed by the second name (in sorted order), followed by its count (if that count is more than <code>1</code>), and so on.</p> <p>The test cases are generated so that all the values in the output fit in a 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: formula = \"H2O\"\nOutput: \"H2O\"\nExplanation: The count of elements are {'H': 2, 'O': 1}.\n</pre> <p>Example 2:</p> <pre>\nInput: formula = \"Mg(OH)2\"\nOutput: \"H2MgO2\"\nExplanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.\n</pre> <p>Example 3:</p> <pre>\nInput: formula = \"K4(ON(SO3)2)2\"\nOutput: \"K4N2O14S4\"\nExplanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= formula.length &lt;= 1000</code></li> <li><code>formula</code> consists of English letters, digits, <code>'('</code>, and <code>')'</code>.</li> <li><code>formula</code> is always valid.</li> </ul>"},{"location":"LeetCode_Problems/0727/","title":"727. Minimum Window Subsequence","text":"Problem"},{"location":"LeetCode_Problems/0728/","title":"728. Self Dividing Numbers","text":"Problem <p>A self-dividing number is a number that is divisible by every digit it contains.</p> <ul> <li>For example, <code>128</code> is a self-dividing number because <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>.</li> </ul> <p>A self-dividing number is not allowed to contain the digit zero.</p> <p>Given two integers <code>left</code> and <code>right</code>, return a list of all the self-dividing numbers in the range <code>[left, right]</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: left = 1, right = 22\nOutput: [1,2,3,4,5,6,7,8,9,11,12,15,22]\n</pre> <p>Example 2:</p> <pre>Input: left = 47, right = 85\nOutput: [48,55,66,77]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= left &lt;= right &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0729/","title":"729. My Calendar I","text":"Problem <p>You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.</p> <p>A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).</p> <p>The event can be represented as a pair of integers <code>start</code> and <code>end</code> that represents a booking on the half-open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p> <p>Implement the <code>MyCalendar</code> class:</p> <ul> <li><code>MyCalendar()</code> Initializes the calendar object.</li> <li><code>boolean book(int start, int end)</code> Returns <code>true</code> if the event can be added to the calendar successfully without causing a double booking. Otherwise, return <code>false</code> and do not add the event to the calendar.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MyCalendar\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [15, 25], [20, 30]]\nOutput\n[null, true, false, true]\n\nExplanation\nMyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= start &lt; end &lt;= 10<sup>9</sup></code></li> <li>At most <code>1000</code> calls will be made to <code>book</code>.</li> </ul>"},{"location":"LeetCode_Problems/0730/","title":"730. Count Different Palindromic Subsequences","text":"Problem <p>Given a string s, return the number of different non-empty palindromic subsequences in <code>s</code>. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A subsequence of a string is obtained by deleting zero or more characters from the string.</p> <p>A sequence is palindromic if it is equal to the sequence reversed.</p> <p>Two sequences <code>a<sub>1</sub>, a<sub>2</sub>, ...</code> and <code>b<sub>1</sub>, b<sub>2</sub>, ...</code> are different if there is some <code>i</code> for which <code>a<sub>i</sub> != b<sub>i</sub></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"bccb\"\nOutput: 6\nExplanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\nNote that 'bcb' is counted only once, even though it occurs twice.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"\nOutput: 104860361\nExplanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10<sup>9</sup> + 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'a'</code>, <code>'b'</code>, <code>'c'</code>, or <code>'d'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0731/","title":"731. My Calendar II","text":"Problem <p>You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking.</p> <p>A triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).</p> <p>The event can be represented as a pair of integers <code>start</code> and <code>end</code> that represents a booking on the half-open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p> <p>Implement the <code>MyCalendarTwo</code> class:</p> <ul> <li><code>MyCalendarTwo()</code> Initializes the calendar object.</li> <li><code>boolean book(int start, int end)</code> Returns <code>true</code> if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return <code>false</code> and do not add the event to the calendar.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\nOutput\n[null, true, true, true, false, true, true]\n\nExplanation\nMyCalendarTwo myCalendarTwo = new MyCalendarTwo();\nmyCalendarTwo.book(10, 20); // return True, The event can be booked. \nmyCalendarTwo.book(50, 60); // return True, The event can be booked. \nmyCalendarTwo.book(10, 40); // return True, The event can be double booked. \nmyCalendarTwo.book(5, 15);  // return False, The event cannot be booked, because it would result in a triple booking.\nmyCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.\nmyCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= start &lt; end &lt;= 10<sup>9</sup></code></li> <li>At most <code>1000</code> calls will be made to <code>book</code>.</li> </ul>"},{"location":"LeetCode_Problems/0732/","title":"732. My Calendar III","text":"Problem <p>A <code>k</code>-booking happens when <code>k</code> events have some non-empty intersection (i.e., there is some time that is common to all <code>k</code> events.)</p> <p>You are given some events <code>[startTime, endTime)</code>, after each given event, return an integer <code>k</code> representing the maximum <code>k</code>-booking between all the previous events.</p> <p>Implement the <code>MyCalendarThree</code> class:</p> <ul> <li><code>MyCalendarThree()</code> Initializes the object.</li> <li><code>int book(int startTime, int endTime)</code> Returns an integer <code>k</code> representing the largest integer such that there exists a <code>k</code>-booking in the calendar.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\nOutput\n[null, 1, 1, 2, 3, 3, 3]\n\nExplanation\nMyCalendarThree myCalendarThree = new MyCalendarThree();\nmyCalendarThree.book(10, 20); // return 1\nmyCalendarThree.book(50, 60); // return 1\nmyCalendarThree.book(10, 40); // return 2\nmyCalendarThree.book(5, 15); // return 3\nmyCalendarThree.book(5, 10); // return 3\nmyCalendarThree.book(25, 55); // return 3\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= startTime &lt; endTime &lt;= 10<sup>9</sup></code></li> <li>At most <code>400</code> calls will be made to <code>book</code>.</li> </ul>"},{"location":"LeetCode_Problems/0733/","title":"733. Flood Fill","text":"Problem <p>An image is represented by an <code>m x n</code> integer grid <code>image</code> where <code>image[i][j]</code> represents the pixel value of the image.</p> <p>You are also given three integers <code>sr</code>, <code>sc</code>, and <code>color</code>. You should perform a flood fill on the image starting from the pixel <code>image[sr][sc]</code>.</p> <p>To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with <code>color</code>.</p> <p>Return the modified image after performing the flood fill.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.\n</pre> <p>Example 2:</p> <pre>\nInput: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0\nOutput: [[0,0,0],[0,0,0]]\nExplanation: The starting pixel is already colored 0, so no changes are made to the image.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == image.length</code></li> <li><code>n == image[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>0 &lt;= image[i][j], color &lt; 2<sup>16</sup></code></li> <li><code>0 &lt;= sr &lt; m</code></li> <li><code>0 &lt;= sc &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/0734/","title":"734. Sentence Similarity","text":"Problem"},{"location":"LeetCode_Problems/0735/","title":"735. Asteroid Collision","text":"Problem <p>We are given an array <code>asteroids</code> of integers representing asteroids in a row.</p> <p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p> <p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: asteroids = [5,10,-5]\nOutput: [5,10]\nExplanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n</pre> <p>Example 2:</p> <pre>\nInput: asteroids = [8,-8]\nOutput: []\nExplanation: The 8 and -8 collide exploding each other.\n</pre> <p>Example 3:</p> <pre>\nInput: asteroids = [10,2,-5]\nOutput: [10]\nExplanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= asteroids.length &lt;= 10<sup>4</sup></code></li> <li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li> <li><code>asteroids[i] != 0</code></li> </ul>"},{"location":"LeetCode_Problems/0736/","title":"736. Parse Lisp Expression","text":"Problem <p>You are given a string expression representing a Lisp-like expression to return the integer value of.</p> <p>The syntax for these expressions is given as follows.</p> <ul> <li>An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.</li> <li>(An integer could be positive or negative.)</li> <li>A let expression takes the form <code>\"(let v<sub>1</sub> e<sub>1</sub> v<sub>2</sub> e<sub>2</sub> ... v<sub>n</sub> e<sub>n</sub> expr)\"</code>, where let is always the string <code>\"let\"</code>, then there are one or more pairs of alternating variables and expressions, meaning that the first variable <code>v<sub>1</sub></code> is assigned the value of the expression <code>e<sub>1</sub></code>, the second variable <code>v<sub>2</sub></code> is assigned the value of the expression <code>e<sub>2</sub></code>, and so on sequentially; and then the value of this let expression is the value of the expression <code>expr</code>.</li> <li>An add expression takes the form <code>\"(add e<sub>1</sub> e<sub>2</sub>)\"</code> where add is always the string <code>\"add\"</code>, there are always two expressions <code>e<sub>1</sub></code>, <code>e<sub>2</sub></code> and the result is the addition of the evaluation of <code>e<sub>1</sub></code> and the evaluation of <code>e<sub>2</sub></code>.</li> <li>A mult expression takes the form <code>\"(mult e<sub>1</sub> e<sub>2</sub>)\"</code> where mult is always the string <code>\"mult\"</code>, there are always two expressions <code>e<sub>1</sub></code>, <code>e<sub>2</sub></code> and the result is the multiplication of the evaluation of e1 and the evaluation of e2.</li> <li>For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names <code>\"add\"</code>, <code>\"let\"</code>, and <code>\"mult\"</code> are protected and will never be used as variable names.</li> <li>Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"\nOutput: 14\nExplanation: In the expression (add x y), when checking for the value of the variable x,\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\nSince x = 3 is found first, the value of x is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: expression = \"(let x 3 x 2 x)\"\nOutput: 2\nExplanation: Assignment in let statements is processed sequentially.\n</pre> <p>Example 3:</p> <pre>\nInput: expression = \"(let x 1 y 2 x (add x y) (add x y))\"\nOutput: 5\nExplanation: The first (add x y) evaluates as 3, and is assigned to x.\nThe second (add x y) evaluates as 3+2 = 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= expression.length &lt;= 2000</code></li> <li>There are no leading or trailing spaces in <code>expression</code>.</li> <li>All tokens are separated by a single space in <code>expression</code>.</li> <li>The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.</li> <li>The expression is guaranteed to be legal and evaluate to an integer.</li> </ul>"},{"location":"LeetCode_Problems/0737/","title":"737. Sentence Similarity II","text":"Problem"},{"location":"LeetCode_Problems/0738/","title":"738. Monotone Increasing Digits","text":"Problem <p>An integer has monotone increasing digits if and only if each pair of adjacent digits <code>x</code> and <code>y</code> satisfy <code>x &lt;= y</code>.</p> <p>Given an integer <code>n</code>, return the largest number that is less than or equal to <code>n</code> with monotone increasing digits.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10\nOutput: 9\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1234\nOutput: 1234\n</pre> <p>Example 3:</p> <pre>\nInput: n = 332\nOutput: 299\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0739/","title":"739. Daily Temperatures","text":"Problem <p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return an array <code>answer</code> such that <code>answer[i]</code> is the number of days you have to wait after the <code>i<sup>th</sup></code> day to get a warmer temperature. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p> <p> </p> <p>Example 1:</p> <pre>Input: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]\n</pre> <p>Example 2:</p> <pre>Input: temperatures = [30,40,50,60]\nOutput: [1,1,1,0]\n</pre> <p>Example 3:</p> <pre>Input: temperatures = [30,60,90]\nOutput: [1,1,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;=\u00a0temperatures.length &lt;= 10<sup>5</sup></code></li> <li><code>30 &lt;=\u00a0temperatures[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0740/","title":"740. Delete and Earn","text":"Problem <p>You are given an integer array <code>nums</code>. You want to maximize the number of points you get by performing the following operation any number of times:</p> <ul> <li>Pick any <code>nums[i]</code> and delete it to earn <code>nums[i]</code> points. Afterwards, you must delete every element equal to <code>nums[i] - 1</code> and every element equal to <code>nums[i] + 1</code>.</li> </ul> <p>Return the maximum number of points you can earn by applying the above operation some number of times.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,4,2]\nOutput: 6\nExplanation: You can perform the following operations:\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\n- Delete 2 to earn 2 points. nums = [].\nYou earn a total of 6 points.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,3,3,3,4]\nOutput: 9\nExplanation: You can perform the following operations:\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\n- Delete a 3 again to earn 3 points. nums = [3].\n- Delete a 3 once more to earn 3 points. nums = [].\nYou earn a total of 9 points.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0741/","title":"741. Cherry Pickup","text":"Problem <p>You are given an <code>n x n</code> <code>grid</code> representing a field of cherries, each cell is one of three possible integers.</p> <ul> <li><code>0</code> means the cell is empty, so you can pass through,</li> <li><code>1</code> means the cell contains a cherry that you can pick up and pass through, or</li> <li><code>-1</code> means the cell contains a thorn that blocks your way.</li> </ul> <p>Return the maximum number of cherries you can collect by following the rules below:</p> <ul> <li>Starting at the position <code>(0, 0)</code> and reaching <code>(n - 1, n - 1)</code> by moving right or down through valid path cells (cells with value <code>0</code> or <code>1</code>).</li> <li>After reaching <code>(n - 1, n - 1)</code>, returning to <code>(0, 0)</code> by moving left or up through valid path cells.</li> <li>When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell <code>0</code>.</li> <li>If there is no valid path between <code>(0, 0)</code> and <code>(n - 1, n - 1)</code>, then no cherries can be collected.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,1,-1],[1,0,-1],[1,1,1]]\nOutput: 5\nExplanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>grid[i][j]</code> is <code>-1</code>, <code>0</code>, or <code>1</code>.</li> <li><code>grid[0][0] != -1</code></li> <li><code>grid[n - 1][n - 1] != -1</code></li> </ul>"},{"location":"LeetCode_Problems/0742/","title":"742. Closest Leaf in a Binary Tree","text":"Problem"},{"location":"LeetCode_Problems/0743/","title":"743. Network Delay Time","text":"Problem <p>You are given a network of <code>n</code> nodes, labeled from <code>1</code> to <code>n</code>. You are also given <code>times</code>, a list of travel times as directed edges <code>times[i] = (u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>)</code>, where <code>u<sub>i</sub></code> is the source node, <code>v<sub>i</sub></code> is the target node, and <code>w<sub>i</sub></code> is the time it takes for a signal to travel from source to target.</p> <p>We will send a signal from a given node <code>k</code>. Return the minimum time it takes for all the <code>n</code> nodes to receive the signal. If it is impossible for all the <code>n</code> nodes to receive the signal, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\nOutput: 2\n</pre> <p>Example 2:</p> <pre>\nInput: times = [[1,2,1]], n = 2, k = 1\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: times = [[1,2,1]], n = 2, k = 2\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= times.length &lt;= 6000</code></li> <li><code>times[i].length == 3</code></li> <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li><code>0 &lt;= w<sub>i</sub> &lt;= 100</code></li> <li>All the pairs <code>(u<sub>i</sub>, v<sub>i</sub>)</code> are unique. (i.e., no multiple edges.)</li> </ul>"},{"location":"LeetCode_Problems/0744/","title":"744. Find Smallest Letter Greater Than Target","text":"Problem <p>You are given an array of characters <code>letters</code> that is sorted in non-decreasing order, and a character <code>target</code>. There are at least two different characters in <code>letters</code>.</p> <p>Return the smallest character in <code>letters</code> that is lexicographically greater than <code>target</code>. If such a character does not exist, return the first character in <code>letters</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: letters = [\"c\",\"f\",\"j\"], target = \"a\"\nOutput: \"c\"\nExplanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'.\n</pre> <p>Example 2:</p> <pre>\nInput: letters = [\"c\",\"f\",\"j\"], target = \"c\"\nOutput: \"f\"\nExplanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'.\n</pre> <p>Example 3:</p> <pre>\nInput: letters = [\"x\",\"x\",\"y\",\"y\"], target = \"z\"\nOutput: \"x\"\nExplanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= letters.length &lt;= 10<sup>4</sup></code></li> <li><code>letters[i]</code> is a lowercase English letter.</li> <li><code>letters</code> is sorted in non-decreasing order.</li> <li><code>letters</code> contains at least two different characters.</li> <li><code>target</code> is a lowercase English letter.</li> </ul>"},{"location":"LeetCode_Problems/0745/","title":"745. Prefix and Suffix Search","text":"Problem <p>Design a special dictionary that searches the words in it by a prefix and a suffix.</p> <p>Implement the <code>WordFilter</code> class:</p> <ul> <li><code>WordFilter(string[] words)</code> Initializes the object with the <code>words</code> in the dictionary.</li> <li><code>f(string pref, string suff)</code> Returns the index of the word in the dictionary, which has the prefix <code>pref</code> and the suffix <code>suff</code>. If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return <code>-1</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"WordFilter\", \"f\"]\n[[[\"apple\"]], [\"a\", \"e\"]]\nOutput\n[null, 0]\nExplanation\nWordFilter wordFilter = new WordFilter([\"apple\"]);\nwordFilter.f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = \"e\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= words[i].length &lt;= 7</code></li> <li><code>1 &lt;= pref.length, suff.length &lt;= 7</code></li> <li><code>words[i]</code>, <code>pref</code> and <code>suff</code> consist of lowercase English letters only.</li> <li>At most <code>10<sup>4</sup></code> calls will be made to the function <code>f</code>.</li> </ul>"},{"location":"LeetCode_Problems/0746/","title":"746. Min Cost Climbing Stairs","text":"Problem <p>You are given an integer array <code>cost</code> where <code>cost[i]</code> is the cost of <code>i<sup>th</sup></code> step on a staircase. Once you pay the cost, you can either climb one or two steps.</p> <p>You can either start from the step with index <code>0</code>, or the step with index <code>1</code>.</p> <p>Return the minimum cost to reach the top of the floor.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: cost = [10,15,20]\nOutput: 15\nExplanation: You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n</pre> <p>Example 2:</p> <pre>\nInput: cost = [1,100,1,1,1,100,1,1,100,1]\nOutput: 6\nExplanation: You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= cost.length &lt;= 1000</code></li> <li><code>0 &lt;= cost[i] &lt;= 999</code></li> </ul>"},{"location":"LeetCode_Problems/0747/","title":"747. Largest Number At Least Twice of Others","text":"Problem <p>You are given an integer array <code>nums</code> where the largest integer is unique.</p> <p>Determine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return <code>-1</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,6,1,0]\nOutput: 1\nExplanation: 6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: -1\nExplanation: 4 is less than twice the value of 3, so we return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 50</code></li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li> <li>The largest element in <code>nums</code> is unique.</li> </ul>"},{"location":"LeetCode_Problems/0748/","title":"748. Shortest Completing Word","text":"Problem <p>Given a string <code>licensePlate</code> and an array of strings <code>words</code>, find the shortest completing word in <code>words</code>.</p> <p>A completing word is a word that contains all the letters in <code>licensePlate</code>. Ignore numbers and spaces in <code>licensePlate</code>, and treat letters as case insensitive. If a letter appears more than once in <code>licensePlate</code>, then it must appear in the word the same number of times or more.</p> <p>For example, if <code>licensePlate</code><code> = \"aBc 12c\"</code>, then it contains letters <code>'a'</code>, <code>'b'</code> (ignoring case), and <code>'c'</code> twice. Possible completing words are <code>\"abccdef\"</code>, <code>\"caaacab\"</code>, and <code>\"cbca\"</code>.</p> <p>Return the shortest completing word in <code>words</code>. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in <code>words</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]\nOutput: \"steps\"\nExplanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n\"step\" contains 't' and 'p', but only contains 1 's'.\n\"steps\" contains 't', 'p', and both 's' characters.\n\"stripe\" is missing an 's'.\n\"stepple\" is missing an 's'.\nSince \"steps\" is the only word containing all the letters, that is the answer.\n</pre> <p>Example 2:</p> <pre>\nInput: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]\nOutput: \"pest\"\nExplanation: licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= licensePlate.length &lt;= 7</code></li> <li><code>licensePlate</code> contains digits, letters (uppercase or lowercase), or space <code>' '</code>.</li> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 15</code></li> <li><code>words[i]</code> consists of lower case English letters.</li> </ul>"},{"location":"LeetCode_Problems/0749/","title":"749. Contain Virus","text":"Problem <p>A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.</p> <p>The world is modeled as an <code>m x n</code> binary grid <code>isInfected</code>, where <code>isInfected[i][j] == 0</code> represents uninfected cells, and <code>isInfected[i][j] == 1</code> represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.</p> <p>Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There will never be a tie.</p> <p>Return the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]\nOutput: 10\nExplanation: There are 2 contaminated regions.\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\n\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\n\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: isInfected = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 4\nExplanation: Even though there is only one cell saved, there are 4 walls built.\nNotice that walls are only built on the shared boundary of two different cells.\n</pre> <p>Example 3:</p> <pre>\nInput: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]\nOutput: 13\nExplanation: The region on the left only builds two new walls.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m ==\u00a0isInfected.length</code></li> <li><code>n ==\u00a0isInfected[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>isInfected[i][j]</code> is either <code>0</code> or <code>1</code>.</li> <li>There is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round.</li> </ul>"},{"location":"LeetCode_Problems/0750/","title":"750. Number Of Corner Rectangles","text":"Problem"},{"location":"LeetCode_Problems/0751/","title":"751. IP to CIDR","text":"Problem"},{"location":"LeetCode_Problems/0752/","title":"752. Open the Lock","text":"Problem <p>You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: <code>'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'</code>. The wheels can rotate freely and wrap around: for example we can turn <code>'9'</code> to be <code>'0'</code>, or <code>'0'</code> to be <code>'9'</code>. Each move consists of turning one wheel one slot.</p> <p>The lock initially starts at <code>'0000'</code>, a string representing the state of the 4 wheels.</p> <p>You are given a list of <code>deadends</code> dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.</p> <p>Given a <code>target</code> representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\nOutput: 6\nExplanation: \nA sequence of valid moves would be \"0000\" -&gt; \"1000\" -&gt; \"1100\" -&gt; \"1200\" -&gt; \"1201\" -&gt; \"1202\" -&gt; \"0202\".\nNote that a sequence like \"0000\" -&gt; \"0001\" -&gt; \"0002\" -&gt; \"0102\" -&gt; \"0202\" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\".\n</pre> <p>Example 2:</p> <pre>\nInput: deadends = [\"8888\"], target = \"0009\"\nOutput: 1\nExplanation: We can turn the last wheel in reverse to move from \"0000\" -&gt; \"0009\".\n</pre> <p>Example 3:</p> <pre>\nInput: deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\nOutput: -1\nExplanation: We cannot reach the target without getting stuck.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= deadends.length &lt;= 500</code></li> <li><code>deadends[i].length == 4</code></li> <li><code>target.length == 4</code></li> <li>target will not be in the list <code>deadends</code>.</li> <li><code>target</code> and <code>deadends[i]</code> consist of digits only.</li> </ul>"},{"location":"LeetCode_Problems/0753/","title":"753. Cracking the Safe","text":"Problem <p>There is a safe protected by a password. The password is a sequence of <code>n</code> digits where each digit can be in the range <code>[0, k - 1]</code>.</p> <p>The safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent <code>n</code> digits that were entered each time you type a digit.</p> <ul> <li>For example, the correct password is <code>\"345\"</code> and you enter in <code>\"012345\"</code>:      <ul> <li>After typing <code>0</code>, the most recent <code>3</code> digits is <code>\"0\"</code>, which is incorrect.</li> <li>After typing <code>1</code>, the most recent <code>3</code> digits is <code>\"01\"</code>, which is incorrect.</li> <li>After typing <code>2</code>, the most recent <code>3</code> digits is <code>\"012\"</code>, which is incorrect.</li> <li>After typing <code>3</code>, the most recent <code>3</code> digits is <code>\"123\"</code>, which is incorrect.</li> <li>After typing <code>4</code>, the most recent <code>3</code> digits is <code>\"234\"</code>, which is incorrect.</li> <li>After typing <code>5</code>, the most recent <code>3</code> digits is <code>\"345\"</code>, which is correct and the safe unlocks.</li> </ul> </li> </ul> <p>Return any string of minimum length that will unlock the safe at some point of entering it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1, k = 2\nOutput: \"10\"\nExplanation: The password is a single digit, so enter each digit. \"01\" would also unlock the safe.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, k = 2\nOutput: \"01100\"\nExplanation: For each possible password:\n- \"00\" is typed in starting from the 4<sup>th</sup> digit.\n- \"01\" is typed in starting from the 1<sup>st</sup> digit.\n- \"10\" is typed in starting from the 3<sup>rd</sup> digit.\n- \"11\" is typed in starting from the 2<sup>nd</sup> digit.\nThus \"01100\" will unlock the safe. \"10011\", and \"11001\" would also unlock the safe.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 4</code></li> <li><code>1 &lt;= k &lt;= 10</code></li> <li><code>1 &lt;= k<sup>n</sup> &lt;= 4096</code></li> </ul>"},{"location":"LeetCode_Problems/0754/","title":"754. Reach a Number","text":"Problem <p>You are standing at position <code>0</code> on an infinite number line. There is a destination at position <code>target</code>.</p> <p>You can make some number of moves <code>numMoves</code> so that:</p> <ul> <li>On each move, you can either go left or right.</li> <li>During the <code>i<sup>th</sup></code> move (starting from <code>i == 1</code> to <code>i == numMoves</code>), you take <code>i</code> steps in the chosen direction.</li> </ul> <p>Given the integer <code>target</code>, return the minimum number of moves required (i.e., the minimum <code>numMoves</code>) to reach the destination.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = 2\nOutput: 3\nExplanation:\nOn the 1<sup>st</sup> move, we step from 0 to 1 (1 step).\nOn the 2<sup>nd</sup> move, we step from 1 to -1 (2 steps).\nOn the 3<sup>rd</sup> move, we step from -1 to 2 (3 steps).\n</pre> <p>Example 2:</p> <pre>\nInput: target = 3\nOutput: 2\nExplanation:\nOn the 1<sup>st</sup> move, we step from 0 to 1 (1 step).\nOn the 2<sup>nd</sup> move, we step from 1 to 3 (2 steps).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li> <li><code>target != 0</code></li> </ul>"},{"location":"LeetCode_Problems/0755/","title":"755. Pour Water","text":"Problem"},{"location":"LeetCode_Problems/0756/","title":"756. Pyramid Transition Matrix","text":"Problem <p>You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains one less block than the row beneath it and is centered on top.</p> <p>To make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. A triangular pattern consists of a single block stacked on top of two blocks. The patterns are given\u00a0as a list of\u00a0three-letter strings <code>allowed</code>, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.</p> <ul> <li>For example, <code>\"ABC\"</code> represents a triangular pattern with a <code>'C'</code> block stacked on top of an <code>'A'</code> (left) and <code>'B'</code> (right) block. Note that this is different from <code>\"BAC\"</code> where <code>'B'</code> is on the left bottom and <code>'A'</code> is on the right bottom.</li> </ul> <p>You start with a bottom row of blocks <code>bottom</code>, given as a single string, that you must use as the base of the pyramid.</p> <p>Given <code>bottom</code> and <code>allowed</code>, return <code>true</code> if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in <code>allowed</code>, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]\nOutput: true\nExplanation: The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"A\" on level 1.\nThere are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]\nOutput: false\nExplanation: The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= bottom.length &lt;= 6</code></li> <li><code>0 &lt;= allowed.length &lt;= 216</code></li> <li><code>allowed[i].length == 3</code></li> <li>The letters in all input strings are from the set <code>{'A', 'B', 'C', 'D', 'E', 'F'}</code>.</li> <li>All the values of <code>allowed</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0757/","title":"757. Set Intersection Size At Least Two","text":"Problem <p>You are given a 2D integer array <code>intervals</code> where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represents all the integers from <code>start<sub>i</sub></code> to <code>end<sub>i</sub></code> inclusively.</p> <p>A containing set is an array <code>nums</code> where each interval from <code>intervals</code> has at least two integers in <code>nums</code>.</p> <ul> <li>For example, if <code>intervals = [[1,3], [3,7], [8,9]]</code>, then <code>[1,2,4,7,8,9]</code> and <code>[2,3,4,8,9]</code> are containing sets.</li> </ul> <p>Return the minimum possible size of a containing set.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: intervals = [[1,3],[3,7],[8,9]]\nOutput: 5\nExplanation: let nums = [2, 3, 4, 8, 9].\nIt can be shown that there cannot be any containing array of size 4.\n</pre> <p>Example 2:</p> <pre>\nInput: intervals = [[1,3],[1,4],[2,5],[3,5]]\nOutput: 3\nExplanation: let nums = [2, 3, 4].\nIt can be shown that there cannot be any containing array of size 2.\n</pre> <p>Example 3:</p> <pre>\nInput: intervals = [[1,2],[2,3],[2,4],[4,5]]\nOutput: 5\nExplanation: let nums = [1, 2, 3, 4, 5].\nIt can be shown that there cannot be any containing array of size 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= intervals.length &lt;= 3000</code></li> <li><code>intervals[i].length == 2</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0758/","title":"758. Bold Words in String","text":"Problem"},{"location":"LeetCode_Problems/0759/","title":"759. Employee Free Time","text":"Problem"},{"location":"LeetCode_Problems/0760/","title":"760. Find Anagram Mappings","text":"Problem"},{"location":"LeetCode_Problems/0761/","title":"761. Special Binary String","text":"Problem <p>Special binary strings are binary strings with the following two properties:</p> <ul> <li>The number of <code>0</code>'s is equal to the number of <code>1</code>'s.</li> <li>Every prefix of the binary string has at least as many <code>1</code>'s as <code>0</code>'s.</li> </ul> <p>You are given a special binary string <code>s</code>.</p> <p>A move consists of choosing two consecutive, non-empty, special substrings of <code>s</code>, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.</p> <p>Return the lexicographically largest resulting string possible after applying the mentioned operations on the string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"11011000\"\nOutput: \"11100100\"\nExplanation: The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.\nThis is the lexicographically largest string possible after some number of swaps.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"10\"\nOutput: \"10\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 50</code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> <li><code>s</code> is a special binary string.</li> </ul>"},{"location":"LeetCode_Problems/0762/","title":"762. Prime Number of Set Bits in Binary Representation","text":"Problem <p>Given two integers <code>left</code> and <code>right</code>, return the count of numbers in the inclusive range <code>[left, right]</code> having a prime number of set bits in their binary representation.</p> <p>Recall that the number of set bits an integer has is the number of <code>1</code>'s present when written in binary.</p> <ul> <li>For example, <code>21</code> written in binary is <code>10101</code>, which has <code>3</code> set bits.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: left = 6, right = 10\nOutput: 4\nExplanation:\n6  -&gt; 110 (2 set bits, 2 is prime)\n7  -&gt; 111 (3 set bits, 3 is prime)\n8  -&gt; 1000 (1 set bit, 1 is not prime)\n9  -&gt; 1001 (2 set bits, 2 is prime)\n10 -&gt; 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits.\n</pre> <p>Example 2:</p> <pre>\nInput: left = 10, right = 15\nOutput: 5\nExplanation:\n10 -&gt; 1010 (2 set bits, 2 is prime)\n11 -&gt; 1011 (3 set bits, 3 is prime)\n12 -&gt; 1100 (2 set bits, 2 is prime)\n13 -&gt; 1101 (3 set bits, 3 is prime)\n14 -&gt; 1110 (3 set bits, 3 is prime)\n15 -&gt; 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= left &lt;= right &lt;= 10<sup>6</sup></code></li> <li><code>0 &lt;= right - left &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0763/","title":"763. Partition Labels","text":"Problem <p>You are given a string <code>s</code>. We want to partition the string into as many parts as possible so that each letter appears in at most one part.</p> <p>Note that the partition is done so that after concatenating all the parts in order, the resultant string should be <code>s</code>.</p> <p>Return a list of integers representing the size of these parts.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ababcbacadefegdehijhklij\"\nOutput: [9,7,8]\nExplanation:\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\nThis is a partition so that each letter appears in at most one part.\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"eccbbbbdec\"\nOutput: [10]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0764/","title":"764. Largest Plus Sign","text":"Problem <p>You are given an integer <code>n</code>. You have an <code>n x n</code> binary grid <code>grid</code> with all values initially <code>1</code>'s except for some indices given in the array <code>mines</code>. The <code>i<sup>th</sup></code> element of the array <code>mines</code> is defined as <code>mines[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> where <code>grid[x<sub>i</sub>][y<sub>i</sub>] == 0</code>.</p> <p>Return the order of the largest axis-aligned plus sign of 1's contained in <code>grid</code>. If there is none, return <code>0</code>.</p> <p>An axis-aligned plus sign of <code>1</code>'s of order <code>k</code> has some center <code>grid[r][c] == 1</code> along with four arms of length <code>k - 1</code> going up, down, left, and right, and made of <code>1</code>'s. Note that there could be <code>0</code>'s or <code>1</code>'s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for <code>1</code>'s.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, mines = [[4,2]]\nOutput: 2\nExplanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 1, mines = [[0,0]]\nOutput: 0\nExplanation: There is no plus sign, so return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>1 &lt;= mines.length &lt;= 5000</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt; n</code></li> <li>All the pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0765/","title":"765. Couples Holding Hands","text":"Problem <p>There are <code>n</code> couples sitting in <code>2n</code> seats arranged in a row and want to hold hands.</p> <p>The people and seats are represented by an integer array <code>row</code> where <code>row[i]</code> is the ID of the person sitting in the <code>i<sup>th</sup></code> seat. The couples are numbered in order, the first couple being <code>(0, 1)</code>, the second couple being <code>(2, 3)</code>, and so on with the last couple being <code>(2n - 2, 2n - 1)</code>.</p> <p>Return the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: row = [0,2,1,3]\nOutput: 1\nExplanation: We only need to swap the second (row[1]) and third (row[2]) person.\n</pre> <p>Example 2:</p> <pre>\nInput: row = [3,2,0,1]\nOutput: 0\nExplanation: All couples are already seated side by side.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2n == row.length</code></li> <li><code>2 &lt;= n &lt;= 30</code></li> <li><code>n</code> is even.</li> <li><code>0 &lt;= row[i] &lt; 2n</code></li> <li>All the elements of <code>row</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0766/","title":"766. Toeplitz Matrix","text":"Problem <p>Given an <code>m x n</code> <code>matrix</code>, return\u00a0<code>true</code>\u00a0if the matrix is Toeplitz. Otherwise, return <code>false</code>.</p> <p>A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\nOutput: true\nExplanation:\nIn the above grid, the\u00a0diagonals are:\n\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".\nIn each diagonal all elements are the same, so the answer is True.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[1,2],[2,2]]\nOutput: false\nExplanation:\nThe diagonal \"[1, 2]\" has different elements.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 20</code></li> <li><code>0 &lt;= matrix[i][j] &lt;= 99</code></li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>What if the <code>matrix</code> is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?</li> <li>What if the <code>matrix</code> is so large that you can only load up a partial row into the memory at once?</li> </ul>"},{"location":"LeetCode_Problems/0767/","title":"767. Reorganize String","text":"Problem <p>Given a string <code>s</code>, rearrange the characters of <code>s</code> so that any two adjacent characters are not the same.</p> <p>Return any possible rearrangement of <code>s</code> or return <code>\"\"</code> if not possible.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"aab\"\nOutput: \"aba\"\n</pre> <p>Example 2:</p> <pre>Input: s = \"aaab\"\nOutput: \"\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0768/","title":"768. Max Chunks To Make Sorted II","text":"Problem <p>You are given an integer array <code>arr</code>.</p> <p>We split <code>arr</code> into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.</p> <p>Return the largest number of chunks we can make to sort the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [5,4,3,2,1]\nOutput: 1\nExplanation:\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [2,1,3,4,4]\nOutput: 4\nExplanation:\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 2000</code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0769/","title":"769. Max Chunks To Make Sorted","text":"Problem <p>You are given an integer array <code>arr</code> of length <code>n</code> that represents a permutation of the integers in the range <code>[0, n - 1]</code>.</p> <p>We split <code>arr</code> into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.</p> <p>Return the largest number of chunks we can make to sort the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [4,3,2,1,0]\nOutput: 1\nExplanation:\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,0,2,3,4]\nOutput: 4\nExplanation:\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == arr.length</code></li> <li><code>1 &lt;= n &lt;= 10</code></li> <li><code>0 &lt;= arr[i] &lt; n</code></li> <li>All the elements of <code>arr</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0770/","title":"770. Basic Calculator IV","text":"Problem <p>Given an expression such as <code>expression = \"e + 8 - a + 5\"</code> and an evaluation map such as <code>{\"e\": 1}</code> (given in terms of <code>evalvars = [\"e\"]</code> and <code>evalints = [1]</code>), return a list of tokens representing the simplified expression, such as <code>[\"-1*a\",\"14\"]</code></p> <ul> <li>An expression alternates chunks and symbols, with a space separating each chunk and symbol.</li> <li>A chunk is either an expression in parentheses, a variable, or a non-negative integer.</li> <li>A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like <code>\"2x\"</code> or <code>\"-x\"</code>.</li> </ul> <p>Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.</p> <ul> <li>For example, <code>expression = \"1 + 2 * 3\"</code> has an answer of <code>[\"7\"]</code>.</li> </ul> <p>The format of the output is as follows:</p> <ul> <li>For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.     <ul> <li>For example, we would never write a term like <code>\"b*a*c\"</code>, only <code>\"a*b*c\"</code>.</li> </ul> </li> <li>Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.     <ul> <li>For example, <code>\"a*a*b*c\"</code> has degree <code>4</code>.</li> </ul> </li> <li>The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.</li> <li>An example of a well-formatted answer is <code>[\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"]</code>.</li> <li>Terms (including constant terms) with coefficient <code>0</code> are not included.     <ul> <li>For example, an expression of <code>\"0\"</code> has an output of <code>[]</code>.</li> </ul> </li> </ul> <p>Note: You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\nOutput: [\"-1*a\",\"14\"]\n</pre> <p>Example 2:</p> <pre>\nInput: expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]\nOutput: [\"-1*pressure\",\"5\"]\n</pre> <p>Example 3:</p> <pre>\nInput: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\nOutput: [\"1*e*e\",\"-64\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= expression.length &lt;= 250</code></li> <li><code>expression</code> consists of lowercase English letters, digits, <code>'+'</code>, <code>'-'</code>, <code>'*'</code>, <code>'('</code>, <code>')'</code>, <code>' '</code>.</li> <li><code>expression</code> does not contain any leading or trailing spaces.</li> <li>All the tokens in <code>expression</code> are separated by a single space.</li> <li><code>0 &lt;= evalvars.length &lt;= 100</code></li> <li><code>1 &lt;= evalvars[i].length &lt;= 20</code></li> <li><code>evalvars[i]</code> consists of lowercase English letters.</li> <li><code>evalints.length == evalvars.length</code></li> <li><code>-100 &lt;= evalints[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0771/","title":"771. Jewels and Stones","text":"Problem <p>You're given strings <code>jewels</code> representing the types of stones that are jewels, and <code>stones</code> representing the stones you have. Each character in <code>stones</code> is a type of stone you have. You want to know how many of the stones you have are also jewels.</p> <p>Letters are case sensitive, so <code>\"a\"</code> is considered a different type of stone from <code>\"A\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: jewels = \"aA\", stones = \"aAAbbbb\"\nOutput: 3\n</pre> <p>Example 2:</p> <pre>Input: jewels = \"z\", stones = \"ZZ\"\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;=\u00a0jewels.length, stones.length &lt;= 50</code></li> <li><code>jewels</code> and <code>stones</code> consist of only English letters.</li> <li>All the characters of\u00a0<code>jewels</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0772/","title":"772. Basic Calculator III","text":"Problem"},{"location":"LeetCode_Problems/0773/","title":"773. Sliding Puzzle","text":"Problem <p>On an <code>2 x 3</code> board, there are five tiles labeled from <code>1</code> to <code>5</code>, and an empty square represented by <code>0</code>. A move consists of choosing <code>0</code> and a 4-directionally adjacent number and swapping it.</p> <p>The state of the board is solved if and only if the board is <code>[[1,2,3],[4,5,0]]</code>.</p> <p>Given the puzzle board <code>board</code>, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[1,2,3],[4,0,5]]\nOutput: 1\nExplanation: Swap the 0 and the 5 in one move.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: board = [[1,2,3],[5,4,0]]\nOutput: -1\nExplanation: No number of moves will make the board solved.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: board = [[4,1,2],[5,0,3]]\nOutput: 5\nExplanation: 5 is the smallest number of moves that solves the board.\nAn example path:\nAfter move 0: [[4,1,2],[5,0,3]]\nAfter move 1: [[4,1,2],[0,5,3]]\nAfter move 2: [[0,1,2],[4,5,3]]\nAfter move 3: [[1,0,2],[4,5,3]]\nAfter move 4: [[1,2,0],[4,5,3]]\nAfter move 5: [[1,2,3],[4,5,0]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>board.length == 2</code></li> <li><code>board[i].length == 3</code></li> <li><code>0 &lt;= board[i][j] &lt;= 5</code></li> <li>Each value <code>board[i][j]</code> is unique.</li> </ul>"},{"location":"LeetCode_Problems/0774/","title":"774. Minimize Max Distance to Gas Station","text":"Problem"},{"location":"LeetCode_Problems/0775/","title":"775. Global and Local Inversions","text":"Problem <p>You are given an integer array <code>nums</code> of length <code>n</code> which represents a permutation of all the integers in the range <code>[0, n - 1]</code>.</p> <p>The number of global inversions is the number of the different pairs <code>(i, j)</code> where:</p> <ul> <li><code>0 &lt;= i &lt; j &lt; n</code></li> <li><code>nums[i] &gt; nums[j]</code></li> </ul> <p>The number of local inversions is the number of indices <code>i</code> where:</p> <ul> <li><code>0 &lt;= i &lt; n - 1</code></li> <li><code>nums[i] &gt; nums[i + 1]</code></li> </ul> <p>Return <code>true</code> if the number of global inversions is equal to the number of local inversions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,0,2]\nOutput: true\nExplanation: There is 1 global inversion and 1 local inversion.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,0]\nOutput: false\nExplanation: There are 2 global inversions and 1 local inversion.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt; n</code></li> <li>All the integers of <code>nums</code> are unique.</li> <li><code>nums</code> is a permutation of all the numbers in the range <code>[0, n - 1]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0776/","title":"776. Split BST","text":"Problem"},{"location":"LeetCode_Problems/0777/","title":"777. Swap Adjacent in LR String","text":"Problem <p>In a string composed of <code>'L'</code>, <code>'R'</code>, and <code>'X'</code> characters, like <code>\"RXXLRXRXL\"</code>, a move consists of either replacing one occurrence of <code>\"XL\"</code> with <code>\"LX\"</code>, or replacing one occurrence of <code>\"RX\"</code> with <code>\"XR\"</code>. Given the starting string <code>start</code> and the ending string <code>end</code>, return <code>True</code> if and only if there exists a sequence of moves to transform one string to the other.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"\nOutput: true\nExplanation: We can transform start to end following these steps:\nRXXLRXRXL -&gt;\nXRXLRXRXL -&gt;\nXRLXRXRXL -&gt;\nXRLXXRRXL -&gt;\nXRLXXRRLX\n</pre> <p>Example 2:</p> <pre>\nInput: start = \"X\", end = \"L\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= start.length\u00a0&lt;= 10<sup>4</sup></code></li> <li><code>start.length == end.length</code></li> <li>Both <code>start</code> and <code>end</code> will only consist of characters in <code>'L'</code>, <code>'R'</code>, and\u00a0<code>'X'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0778/","title":"778. Swim in Rising Water","text":"Problem <p>You are given an <code>n x n</code> integer matrix <code>grid</code> where each value <code>grid[i][j]</code> represents the elevation at that point <code>(i, j)</code>.</p> <p>The rain starts to fall. At time <code>t</code>, the depth of the water everywhere is <code>t</code>. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most <code>t</code>. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.</p> <p>Return the least time until you can reach the bottom right square <code>(n - 1, n - 1)</code> if you start at the top left square <code>(0, 0)</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,2],[1,3]]\nOutput: 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\nOutput: 16\nExplanation: The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>0 &lt;= grid[i][j] &lt;\u00a0n<sup>2</sup></code></li> <li>Each value <code>grid[i][j]</code> is unique.</li> </ul>"},{"location":"LeetCode_Problems/0779/","title":"779. K-th Symbol in Grammar","text":"Problem <p>We build a table of <code>n</code> rows (1-indexed). We start by writing <code>0</code> in the <code>1<sup>st</sup></code> row. Now in every subsequent row, we look at the previous row and replace each occurrence of <code>0</code> with <code>01</code>, and each occurrence of <code>1</code> with <code>10</code>.</p> <ul> <li>For example, for <code>n = 3</code>, the <code>1<sup>st</sup></code> row is <code>0</code>, the <code>2<sup>nd</sup></code> row is <code>01</code>, and the <code>3<sup>rd</sup></code> row is <code>0110</code>.</li> </ul> <p>Given two integer <code>n</code> and <code>k</code>, return the <code>k<sup>th</sup></code> (1-indexed) symbol in the <code>n<sup>th</sup></code> row of a table of <code>n</code> rows.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1, k = 1\nOutput: 0\nExplanation: row 1: 0\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, k = 1\nOutput: 0\nExplanation: \nrow 1: 0\nrow 2: 01\n</pre> <p>Example 3:</p> <pre>\nInput: n = 2, k = 2\nOutput: 1\nExplanation: \nrow 1: 0\nrow 2: 01\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 30</code></li> <li><code>1 &lt;= k &lt;= 2<sup>n - 1</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0780/","title":"780. Reaching Points","text":"Problem <p>Given four integers <code>sx</code>, <code>sy</code>, <code>tx</code>, and <code>ty</code>, return <code>true</code> if it is possible to convert the point <code>(sx, sy)</code> to the point <code>(tx, ty)</code> through some operations, or <code>false</code> otherwise.</p> <p>The allowed operation on some point <code>(x, y)</code> is to convert it to either <code>(x, x + y)</code> or <code>(x + y, y)</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: sx = 1, sy = 1, tx = 3, ty = 5\nOutput: true\nExplanation:\nOne series of moves that transforms the starting point to the target is:\n(1, 1) -&gt; (1, 2)\n(1, 2) -&gt; (3, 2)\n(3, 2) -&gt; (3, 5)\n</pre> <p>Example 2:</p> <pre>\nInput: sx = 1, sy = 1, tx = 2, ty = 2\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: sx = 1, sy = 1, tx = 1, ty = 1\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sx, sy, tx, ty &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0781/","title":"781. Rabbits in Forest","text":"Problem <p>There is a forest with an unknown number of rabbits. We asked n rabbits \"How many rabbits have the same color as you?\" and collected the answers in an integer array <code>answers</code> where <code>answers[i]</code> is the answer of the <code>i<sup>th</sup></code> rabbit.</p> <p>Given the array <code>answers</code>, return the minimum number of rabbits that could be in the forest.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: answers = [1,1,2]\nOutput: 5\nExplanation:\nThe two rabbits that answered \"1\" could both be the same color, say red.\nThe rabbit that answered \"2\" can't be red or the answers would be inconsistent.\nSay the rabbit that answered \"2\" was blue.\nThen there should be 2 other blue rabbits in the forest that didn't answer into the array.\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.\n</pre> <p>Example 2:</p> <pre>\nInput: answers = [10,10,10]\nOutput: 11\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= answers.length &lt;= 1000</code></li> <li><code>0 &lt;= answers[i] &lt; 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0782/","title":"782. Transform to Chessboard","text":"Problem <p>You are given an <code>n x n</code> binary grid <code>board</code>. In each move, you can swap any two rows with each other, or any two columns with each other.</p> <p>Return the minimum number of moves to transform the board into a chessboard board. If the task is impossible, return <code>-1</code>.</p> <p>A chessboard board is a board where no <code>0</code>'s and no <code>1</code>'s are 4-directionally adjacent.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\nOutput: 2\nExplanation: One potential sequence of moves is shown.\nThe first move swaps the first and second column.\nThe second move swaps the second and third row.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: board = [[0,1],[1,0]]\nOutput: 0\nExplanation: Also note that the board with 0 in the top left corner, is also a valid chessboard.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: board = [[1,0],[1,0]]\nOutput: -1\nExplanation: No matter what sequence of moves you make, you cannot end with a valid chessboard.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>2 &lt;= n &lt;= 30</code></li> <li><code>board[i][j]</code> is either\u00a0<code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0783/","title":"783. Minimum Distance Between BST Nodes","text":"Problem <p>Given the <code>root</code> of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [4,2,6,1,3]\nOutput: 1\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Note: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/</p>"},{"location":"LeetCode_Problems/0784/","title":"784. Letter Case Permutation","text":"Problem <p>Given a string <code>s</code>, you\u00a0can transform every letter individually to be lowercase or uppercase to create another string.</p> <p>Return a list of all possible strings we could create. Return the output in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"a1b2\"\nOutput: [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"3z4\"\nOutput: [\"3z4\",\"3Z4\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 12</code></li> <li><code>s</code> consists of lowercase English letters, uppercase English letters, and digits.</li> </ul>"},{"location":"LeetCode_Problems/0785/","title":"785. Is Graph Bipartite?","text":"Problem <p>There is an undirected graph with <code>n</code> nodes, where each node is numbered between <code>0</code> and <code>n - 1</code>. You are given a 2D array <code>graph</code>, where <code>graph[u]</code> is an array of nodes that node <code>u</code> is adjacent to. More formally, for each <code>v</code> in <code>graph[u]</code>, there is an undirected edge between node <code>u</code> and node <code>v</code>. The graph has the following properties:</p> <ul> <li>There are no self-edges (<code>graph[u]</code> does not contain <code>u</code>).</li> <li>There are no parallel edges (<code>graph[u]</code> does not contain duplicate values).</li> <li>If <code>v</code> is in <code>graph[u]</code>, then <code>u</code> is in <code>graph[v]</code> (the graph is undirected).</li> <li>The graph may not be connected, meaning there may be two nodes <code>u</code> and <code>v</code> such that there is no path between them.</li> </ul> <p>A graph is bipartite if the nodes can be partitioned into two independent sets <code>A</code> and <code>B</code> such that every edge in the graph connects a node in set <code>A</code> and a node in set <code>B</code>.</p> <p>Return <code>true</code> if and only if it is bipartite.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\nOutput: false\nExplanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: graph = [[1,3],[0,2],[1,3],[0,2]]\nOutput: true\nExplanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>graph.length == n</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= graph[u].length &lt; n</code></li> <li><code>0 &lt;= graph[u][i] &lt;= n - 1</code></li> <li><code>graph[u]</code>\u00a0does not contain\u00a0<code>u</code>.</li> <li>All the values of <code>graph[u]</code> are unique.</li> <li>If <code>graph[u]</code> contains <code>v</code>, then <code>graph[v]</code> contains <code>u</code>.</li> </ul>"},{"location":"LeetCode_Problems/0786/","title":"786. K-th Smallest Prime Fraction","text":"Problem <p>You are given a sorted integer array <code>arr</code> containing <code>1</code> and prime numbers, where all the integers of <code>arr</code> are unique. You are also given an integer <code>k</code>.</p> <p>For every <code>i</code> and <code>j</code> where <code>0 &lt;= i &lt; j &lt; arr.length</code>, we consider the fraction <code>arr[i] / arr[j]</code>.</p> <p>Return the <code>k<sup>th</sup></code> smallest fraction considered. Return your answer as an array of integers of size <code>2</code>, where <code>answer[0] == arr[i]</code> and <code>answer[1] == arr[j]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,3,5], k = 3\nOutput: [2,5]\nExplanation: The fractions to be considered in sorted order are:\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\nThe third fraction is 2/5.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,7], k = 1\nOutput: [1,7]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= arr.length &lt;= 1000</code></li> <li><code>1 &lt;= arr[i] &lt;= 3 * 10<sup>4</sup></code></li> <li><code>arr[0] == 1</code></li> <li><code>arr[i]</code> is a prime number for <code>i &gt; 0</code>.</li> <li>All the numbers of <code>arr</code> are unique and sorted in strictly increasing order.</li> <li><code>1 &lt;= k &lt;= arr.length * (arr.length - 1) / 2</code></li> </ul> <p> </p> <p>Follow up: Can you solve the problem with better than <code>O(n<sup>2</sup>)</code> complexity?</p>"},{"location":"LeetCode_Problems/0787/","title":"787. Cheapest Flights Within K Stops","text":"Problem <p>There are <code>n</code> cities connected by some number of flights. You are given an array <code>flights</code> where <code>flights[i] = [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>]</code> indicates that there is a flight from city <code>from<sub>i</sub></code> to city <code>to<sub>i</sub></code> with cost <code>price<sub>i</sub></code>.</p> <p>You are also given three integers <code>src</code>, <code>dst</code>, and <code>k</code>, return the cheapest price from <code>src</code> to <code>dst</code> with at most <code>k</code> stops. If there is no such route, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1\nOutput: 700\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\nOutput: 200\nExplanation:\nThe graph is shown above.\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\nOutput: 500\nExplanation:\nThe graph is shown above.\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= flights.length &lt;= (n * (n - 1) / 2)</code></li> <li><code>flights[i].length == 3</code></li> <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li> <li><code>from<sub>i</sub> != to<sub>i</sub></code></li> <li><code>1 &lt;= price<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>There will not be any multiple flights between two cities.</li> <li><code>0 &lt;= src, dst, k &lt; n</code></li> <li><code>src != dst</code></li> </ul>"},{"location":"LeetCode_Problems/0788/","title":"788. Rotated Digits","text":"Problem <p>An integer <code>x</code> is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from <code>x</code>. Each digit must be rotated - we cannot choose to leave it alone.</p> <p>A number is valid if each digit remains a digit after rotation. For example:</p> <ul> <li><code>0</code>, <code>1</code>, and <code>8</code> rotate to themselves,</li> <li><code>2</code> and <code>5</code> rotate to each other (in this case they are rotated in a different direction, in other words, <code>2</code> or <code>5</code> gets mirrored),</li> <li><code>6</code> and <code>9</code> rotate to each other, and</li> <li>the rest of the numbers do not rotate to any other number and become invalid.</li> </ul> <p>Given an integer <code>n</code>, return the number of good integers in the range <code>[1, n]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10\nOutput: 4\nExplanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 0\n</pre> <p>Example 3:</p> <pre>\nInput: n = 2\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0789/","title":"789. Escape The Ghosts","text":"Problem <p>You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point <code>[0, 0]</code>, and you are given a destination point <code>target = [x<sub>target</sub>, y<sub>target</sub>]</code> that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array <code>ghosts</code>, where <code>ghosts[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the starting position of the <code>i<sup>th</sup></code> ghost. All inputs are integral coordinates.</p> <p>Each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. All actions happen simultaneously.</p> <p>You escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.</p> <p>Return <code>true</code> if it is possible to escape regardless of how the ghosts move, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: ghosts = [[1,0],[0,3]], target = [0,1]\nOutput: true\nExplanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.\n</pre> <p>Example 2:</p> <pre>\nInput: ghosts = [[1,0]], target = [2,0]\nOutput: false\nExplanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\n</pre> <p>Example 3:</p> <pre>\nInput: ghosts = [[2,0]], target = [1,0]\nOutput: false\nExplanation: The ghost can reach the target at the same time as you.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= ghosts.length &lt;= 100</code></li> <li><code>ghosts[i].length == 2</code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>There can be multiple ghosts in the same location.</li> <li><code>target.length == 2</code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>target</sub>, y<sub>target</sub> &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0790/","title":"790. Domino and Tromino Tiling","text":"Problem <p>You have two types of tiles: a <code>2 x 1</code> domino shape and a tromino shape. You may rotate these shapes.</p> <p></p> <p>Given an integer n, return the number of ways to tile an <code>2 x n</code> board. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3\nOutput: 5\nExplanation: The five different ways are show above.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0791/","title":"791. Custom Sort String","text":"Problem <p>You are given two strings order and s. All the characters of <code>order</code> are unique and were sorted in some custom order previously.</p> <p>Permute the characters of <code>s</code> so that they match the order that <code>order</code> was sorted. More specifically, if a character <code>x</code> occurs before a character <code>y</code> in <code>order</code>, then <code>x</code> should occur before <code>y</code> in the permuted string.</p> <p>Return any permutation of <code>s</code> that satisfies this property.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: order = \"cba\", s = \"abcd\"\nOutput: \"cbad\"\nExplanation: \n\"a\", \"b\", \"c\" appear in order, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\". \nSince \"d\" does not appear in order, it can be at any position in the returned string. \"dcba\", \"cdba\", \"cbda\" are also valid outputs.\n</pre> <p>Example 2:</p> <pre>\nInput: order = \"cbafg\", s = \"abcd\"\nOutput: \"cbad\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= order.length &lt;= 26</code></li> <li><code>1 &lt;= s.length &lt;= 200</code></li> <li><code>order</code> and <code>s</code> consist of lowercase English letters.</li> <li>All the characters of <code>order</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0792/","title":"792. Number of Matching Subsequences","text":"Problem <p>Given a string <code>s</code> and an array of strings <code>words</code>, return the number of <code>words[i]</code> that is a subsequence of <code>s</code>.</p> <p>A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p> <ul> <li>For example, <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]\nOutput: 3\nExplanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= words.length &lt;= 5000</code></li> <li><code>1 &lt;= words[i].length &lt;= 50</code></li> <li><code>s</code> and <code>words[i]</code> consist of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0793/","title":"793. Preimage Size of Factorial Zeroes Function","text":"Problem <p>Let <code>f(x)</code> be the number of zeroes at the end of <code>x!</code>. Recall that <code>x! = 1 * 2 * 3 * ... * x</code> and by convention, <code>0! = 1</code>.</p> <ul> <li>For example, <code>f(3) = 0</code> because <code>3! = 6</code> has no zeroes at the end, while <code>f(11) = 2</code> because <code>11! = 39916800</code> has two zeroes at the end.</li> </ul> <p>Given an integer <code>k</code>, return the number of non-negative integers <code>x</code> have the property that <code>f(x) = k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: k = 0\nOutput: 5\nExplanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.\n</pre> <p>Example 2:</p> <pre>\nInput: k = 5\nOutput: 0\nExplanation: There is no x such that x! ends in k = 5 zeroes.\n</pre> <p>Example 3:</p> <pre>\nInput: k = 3\nOutput: 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0794/","title":"794. Valid Tic-Tac-Toe State","text":"Problem <p>Given a Tic-Tac-Toe board as a string array <code>board</code>, return <code>true</code> if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.</p> <p>The board is a <code>3 x 3</code> array that consists of characters <code>' '</code>, <code>'X'</code>, and <code>'O'</code>. The <code>' '</code> character represents an empty square.</p> <p>Here are the rules of Tic-Tac-Toe:</p> <ul> <li>Players take turns placing characters into empty squares <code>' '</code>.</li> <li>The first player always places <code>'X'</code> characters, while the second player always places <code>'O'</code> characters.</li> <li><code>'X'</code> and <code>'O'</code> characters are always placed into empty squares, never filled ones.</li> <li>The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.</li> <li>The game also ends if all squares are non-empty.</li> <li>No more moves can be played if the game is over.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [\"O  \",\"   \",\"   \"]\nOutput: false\nExplanation: The first player always plays \"X\".\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: board = [\"XOX\",\" X \",\"   \"]\nOutput: false\nExplanation: Players take turns making moves.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: board = [\"XOX\",\"O O\",\"XOX\"]\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>board.length == 3</code></li> <li><code>board[i].length == 3</code></li> <li><code>board[i][j]</code> is either <code>'X'</code>, <code>'O'</code>, or <code>' '</code>.</li> </ul>"},{"location":"LeetCode_Problems/0795/","title":"795. Number of Subarrays with Bounded Maximum","text":"Problem <p>Given an integer array <code>nums</code> and two integers <code>left</code> and <code>right</code>, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range <code>[left, right]</code>.</p> <p>The test cases are generated so that the answer will fit in a 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,4,3], left = 2, right = 3\nOutput: 3\nExplanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,9,2,5,6], left = 2, right = 8\nOutput: 7\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= left &lt;= right &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0796/","title":"796. Rotate String","text":"Problem <p>Given two strings <code>s</code> and <code>goal</code>, return <code>true</code> if and only if <code>s</code> can become <code>goal</code> after some number of shifts on <code>s</code>.</p> <p>A shift on <code>s</code> consists of moving the leftmost character of <code>s</code> to the rightmost position.</p> <ul> <li>For example, if <code>s = \"abcde\"</code>, then it will be <code>\"bcdea\"</code> after one shift.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: s = \"abcde\", goal = \"cdeab\"\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: s = \"abcde\", goal = \"abced\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, goal.length &lt;= 100</code></li> <li><code>s</code> and <code>goal</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0797/","title":"797. All Paths From Source to Target","text":"Problem <p>Given a directed acyclic graph (DAG) of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, find all possible paths from node <code>0</code> to node <code>n - 1</code> and return them in any order.</p> <p>The graph is given as follows: <code>graph[i]</code> is a list of all nodes you can visit from node <code>i</code> (i.e., there is a directed edge from node <code>i</code> to node <code>graph[i][j]</code>).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: graph = [[1,2],[3],[3],[]]\nOutput: [[0,1,3],[0,2,3]]\nExplanation: There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: graph = [[4,3,1],[3,2,4],[3],[4],[]]\nOutput: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == graph.length</code></li> <li><code>2 &lt;= n &lt;= 15</code></li> <li><code>0 &lt;= graph[i][j] &lt; n</code></li> <li><code>graph[i][j] != i</code> (i.e., there will be no self-loops).</li> <li>All the elements of <code>graph[i]</code> are unique.</li> <li>The input graph is guaranteed to be a DAG.</li> </ul>"},{"location":"LeetCode_Problems/0798/","title":"798. Smallest Rotation with Highest Score","text":"Problem <p>You are given an array <code>nums</code>. You can rotate it by a non-negative integer <code>k</code> so that the array becomes <code>[nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]</code>. Afterward, any entries that are less than or equal to their index are worth one point.</p> <ul> <li>For example, if we have <code>nums = [2,4,1,3,0]</code>, and we rotate by <code>k = 2</code>, it becomes <code>[1,3,0,2,4]</code>. This is worth <code>3</code> points because <code>1 &gt; 0</code> [no points], <code>3 &gt; 1</code> [no points], <code>0 &lt;= 2</code> [one point], <code>2 &lt;= 3</code> [one point], <code>4 &lt;= 4</code> [one point].</li> </ul> <p>Return the rotation index <code>k</code> that corresponds to the highest score we can achieve if we rotated <code>nums</code> by it. If there are multiple answers, return the smallest such index <code>k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,1,4,0]\nOutput: 3\nExplanation: Scores for each k are listed below: \nk = 0,  nums = [2,3,1,4,0],    score 2\nk = 1,  nums = [3,1,4,0,2],    score 3\nk = 2,  nums = [1,4,0,2,3],    score 3\nk = 3,  nums = [4,0,2,3,1],    score 4\nk = 4,  nums = [0,2,3,1,4],    score 3\nSo we should choose k = 3, which has the highest score.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,0,2,4]\nOutput: 0\nExplanation: nums will always have 3 points no matter how it shifts.\nSo we will choose the smallest k, which is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt; nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/0799/","title":"799. Champagne Tower","text":"Problem <p>We stack glasses in a pyramid, where the first row has <code>1</code> glass, the second row has <code>2</code> glasses, and so on until the 100<sup>th</sup> row.\u00a0 Each glass holds one cup\u00a0of champagne.</p> <p>Then, some champagne is poured into the first glass at the top.\u00a0 When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.\u00a0 When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.\u00a0 (A glass at the bottom row has its excess champagne fall on the floor.)</p> <p>For example, after one cup of champagne is poured, the top most glass is full.\u00a0 After two cups of champagne are poured, the two glasses on the second row are half full.\u00a0 After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.\u00a0 After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.</p> <p></p> <p>Now after pouring some non-negative integer cups of champagne, return how full the <code>j<sup>th</sup></code> glass in the <code>i<sup>th</sup></code> row is (both <code>i</code> and <code>j</code> are 0-indexed.)</p> <p> </p> <p>Example 1:</p> <pre>\nInput: poured = 1, query_row = 1, query_glass = 1\nOutput: 0.00000\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\n</pre> <p>Example 2:</p> <pre>\nInput: poured = 2, query_row = 1, query_glass = 1\nOutput: 0.50000\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\n</pre> <p>Example 3:</p> <pre>\nInput: poured = 100000009, query_row = 33, query_glass = 17\nOutput: 1.00000\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;=\u00a0poured &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= query_glass &lt;= query_row\u00a0&lt; 100</code></li> </ul>"},{"location":"LeetCode_Problems/0800/","title":"800. Similar RGB Color","text":"Problem"},{"location":"LeetCode_Problems/0801/","title":"801. Minimum Swaps To Make Sequences Increasing","text":"Problem <p>You are given two integer arrays of the same length <code>nums1</code> and <code>nums2</code>. In one operation, you are allowed to swap <code>nums1[i]</code> with <code>nums2[i]</code>.</p> <ul> <li>For example, if <code>nums1 = [1,2,3,8]</code>, and <code>nums2 = [5,6,7,4]</code>, you can swap the element at <code>i = 3</code> to obtain <code>nums1 = [1,2,3,4]</code> and <code>nums2 = [5,6,7,8]</code>.</li> </ul> <p>Return the minimum number of needed operations to make <code>nums1</code> and <code>nums2</code> strictly increasing. The test cases are generated so that the given input always makes it possible.</p> <p>An array <code>arr</code> is strictly increasing if and only if <code>arr[0] &lt; arr[1] &lt; arr[2] &lt; ... &lt; arr[arr.length - 1]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,3,5,4], nums2 = [1,2,3,7]\nOutput: 1\nExplanation: \nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums1.length &lt;= 10<sup>5</sup></code></li> <li><code>nums2.length == nums1.length</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 2 * 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0802/","title":"802. Find Eventual Safe States","text":"Problem <p>There is a directed graph of <code>n</code> nodes with each node labeled from <code>0</code> to <code>n - 1</code>. The graph is represented by a 0-indexed 2D integer array <code>graph</code> where <code>graph[i]</code> is an integer array of nodes adjacent to node <code>i</code>, meaning there is an edge from node <code>i</code> to each node in <code>graph[i]</code>.</p> <p>A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).</p> <p>Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: graph = [[1,2],[2,3],[5],[0],[5],[],[]]\nOutput: [2,4,5,6]\nExplanation: The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.</pre> <p>Example 2:</p> <pre>\nInput: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\nOutput: [4]\nExplanation:\nOnly node 4 is a terminal node, and every path starting at node 4 leads to node 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == graph.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= graph[i].length &lt;= n</code></li> <li><code>0 &lt;= graph[i][j] &lt;= n - 1</code></li> <li><code>graph[i]</code> is sorted in a strictly increasing order.</li> <li>The graph may contain self-loops.</li> <li>The number of edges in the graph will be in the range <code>[1, 4 * 10<sup>4</sup>]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0803/","title":"803. Bricks Falling When Hit","text":"Problem <p>You are given an <code>m x n</code> binary <code>grid</code>, where each <code>1</code> represents a brick and <code>0</code> represents an empty space. A brick is stable if:</p> <ul> <li>It is directly connected to the top of the grid, or</li> <li>At least one other brick in its four adjacent cells is stable.</li> </ul> <p>You are also given an array <code>hits</code>, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location <code>hits[i] = (row<sub>i</sub>, col<sub>i</sub>)</code>. The brick on that location\u00a0(if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the <code>grid</code> (i.e., it does not land on other stable bricks).</p> <p>Return an array <code>result</code>, where each <code>result[i]</code> is the number of bricks that will fall after the <code>i<sup>th</sup></code> erasure is applied.</p> <p>Note that an erasure may refer to a location with no brick, and if it does, no bricks drop.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]\nOutput: [2]\nExplanation: Starting with the grid:\n[[1,0,0,0],\n [1,1,1,0]]\nWe erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,1,1,0]]\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n[[1,0,0,0],\n [0,0,0,0]]\nHence the result is [2].\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]\nOutput: [0,0]\nExplanation: Starting with the grid:\n[[1,0,0,0],\n [1,1,0,0]]\nWe erase the underlined brick at (1,1), resulting in the grid:\n[[1,0,0,0],\n [1,0,0,0]]\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\n[[1,0,0,0],\n [1,0,0,0]]\nNext, we erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n [0,0,0,0]]\nOnce again, all remaining bricks are still stable, so no bricks fall.\nHence the result is [0,0].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>grid[i][j]</code> is <code>0</code> or <code>1</code>.</li> <li><code>1 &lt;= hits.length &lt;= 4 * 10<sup>4</sup></code></li> <li><code>hits[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i\u00a0</sub>&lt;= m - 1</code></li> <li><code>0 &lt;=\u00a0y<sub>i</sub> &lt;= n - 1</code></li> <li>All <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0804/","title":"804. Unique Morse Code Words","text":"Problem <p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:</p> <ul> <li><code>'a'</code> maps to <code>\".-\"</code>,</li> <li><code>'b'</code> maps to <code>\"-...\"</code>,</li> <li><code>'c'</code> maps to <code>\"-.-.\"</code>, and so on.</li> </ul> <p>For convenience, the full table for the <code>26</code> letters of the English alphabet is given below:</p> <pre>\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]</pre> <p>Given an array of strings <code>words</code> where each word can be written as a concatenation of the Morse code of each letter.</p> <ul> <li>For example, <code>\"cab\"</code> can be written as <code>\"-.-..--...\"</code>, which is the concatenation of <code>\"-.-.\"</code>, <code>\".-\"</code>, and <code>\"-...\"</code>. We will call such a concatenation the transformation of a word.</li> </ul> <p>Return the number of different transformations among all words we have.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\nOutput: 2\nExplanation: The transformation of each word is:\n\"gin\" -&gt; \"--...-.\"\n\"zen\" -&gt; \"--...-.\"\n\"gig\" -&gt; \"--...--.\"\n\"msg\" -&gt; \"--...--.\"\nThere are 2 different transformations: \"--...-.\" and \"--...--.\".\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"a\"]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 12</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0805/","title":"805. Split Array With Same Average","text":"Problem <p>You are given an integer array <code>nums</code>.</p> <p>You should move each element of <code>nums</code> into one of the two arrays <code>A</code> and <code>B</code> such that <code>A</code> and <code>B</code> are non-empty, and <code>average(A) == average(B)</code>.</p> <p>Return <code>true</code> if it is possible to achieve that and <code>false</code> otherwise.</p> <p>Note that for an array <code>arr</code>, <code>average(arr)</code> is the sum of all the elements of <code>arr</code> over the length of <code>arr</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4,5,6,7,8]\nOutput: true\nExplanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,1]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 30</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0806/","title":"806. Number of Lines To Write String","text":"Problem <p>You are given a string <code>s</code> of lowercase English letters and an array <code>widths</code> denoting how many pixels wide each lowercase English letter is. Specifically, <code>widths[0]</code> is the width of <code>'a'</code>, <code>widths[1]</code> is the width of <code>'b'</code>, and so on.</p> <p>You are trying to write <code>s</code> across several lines, where each line is no longer than <code>100</code> pixels. Starting at the beginning of <code>s</code>, write as many letters on the first line such that the total width does not exceed <code>100</code> pixels. Then, from where you stopped in <code>s</code>, continue writing as many letters as you can on the second line. Continue this process until you have written all of <code>s</code>.</p> <p>Return an array <code>result</code> of length 2 where:</p> <ul> <li><code>result[0]</code> is the total number of lines.</li> <li><code>result[1]</code> is the width of the last line in pixels.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"\nOutput: [3,60]\nExplanation: You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.</pre> <p>Example 2:</p> <pre>\nInput: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"\nOutput: [2,4]\nExplanation: You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>widths.length == 26</code></li> <li><code>2 &lt;= widths[i] &lt;= 10</code></li> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0807/","title":"807. Max Increase to Keep City Skyline","text":"Problem <p>There is a city composed of <code>n x n</code> blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed <code>n x n</code> integer matrix <code>grid</code> where <code>grid[r][c]</code> represents the height of the building located in the block at row <code>r</code> and column <code>c</code>.</p> <p>A city's skyline is the\u00a0outer contour formed by all the building when viewing the side of the city from a distance. The skyline from each cardinal direction north, east, south, and west may be different.</p> <p>We are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). The height of a <code>0</code>-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.</p> <p>Return the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\nOutput: 35\nExplanation: The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[0,0,0],[0,0,0],[0,0,0]]\nOutput: 0\nExplanation: Increasing the height of any building will result in the skyline changing.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length</code></li> <li><code>n == grid[r].length</code></li> <li><code>2 &lt;= n &lt;= 50</code></li> <li><code>0 &lt;= grid[r][c] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0808/","title":"808. Soup Servings","text":"Problem <p>There are two types of soup: type A and type B. Initially, we have <code>n</code> ml of each type of soup. There are four kinds of operations:</p> <ol> <li>Serve <code>100</code> ml of soup A and <code>0</code> ml of soup B,</li> <li>Serve <code>75</code> ml of soup A and <code>25</code> ml of soup B,</li> <li>Serve <code>50</code> ml of soup A and <code>50</code> ml of soup B, and</li> <li>Serve <code>25</code> ml of soup A and <code>75</code> ml of soup B.</li> </ol> <p>When we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability <code>0.25</code>. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.</p> <p>Note that we do not have an operation where all <code>100</code> ml's of soup B are used first.</p> <p>Return the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 50\nOutput: 0.62500\nExplanation: If we choose the first two operations, A will become empty first.\nFor the third operation, A and B will become empty at the same time.\nFor the fourth operation, B will become empty first.\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 100\nOutput: 0.71875\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0809/","title":"809. Expressive Words","text":"Problem <p>Sometimes people repeat letters to represent extra feeling. For example:</p> <ul> <li><code>\"hello\" -&gt; \"heeellooo\"</code></li> <li><code>\"hi\" -&gt; \"hiiii\"</code></li> </ul> <p>In these strings like <code>\"heeellooo\"</code>, we have groups of adjacent letters that are all the same: <code>\"h\"</code>, <code>\"eee\"</code>, <code>\"ll\"</code>, <code>\"ooo\"</code>.</p> <p>You are given a string <code>s</code> and an array of query strings <code>words</code>. A query word is stretchy if it can be made to be equal to <code>s</code> by any number of applications of the following extension operation: choose a group consisting of characters <code>c</code>, and add some number of characters <code>c</code> to the group so that the size of the group is three or more.</p> <ul> <li>For example, starting with <code>\"hello\"</code>, we could do an extension on the group <code>\"o\"</code> to get <code>\"hellooo\"</code>, but we cannot get <code>\"helloo\"</code> since the group <code>\"oo\"</code> has a size less than three. Also, we could do another extension like <code>\"ll\" -&gt; \"lllll\"</code> to get <code>\"helllllooo\"</code>. If <code>s = \"helllllooo\"</code>, then the query word <code>\"hello\"</code> would be stretchy because of these two extension operations: <code>query = \"hello\" -&gt; \"hellooo\" -&gt; \"helllllooo\" = s</code>.</li> </ul> <p>Return the number of query strings that are stretchy.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"]\nOutput: 1\nExplanation: \nWe can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\nWe can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 100</code></li> <li><code>s</code> and <code>words[i]</code> consist of lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/0810/","title":"810. Chalkboard XOR Game","text":"Problem <p>You are given an array of integers <code>nums</code> represents the numbers written on a chalkboard.</p> <p>Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become <code>0</code>, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is <code>0</code>.</p> <p>Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to <code>0</code>, then that player wins.</p> <p>Return <code>true</code> if and only if Alice wins the game, assuming both players play optimally.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,2]\nOutput: false\nExplanation: \nAlice has two choices: erase 1 or erase 2. \nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \nIf Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1]\nOutput: true\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3]\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt; 2<sup>16</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0811/","title":"811. Subdomain Visit Count","text":"Problem <p>A website domain <code>\"discuss.leetcode.com\"</code> consists of various subdomains. At the top level, we have <code>\"com\"</code>, at the next level, we have <code>\"leetcode.com\"</code>\u00a0and at the lowest level, <code>\"discuss.leetcode.com\"</code>. When we visit a domain like <code>\"discuss.leetcode.com\"</code>, we will also visit the parent domains <code>\"leetcode.com\"</code> and <code>\"com\"</code> implicitly.</p> <p>A count-paired domain is a domain that has one of the two formats <code>\"rep d1.d2.d3\"</code> or <code>\"rep d1.d2\"</code> where <code>rep</code> is the number of visits to the domain and <code>d1.d2.d3</code> is the domain itself.</p> <ul> <li>For example, <code>\"9001 discuss.leetcode.com\"</code> is a count-paired domain that indicates that <code>discuss.leetcode.com</code> was visited <code>9001</code> times.</li> </ul> <p>Given an array of count-paired domains <code>cpdomains</code>, return an array of the count-paired domains of each subdomain in the input. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: cpdomains = [\"9001 discuss.leetcode.com\"]\nOutput: [\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"]\nExplanation: We only have one website domain: \"discuss.leetcode.com\".\nAs discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times.\n</pre> <p>Example 2:</p> <pre>\nInput: cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]\nOutput: [\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]\nExplanation: We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times.\nFor the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= cpdomain.length &lt;= 100</code></li> <li><code>1 &lt;= cpdomain[i].length &lt;= 100</code></li> <li><code>cpdomain[i]</code> follows either the <code>\"rep<sub>i</sub> d1<sub>i</sub>.d2<sub>i</sub>.d3<sub>i</sub>\"</code> format or the <code>\"rep<sub>i</sub> d1<sub>i</sub>.d2<sub>i</sub>\"</code> format.</li> <li><code>rep<sub>i</sub></code> is an integer in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>d1<sub>i</sub></code>, <code>d2<sub>i</sub></code>, and <code>d3<sub>i</sub></code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0812/","title":"812. Largest Triangle Area","text":"Problem <p>Given an array of points on the X-Y plane <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>, return the area of the largest triangle that can be formed by any three different points. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\nOutput: 2.00000\nExplanation: The five points are shown in the above figure. The red triangle is the largest.\n</pre> <p>Example 2:</p> <pre>\nInput: points = [[1,0],[0,0],[0,1]]\nOutput: 0.50000\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= points.length &lt;= 50</code></li> <li><code>-50 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 50</code></li> <li>All the given points are unique.</li> </ul>"},{"location":"LeetCode_Problems/0813/","title":"813. Largest Sum of Averages","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You can partition the array into at most <code>k</code> non-empty adjacent subarrays. The score of a partition is the sum of the averages of each subarray.</p> <p>Note that the partition must use every integer in <code>nums</code>, and that the score is not necessarily an integer.</p> <p>Return the maximum score you can achieve of all the possible partitions. Answers within <code>10<sup>-6</sup></code> of the actual answer will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [9,1,2,3,9], k = 3\nOutput: 20.00000\nExplanation: \nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4,5,6,7], k = 4\nOutput: 20.50000\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/0814/","title":"814. Binary Tree Pruning","text":"Problem <p>Given the <code>root</code> of a binary tree, return the same tree where every subtree (of the given tree) not containing a <code>1</code> has been removed.</p> <p>A subtree of a node <code>node</code> is <code>node</code> plus every node that is a descendant of <code>node</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,null,0,0,1]\nOutput: [1,null,0,null,1]\nExplanation: \nOnly the red nodes satisfy the property \"every subtree not containing a 1\".\nThe diagram on the right represents the answer.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,0,1,0,0,0,1]\nOutput: [1,null,1,null,1]\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [1,1,0,1,1,0,1,0]\nOutput: [1,1,0,1,1,null,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 200]</code>.</li> <li><code>Node.val</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0815/","title":"815. Bus Routes","text":"Problem <p>You are given an array <code>routes</code> representing bus routes where <code>routes[i]</code> is a bus route that the <code>i<sup>th</sup></code> bus repeats forever.</p> <ul> <li>For example, if <code>routes[0] = [1, 5, 7]</code>, this means that the <code>0<sup>th</sup></code> bus travels in the sequence <code>1 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; ...</code> forever.</li> </ul> <p>You will start at the bus stop <code>source</code> (You are not on any bus initially), and you want to go to the bus stop <code>target</code>. You can travel between bus stops by buses only.</p> <p>Return the least number of buses you must take to travel from <code>source</code> to <code>target</code>. Return <code>-1</code> if it is not possible.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: routes = [[1,2,7],[3,6,7]], source = 1, target = 6\nOutput: 2\nExplanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n</pre> <p>Example 2:</p> <pre>\nInput: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= routes.length &lt;= 500</code>.</li> <li><code>1 &lt;= routes[i].length &lt;= 10<sup>5</sup></code></li> <li>All the values of <code>routes[i]</code> are unique.</li> <li><code>sum(routes[i].length) &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= routes[i][j] &lt; 10<sup>6</sup></code></li> <li><code>0 &lt;= source, target &lt; 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0816/","title":"816. Ambiguous Coordinates","text":"Problem <p>We had some 2-dimensional coordinates, like <code>\"(1, 3)\"</code> or <code>\"(2, 0.5)\"</code>. Then, we removed all commas, decimal points, and spaces and ended up with the string s.</p> <ul> <li>For example, <code>\"(1, 3)\"</code> becomes <code>s = \"(13)\"</code> and <code>\"(2, 0.5)\"</code> becomes <code>s = \"(205)\"</code>.</li> </ul> <p>Return a list of strings representing all possibilities for what our original coordinates could have been.</p> <p>Our original representation never had extraneous zeroes, so we never started with numbers like <code>\"00\"</code>, <code>\"0.0\"</code>, <code>\"0.00\"</code>, <code>\"1.0\"</code>, <code>\"001\"</code>, <code>\"00.01\"</code>, or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like <code>\".1\"</code>.</p> <p>The final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"(123)\"\nOutput: [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"(0123)\"\nOutput: [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]\nExplanation: 0.0, 00, 0001 or 00.01 are not allowed.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"(00011)\"\nOutput: [\"(0, 0.011)\",\"(0.001, 1)\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>4 &lt;= s.length &lt;= 12</code></li> <li><code>s[0] == '('</code> and <code>s[s.length - 1] == ')'</code>.</li> <li>The rest of <code>s</code> are digits.</li> </ul>"},{"location":"LeetCode_Problems/0817/","title":"817. Linked List Components","text":"Problem <p>You are given the <code>head</code> of a linked list containing unique integer values and an integer array <code>nums</code> that is a subset of the linked list values.</p> <p>Return the number of connected components in <code>nums</code> where two values are connected if they appear consecutively in the linked list.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [0,1,2,3], nums = [0,1,3]\nOutput: 2\nExplanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [0,1,2,3,4], nums = [0,3,1,4]\nOutput: 2\nExplanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the linked list is <code>n</code>.</li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= Node.val &lt; n</code></li> <li>All the values <code>Node.val</code> are unique.</li> <li><code>1 &lt;= nums.length &lt;= n</code></li> <li><code>0 &lt;= nums[i] &lt; n</code></li> <li>All the values of <code>nums</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0818/","title":"818. Race Car","text":"Problem <p>Your car starts at position <code>0</code> and speed <code>+1</code> on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions <code>'A'</code> (accelerate) and <code>'R'</code> (reverse):</p> <ul> <li>When you get an instruction <code>'A'</code>, your car does the following:      <ul> <li><code>position += speed</code></li> <li><code>speed *= 2</code></li> </ul> </li> <li>When you get an instruction <code>'R'</code>, your car does the following:     <ul> <li>If your speed is positive then <code>speed = -1</code></li> <li>otherwise <code>speed = 1</code></li> </ul>     Your position stays the same.</li> </ul> <p>For example, after commands <code>\"AAR\"</code>, your car goes to positions <code>0 --&gt; 1 --&gt; 3 --&gt; 3</code>, and your speed goes to <code>1 --&gt; 2 --&gt; 4 --&gt; -1</code>.</p> <p>Given a target position <code>target</code>, return the length of the shortest sequence of instructions to get there.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = 3\nOutput: 2\nExplanation: \nThe shortest instruction sequence is \"AA\".\nYour position goes from 0 --&gt; 1 --&gt; 3.\n</pre> <p>Example 2:</p> <pre>\nInput: target = 6\nOutput: 5\nExplanation: \nThe shortest instruction sequence is \"AAARA\".\nYour position goes from 0 --&gt; 1 --&gt; 3 --&gt; 7 --&gt; 7 --&gt; 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= target &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0819/","title":"819. Most Common Word","text":"Problem <p>Given a string <code>paragraph</code> and a string array of the banned words <code>banned</code>, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.</p> <p>The words in <code>paragraph</code> are case-insensitive and the answer should be returned in lowercase.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]\nOutput: \"ball\"\nExplanation: \n\"hit\" occurs 3 times, but it is a banned word.\n\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"), \nand that \"hit\" isn't the answer even though it occurs more because it is banned.\n</pre> <p>Example 2:</p> <pre>\nInput: paragraph = \"a.\", banned = []\nOutput: \"a\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= paragraph.length &lt;= 1000</code></li> <li>paragraph consists of English letters, space <code>' '</code>, or one of the symbols: <code>\"!?',;.\"</code>.</li> <li><code>0 &lt;= banned.length &lt;= 100</code></li> <li><code>1 &lt;= banned[i].length &lt;= 10</code></li> <li><code>banned[i]</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0820/","title":"820. Short Encoding of Words","text":"Problem <p>A valid encoding of an array of <code>words</code> is any reference string <code>s</code> and array of indices <code>indices</code> such that:</p> <ul> <li><code>words.length == indices.length</code></li> <li>The reference string <code>s</code> ends with the <code>'#'</code> character.</li> <li>For each index <code>indices[i]</code>, the substring of <code>s</code> starting from <code>indices[i]</code> and up to (but not including) the next <code>'#'</code> character is equal to <code>words[i]</code>.</li> </ul> <p>Given an array of <code>words</code>, return the length of the shortest reference string <code>s</code> possible of any valid encoding of <code>words</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"time\", \"me\", \"bell\"]\nOutput: 10\nExplanation: A valid encoding would be s = <code>\"time#bell#\" and indices = [0, 2, 5</code>].\nwords[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \"time#bell#\"\nwords[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"time#bell#\"\nwords[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time#bell#\"\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"t\"]\nOutput: 2\nExplanation: A valid encoding would be s = \"t#\" and indices = [0].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 2000</code></li> <li><code>1 &lt;= words[i].length &lt;= 7</code></li> <li><code>words[i]</code> consists of only lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/0821/","title":"821. Shortest Distance to a Character","text":"Problem <p>Given a string <code>s</code> and a character <code>c</code> that occurs in <code>s</code>, return an array of integers <code>answer</code> where <code>answer.length == s.length</code> and <code>answer[i]</code> is the distance from index <code>i</code> to the closest occurrence of character <code>c</code> in <code>s</code>.</p> <p>The distance between two indices <code>i</code> and <code>j</code> is <code>abs(i - j)</code>, where <code>abs</code> is the absolute value function.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"loveleetcode\", c = \"e\"\nOutput: [3,2,1,0,1,0,0,1,2,2,1,0]\nExplanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aaab\", c = \"b\"\nOutput: [3,2,1,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s[i]</code> and <code>c</code> are lowercase English letters.</li> <li>It is guaranteed that <code>c</code> occurs at least once in <code>s</code>.</li> </ul>"},{"location":"LeetCode_Problems/0822/","title":"822. Card Flipping Game","text":"Problem <p>You are given two 0-indexed integer arrays <code>fronts</code> and <code>backs</code> of length <code>n</code>, where the <code>i<sup>th</sup></code> card has the positive integer <code>fronts[i]</code> printed on the front and <code>backs[i]</code> printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).</p> <p>After flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card.</p> <p>Return the minimum possible good integer after flipping the cards. If there are no good integers, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\nOutput: 2\nExplanation:\nIf we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3].\n2 is the minimum good integer as it appears facing down but not facing up.\nIt can be shown that 2 is the minimum possible good integer obtainable after flipping some cards.\n</pre> <p>Example 2:</p> <pre>\nInput: fronts = [1], backs = [1]\nOutput: 0\nExplanation:\nThere are no good integers no matter how we flip the cards, so we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == fronts.length == backs.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= fronts[i], backs[i] &lt;= 2000</code></li> </ul>"},{"location":"LeetCode_Problems/0823/","title":"823. Binary Trees With Factors","text":"Problem <p>Given an array of unique integers, <code>arr</code>, where each integer <code>arr[i]</code> is strictly greater than <code>1</code>.</p> <p>We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.</p> <p>Return the number of binary trees we can make. The answer may be too large so return the answer modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [2,4]\nOutput: 3\nExplanation: We can make these trees: <code>[2], [4], [4, 2, 2]</code></pre> <p>Example 2:</p> <pre>\nInput: arr = [2,4,5,10]\nOutput: 7\nExplanation: We can make these trees: <code>[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]</code>.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 1000</code></li> <li><code>2 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> <li>All the values of <code>arr</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0824/","title":"824. Goat Latin","text":"Problem <p>You are given a string <code>sentence</code> that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.</p> <p>We would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:</p> <ul> <li>If a word begins with a vowel (<code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, or <code>'u'</code>), append <code>\"ma\"</code> to the end of the word.      <ul> <li>For example, the word <code>\"apple\"</code> becomes <code>\"applema\"</code>.</li> </ul> </li> <li>If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add <code>\"ma\"</code>.     <ul> <li>For example, the word <code>\"goat\"</code> becomes <code>\"oatgma\"</code>.</li> </ul> </li> <li>Add one letter <code>'a'</code> to the end of each word per its word index in the sentence, starting with <code>1</code>.     <ul> <li>For example, the first word gets <code>\"a\"</code> added to the end, the second word gets <code>\"aa\"</code> added to the end, and so on.</li> </ul> </li> </ul> <p>Return the final sentence representing the conversion from sentence to Goat Latin.</p> <p> </p> <p>Example 1:</p> <pre>Input: sentence = \"I speak Goat Latin\"\nOutput: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\n</pre> <p>Example 2:</p> <pre>Input: sentence = \"The quick brown fox jumped over the lazy dog\"\nOutput: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sentence.length &lt;= 150</code></li> <li><code>sentence</code> consists of English letters and spaces.</li> <li><code>sentence</code> has no leading or trailing spaces.</li> <li>All the words in <code>sentence</code> are separated by a single space.</li> </ul>"},{"location":"LeetCode_Problems/0825/","title":"825. Friends Of Appropriate Ages","text":"Problem <p>There are <code>n</code> persons on a social media website. You are given an integer array <code>ages</code> where <code>ages[i]</code> is the age of the <code>i<sup>th</sup></code> person.</p> <p>A Person <code>x</code> will not send a friend request to a person <code>y</code> (<code>x != y</code>) if any of the following conditions is true:</p> <ul> <li><code>age[y] &lt;= 0.5 * age[x] + 7</code></li> <li><code>age[y] &gt; age[x]</code></li> <li><code>age[y] &gt; 100 &amp;&amp; age[x] &lt; 100</code></li> </ul> <p>Otherwise, <code>x</code> will send a friend request to <code>y</code>.</p> <p>Note that if <code>x</code> sends a request to <code>y</code>, <code>y</code> will not necessarily send a request to <code>x</code>. Also, a person will not send a friend request to themself.</p> <p>Return the total number of friend requests made.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: ages = [16,16]\nOutput: 2\nExplanation: 2 people friend request each other.\n</pre> <p>Example 2:</p> <pre>\nInput: ages = [16,17,18]\nOutput: 2\nExplanation: Friend requests are made 17 -&gt; 16, 18 -&gt; 17.\n</pre> <p>Example 3:</p> <pre>\nInput: ages = [20,30,100,110,120]\nOutput: 3\nExplanation: Friend requests are made 110 -&gt; 100, 120 -&gt; 110, 120 -&gt; 100.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == ages.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= ages[i] &lt;= 120</code></li> </ul>"},{"location":"LeetCode_Problems/0826/","title":"826. Most Profit Assigning Work","text":"Problem <p>You have <code>n</code> jobs and <code>m</code> workers. You are given three arrays: <code>difficulty</code>, <code>profit</code>, and <code>worker</code> where:</p> <ul> <li><code>difficulty[i]</code> and <code>profit[i]</code> are the difficulty and the profit of the <code>i<sup>th</sup></code> job, and</li> <li><code>worker[j]</code> is the ability of <code>j<sup>th</sup></code> worker (i.e., the <code>j<sup>th</sup></code> worker can only complete a job with difficulty at most <code>worker[j]</code>).</li> </ul> <p>Every worker can be assigned at most one job, but one job can be completed multiple times.</p> <ul> <li>For example, if three workers attempt the same job that pays <code>$1</code>, then the total profit will be <code>$3</code>. If a worker cannot complete any job, their profit is <code>$0</code>.</li> </ul> <p>Return the maximum profit we can achieve after assigning the workers to the jobs.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\nOutput: 100\nExplanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.\n</pre> <p>Example 2:</p> <pre>\nInput: difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == difficulty.length</code></li> <li><code>n == profit.length</code></li> <li><code>m == worker.length</code></li> <li><code>1 &lt;= n, m &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= difficulty[i], profit[i], worker[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0827/","title":"827. Making A Large Island","text":"Problem <p>You are given an <code>n x n</code> binary matrix <code>grid</code>. You are allowed to change at most one <code>0</code> to be <code>1</code>.</p> <p>Return the size of the largest island in <code>grid</code> after applying this operation.</p> <p>An island is a 4-directionally connected group of <code>1</code>s.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: grid = [[1,0],[0,1]]\nOutput: 3\nExplanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[1,1],[1,0]]\nOutput: 4\nExplanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.</pre> <p>Example 3:</p> <pre>\nInput: grid = [[1,1],[1,1]]\nOutput: 4\nExplanation: Can't change any 0 to 1, only one island with area = 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0828/","title":"828. Count Unique Characters of All Substrings of a Given String","text":"Problem <p>Let's define a function <code>countUniqueChars(s)</code> that returns the number of unique characters in\u00a0<code>s</code>.</p> <ul> <li>For example, calling <code>countUniqueChars(s)</code> if <code>s = \"LEETCODE\"</code> then <code>\"L\"</code>, <code>\"T\"</code>, <code>\"C\"</code>, <code>\"O\"</code>, <code>\"D\"</code> are the unique characters since they appear only once in <code>s</code>, therefore <code>countUniqueChars(s) = 5</code>.</li> </ul> <p>Given a string <code>s</code>, return the sum of <code>countUniqueChars(t)</code> where <code>t</code> is a substring of <code>s</code>. The test cases are generated such that the answer fits in a 32-bit integer.</p> <p>Notice that some substrings can be repeated so in this case you have to count the repeated ones too.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ABC\"\nOutput: 10\nExplanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\nEvery substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"ABA\"\nOutput: 8\nExplanation: The same as example 1, except <code>countUniqueChars</code>(\"ABA\") = 1.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"LEETCODE\"\nOutput: 92\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of uppercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/0829/","title":"829. Consecutive Numbers Sum","text":"Problem <p>Given an integer <code>n</code>, return the number of ways you can write <code>n</code> as the sum of consecutive positive integers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3\n</pre> <p>Example 2:</p> <pre>\nInput: n = 9\nOutput: 3\nExplanation: 9 = 4 + 5 = 2 + 3 + 4\n</pre> <p>Example 3:</p> <pre>\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0830/","title":"830. Positions of Large Groups","text":"Problem <p>In a string <code>s</code>\u00a0of lowercase letters, these letters form consecutive groups of the same character.</p> <p>For example, a string like <code>s = \"abbxxxxzyy\"</code> has the groups <code>\"a\"</code>, <code>\"bb\"</code>, <code>\"xxxx\"</code>, <code>\"z\"</code>, and\u00a0<code>\"yy\"</code>.</p> <p>A group is identified by an interval\u00a0<code>[start, end]</code>, where\u00a0<code>start</code>\u00a0and\u00a0<code>end</code>\u00a0denote the start and end\u00a0indices (inclusive) of the group. In the above example,\u00a0<code>\"xxxx\"</code>\u00a0has the interval\u00a0<code>[3,6]</code>.</p> <p>A group is considered\u00a0large\u00a0if it has 3 or more characters.</p> <p>Return\u00a0the intervals of every large group sorted in\u00a0increasing order by start index.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abbxxxxzzy\"\nOutput: [[3,6]]\nExplanation: <code>\"xxxx\" is the only </code>large group with start index 3 and end index 6.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abc\"\nOutput: []\nExplanation: We have groups \"a\", \"b\", and \"c\", none of which are large groups.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"abcdddeeeeaabbbcd\"\nOutput: [[3,5],[6,9],[12,14]]\nExplanation: The large groups are \"ddd\", \"eeee\", and \"bbb\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> contains lowercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/0831/","title":"831. Masking Personal Information","text":"Problem <p>You are given a personal information string <code>s</code>, representing either an email address or a phone number. Return the masked personal information using the below rules.</p> <p>Email address:</p> <p>An email address is:</p> <ul> <li>A name consisting of uppercase and lowercase English letters, followed by</li> <li>The <code>'@'</code> symbol, followed by</li> <li>The domain consisting of uppercase and lowercase English letters with a dot <code>'.'</code> somewhere in the middle (not the first or last character).</li> </ul> <p>To mask an email:</p> <ul> <li>The uppercase letters in the name and domain must be converted to lowercase letters.</li> <li>The middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks <code>\"*****\"</code>.</li> </ul> <p>Phone number:</p> <p>A phone number is formatted as follows:</p> <ul> <li>The phone number contains 10-13 digits.</li> <li>The last 10 digits make up the local number.</li> <li>The remaining 0-3 digits, in the beginning, make up the country code.</li> <li>Separation characters from the set <code>{'+', '-', '(', ')', ' '}</code> separate the above digits in some way.</li> </ul> <p>To mask a phone number:</p> <ul> <li>Remove all separation characters.</li> <li>The masked phone number should have the form:     <ul> <li><code>\"***-***-XXXX\"</code> if the country code has 0 digits.</li> <li><code>\"+*-***-***-XXXX\"</code> if the country code has 1 digit.</li> <li><code>\"+**-***-***-XXXX\"</code> if the country code has 2 digits.</li> <li><code>\"+***-***-***-XXXX\"</code> if the country code has 3 digits.</li> </ul> </li> <li><code>\"XXXX\"</code> is the last 4 digits of the local number.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"LeetCode@LeetCode.com\"\nOutput: \"l*****e@leetcode.com\"\nExplanation: s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"AB@qq.com\"\nOutput: \"a*****b@qq.com\"\nExplanation: s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\nNote that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"1(234)567-890\"\nOutput: \"***-***-7890\"\nExplanation: s is a phone number.\nThere are 10 digits, so the local number is 10 digits and the country code is 0 digits.\nThus, the resulting masked number is \"***-***-7890\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>s</code> is either a valid email or a phone number.</li> <li>If <code>s</code> is an email:     <ul> <li><code>8 &lt;= s.length &lt;= 40</code></li> <li><code>s</code> consists of uppercase and lowercase English letters and exactly one <code>'@'</code> symbol and <code>'.'</code> symbol.</li> </ul> </li> <li>If <code>s</code> is a phone number:     <ul> <li><code>10 &lt;= s.length &lt;= 20</code></li> <li><code>s</code> consists of digits, spaces, and the symbols <code>'('</code>, <code>')'</code>, <code>'-'</code>, and <code>'+'</code>.</li> </ul> </li> </ul>"},{"location":"LeetCode_Problems/0832/","title":"832. Flipping an Image","text":"Problem <p>Given an <code>n x n</code> binary matrix <code>image</code>, flip the image horizontally, then invert it, and return the resulting image.</p> <p>To flip an image horizontally means that each row of the image is reversed.</p> <ul> <li>For example, flipping <code>[1,1,0]</code> horizontally results in <code>[0,1,1]</code>.</li> </ul> <p>To invert an image means that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>.</p> <ul> <li>For example, inverting <code>[0,1,1]</code> results in <code>[1,0,0]</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: image = [[1,1,0],[1,0,1],[0,0,0]]\nOutput: [[1,0,0],[0,1,0],[1,1,1]]\nExplanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\n</pre> <p>Example 2:</p> <pre>\nInput: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\nOutput: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\nExplanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == image.length</code></li> <li><code>n == image[i].length</code></li> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>images[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0833/","title":"833. Find And Replace in String","text":"Problem <p>You are given a 0-indexed string <code>s</code> that you must perform <code>k</code> replacement operations on. The replacement operations are given as three 0-indexed parallel arrays, <code>indices</code>, <code>sources</code>, and <code>targets</code>, all of length <code>k</code>.</p> <p>To complete the <code>i<sup>th</sup></code> replacement operation:</p> <ol> <li>Check if the substring <code>sources[i]</code> occurs at index <code>indices[i]</code> in the original string <code>s</code>.</li> <li>If it does not occur, do nothing.</li> <li>Otherwise if it does occur, replace that substring with <code>targets[i]</code>.</li> </ol> <p>For example, if <code>s = \"abcd\"</code>, <code>indices[i] = 0</code>, <code>sources[i] = \"ab\"</code>, and <code>targets[i] = \"eee\"</code>, then the result of this replacement will be <code>\"eeecd\"</code>.</p> <p>All replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will not overlap.</p> <ul> <li>For example, a testcase with <code>s = \"abc\"</code>, <code>indices = [0, 1]</code>, and <code>sources = [\"ab\",\"bc\"]</code> will not be generated because the <code>\"ab\"</code> and <code>\"bc\"</code> replacements overlap.</li> </ul> <p>Return the resulting string after performing all replacement operations on <code>s</code>.</p> <p>A substring is a contiguous sequence of characters in a string.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]\nOutput: \"eeebffff\"\nExplanation:\n\"a\" occurs at index 0 in s, so we replace it with \"eee\".\n\"cd\" occurs at index 2 in s, so we replace it with \"ffff\".\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation:\n\"ab\" occurs at index 0 in s, so we replace it with \"eee\".\n\"ec\" does not occur at index 2 in s, so we do nothing.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>k == indices.length == sources.length == targets.length</code></li> <li><code>1 &lt;= k &lt;= 100</code></li> <li><code>0 &lt;= indexes[i] &lt; s.length</code></li> <li><code>1 &lt;= sources[i].length, targets[i].length &lt;= 50</code></li> <li><code>s</code> consists of only lowercase English letters.</li> <li><code>sources[i]</code> and <code>targets[i]</code> consist of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0834/","title":"834. Sum of Distances in Tree","text":"Problem <p>There is an undirected connected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> edges.</p> <p>You are given the integer <code>n</code> and the array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p> <p>Return an array <code>answer</code> of length <code>n</code> where <code>answer[i]</code> is the sum of the distances between the <code>i<sup>th</sup></code> node in the tree and all other nodes.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\nOutput: [8,12,6,10,10,10]\nExplanation: The tree is shown above.\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.\nHence, answer[0] = 8, and so on.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 1, edges = []\nOutput: [0]\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 2, edges = [[1,0]]\nOutput: [1,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>The given input represents a valid tree.</li> </ul>"},{"location":"LeetCode_Problems/0835/","title":"835. Image Overlap","text":"Problem <p>You are given two images, <code>img1</code> and <code>img2</code>, represented as binary, square matrices of size <code>n x n</code>. A binary matrix has only <code>0</code>s and <code>1</code>s as values.</p> <p>We translate one image however we choose by sliding all the <code>1</code> bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a <code>1</code> in both images.</p> <p>Note also that a translation does not include any kind of rotation. Any <code>1</code> bits that are translated outside of the matrix borders are erased.</p> <p>Return the largest possible overlap.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\nOutput: 3\nExplanation: We translate img1 to right by 1 unit and down by 1 unit.\n\nThe number of positions that have a 1 in both images is 3 (shown in red).\n\n</pre> <p>Example 2:</p> <pre>\nInput: img1 = [[1]], img2 = [[1]]\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: img1 = [[0]], img2 = [[0]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == img1.length == img1[i].length</code></li> <li><code>n == img2.length == img2[i].length</code></li> <li><code>1 &lt;= n &lt;= 30</code></li> <li><code>img1[i][j]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>img2[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0836/","title":"836. Rectangle Overlap","text":"Problem <p>An axis-aligned rectangle is represented as a list <code>[x1, y1, x2, y2]</code>, where <code>(x1, y1)</code> is the coordinate of its bottom-left corner, and <code>(x2, y2)</code> is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.</p> <p>Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.</p> <p>Given two axis-aligned rectangles <code>rec1</code> and <code>rec2</code>, return <code>true</code> if they overlap, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\nOutput: false\n</pre> <p>Example 3:</p> <pre>Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>rec1.length == 4</code></li> <li><code>rec2.length == 4</code></li> <li><code>-10<sup>9</sup> &lt;= rec1[i], rec2[i] &lt;= 10<sup>9</sup></code></li> <li><code>rec1</code> and <code>rec2</code> represent a valid rectangle with a non-zero area.</li> </ul>"},{"location":"LeetCode_Problems/0837/","title":"837. New 21 Game","text":"Problem <p>Alice plays the following game, loosely based on the card game \"21\".</p> <p>Alice starts with <code>0</code> points and draws numbers while she has less than <code>k</code> points. During each draw, she gains an integer number of points randomly from the range <code>[1, maxPts]</code>, where <code>maxPts</code> is an integer. Each draw is independent and the outcomes have equal probabilities.</p> <p>Alice stops drawing numbers when she gets <code>k</code> or more points.</p> <p>Return the probability that Alice has <code>n</code> or fewer points.</p> <p>Answers within <code>10<sup>-5</sup></code> of the actual answer are considered accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10, k = 1, maxPts = 10\nOutput: 1.00000\nExplanation: Alice gets a single card, then stops.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 6, k = 1, maxPts = 10\nOutput: 0.60000\nExplanation: Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 21, k = 17, maxPts = 10\nOutput: 0.73278\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= maxPts &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0838/","title":"838. Push Dominoes","text":"Problem <p>There are <code>n</code> dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.</p> <p>After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.</p> <p>When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.</p> <p>For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.</p> <p>You are given a string <code>dominoes</code> representing the initial state where:</p> <ul> <li><code>dominoes[i] = 'L'</code>, if the <code>i<sup>th</sup></code> domino has been pushed to the left,</li> <li><code>dominoes[i] = 'R'</code>, if the <code>i<sup>th</sup></code> domino has been pushed to the right, and</li> <li><code>dominoes[i] = '.'</code>, if the <code>i<sup>th</sup></code> domino has not been pushed.</li> </ul> <p>Return a string representing the final state.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: dominoes = \"RR.L\"\nOutput: \"RR.L\"\nExplanation: The first domino expends no additional force on the second domino.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: dominoes = \".L.R...LR..L..\"\nOutput: \"LL.RR.LLRRLL..\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == dominoes.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>dominoes[i]</code> is either <code>'L'</code>, <code>'R'</code>, or <code>'.'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0839/","title":"839. Similar String Groups","text":"Problem <p>Two strings, <code>X</code> and <code>Y</code>, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string <code>X</code>.</p> <p>For example, <code>\"tars\"</code>\u00a0and <code>\"rats\"</code>\u00a0are similar (swapping at positions <code>0</code> and <code>2</code>), and <code>\"rats\"</code> and <code>\"arts\"</code> are similar, but <code>\"star\"</code> is not similar to <code>\"tars\"</code>, <code>\"rats\"</code>, or <code>\"arts\"</code>.</p> <p>Together, these form two connected groups by similarity: <code>{\"tars\", \"rats\", \"arts\"}</code> and <code>{\"star\"}</code>.\u00a0 Notice that <code>\"tars\"</code> and <code>\"arts\"</code> are in the same group even though they are not similar.\u00a0 Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.</p> <p>We are given a list <code>strs</code> of strings where every string in <code>strs</code> is an anagram of every other string in <code>strs</code>. How many groups are there?</p> <p> </p> <p>Example 1:</p> <pre>\nInput: strs = [\"tars\",\"rats\",\"arts\",\"star\"]\nOutput: 2\n</pre> <p>Example 2:</p> <pre>\nInput: strs = [\"omv\",\"ovm\"]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= strs.length &lt;= 300</code></li> <li><code>1 &lt;= strs[i].length &lt;= 300</code></li> <li><code>strs[i]</code> consists of lowercase letters only.</li> <li>All words in <code>strs</code> have the same length and are anagrams of each other.</li> </ul>"},{"location":"LeetCode_Problems/0840/","title":"840. Magic Squares In Grid","text":"Problem <p>A <code>3 x 3</code> magic square is a <code>3 x 3</code> grid filled with distinct numbers from <code>1</code> to <code>9</code> such that each row, column, and both diagonals all have the same sum.</p> <p>Given a <code>row x col</code> <code>grid</code>\u00a0of integers, how many <code>3 x 3</code> \"magic square\" subgrids are there?\u00a0 (Each subgrid is contiguous).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\nOutput: 1\nExplanation: \nThe following subgrid is a 3 x 3 magic square:\n\nwhile this one is not:\n\nIn total, there is only one magic square inside the given grid.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[8]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>row == grid.length</code></li> <li><code>col == grid[i].length</code></li> <li><code>1 &lt;= row, col &lt;= 10</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 15</code></li> </ul>"},{"location":"LeetCode_Problems/0841/","title":"841. Keys and Rooms","text":"Problem <p>There are <code>n</code> rooms labeled from <code>0</code> to <code>n - 1</code>\u00a0and all the rooms are locked except for room <code>0</code>. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.</p> <p>When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.</p> <p>Given an array <code>rooms</code> where <code>rooms[i]</code> is the set of keys that you can obtain if you visited room <code>i</code>, return <code>true</code> if you can visit all the rooms, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rooms = [[1],[2],[3],[]]\nOutput: true\nExplanation: \nWe visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: rooms = [[1,3],[3,0,1],[2],[0]]\nOutput: false\nExplanation: We can not enter room number 2 since the only key that unlocks it is in that room.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == rooms.length</code></li> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li> <li><code>1 &lt;= sum(rooms[i].length) &lt;= 3000</code></li> <li><code>0 &lt;= rooms[i][j] &lt; n</code></li> <li>All the values of <code>rooms[i]</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0842/","title":"842. Split Array into Fibonacci Sequence","text":"Problem <p>You are given a string of digits <code>num</code>, such as <code>\"123456579\"</code>. We can split it into a Fibonacci-like sequence <code>[123, 456, 579]</code>.</p> <p>Formally, a Fibonacci-like sequence is a list <code>f</code> of non-negative integers such that:</p> <ul> <li><code>0 &lt;= f[i] &lt; 2<sup>31</sup></code>, (that is, each integer fits in a 32-bit signed integer type),</li> <li><code>f.length &gt;= 3</code>, and</li> <li><code>f[i] + f[i + 1] == f[i + 2]</code> for all <code>0 &lt;= i &lt; f.length - 2</code>.</li> </ul> <p>Note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number <code>0</code> itself.</p> <p>Return any Fibonacci-like sequence split from <code>num</code>, or return <code>[]</code> if it cannot be done.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"1101111\"\nOutput: [11,0,11,11]\nExplanation: The output [110, 1, 111] would also be accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"112358130\"\nOutput: []\nExplanation: The task is impossible.\n</pre> <p>Example 3:</p> <pre>\nInput: num = \"0123\"\nOutput: []\nExplanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num.length &lt;= 200</code></li> <li><code>num</code> contains only digits.</li> </ul>"},{"location":"LeetCode_Problems/0843/","title":"843. Guess the Word","text":"Problem <p>You are given an array of unique strings <code>words</code> where <code>words[i]</code> is six letters long. One word of <code>words</code> was chosen as a secret word.</p> <p>You are also given the helper object <code>Master</code>. You may call <code>Master.guess(word)</code> where <code>word</code> is a six-letter-long string, and it must be from <code>words</code>. <code>Master.guess(word)</code> returns:</p> <ul> <li><code>-1</code> if <code>word</code> is not from <code>words</code>, or</li> <li>an integer representing the number of exact matches (value and position) of your guess to the secret word.</li> </ul> <p>There is a parameter <code>allowedGuesses</code> for each test case where <code>allowedGuesses</code> is the maximum number of times you can call <code>Master.guess(word)</code>.</p> <p>For each test case, you should call <code>Master.guess</code> with the secret word without exceeding the maximum number of allowed guesses. You will get:</p> <ul> <li><code>\"Either you took too many guesses, or you did not find the secret word.\"</code> if you called <code>Master.guess</code> more than <code>allowedGuesses</code> times or if you did not call <code>Master.guess</code> with the secret word, or</li> <li><code>\"You guessed the secret word correctly.\"</code> if you called <code>Master.guess</code> with the secret word with the number of calls to <code>Master.guess</code> less than or equal to <code>allowedGuesses</code>.</li> </ul> <p>The test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: secret = \"acckzz\", words = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], allowedGuesses = 10\nOutput: You guessed the secret word correctly.\nExplanation:\nmaster.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\nmaster.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\nmaster.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\nmaster.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\nmaster.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\nWe made 5 calls to master.guess, and one of them was the secret, so we pass the test case.\n</pre> <p>Example 2:</p> <pre>\nInput: secret = \"hamada\", words = [\"hamada\",\"khaled\"], allowedGuesses = 10\nOutput: You guessed the secret word correctly.\nExplanation: Since there are two words, you can guess both.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>words[i].length == 6</code></li> <li><code>words[i]</code> consist of lowercase English letters.</li> <li>All the strings of <code>wordlist</code> are unique.</li> <li><code>secret</code> exists in <code>words</code>.</li> <li><code>10 &lt;= allowedGuesses &lt;= 30</code></li> </ul>"},{"location":"LeetCode_Problems/0844/","title":"844. Backspace String Compare","text":"Problem <p>Given two strings <code>s</code> and <code>t</code>, return <code>true</code> if they are equal when both are typed into empty text editors. <code>'#'</code> means a backspace character.</p> <p>Note that after backspacing an empty text, the text will continue empty.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ab#c\", t = \"ad#c\"\nOutput: true\nExplanation: Both s and t become \"ac\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"ab##\", t = \"c#d#\"\nOutput: true\nExplanation: Both s and t become \"\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"a#c\", t = \"b\"\nOutput: false\nExplanation: s becomes \"c\" while t becomes \"b\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 200</code></li> <li><code>s</code> and <code>t</code> only contain lowercase letters and <code>'#'</code> characters.</li> </ul> <p> </p> <p>Follow up: Can you solve it in <code>O(n)</code> time and <code>O(1)</code> space?</p>"},{"location":"LeetCode_Problems/0845/","title":"845. Longest Mountain in Array","text":"Problem <p>You may recall that an array <code>arr</code> is a mountain array if and only if:</p> <ul> <li><code>arr.length &gt;= 3</code></li> <li>There exists some index <code>i</code> (0-indexed) with <code>0 &lt; i &lt; arr.length - 1</code> such that:     <ul> <li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li> <li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li> </ul> </li> </ul> <p>Given an integer array <code>arr</code>, return the length of the longest subarray, which is a mountain. Return <code>0</code> if there is no mountain subarray.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [2,1,4,7,3,2,5]\nOutput: 5\nExplanation: The largest mountain is [1,4,7,3,2] which has length 5.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [2,2,2]\nOutput: 0\nExplanation: There is no mountain.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li> </ul> <p> </p> <p>Follow up:</p> <ul> <li>Can you solve it using only one pass?</li> <li>Can you solve it in <code>O(1)</code> space?</li> </ul>"},{"location":"LeetCode_Problems/0846/","title":"846. Hand of Straights","text":"Problem <p>Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size <code>groupSize</code>, and consists of <code>groupSize</code> consecutive cards.</p> <p>Given an integer array <code>hand</code> where <code>hand[i]</code> is the value written on the <code>i<sup>th</sup></code> card and an integer <code>groupSize</code>, return <code>true</code> if she can rearrange the cards, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3\nOutput: true\nExplanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]\n</pre> <p>Example 2:</p> <pre>\nInput: hand = [1,2,3,4,5], groupSize = 4\nOutput: false\nExplanation: Alice's hand can not be rearranged into groups of 4.\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= hand.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= hand[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= groupSize &lt;= hand.length</code></li> </ul> <p> </p> <p>Note: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</p>"},{"location":"LeetCode_Problems/0847/","title":"847. Shortest Path Visiting All Nodes","text":"Problem <p>You have an undirected, connected graph of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given an array <code>graph</code> where <code>graph[i]</code> is a list of all the nodes connected with node <code>i</code> by an edge.</p> <p>Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: graph = [[1,2,3],[0],[0],[0]]\nOutput: 4\nExplanation: One possible path is [1,0,2,0,3]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\nOutput: 4\nExplanation: One possible path is [0,1,4,2,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == graph.length</code></li> <li><code>1 &lt;= n &lt;= 12</code></li> <li><code>0 &lt;= graph[i].length &lt;\u00a0n</code></li> <li><code>graph[i]</code> does not contain <code>i</code>.</li> <li>If <code>graph[a]</code> contains <code>b</code>, then <code>graph[b]</code> contains <code>a</code>.</li> <li>The input graph is always connected.</li> </ul>"},{"location":"LeetCode_Problems/0848/","title":"848. Shifting Letters","text":"Problem <p>You are given a string <code>s</code> of lowercase English letters and an integer array <code>shifts</code> of the same length.</p> <p>Call the <code>shift()</code> of a letter, the next letter in the alphabet, (wrapping around so that <code>'z'</code> becomes <code>'a'</code>).</p> <ul> <li>For example, <code>shift('a') = 'b'</code>, <code>shift('t') = 'u'</code>, and <code>shift('z') = 'a'</code>.</li> </ul> <p>Now for each <code>shifts[i] = x</code>, we want to shift the first <code>i + 1</code> letters of <code>s</code>, <code>x</code> times.</p> <p>Return the final string after all such shifts to s are applied.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abc\", shifts = [3,5,9]\nOutput: \"rpl\"\nExplanation: We start with \"abc\".\nAfter shifting the first 1 letters of s by 3, we have \"dbc\".\nAfter shifting the first 2 letters of s by 5, we have \"igc\".\nAfter shifting the first 3 letters of s by 9, we have \"rpl\", the answer.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aaa\", shifts = [1,2,3]\nOutput: \"gfd\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> <li><code>shifts.length == s.length</code></li> <li><code>0 &lt;= shifts[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0849/","title":"849. Maximize Distance to Closest Person","text":"Problem <p>You are given an array representing a row of <code>seats</code> where <code>seats[i] = 1</code> represents a person sitting in the <code>i<sup>th</sup></code> seat, and <code>seats[i] = 0</code> represents that the <code>i<sup>th</sup></code> seat is empty (0-indexed).</p> <p>There is at least one empty seat, and at least one person sitting.</p> <p>Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\u00a0</p> <p>Return that maximum distance to the closest person.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: seats = [1,0,0,0,1,0,1]\nOutput: 2\nExplanation: \nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: seats = [1,0,0,0]\nOutput: 3\nExplanation: \nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.\n</pre> <p>Example 3:</p> <pre>\nInput: seats = [0,1]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= seats.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>seats[i]</code>\u00a0is <code>0</code> or\u00a0<code>1</code>.</li> <li>At least one seat is empty.</li> <li>At least one seat is occupied.</li> </ul>"},{"location":"LeetCode_Problems/0850/","title":"850. Rectangle Area II","text":"Problem <p>You are given a 2D array of axis-aligned <code>rectangles</code>. Each <code>rectangle[i] = [x<sub>i1</sub>, y<sub>i1</sub>, x<sub>i2</sub>, y<sub>i2</sub>]</code> denotes the <code>i<sup>th</sup></code> rectangle where <code>(x<sub>i1</sub>, y<sub>i1</sub>)</code> are the coordinates of the bottom-left corner, and <code>(x<sub>i2</sub>, y<sub>i2</sub>)</code> are the coordinates of the top-right corner.</p> <p>Calculate the total area covered by all <code>rectangles</code> in the plane. Any area covered by two or more rectangles should only be counted once.</p> <p>Return the total area. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\nOutput: 6\nExplanation: A total area of 6 is covered by all three rectangles, as illustrated in the picture.\nFrom (1,1) to (2,2), the green and red rectangles overlap.\nFrom (1,0) to (2,3), all three rectangles overlap.\n</pre> <p>Example 2:</p> <pre>\nInput: rectangles = [[0,0,1000000000,1000000000]]\nOutput: 49\nExplanation: The answer is 10<sup>18</sup> modulo (10<sup>9</sup> + 7), which is 49.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rectangles.length &lt;= 200</code></li> <li><code>rectanges[i].length == 4</code></li> <li><code>0 &lt;= x<sub>i1</sub>, y<sub>i1</sub>, x<sub>i2</sub>, y<sub>i2</sub> &lt;= 10<sup>9</sup></code></li> <li><code>x<sub>i1 &lt;= </sub>x<sub>i2</sub></code></li> <li><code>y<sub>i1 &lt;=</sub> y<sub>i2</sub></code></li> </ul>"},{"location":"LeetCode_Problems/0851/","title":"851. Loud and Rich","text":"Problem <p>There is a group of <code>n</code> people labeled from <code>0</code> to <code>n - 1</code> where each person has a different amount of money and a different level of quietness.</p> <p>You are given an array <code>richer</code> where <code>richer[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that <code>a<sub>i</sub></code> has more money than <code>b<sub>i</sub></code> and an integer array <code>quiet</code> where <code>quiet[i]</code> is the quietness of the <code>i<sup>th</sup></code> person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where <code>x</code> is richer than <code>y</code> and <code>y</code> is richer than <code>x</code> at the same time).</p> <p>Return an integer array <code>answer</code> where <code>answer[x] = y</code> if <code>y</code> is the least quiet person (that is, the person <code>y</code> with the smallest value of <code>quiet[y]</code>) among all people who definitely have equal to or more money than the person <code>x</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\nOutput: [5,5,2,5,4,5,6,7]\nExplanation: \nanswer[0] = 5.\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\nanswer[7] = 7.\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\nThe other answers can be filled out with similar reasoning.\n</pre> <p>Example 2:</p> <pre>\nInput: richer = [], quiet = [0]\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == quiet.length</code></li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>0 &lt;= quiet[i] &lt; n</code></li> <li>All the values of <code>quiet</code> are unique.</li> <li><code>0 &lt;= richer.length &lt;= n * (n - 1) / 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i </sub>!= b<sub>i</sub></code></li> <li>All the pairs of <code>richer</code> are unique.</li> <li>The observations in <code>richer</code> are all logically consistent.</li> </ul>"},{"location":"LeetCode_Problems/0852/","title":"852. Peak Index in a Mountain Array","text":"Problem <p>An array <code>arr</code> is a mountain if the following properties hold:</p> <ul> <li><code>arr.length &gt;= 3</code></li> <li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:     <ul> <li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </code></li> <li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li> </ul> </li> </ul> <p>Given a mountain array <code>arr</code>, return the index <code>i</code> such that <code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code>.</p> <p>You must solve it in <code>O(log(arr.length))</code> time complexity.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [0,1,0]\nOutput: 1\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [0,2,1,0]\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [0,10,5,2]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li> <li><code>arr</code> is guaranteed to be a mountain array.</li> </ul>"},{"location":"LeetCode_Problems/0853/","title":"853. Car Fleet","text":"Problem <p>There are <code>n</code> cars going to the same destination along a one-lane road. The destination is <code>target</code> miles away.</p> <p>You are given two integer array <code>position</code> and <code>speed</code>, both of length <code>n</code>, where <code>position[i]</code> is the position of the <code>i<sup>th</sup></code> car and <code>speed[i]</code> is the speed of the <code>i<sup>th</sup></code> car (in miles per hour).</p> <p>A car can never pass another car ahead of it, but it can catch up to it\u00a0and drive bumper to bumper at the same speed. The faster car will slow down to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).</p> <p>A car fleet is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.</p> <p>If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.</p> <p>Return the number of car fleets that will arrive at the destination.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\nOutput: 3\nExplanation:\nThe cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.\nThe car starting at 0 does not catch up to any other car, so it is a fleet by itself.\nThe cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\nNote that no other cars meet these fleets before the destination, so the answer is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: target = 10, position = [3], speed = [3]\nOutput: 1\nExplanation: There is only one car, hence there is only one fleet.\n</pre> <p>Example 3:</p> <pre>\nInput: target = 100, position = [0,2,4], speed = [4,2,1]\nOutput: 1\nExplanation:\nThe cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.\nThen, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == position.length == speed.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt; target &lt;= 10<sup>6</sup></code></li> <li><code>0 &lt;= position[i] &lt; target</code></li> <li>All the values of <code>position</code> are unique.</li> <li><code>0 &lt; speed[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0854/","title":"854. K-Similar Strings","text":"Problem <p>Strings <code>s1</code> and <code>s2</code> are <code>k</code>-similar (for some non-negative integer <code>k</code>) if we can swap the positions of two letters in <code>s1</code> exactly <code>k</code> times so that the resulting string equals <code>s2</code>.</p> <p>Given two anagrams <code>s1</code> and <code>s2</code>, return the smallest <code>k</code> for which <code>s1</code> and <code>s2</code> are <code>k</code>-similar.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"ab\", s2 = \"ba\"\nOutput: 1\nExplanation: The two string are 1-similar because we can use one swap to change s1 to s2: \"ab\" --&gt; \"ba\".\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"abc\", s2 = \"bca\"\nOutput: 2\nExplanation: The two strings are 2-similar because we can use two swaps to change s1 to s2: \"abc\" --&gt; \"bac\" --&gt; \"bca\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length &lt;= 20</code></li> <li><code>s2.length == s1.length</code></li> <li><code>s1</code> and <code>s2</code> contain only lowercase letters from the set <code>{'a', 'b', 'c', 'd', 'e', 'f'}</code>.</li> <li><code>s2</code> is an anagram of <code>s1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0855/","title":"855. Exam Room","text":"Problem <p>There is an exam room with <code>n</code> seats in a single row labeled from <code>0</code> to <code>n - 1</code>.</p> <p>When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number <code>0</code>.</p> <p>Design a class that simulates the mentioned exam room.</p> <p>Implement the <code>ExamRoom</code> class:</p> <ul> <li><code>ExamRoom(int n)</code> Initializes the object of the exam room with the number of the seats <code>n</code>.</li> <li><code>int seat()</code> Returns the label of the seat at which the next student will set.</li> <li><code>void leave(int p)</code> Indicates that the student sitting at seat <code>p</code> will leave the room. It is guaranteed that there will be a student sitting at seat <code>p</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]\n[[10], [], [], [], [], [4], []]\nOutput\n[null, 0, 9, 4, 2, null, 5]\n\nExplanation\nExamRoom examRoom = new ExamRoom(10);\nexamRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.\nexamRoom.seat(); // return 9, the student sits at the last seat number 9.\nexamRoom.seat(); // return 4, the student sits at the last seat number 4.\nexamRoom.seat(); // return 2, the student sits at the last seat number 2.\nexamRoom.leave(4);\nexamRoom.seat(); // return 5, the student sits at the last seat number 5.\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> <li>It is guaranteed that there is a student sitting at seat <code>p</code>.</li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>seat</code> and <code>leave</code>.</li> </ul>"},{"location":"LeetCode_Problems/0856/","title":"856. Score of Parentheses","text":"Problem <p>Given a balanced parentheses string <code>s</code>, return the score of the string.</p> <p>The score of a balanced parentheses string is based on the following rule:</p> <ul> <li><code>\"()\"</code> has score <code>1</code>.</li> <li><code>AB</code> has score <code>A + B</code>, where <code>A</code> and <code>B</code> are balanced parentheses strings.</li> <li><code>(A)</code> has score <code>2 * A</code>, where <code>A</code> is a balanced parentheses string.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"()\"\nOutput: 1\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"(())\"\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"()()\"\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 50</code></li> <li><code>s</code> consists of only <code>'('</code> and <code>')'</code>.</li> <li><code>s</code> is a balanced parentheses string.</li> </ul>"},{"location":"LeetCode_Problems/0857/","title":"857. Minimum Cost to Hire K Workers","text":"Problem <p>There are <code>n</code> workers. You are given two integer arrays <code>quality</code> and <code>wage</code> where <code>quality[i]</code> is the quality of the <code>i<sup>th</sup></code> worker and <code>wage[i]</code> is the minimum wage expectation for the <code>i<sup>th</sup></code> worker.</p> <p>We want to hire exactly <code>k</code> workers to form a paid group. To hire a group of <code>k</code> workers, we must pay them according to the following rules:</p> <ol> <li>Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.</li> <li>Every worker in the paid group must be paid at least their minimum wage expectation.</li> </ol> <p>Given the integer <code>k</code>, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: quality = [10,20,5], wage = [70,50,30], k = 2\nOutput: 105.00000\nExplanation: We pay 70 to 0<sup>th</sup> worker and 35 to 2<sup>nd</sup> worker.\n</pre> <p>Example 2:</p> <pre>\nInput: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3\nOutput: 30.66667\nExplanation: We pay 4 to 0<sup>th</sup> worker, 13.33333 to 2<sup>nd</sup> and 3<sup>rd</sup> workers separately.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == quality.length == wage.length</code></li> <li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= quality[i], wage[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0858/","title":"858. Mirror Reflection","text":"Problem <p>There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered <code>0</code>, <code>1</code>, and <code>2</code>.</p> <p>The square room has walls of length <code>p</code>\u00a0and a laser ray from the southwest corner first meets the east wall at a distance <code>q</code> from the <code>0<sup>th</sup></code> receptor.</p> <p>Given the two integers <code>p</code> and <code>q</code>, return the number of the receptor that the ray meets first.</p> <p>The test cases are guaranteed so that the ray will meet a receptor eventually.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: p = 2, q = 1\nOutput: 2\nExplanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.\n</pre> <p>Example 2:</p> <pre>\nInput: p = 3, q = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= q &lt;= p &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0859/","title":"859. Buddy Strings","text":"Problem <p>Given two strings <code>s</code> and <code>goal</code>, return <code>true</code> if you can swap two letters in <code>s</code> so the result is equal to <code>goal</code>, otherwise, return <code>false</code>.</p> <p>Swapping letters is defined as taking two indices <code>i</code> and <code>j</code> (0-indexed) such that <code>i != j</code> and swapping the characters at <code>s[i]</code> and <code>s[j]</code>.</p> <ul> <li>For example, swapping at indices <code>0</code> and <code>2</code> in <code>\"abcd\"</code> results in <code>\"cbad\"</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ab\", goal = \"ba\"\nOutput: true\nExplanation: You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"ab\", goal = \"ab\"\nOutput: false\nExplanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in \"ba\" != goal.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"aa\", goal = \"aa\"\nOutput: true\nExplanation: You can swap s[0] = 'a' and s[1] = 'a' to get \"aa\", which is equal to goal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, goal.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>s</code> and <code>goal</code> consist of lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/0860/","title":"860. Lemonade Change","text":"Problem <p>At a lemonade stand, each lemonade costs <code>$5</code>. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a <code>$5</code>, <code>$10</code>, or <code>$20</code> bill. You must provide the correct change to each customer so that the net transaction is that the customer pays <code>$5</code>.</p> <p>Note that you do not have any change in hand at first.</p> <p>Given an integer array <code>bills</code> where <code>bills[i]</code> is the bill the <code>i<sup>th</sup></code> customer pays, return <code>true</code> if you can provide every customer with the correct change, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: bills = [5,5,5,10,20]\nOutput: true\nExplanation: \nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true.\n</pre> <p>Example 2:</p> <pre>\nInput: bills = [5,5,10,10,20]\nOutput: false\nExplanation: \nFrom the first two customers in order, we collect two $5 bills.\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\nSince not every customer received the correct change, the answer is false.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= bills.length &lt;= 10<sup>5</sup></code></li> <li><code>bills[i]</code> is either <code>5</code>, <code>10</code>, or <code>20</code>.</li> </ul>"},{"location":"LeetCode_Problems/0861/","title":"861. Score After Flipping Matrix","text":"Problem <p>You are given an <code>m x n</code> binary matrix <code>grid</code>.</p> <p>A move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all <code>0</code>'s to <code>1</code>'s, and all <code>1</code>'s to <code>0</code>'s).</p> <p>Every row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.</p> <p>Return the highest possible score after making any number of moves (including zero moves).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\nOutput: 39\nExplanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[0]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 20</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/0862/","title":"862. Shortest Subarray with Sum at Least K","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the length of the shortest non-empty subarray of <code>nums</code> with a sum of at least <code>k</code>. If there is no such subarray, return <code>-1</code>.</p> <p>A subarray is a contiguous part of an array.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1], k = 1\nOutput: 1\n</pre> <p>Example 2:</p> <pre>Input: nums = [1,2], k = 4\nOutput: -1\n</pre> <p>Example 3:</p> <pre>Input: nums = [2,-1,2], k = 3\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0863/","title":"863. All Nodes Distance K in Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, the value of a target node <code>target</code>, and an integer <code>k</code>, return an array of the values of all nodes that have a distance <code>k</code> from the target node.</p> <p>You can return the answer in any order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2\nOutput: [7,4,1]\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1], target = 1, k = 3\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 500]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 500</code></li> <li>All the values <code>Node.val</code> are unique.</li> <li><code>target</code> is the value of one of the nodes in the tree.</li> <li><code>0 &lt;= k &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0864/","title":"864. Shortest Path to Get All Keys","text":"Problem <p>You are given an <code>m x n</code> grid <code>grid</code> where:</p> <ul> <li><code>'.'</code> is an empty cell.</li> <li><code>'#'</code> is a wall.</li> <li><code>'@'</code> is the starting point.</li> <li>Lowercase letters represent keys.</li> <li>Uppercase letters represent locks.</li> </ul> <p>You start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.</p> <p>If you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.</p> <p>For some <code>1 &lt;= k &lt;= 6</code>, there is exactly one lowercase and one uppercase letter of the first <code>k</code> letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.</p> <p>Return the lowest number of moves to acquire all keys. If it is impossible, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [\"@.a..\",\"###.#\",\"b.A.B\"]\nOutput: 8\nExplanation: Note that the goal is to obtain all the keys not to open all the locks.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [\"@..aA\",\"..B#.\",\"....b\"]\nOutput: 6\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [\"@Aa\"]\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 30</code></li> <li><code>grid[i][j]</code> is either an English letter, <code>'.'</code>, <code>'#'</code>, or <code>'@'</code>.\u00a0</li> <li>There is exactly one\u00a0<code>'@'</code>\u00a0in the grid.</li> <li>The number of keys in the grid is in the range <code>[1, 6]</code>.</li> <li>Each key in the grid is unique.</li> <li>Each key in the grid has a matching lock.</li> </ul>"},{"location":"LeetCode_Problems/0865/","title":"865. Smallest Subtree with all the Deepest Nodes","text":"Problem <p>Given the <code>root</code> of a binary tree, the depth of each node is the shortest distance to the root.</p> <p>Return the smallest subtree such that it contains all the deepest nodes in the original tree.</p> <p>A node is called the deepest if it has the largest depth possible among any node in the entire tree.</p> <p>The subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,5,1,6,2,0,8,null,null,7,4]\nOutput: [2,7,4]\nExplanation: We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest nodes of the tree.\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1]\nOutput: [1]\nExplanation: The root is the deepest node in the tree.\n</pre> <p>Example 3:</p> <pre>\nInput: root = [0,1,3,null,2]\nOutput: [2]\nExplanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree will be in the range <code>[1, 500]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 500</code></li> <li>The values of the nodes in the tree are unique.</li> </ul> <p> </p> <p>Note: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/</p>"},{"location":"LeetCode_Problems/0866/","title":"866. Prime Palindrome","text":"Problem <p>Given an integer n, return the smallest prime palindrome greater than or equal to <code>n</code>.</p> <p>An integer is prime if it has exactly two divisors: <code>1</code> and itself. Note that <code>1</code> is not a prime number.</p> <ul> <li>For example, <code>2</code>, <code>3</code>, <code>5</code>, <code>7</code>, <code>11</code>, and <code>13</code> are all primes.</li> </ul> <p>An integer is a palindrome if it reads the same from left to right as it does from right to left.</p> <ul> <li>For example, <code>101</code> and <code>12321</code> are palindromes.</li> </ul> <p>The test cases are generated so that the answer always exists and is in the range <code>[2, 2 * 10<sup>8</sup>]</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 6\nOutput: 7\n</pre> <p>Example 2:</p> <pre>Input: n = 8\nOutput: 11\n</pre> <p>Example 3:</p> <pre>Input: n = 13\nOutput: 101\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0867/","title":"867. Transpose Matrix","text":"Problem <p>Given a 2D integer array <code>matrix</code>, return the transpose of <code>matrix</code>.</p> <p>The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.</p> <p></p> <p> </p> <p>Example 1:</p> <pre>\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[1,4,7],[2,5,8],[3,6,9]]\n</pre> <p>Example 2:</p> <pre>\nInput: matrix = [[1,2,3],[4,5,6]]\nOutput: [[1,4],[2,5],[3,6]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 1000</code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0868/","title":"868. Binary Gap","text":"Problem <p>Given a positive integer <code>n</code>, find and return the longest distance between any two adjacent <code>1</code>'s in the binary representation of <code>n</code>. If there are no two adjacent <code>1</code>'s, return <code>0</code>.</p> <p>Two <code>1</code>'s are adjacent if there are only <code>0</code>'s separating them (possibly no <code>0</code>'s). The distance between two <code>1</code>'s is the absolute difference between their bit positions. For example, the two <code>1</code>'s in <code>\"1001\"</code> have a distance of 3.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 22\nOutput: 2\nExplanation: 22 in binary is \"10110\".\nThe first adjacent pair of 1's is \"10110\" with a distance of 2.\nThe second adjacent pair of 1's is \"10110\" with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 8\nOutput: 0\nExplanation: 8 in binary is \"1000\".\nThere are not any adjacent pairs of 1's in the binary representation of 8, so we return 0.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 5\nOutput: 2\nExplanation: 5 in binary is \"101\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0869/","title":"869. Reordered Power of 2","text":"Problem <p>You are given an integer <code>n</code>. We reorder the digits in any order (including the original order) such that the leading digit is not zero.</p> <p>Return <code>true</code> if and only if we can do this so that the resulting number is a power of two.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: true\n</pre> <p>Example 2:</p> <pre>\nInput: n = 10\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0870/","title":"870. Advantage Shuffle","text":"Problem <p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> both of the same length. The advantage of <code>nums1</code> with respect to <code>nums2</code> is the number of indices <code>i</code> for which <code>nums1[i] &gt; nums2[i]</code>.</p> <p>Return any permutation of <code>nums1</code> that maximizes its advantage with respect to <code>nums2</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]\nOutput: [2,11,7,15]\n</pre> <p>Example 2:</p> <pre>Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]\nOutput: [24,32,8,12]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length &lt;= 10<sup>5</sup></code></li> <li><code>nums2.length == nums1.length</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0871/","title":"871. Minimum Number of Refueling Stops","text":"Problem <p>A car travels from a starting position to a destination which is <code>target</code> miles east of the starting position.</p> <p>There are gas stations along the way. The gas stations are represented as an array <code>stations</code> where <code>stations[i] = [position<sub>i</sub>, fuel<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> gas station is <code>position<sub>i</sub></code> miles east of the starting position and has <code>fuel<sub>i</sub></code> liters of gas.</p> <p>The car starts with an infinite tank of gas, which initially has <code>startFuel</code> liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.</p> <p>Return the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return <code>-1</code>.</p> <p>Note that if the car reaches a gas station with <code>0</code> fuel left, the car can still refuel there. If the car reaches the destination with <code>0</code> fuel left, it is still considered to have arrived.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = 1, startFuel = 1, stations = []\nOutput: 0\nExplanation: We can reach the target without refueling.\n</pre> <p>Example 2:</p> <pre>\nInput: target = 100, startFuel = 1, stations = [[10,100]]\nOutput: -1\nExplanation: We can not reach the target (or even the first gas station).\n</pre> <p>Example 3:</p> <pre>\nInput: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\nOutput: 2\nExplanation: We start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= target, startFuel &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= stations.length &lt;= 500</code></li> <li><code>1 &lt;= position<sub>i</sub> &lt; position<sub>i+1</sub> &lt; target</code></li> <li><code>1 &lt;= fuel<sub>i</sub> &lt; 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0872/","title":"872. Leaf-Similar Trees","text":"Problem <p>Consider all the leaves of a binary tree, from\u00a0left to right order, the values of those\u00a0leaves form a leaf value sequence.</p> <p></p> <p>For example, in the given tree above, the leaf value sequence is <code>(6, 7, 4, 9, 8)</code>.</p> <p>Two binary trees are considered leaf-similar\u00a0if their leaf value sequence is the same.</p> <p>Return <code>true</code> if and only if the two given trees with head nodes <code>root1</code> and <code>root2</code> are leaf-similar.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root1 = [1,2,3], root2 = [1,3,2]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in each tree will be in the range <code>[1, 200]</code>.</li> <li>Both of the given trees will have values in the range <code>[0, 200]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0873/","title":"873. Length of Longest Fibonacci Subsequence","text":"Problem <p>A sequence <code>x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub></code> is Fibonacci-like if:</p> <ul> <li><code>n &gt;= 3</code></li> <li><code>x<sub>i</sub> + x<sub>i+1</sub> == x<sub>i+2</sub></code> for all <code>i + 2 &lt;= n</code></li> </ul> <p>Given a strictly increasing array <code>arr</code> of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of <code>arr</code>. If one does not exist, return <code>0</code>.</p> <p>A subsequence is derived from another sequence <code>arr</code> by deleting any number of elements (including none) from <code>arr</code>, without changing the order of the remaining elements. For example, <code>[3, 5, 8]</code> is a subsequence of <code>[3, 4, 5, 6, 7, 8]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,3,4,5,6,7,8]\nOutput: 5\nExplanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,3,7,11,12,14,18]\nOutput: 3\nExplanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= arr.length &lt;= 1000</code></li> <li><code>1 &lt;= arr[i] &lt; arr[i + 1] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0874/","title":"874. Walking Robot Simulation","text":"Problem <p>A robot on an infinite XY-plane starts at point <code>(0, 0)</code> facing north. The robot can receive a sequence of these three possible types of <code>commands</code>:</p> <ul> <li><code>-2</code>: Turn left <code>90</code> degrees.</li> <li><code>-1</code>: Turn right <code>90</code> degrees.</li> <li><code>1 &lt;= k &lt;= 9</code>: Move forward <code>k</code> units, one unit at a time.</li> </ul> <p>Some of the grid squares are <code>obstacles</code>. The <code>i<sup>th</sup></code> obstacle is at grid point <code>obstacles[i] = (x<sub>i</sub>, y<sub>i</sub>)</code>. If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.</p> <p>Return the maximum Euclidean distance that the robot ever gets from the origin squared (i.e. if the distance is <code>5</code>, return <code>25</code>).</p> <p>Note:</p> <ul> <li>North means +Y direction.</li> <li>East means +X direction.</li> <li>South means -Y direction.</li> <li>West means -X direction.</li> <li>There can be obstacle in\u00a0[0,0].</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: commands = [4,-1,3], obstacles = []\nOutput: 25\nExplanation: The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 3 units to (3, 4).\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 3<sup>2</sup> + 4<sup>2</sup> = 25 units away.\n</pre> <p>Example 2:</p> <pre>\nInput: commands = [4,-1,4,-2,4], obstacles = [[2,4]]\nOutput: 65\nExplanation: The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n4. Turn left.\n5. Move north 4 units to (1, 8).\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 1<sup>2</sup> + 8<sup>2</sup> = 65 units away.\n</pre> <p>Example 3:</p> <pre>\nInput: commands = [6,-1,-1,6], obstacles = []\nOutput: 36\nExplanation: The robot starts at (0, 0):\n1. Move north 6 units to (0, 6).\n2. Turn right.\n3. Turn right.\n4. Move south 6 units to (0, 0).\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 6<sup>2</sup> = 36 units away.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= commands.length &lt;= 10<sup>4</sup></code></li> <li><code>commands[i]</code> is either <code>-2</code>, <code>-1</code>, or an integer in the range <code>[1, 9]</code>.</li> <li><code>0 &lt;= obstacles.length &lt;= 10<sup>4</sup></code></li> <li><code>-3 * 10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 3 * 10<sup>4</sup></code></li> <li>The answer is guaranteed to be less than <code>2<sup>31</sup></code>.</li> </ul>"},{"location":"LeetCode_Problems/0875/","title":"875. Koko Eating Bananas","text":"Problem <p>Koko loves to eat bananas. There are <code>n</code> piles of bananas, the <code>i<sup>th</sup></code> pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>h</code> hours.</p> <p>Koko can decide her bananas-per-hour eating speed of <code>k</code>. Each hour, she chooses some pile of bananas and eats <code>k</code> bananas from that pile. If the pile has less than <code>k</code> bananas, she eats all of them instead and will not eat any more bananas during this hour.</p> <p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p> <p>Return the minimum integer <code>k</code> such that she can eat all the bananas within <code>h</code> hours.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: piles = [3,6,7,11], h = 8\nOutput: 4\n</pre> <p>Example 2:</p> <pre>\nInput: piles = [30,11,23,4,20], h = 5\nOutput: 30\n</pre> <p>Example 3:</p> <pre>\nInput: piles = [30,11,23,4,20], h = 6\nOutput: 23\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= piles.length &lt;= 10<sup>4</sup></code></li> <li><code>piles.length &lt;= h &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= piles[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0876/","title":"876. Middle of the Linked List","text":"Problem <p>Given the <code>head</code> of a singly linked list, return the middle node of the linked list.</p> <p>If there are two middle nodes, return the second middle node.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5]\nOutput: [3,4,5]\nExplanation: The middle node of the list is node 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5,6]\nOutput: [4,5,6]\nExplanation: Since the list has two middle nodes with values 3 and 4, we return the second one.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0877/","title":"877. Stone Game","text":"Problem <p>Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones <code>piles[i]</code>.</p> <p>The objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.</p> <p>Alice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins.</p> <p>Assuming Alice and Bob play optimally, return <code>true</code> if Alice wins the game, or <code>false</code> if Bob wins.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: piles = [5,3,4,5]\nOutput: true\nExplanation: \nAlice starts first, and can only take the first 5 or the last 5.\nSay she takes the first 5, so that the row becomes [3, 4, 5].\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: piles = [3,7,2,3]\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= piles.length &lt;= 500</code></li> <li><code>piles.length</code> is even.</li> <li><code>1 &lt;= piles[i] &lt;= 500</code></li> <li><code>sum(piles[i])</code> is odd.</li> </ul>"},{"location":"LeetCode_Problems/0878/","title":"878. Nth Magical Number","text":"Problem <p>A positive integer is magical if it is divisible by either <code>a</code> or <code>b</code>.</p> <p>Given the three integers <code>n</code>, <code>a</code>, and <code>b</code>, return the <code>n<sup>th</sup></code> magical number. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1, a = 2, b = 3\nOutput: 2\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4, a = 2, b = 3\nOutput: 6\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> <li><code>2 &lt;= a, b &lt;= 4 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0879/","title":"879. Profitable Schemes","text":"Problem <p>There is a group of <code>n</code> members, and a list of various crimes they could commit. The <code>i<sup>th</sup></code> crime generates a <code>profit[i]</code> and requires <code>group[i]</code> members to participate in it. If a member participates in one crime, that member can't participate in another crime.</p> <p>Let's call a profitable scheme any subset of these crimes that generates at least <code>minProfit</code> profit, and the total number of members participating in that subset of crimes is at most <code>n</code>.</p> <p>Return the number of schemes that can be chosen. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5, minProfit = 3, group = [2,2], profit = [2,3]\nOutput: 2\nExplanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes.</pre> <p>Example 2:</p> <pre>\nInput: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]\nOutput: 7\nExplanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= minProfit &lt;= 100</code></li> <li><code>1 &lt;= group.length &lt;= 100</code></li> <li><code>1 &lt;= group[i] &lt;= 100</code></li> <li><code>profit.length == group.length</code></li> <li><code>0 &lt;= profit[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0880/","title":"880. Decoded String at Index","text":"Problem <p>You are given an encoded string <code>s</code>. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:</p> <ul> <li>If the character read is a letter, that letter is written onto the tape.</li> <li>If the character read is a digit <code>d</code>, the entire current tape is repeatedly written <code>d - 1</code> more times in total.</li> </ul> <p>Given an integer <code>k</code>, return the <code>k<sup>th</sup></code> letter (1-indexed) in the decoded string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"leet2code3\", k = 10\nOutput: \"o\"\nExplanation: The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\nThe 10<sup>th</sup> letter in the string is \"o\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"ha22\", k = 5\nOutput: \"h\"\nExplanation: The decoded string is \"hahahaha\".\nThe 5<sup>th</sup> letter is \"h\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"a2345678999999999999999\", k = 1\nOutput: \"a\"\nExplanation: The decoded string is \"a\" repeated 8301530446056247680 times.\nThe 1<sup>st</sup> letter is \"a\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of lowercase English letters and digits <code>2</code> through <code>9</code>.</li> <li><code>s</code> starts with a letter.</li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> <li>It is guaranteed that <code>k</code> is less than or equal to the length of the decoded string.</li> <li>The decoded string is guaranteed to have less than <code>2<sup>63</sup></code> letters.</li> </ul>"},{"location":"LeetCode_Problems/0881/","title":"881. Boats to Save People","text":"Problem <p>You are given an array <code>people</code> where <code>people[i]</code> is the weight of the <code>i<sup>th</sup></code> person, and an infinite number of boats where each boat can carry a maximum weight of <code>limit</code>. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most <code>limit</code>.</p> <p>Return the minimum number of boats to carry every given person.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: people = [1,2], limit = 3\nOutput: 1\nExplanation: 1 boat (1, 2)\n</pre> <p>Example 2:</p> <pre>\nInput: people = [3,2,2,1], limit = 3\nOutput: 3\nExplanation: 3 boats (1, 2), (2) and (3)\n</pre> <p>Example 3:</p> <pre>\nInput: people = [3,5,3,4], limit = 5\nOutput: 4\nExplanation: 4 boats (3), (3), (4), (5)\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= people.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= people[i] &lt;= limit &lt;= 3 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0882/","title":"882. Reachable Nodes In Subdivided Graph","text":"Problem <p>You are given an undirected graph (the \"original graph\") with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.</p> <p>The graph is given as a 2D array of <code>edges</code> where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, cnt<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the original graph, and <code>cnt<sub>i</sub></code> is the total number of new nodes that you will subdivide the edge into. Note that <code>cnt<sub>i</sub> == 0</code> means you will not subdivide the edge.</p> <p>To subdivide the edge <code>[u<sub>i</sub>, v<sub>i</sub>]</code>, replace it with <code>(cnt<sub>i</sub> + 1)</code> new edges and <code>cnt<sub>i</sub></code> new nodes. The new nodes are <code>x<sub>1</sub></code>, <code>x<sub>2</sub></code>, ..., <code>x<sub>cnt<sub>i</sub></sub></code>, and the new edges are <code>[u<sub>i</sub>, x<sub>1</sub>]</code>, <code>[x<sub>1</sub>, x<sub>2</sub>]</code>, <code>[x<sub>2</sub>, x<sub>3</sub>]</code>, ..., <code>[x<sub>cnt<sub>i</sub>-1</sub>, x<sub>cnt<sub>i</sub></sub>]</code>, <code>[x<sub>cnt<sub>i</sub></sub>, v<sub>i</sub>]</code>.</p> <p>In this new graph, you want to know how many nodes are reachable from the node <code>0</code>, where a node is reachable if the distance is <code>maxMoves</code> or less.</p> <p>Given the original graph and <code>maxMoves</code>, return the number of nodes that are reachable from node <code>0</code> in the new graph.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3\nOutput: 13\nExplanation: The edge subdivisions are shown in the image above.\nThe nodes that are reachable are highlighted in yellow.\n</pre> <p>Example 2:</p> <pre>\nInput: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4\nOutput: 23\n</pre> <p>Example 3:</p> <pre>\nInput: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5\nOutput: 1\nExplanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= edges.length &lt;= min(n * (n - 1) / 2, 10<sup>4</sup>)</code></li> <li><code>edges[i].length == 3</code></li> <li><code>0 &lt;= u<sub>i</sub> &lt; v<sub>i</sub> &lt; n</code></li> <li>There are no multiple edges in the graph.</li> <li><code>0 &lt;= cnt<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= maxMoves &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= n &lt;= 3000</code></li> </ul>"},{"location":"LeetCode_Problems/0883/","title":"883. Projection Area of 3D Shapes","text":"Problem <p>You are given an <code>n x n</code> <code>grid</code> where we place some <code>1 x 1 x 1</code> cubes that are axis-aligned with the <code>x</code>, <code>y</code>, and <code>z</code> axes.</p> <p>Each value <code>v = grid[i][j]</code> represents a tower of <code>v</code> cubes placed on top of the cell <code>(i, j)</code>.</p> <p>We view the projection of these cubes onto the <code>xy</code>, <code>yz</code>, and <code>zx</code> planes.</p> <p>A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.</p> <p>Return the total area of all three projections.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,2],[3,4]]\nOutput: 17\nExplanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[2]]\nOutput: 5\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [[1,0],[0,2]]\nOutput: 8\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/0884/","title":"884. Uncommon Words from Two Sentences","text":"Problem <p>A sentence is a string of single-space separated words where each word consists only of lowercase letters.</p> <p>A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.</p> <p>Given two sentences <code>s1</code> and <code>s2</code>, return a list of all the uncommon words. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>Input: s1 = \"this apple is sweet\", s2 = \"this apple is sour\"\nOutput: [\"sweet\",\"sour\"]\n</pre> <p>Example 2:</p> <pre>Input: s1 = \"apple apple\", s2 = \"banana\"\nOutput: [\"banana\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length &lt;= 200</code></li> <li><code>s1</code> and <code>s2</code> consist of lowercase English letters and spaces.</li> <li><code>s1</code> and <code>s2</code> do not have leading or trailing spaces.</li> <li>All the words in <code>s1</code> and <code>s2</code> are separated by a single space.</li> </ul>"},{"location":"LeetCode_Problems/0885/","title":"885. Spiral Matrix III","text":"Problem <p>You start at the cell <code>(rStart, cStart)</code> of an <code>rows x cols</code> grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.</p> <p>You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all <code>rows * cols</code> spaces of the grid.</p> <p>Return an array of coordinates representing the positions of the grid in the order you visited them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: rows = 1, cols = 4, rStart = 0, cStart = 0\nOutput: [[0,0],[0,1],[0,2],[0,3]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: rows = 5, cols = 6, rStart = 1, cStart = 4\nOutput: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rows, cols &lt;= 100</code></li> <li><code>0 &lt;= rStart &lt; rows</code></li> <li><code>0 &lt;= cStart &lt; cols</code></li> </ul>"},{"location":"LeetCode_Problems/0886/","title":"886. Possible Bipartition","text":"Problem <p>We want to split a group of <code>n</code> people (labeled from <code>1</code> to <code>n</code>) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.</p> <p>Given the integer <code>n</code> and the array <code>dislikes</code> where <code>dislikes[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that the person labeled <code>a<sub>i</sub></code> does not like the person labeled <code>b<sub>i</sub></code>, return <code>true</code> if it is possible to split everyone into two groups in this way.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4, dislikes = [[1,2],[1,3],[2,4]]\nOutput: true\nExplanation: The first group has [1,4], and the second group has [2,3].\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, dislikes = [[1,2],[1,3],[2,3]]\nOutput: false\nExplanation: We need at least 3 groups to divide them. We cannot put them in two groups.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2000</code></li> <li><code>0 &lt;= dislikes.length &lt;= 10<sup>4</sup></code></li> <li><code>dislikes[i].length == 2</code></li> <li><code>1 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= n</code></li> <li>All the pairs of <code>dislikes</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0887/","title":"887. Super Egg Drop","text":"Problem <p>You are given <code>k</code> identical eggs and you have access to a building with <code>n</code> floors labeled from <code>1</code> to <code>n</code>.</p> <p>You know that there exists a floor <code>f</code> where <code>0 &lt;= f &lt;= n</code> such that any egg dropped at a floor higher than <code>f</code> will break, and any egg dropped at or below floor <code>f</code> will not break.</p> <p>Each move, you may take an unbroken egg and drop it from any floor <code>x</code> (where <code>1 &lt;= x &lt;= n</code>). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.</p> <p>Return the minimum number of moves that you need to determine with certainty what the value of <code>f</code> is.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: k = 1, n = 2\nOutput: 2\nExplanation: \nDrop the egg from floor 1. If it breaks, we know that f = 0.\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\nIf it does not break, then we know f = 2.\nHence, we need at minimum 2 moves to determine with certainty what the value of f is.\n</pre> <p>Example 2:</p> <pre>\nInput: k = 2, n = 6\nOutput: 3\n</pre> <p>Example 3:</p> <pre>\nInput: k = 3, n = 14\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= 100</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0888/","title":"888. Fair Candy Swap","text":"Problem <p>Alice and Bob have a different total number of candies. You are given two integer arrays <code>aliceSizes</code> and <code>bobSizes</code> where <code>aliceSizes[i]</code> is the number of candies of the <code>i<sup>th</sup></code> box of candy that Alice has and <code>bobSizes[j]</code> is the number of candies of the <code>j<sup>th</sup></code> box of candy that Bob has.</p> <p>Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.</p> <p>Return an integer array <code>answer</code> where <code>answer[0]</code> is the number of candies in the box that Alice must exchange, and <code>answer[1]</code> is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: aliceSizes = [1,1], bobSizes = [2,2]\nOutput: [1,2]\n</pre> <p>Example 2:</p> <pre>\nInput: aliceSizes = [1,2], bobSizes = [2,3]\nOutput: [1,2]\n</pre> <p>Example 3:</p> <pre>\nInput: aliceSizes = [2], bobSizes = [1,3]\nOutput: [2,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= aliceSizes.length, bobSizes.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= aliceSizes[i], bobSizes[j] &lt;= 10<sup>5</sup></code></li> <li>Alice and Bob have a different total number of candies.</li> <li>There will be at least one valid answer for the given input.</li> </ul>"},{"location":"LeetCode_Problems/0889/","title":"889. Construct Binary Tree from Preorder and Postorder Traversal","text":"Problem <p>Given two integer arrays, <code>preorder</code> and <code>postorder</code> where <code>preorder</code> is the preorder traversal of a binary tree of distinct values and <code>postorder</code> is the postorder traversal of the same tree, reconstruct and return the binary tree.</p> <p>If there exist multiple answers, you can return any of them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]\nOutput: [1,2,3,4,5,6,7]\n</pre> <p>Example 2:</p> <pre>\nInput: preorder = [1], postorder = [1]\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= preorder.length &lt;= 30</code></li> <li><code>1 &lt;= preorder[i] &lt;= preorder.length</code></li> <li>All the values of <code>preorder</code> are unique.</li> <li><code>postorder.length == preorder.length</code></li> <li><code>1 &lt;= postorder[i] &lt;= postorder.length</code></li> <li>All the values of <code>postorder</code> are unique.</li> <li>It is guaranteed that <code>preorder</code> and <code>postorder</code> are the preorder traversal and postorder traversal of the same binary tree.</li> </ul>"},{"location":"LeetCode_Problems/0890/","title":"890. Find and Replace Pattern","text":"Problem <p>Given a list of strings <code>words</code> and a string <code>pattern</code>, return a list of <code>words[i]</code> that match <code>pattern</code>. You may return the answer in any order.</p> <p>A word matches the pattern if there exists a permutation of letters <code>p</code> so that after replacing every letter <code>x</code> in the pattern with <code>p(x)</code>, we get the desired word.</p> <p>Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\nOutput: [\"mee\",\"aqq\"]\nExplanation: \"mee\" matches the pattern because there is a permutation {a -&gt; m, b -&gt; e, ...}. \n\"ccc\" does not match the pattern because {a -&gt; c, b -&gt; c, ...} is not a permutation, since a and b map to the same letter.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"a\",\"b\",\"c\"], pattern = \"a\"\nOutput: [\"a\",\"b\",\"c\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= pattern.length &lt;= 20</code></li> <li><code>1 &lt;= words.length &lt;= 50</code></li> <li><code>words[i].length == pattern.length</code></li> <li><code>pattern</code> and <code>words[i]</code> are lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0891/","title":"891. Sum of Subsequence Widths","text":"Problem <p>The width of a sequence is the difference between the maximum and minimum elements in the sequence.</p> <p>Given an array of integers <code>nums</code>, return the sum of the widths of all the non-empty subsequences of <code>nums</code>. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, <code>[3,6,2,7]</code> is a subsequence of the array <code>[0,3,1,6,2,2,7]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,3]\nOutput: 6\nExplanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0892/","title":"892. Surface Area of 3D Shapes","text":"Problem <p>You are given an <code>n x n</code> <code>grid</code> where you have placed some <code>1 x 1 x 1</code> cubes. Each value <code>v = grid[i][j]</code> represents a tower of <code>v</code> cubes placed on top of cell <code>(i, j)</code>.</p> <p>After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.</p> <p>Return the total surface area of the resulting shapes.</p> <p>Note: The bottom face of each shape counts toward its surface area.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,2],[3,4]]\nOutput: 34\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 32\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[2,2,2],[2,1,2],[2,2,2]]\nOutput: 46\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/0893/","title":"893. Groups of Special-Equivalent Strings","text":"Problem <p>You are given an array of strings of the same length <code>words</code>.</p> <p>In one move, you can swap any two even indexed characters or any two odd indexed characters of a string <code>words[i]</code>.</p> <p>Two strings <code>words[i]</code> and <code>words[j]</code> are special-equivalent if after any number of moves, <code>words[i] == words[j]</code>.</p> <ul> <li>For example, <code>words[i] = \"zzxy\"</code> and <code>words[j] = \"xyzz\"</code> are special-equivalent because we may make the moves <code>\"zzxy\" -&gt; \"xzzy\" -&gt; \"xyzz\"</code>.</li> </ul> <p>A group of special-equivalent strings from <code>words</code> is a non-empty subset of words such that:</p> <ul> <li>Every pair of strings in the group are special equivalent, and</li> <li>The group is the largest size possible (i.e., there is not a string <code>words[i]</code> not in the group such that <code>words[i]</code> is special-equivalent to every string in the group).</li> </ul> <p>Return the number of groups of special-equivalent strings from <code>words</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]\nOutput: 3\nExplanation: \nOne group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\nThe other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].\nNote that in particular, \"zzxy\" is not special equivalent to \"zzyx\".\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 20</code></li> <li><code>words[i]</code> consist of lowercase English letters.</li> <li>All the strings are of the same length.</li> </ul>"},{"location":"LeetCode_Problems/0894/","title":"894. All Possible Full Binary Trees","text":"Problem <p>Given an integer <code>n</code>, return a list of all possible full binary trees with <code>n</code> nodes. Each node of each tree in the answer must have <code>Node.val == 0</code>.</p> <p>Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.</p> <p>A full binary tree is a binary tree where each node has exactly <code>0</code> or <code>2</code> children.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 7\nOutput: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3\nOutput: [[0,0,0]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 20</code></li> </ul>"},{"location":"LeetCode_Problems/0895/","title":"895. Maximum Frequency Stack","text":"Problem <p>Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.</p> <p>Implement the <code>FreqStack</code> class:</p> <ul> <li><code>FreqStack()</code> constructs an empty frequency stack.</li> <li><code>void push(int val)</code> pushes an integer <code>val</code> onto the top of the stack.</li> <li><code>int pop()</code> removes and returns the most frequent element in the stack.     <ul> <li>If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.</li> </ul> </li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\nOutput\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\n\nExplanation\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= val &lt;= 10<sup>9</sup></code></li> <li>At most <code>2 * 10<sup>4</sup></code> calls will be made to <code>push</code> and <code>pop</code>.</li> <li>It is guaranteed that there will be at least one element in the stack before calling <code>pop</code>.</li> </ul>"},{"location":"LeetCode_Problems/0896/","title":"896. Monotonic Array","text":"Problem <p>An array is monotonic if it is either monotone increasing or monotone decreasing.</p> <p>An array <code>nums</code> is monotone increasing if for all <code>i &lt;= j</code>, <code>nums[i] &lt;= nums[j]</code>. An array <code>nums</code> is monotone decreasing if for all <code>i &lt;= j</code>, <code>nums[i] &gt;= nums[j]</code>.</p> <p>Given an integer array <code>nums</code>, return <code>true</code> if the given array is monotonic, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,2,3]\nOutput: true\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [6,5,4,4]\nOutput: true\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,3,2]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0897/","title":"897. Increasing Order Search Tree","text":"Problem <p>Given the <code>root</code> of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\nOutput: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [5,1,7]\nOutput: [1,null,5,null,7]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the given tree will be in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0898/","title":"898. Bitwise ORs of Subarrays","text":"Problem <p>Given an integer array <code>arr</code>, return the number of distinct bitwise ORs of all the non-empty subarrays of <code>arr</code>.</p> <p>The bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [0]\nOutput: 1\nExplanation: There is only one possible result: 0.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,1,2]\nOutput: 3\nExplanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [1,2,4]\nOutput: 6\nExplanation: The possible results are 1, 2, 3, 4, 6, and 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0899/","title":"899. Orderly Queue","text":"Problem <p>You are given a string <code>s</code> and an integer <code>k</code>. You can choose one of the first <code>k</code> letters of <code>s</code> and append it at the end of the string.</p> <p>Return the lexicographically smallest string you could have after applying the mentioned step any number of moves.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"cba\", k = 1\nOutput: \"acb\"\nExplanation: \nIn the first move, we move the 1<sup>st</sup> character 'c' to the end, obtaining the string \"bac\".\nIn the second move, we move the 1<sup>st</sup> character 'b' to the end, obtaining the final result \"acb\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"baaca\", k = 3\nOutput: \"aaabc\"\nExplanation: \nIn the first move, we move the 1<sup>st</sup> character 'b' to the end, obtaining the string \"aacab\".\nIn the second move, we move the 3<sup>rd</sup> character 'c' to the end, obtaining the final result \"aaabc\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0900/","title":"900. RLE Iterator","text":"Problem <p>We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length <code>encoding</code> (0-indexed), for all even <code>i</code>, <code>encoding[i]</code> tells us the number of times that the non-negative integer value <code>encoding[i + 1]</code> is repeated in the sequence.</p> <ul> <li>For example, the sequence <code>arr = [8,8,8,5,5]</code> can be encoded to be <code>encoding = [3,8,2,5]</code>. <code>encoding = [3,8,0,9,2,5]</code> and <code>encoding = [2,8,1,8,2,5]</code> are also valid RLE of <code>arr</code>.</li> </ul> <p>Given a run-length encoded array, design an iterator that iterates through it.</p> <p>Implement the <code>RLEIterator</code> class:</p> <ul> <li><code>RLEIterator(int[] encoded)</code> Initializes the object with the encoded array <code>encoded</code>.</li> <li><code>int next(int n)</code> Exhausts the next <code>n</code> elements and returns the last element exhausted in this way. If there is no element left to exhaust, return <code>-1</code> instead.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"]\n[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]\nOutput\n[null, 8, 8, 5, -1]\n\nExplanation\nRLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\nrLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\nrLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\nbut the second term did not exist. Since the last term exhausted does not exist, we return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= encoding.length &lt;= 1000</code></li> <li><code>encoding.length</code> is even.</li> <li><code>0 &lt;= encoding[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> <li>At most <code>1000</code> calls will be made to <code>next</code>.</li> </ul>"},{"location":"LeetCode_Problems/0901/","title":"901. Online Stock Span","text":"Problem <p>Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.</p> <p>The span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.</p> <ul> <li>For example, if the prices of the stock in the last four days is <code>[7,2,1,2]</code> and the price of the stock today is <code>2</code>, then the span of today is <code>4</code> because starting from today, the price of the stock was less than or equal <code>2</code> for <code>4</code> consecutive days.</li> <li>Also, if the prices of the stock in the last four days is <code>[7,34,1,2]</code> and the price of the stock today is <code>8</code>, then the span of today is <code>3</code> because starting from today, the price of the stock was less than or equal <code>8</code> for <code>3</code> consecutive days.</li> </ul> <p>Implement the <code>StockSpanner</code> class:</p> <ul> <li><code>StockSpanner()</code> Initializes the object of the class.</li> <li><code>int next(int price)</code> Returns the span of the stock's price given that today's price is <code>price</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"]\n[[], [100], [80], [60], [70], [60], [75], [85]]\nOutput\n[null, 1, 1, 1, 2, 1, 4, 6]\n\nExplanation\nStockSpanner stockSpanner = new StockSpanner();\nstockSpanner.next(100); // return 1\nstockSpanner.next(80);  // return 1\nstockSpanner.next(60);  // return 1\nstockSpanner.next(70);  // return 2\nstockSpanner.next(60);  // return 1\nstockSpanner.next(75);  // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.\nstockSpanner.next(85);  // return 6\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= price &lt;= 10<sup>5</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>next</code>.</li> </ul>"},{"location":"LeetCode_Problems/0902/","title":"902. Numbers At Most N Given Digit Set","text":"Problem <p>Given an array of <code>digits</code> which is sorted in non-decreasing order. You can write numbers using each <code>digits[i]</code> as many times as we want. For example, if <code>digits = ['1','3','5']</code>, we may write numbers such as <code>'13'</code>, <code>'551'</code>, and <code>'1351315'</code>.</p> <p>Return the number of positive integers that can be generated that are less than or equal to a given integer <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\nOutput: 20\nExplanation: \nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n</pre> <p>Example 2:</p> <pre>\nInput: digits = [\"1\",\"4\",\"9\"], n = 1000000000\nOutput: 29523\nExplanation: \nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array.\n</pre> <p>Example 3:</p> <pre>\nInput: digits = [\"7\"], n = 8\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= digits.length &lt;= 9</code></li> <li><code>digits[i].length == 1</code></li> <li><code>digits[i]</code> is a digit from\u00a0<code>'1'</code>\u00a0to <code>'9'</code>.</li> <li>All the values in\u00a0<code>digits</code> are unique.</li> <li><code>digits</code> is sorted in\u00a0non-decreasing order.</li> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0903/","title":"903. Valid Permutations for DI Sequence","text":"Problem <p>You are given a string <code>s</code> of length <code>n</code> where <code>s[i]</code> is either:</p> <ul> <li><code>'D'</code> means decreasing, or</li> <li><code>'I'</code> means increasing.</li> </ul> <p>A permutation <code>perm</code> of <code>n + 1</code> integers of all the integers in the range <code>[0, n]</code> is called a valid permutation if for all valid <code>i</code>:</p> <ul> <li>If <code>s[i] == 'D'</code>, then <code>perm[i] &gt; perm[i + 1]</code>, and</li> <li>If <code>s[i] == 'I'</code>, then <code>perm[i] &lt; perm[i + 1]</code>.</li> </ul> <p>Return the number of valid permutations <code>perm</code>. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"DID\"\nOutput: 5\nExplanation: The 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"D\"\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == s.length</code></li> <li><code>1 &lt;= n &lt;= 200</code></li> <li><code>s[i]</code> is either <code>'I'</code> or <code>'D'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0904/","title":"904. Fruit Into Baskets","text":"Problem <p>You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array <code>fruits</code> where <code>fruits[i]</code> is the type of fruit the <code>i<sup>th</sup></code> tree produces.</p> <p>You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:</p> <ul> <li>You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.</li> <li>Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.</li> <li>Once you reach a tree with fruit that cannot fit in your baskets, you must stop.</li> </ul> <p>Given the integer array <code>fruits</code>, return the maximum number of fruits you can pick.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: fruits = [1,2,1]\nOutput: 3\nExplanation: We can pick from all 3 trees.\n</pre> <p>Example 2:</p> <pre>\nInput: fruits = [0,1,2,2]\nOutput: 3\nExplanation: We can pick from trees [1,2,2].\nIf we had started at the first tree, we would only pick from trees [0,1].\n</pre> <p>Example 3:</p> <pre>\nInput: fruits = [1,2,3,2,2]\nOutput: 4\nExplanation: We can pick from trees [2,3,2,2].\nIf we had started at the first tree, we would only pick from trees [1,2].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= fruits.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= fruits[i] &lt; fruits.length</code></li> </ul>"},{"location":"LeetCode_Problems/0905/","title":"905. Sort Array By Parity","text":"Problem <p>Given an integer array <code>nums</code>, move all the even integers at the beginning of the array followed by all the odd integers.</p> <p>Return any array that satisfies this condition.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,1,2,4]\nOutput: [2,4,3,1]\nExplanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0]\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>0 &lt;= nums[i] &lt;= 5000</code></li> </ul>"},{"location":"LeetCode_Problems/0906/","title":"906. Super Palindromes","text":"Problem <p>Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.</p> <p>Given two positive integers <code>left</code> and <code>right</code> represented as strings, return the number of super-palindromes integers in the inclusive range <code>[left, right]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: left = \"4\", right = \"1000\"\nOutput: 4\nExplanation: 4, 9, 121, and 484 are superpalindromes.\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.\n</pre> <p>Example 2:</p> <pre>\nInput: left = \"1\", right = \"2\"\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= left.length, right.length &lt;= 18</code></li> <li><code>left</code> and <code>right</code> consist of only digits.</li> <li><code>left</code> and <code>right</code> cannot have leading zeros.</li> <li><code>left</code> and <code>right</code> represent integers in the range <code>[1, 10<sup>18</sup> - 1]</code>.</li> <li><code>left</code> is less than or equal to <code>right</code>.</li> </ul>"},{"location":"LeetCode_Problems/0907/","title":"907. Sum of Subarray Minimums","text":"Problem <p>Given an array of integers arr, find the sum of <code>min(b)</code>, where <code>b</code> ranges over every (contiguous) subarray of <code>arr</code>. Since the answer may be large, return the answer modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [3,1,2,4]\nOutput: 17\nExplanation: \nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\nSum is 17.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [11,81,94,43,3]\nOutput: 444\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 3 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0908/","title":"908. Smallest Range I","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p> <p>In one operation, you can choose any index <code>i</code> where <code>0 &lt;= i &lt; nums.length</code> and change <code>nums[i]</code> to <code>nums[i] + x</code> where <code>x</code> is an integer from the range <code>[-k, k]</code>. You can apply this operation at most once for each index <code>i</code>.</p> <p>The score of <code>nums</code> is the difference between the maximum and minimum elements in <code>nums</code>.</p> <p>Return the minimum score of <code>nums</code> after applying the mentioned operation at most once for each index in it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1], k = 0\nOutput: 0\nExplanation: The score is max(nums) - min(nums) = 1 - 1 = 0.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,10], k = 2\nOutput: 6\nExplanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,3,6], k = 3\nOutput: 0\nExplanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0909/","title":"909. Snakes and Ladders","text":"Problem <p>You are given an <code>n x n</code> integer matrix <code>board</code> where the cells are labeled from <code>1</code> to <code>n<sup>2</sup></code> in a Boustrophedon style starting from the bottom left of the board (i.e. <code>board[n - 1][0]</code>) and alternating direction each row.</p> <p>You start on square <code>1</code> of the board. In each move, starting from square <code>curr</code>, do the following:</p> <ul> <li>Choose a destination square <code>next</code> with a label in the range <code>[curr + 1, min(curr + 6, n<sup>2</sup>)]</code>.      <ul> <li>This choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.</li> </ul> </li> <li>If <code>next</code> has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to <code>next</code>.</li> <li>The game ends when you reach the square <code>n<sup>2</sup></code>.</li> </ul> <p>A board square on row <code>r</code> and column <code>c</code> has a snake or ladder if <code>board[r][c] != -1</code>. The destination of that snake or ladder is <code>board[r][c]</code>. Squares <code>1</code> and <code>n<sup>2</sup></code> do not have a snake or ladder.</p> <p>Note that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent\u00a0snake or ladder.</p> <ul> <li>For example, suppose the board is <code>[[-1,4],[-1,3]]</code>, and on the first move, your destination square is <code>2</code>. You follow the ladder to square <code>3</code>, but do not follow the subsequent ladder to <code>4</code>.</li> </ul> <p>Return the least number of moves required to reach the square <code>n<sup>2</sup></code>. If it is not possible to reach the square, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]\nOutput: 4\nExplanation: \nIn the beginning, you start at square 1 (at row 5, column 0).\nYou decide to move to square 2 and must take the ladder to square 15.\nYou then decide to move to square 17 and must take the snake to square 13.\nYou then decide to move to square 14 and must take the ladder to square 35.\nYou then decide to move to square 36, ending the game.\nThis is the lowest possible number of moves to reach the last square, so return 4.\n</pre> <p>Example 2:</p> <pre>\nInput: board = [[-1,-1],[-1,3]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == board.length == board[i].length</code></li> <li><code>2 &lt;= n &lt;= 20</code></li> <li><code>board[i][j]</code> is either <code>-1</code> or in the range <code>[1, n<sup>2</sup>]</code>.</li> <li>The squares labeled <code>1</code> and <code>n<sup>2</sup></code> do not have any ladders or snakes.</li> </ul>"},{"location":"LeetCode_Problems/0910/","title":"910. Smallest Range II","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p> <p>For each index <code>i</code> where <code>0 &lt;= i &lt; nums.length</code>, change <code>nums[i]</code> to be either <code>nums[i] + k</code> or <code>nums[i] - k</code>.</p> <p>The score of <code>nums</code> is the difference between the maximum and minimum elements in <code>nums</code>.</p> <p>Return the minimum score of <code>nums</code> after changing the values at each index.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1], k = 0\nOutput: 0\nExplanation: The score is max(nums) - min(nums) = 1 - 1 = 0.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,10], k = 2\nOutput: 6\nExplanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,3,6], k = 3\nOutput: 3\nExplanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= k &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0911/","title":"911. Online Election","text":"Problem <p>You are given two integer arrays <code>persons</code> and <code>times</code>. In an election, the <code>i<sup>th</sup></code> vote was cast for <code>persons[i]</code> at time <code>times[i]</code>.</p> <p>For each query at a time <code>t</code>, find the person that was leading the election at time <code>t</code>. Votes cast at time <code>t</code> will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.</p> <p>Implement the <code>TopVotedCandidate</code> class:</p> <ul> <li><code>TopVotedCandidate(int[] persons, int[] times)</code> Initializes the object with the <code>persons</code> and <code>times</code> arrays.</li> <li><code>int q(int t)</code> Returns the number of the person that was leading the election at time <code>t</code> according to the mentioned rules.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]\n[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]\nOutput\n[null, 0, 1, 1, 0, 0, 1]\n\nExplanation\nTopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);\ntopVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.\ntopVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.\ntopVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\ntopVotedCandidate.q(15); // return 0\ntopVotedCandidate.q(24); // return 0\ntopVotedCandidate.q(8); // return 1\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= persons.length &lt;= 5000</code></li> <li><code>times.length == persons.length</code></li> <li><code>0 &lt;= persons[i] &lt; persons.length</code></li> <li><code>0 &lt;= times[i] &lt;= 10<sup>9</sup></code></li> <li><code>times</code> is sorted in a strictly increasing order.</li> <li><code>times[0] &lt;= t &lt;= 10<sup>9</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>q</code>.</li> </ul>"},{"location":"LeetCode_Problems/0912/","title":"912. Sort an Array","text":"Problem <p>Given an array of integers <code>nums</code>, sort the array in ascending order and return it.</p> <p>You must solve the problem without using any built-in functions in <code>O(nlog(n))</code> time complexity and with the smallest space complexity possible.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,2,3,1]\nOutput: [1,2,3,5]\nExplanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\nExplanation: Note that the values of nums are not necessairly unique.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-5 * 10<sup>4</sup> &lt;= nums[i] &lt;= 5 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0913/","title":"913. Cat and Mouse","text":"Problem <p>A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.</p> <p>The graph is given as follows: <code>graph[a]</code> is a list of all nodes <code>b</code> such that <code>ab</code> is an edge of the graph.</p> <p>The mouse starts at node <code>1</code> and goes first, the cat starts at node <code>2</code> and goes second, and there is a hole at node <code>0</code>.</p> <p>During each player's turn, they must travel along one\u00a0edge of the graph that meets where they are.\u00a0 For example, if the Mouse is at node 1, it must travel to any node in <code>graph[1]</code>.</p> <p>Additionally, it is not allowed for the Cat to travel to the Hole (node 0.)</p> <p>Then, the game can end in three\u00a0ways:</p> <ul> <li>If ever the Cat occupies the same node as the Mouse, the Cat wins.</li> <li>If ever the Mouse reaches the Hole, the Mouse wins.</li> <li>If ever a position is repeated (i.e., the players are in the same position as a previous turn, and\u00a0it is the same player's turn to move), the game is a draw.</li> </ul> <p>Given a <code>graph</code>, and assuming both players play optimally, return</p> <ul> <li><code>1</code>\u00a0if the mouse wins the game,</li> <li><code>2</code>\u00a0if the cat wins the game, or</li> <li><code>0</code>\u00a0if the game is a draw.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\nOutput: 0\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: graph = [[1,3],[0],[3],[0,2]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= graph.length &lt;= 50</code></li> <li><code>1\u00a0&lt;= graph[i].length &lt; graph.length</code></li> <li><code>0 &lt;= graph[i][j] &lt; graph.length</code></li> <li><code>graph[i][j] != i</code></li> <li><code>graph[i]</code> is unique.</li> <li>The mouse and the cat can always move.\u00a0</li> </ul>"},{"location":"LeetCode_Problems/0914/","title":"914. X of a Kind in a Deck of Cards","text":"Problem <p>You are given an integer array <code>deck</code> where <code>deck[i]</code> represents the number written on the <code>i<sup>th</sup></code> card.</p> <p>Partition the cards into one or more groups such that:</p> <ul> <li>Each group has exactly <code>x</code> cards where <code>x &gt; 1</code>, and</li> <li>All the cards in one group have the same integer written on them.</li> </ul> <p>Return <code>true</code> if such partition is possible, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: deck = [1,2,3,4,4,3,2,1]\nOutput: true\nExplanation: Possible partition [1,1],[2,2],[3,3],[4,4].\n</pre> <p>Example 2:</p> <pre>\nInput: deck = [1,1,1,2,2,2,3,3]\nOutput: false\nExplanation: No possible partition.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= deck.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= deck[i] &lt; 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0915/","title":"915. Partition Array into Disjoint Intervals","text":"Problem <p>Given an integer array <code>nums</code>, partition it into two (contiguous) subarrays <code>left</code> and <code>right</code> so that:</p> <ul> <li>Every element in <code>left</code> is less than or equal to every element in <code>right</code>.</li> <li><code>left</code> and <code>right</code> are non-empty.</li> <li><code>left</code> has the smallest possible size.</li> </ul> <p>Return the length of <code>left</code> after such a partitioning.</p> <p>Test cases are generated such that partitioning exists.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,0,3,8,6]\nOutput: 3\nExplanation: left = [5,0,3], right = [8,6]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1,0,6,12]\nOutput: 4\nExplanation: left = [1,1,1,0], right = [6,12]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> <li>There is at least one valid answer for the given input.</li> </ul>"},{"location":"LeetCode_Problems/0916/","title":"916. Word Subsets","text":"Problem <p>You are given two string arrays <code>words1</code> and <code>words2</code>.</p> <p>A string <code>b</code> is a subset of string <code>a</code> if every letter in <code>b</code> occurs in <code>a</code> including multiplicity.</p> <ul> <li>For example, <code>\"wrr\"</code> is a subset of <code>\"warrior\"</code> but is not a subset of <code>\"world\"</code>.</li> </ul> <p>A string <code>a</code> from <code>words1</code> is universal if for every string <code>b</code> in <code>words2</code>, <code>b</code> is a subset of <code>a</code>.</p> <p>Return an array of all the universal strings in <code>words1</code>. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]\nOutput: [\"facebook\",\"google\",\"leetcode\"]\n</pre> <p>Example 2:</p> <pre>\nInput: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]\nOutput: [\"apple\",\"google\",\"leetcode\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words1.length, words2.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= words1[i].length, words2[i].length &lt;= 10</code></li> <li><code>words1[i]</code> and <code>words2[i]</code> consist only of lowercase English letters.</li> <li>All the strings of <code>words1</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0917/","title":"917. Reverse Only Letters","text":"Problem <p>Given a string <code>s</code>, reverse the string according to the following rules:</p> <ul> <li>All the characters that are not English letters remain in the same position.</li> <li>All the English letters (lowercase or uppercase) should be reversed.</li> </ul> <p>Return <code>s</code> after reversing it.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"ab-cd\"\nOutput: \"dc-ba\"\n</pre> <p>Example 2:</p> <pre>Input: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"\n</pre> <p>Example 3:</p> <pre>Input: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of characters with ASCII values in the range <code>[33, 122]</code>.</li> <li><code>s</code> does not contain <code>'\\\"'</code> or <code>'\\\\'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0918/","title":"918. Maximum Sum Circular Subarray","text":"Problem <p>Given a circular integer array <code>nums</code> of length <code>n</code>, return the maximum possible sum of a non-empty subarray of <code>nums</code>.</p> <p>A circular array means the end of the array connects to the beginning of the array. Formally, the next element of <code>nums[i]</code> is <code>nums[(i + 1) % n]</code> and the previous element of <code>nums[i]</code> is <code>nums[(i - 1 + n) % n]</code>.</p> <p>A subarray may only include each element of the fixed buffer <code>nums</code> at most once. Formally, for a subarray <code>nums[i], nums[i + 1], ..., nums[j]</code>, there does not exist <code>i &lt;= k1</code>, <code>k2 &lt;= j</code> with <code>k1 % n == k2 % n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,-2,3,-2]\nOutput: 3\nExplanation: Subarray [3] has maximum sum 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,-3,5]\nOutput: 10\nExplanation: Subarray [5,5] has maximum sum 5 + 5 = 10.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [-3,-2,-3]\nOutput: -2\nExplanation: Subarray [-2] has maximum sum -2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0919/","title":"919. Complete Binary Tree Inserter","text":"Problem <p>A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.</p> <p>Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.</p> <p>Implement the <code>CBTInserter</code> class:</p> <ul> <li><code>CBTInserter(TreeNode root)</code> Initializes the data structure with the <code>root</code> of the complete binary tree.</li> <li><code>int insert(int v)</code> Inserts a <code>TreeNode</code> into the tree with value <code>Node.val == val</code> so that the tree remains complete, and returns the value of the parent of the inserted <code>TreeNode</code>.</li> <li><code>TreeNode get_root()</code> Returns the root node of the tree.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]\n[[[1, 2]], [3], [4], []]\nOutput\n[null, 1, 2, [1, 2, 3, 4]]\n\nExplanation\nCBTInserter cBTInserter = new CBTInserter([1, 2]);\ncBTInserter.insert(3);  // return 1\ncBTInserter.insert(4);  // return 2\ncBTInserter.get_root(); // return [1, 2, 3, 4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree will be in the range <code>[1, 1000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 5000</code></li> <li><code>root</code> is a complete binary tree.</li> <li><code>0 &lt;= val &lt;= 5000</code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>insert</code> and <code>get_root</code>.</li> </ul>"},{"location":"LeetCode_Problems/0920/","title":"920. Number of Music Playlists","text":"Problem <p>Your music player contains <code>n</code> different songs. You want to listen to <code>goal</code> songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:</p> <ul> <li>Every song is played at least once.</li> <li>A song can only be played again only if <code>k</code> other songs have been played.</li> </ul> <p>Given <code>n</code>, <code>goal</code>, and <code>k</code>, return the number of possible playlists that you can create. Since the answer can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, goal = 3, k = 1\nOutput: 6\nExplanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, goal = 3, k = 0\nOutput: 6\nExplanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].\n</pre> <p>Example 3:</p> <pre>\nInput: n = 2, goal = 3, k = 1\nOutput: 2\nExplanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= k &lt; n &lt;= goal &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0921/","title":"921. Minimum Add to Make Parentheses Valid","text":"Problem <p>A parentheses string is valid if and only if:</p> <ul> <li>It is the empty string,</li> <li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid strings, or</li> <li>It can be written as <code>(A)</code>, where <code>A</code> is a valid string.</li> </ul> <p>You are given a parentheses string <code>s</code>. In one move, you can insert a parenthesis at any position of the string.</p> <ul> <li>For example, if <code>s = \"()))\"</code>, you can insert an opening parenthesis to be <code>\"(()))\"</code> or a closing parenthesis to be <code>\"())))\"</code>.</li> </ul> <p>Return the minimum number of moves required to make <code>s</code> valid.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"())\"\nOutput: 1\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"(((\"\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'('</code> or <code>')'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0922/","title":"922. Sort Array By Parity II","text":"Problem <p>Given an array of integers <code>nums</code>, half of the integers in <code>nums</code> are odd, and the other half are even.</p> <p>Sort the array so that whenever <code>nums[i]</code> is odd, <code>i</code> is odd, and whenever <code>nums[i]</code> is even, <code>i</code> is even.</p> <p>Return any answer array that satisfies this condition.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,2,5,7]\nOutput: [4,5,2,7]\nExplanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3]\nOutput: [2,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>nums.length</code> is even.</li> <li>Half of the integers in <code>nums</code> are even.</li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> </ul> <p> </p> <p>Follow Up: Could you solve it in-place?</p>"},{"location":"LeetCode_Problems/0923/","title":"923. 3Sum With Multiplicity","text":"Problem <p>Given an integer array <code>arr</code>, and an integer <code>target</code>, return the number of tuples <code>i, j, k</code> such that <code>i &lt; j &lt; k</code> and <code>arr[i] + arr[j] + arr[k] == target</code>.</p> <p>As the answer can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,1,2,2,3,3,4,4,5,5], target = 8\nOutput: 20\nExplanation: \nEnumerating by the values (arr[i], arr[j], arr[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,1,2,2,2,2], target = 5\nOutput: 12\nExplanation: \narr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [2,1,3], target = 6\nOutput: 1\nExplanation: (1, 2, 3) occured one time in the array so we return 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= arr.length &lt;= 3000</code></li> <li><code>0 &lt;= arr[i] &lt;= 100</code></li> <li><code>0 &lt;= target &lt;= 300</code></li> </ul>"},{"location":"LeetCode_Problems/0924/","title":"924. Minimize Malware Spread","text":"Problem <p>You are given a network of <code>n</code> nodes represented as an <code>n x n</code> adjacency matrix <code>graph</code>, where the <code>i<sup>th</sup></code> node is directly connected to the <code>j<sup>th</sup></code> node if <code>graph[i][j] == 1</code>.</p> <p>Some nodes <code>initial</code> are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.</p> <p>Suppose <code>M(initial)</code> is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from <code>initial</code>.</p> <p>Return the node that, if removed, would minimize <code>M(initial)</code>. If multiple nodes could be removed to minimize <code>M(initial)</code>, return such a node with the smallest index.</p> <p>Note that if a node was removed from the <code>initial</code> list of infected nodes, it might still be infected later due to the malware spread.</p> <p> </p> <p>Example 1:</p> <pre>Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0\n</pre> <p>Example 2:</p> <pre>Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\nOutput: 0\n</pre> <p>Example 3:</p> <pre>Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == graph.length</code></li> <li><code>n == graph[i].length</code></li> <li><code>2 &lt;= n &lt;= 300</code></li> <li><code>graph[i][j]</code> is <code>0</code> or <code>1</code>.</li> <li><code>graph[i][j] == graph[j][i]</code></li> <li><code>graph[i][i] == 1</code></li> <li><code>1 &lt;= initial.length &lt;= n</code></li> <li><code>0 &lt;= initial[i] &lt;= n - 1</code></li> <li>All the integers in <code>initial</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0925/","title":"925. Long Pressed Name","text":"Problem <p>Your friend is typing his <code>name</code> into a keyboard. Sometimes, when typing a character <code>c</code>, the key might get long pressed, and the character will be typed 1 or more times.</p> <p>You examine the <code>typed</code> characters of the keyboard. Return <code>True</code> if it is possible that it was your friends name, with some characters (possibly none) being long pressed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: name = \"alex\", typed = \"aaleex\"\nOutput: true\nExplanation: 'a' and 'e' in 'alex' were long pressed.\n</pre> <p>Example 2:</p> <pre>\nInput: name = \"saeed\", typed = \"ssaaedd\"\nOutput: false\nExplanation: 'e' must have been pressed twice, but it was not in the typed output.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= name.length, typed.length &lt;= 1000</code></li> <li><code>name</code> and <code>typed</code> consist of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0926/","title":"926. Flip String to Monotone Increasing","text":"Problem <p>A binary string is monotone increasing if it consists of some number of <code>0</code>'s (possibly none), followed by some number of <code>1</code>'s (also possibly none).</p> <p>You are given a binary string <code>s</code>. You can flip <code>s[i]</code> changing it from <code>0</code> to <code>1</code> or from <code>1</code> to <code>0</code>.</p> <p>Return the minimum number of flips to make <code>s</code> monotone increasing.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"00110\"\nOutput: 1\nExplanation: We flip the last digit to get 00111.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"010110\"\nOutput: 2\nExplanation: We flip to get 011111, or alternatively 000111.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"00011000\"\nOutput: 2\nExplanation: We flip to get 00000000.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0927/","title":"927. Three Equal Parts","text":"Problem <p>You are given an array <code>arr</code> which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.</p> <p>If it is possible, return any <code>[i, j]</code> with <code>i + 1 &lt; j</code>, such that:</p> <ul> <li><code>arr[0], arr[1], ..., arr[i]</code> is the first part,</li> <li><code>arr[i + 1], arr[i + 2], ..., arr[j - 1]</code> is the second part, and</li> <li><code>arr[j], arr[j + 1], ..., arr[arr.length - 1]</code> is the third part.</li> <li>All three parts have equal binary values.</li> </ul> <p>If it is not possible, return <code>[-1, -1]</code>.</p> <p>Note that the entire part is used when considering what binary value it represents. For example, <code>[1,1,0]</code> represents <code>6</code> in decimal, not <code>3</code>. Also, leading zeros are allowed, so <code>[0,1,1]</code> and <code>[1,1]</code> represent the same value.</p> <p> </p> <p>Example 1:</p> <pre>Input: arr = [1,0,1,0,1]\nOutput: [0,3]\n</pre> <p>Example 2:</p> <pre>Input: arr = [1,1,0,1,1]\nOutput: [-1,-1]\n</pre> <p>Example 3:</p> <pre>Input: arr = [1,1,0,0,1]\nOutput: [0,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= arr.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>arr[i]</code> is <code>0</code> or <code>1</code></li> </ul>"},{"location":"LeetCode_Problems/0928/","title":"928. Minimize Malware Spread II","text":"Problem <p>You are given a network of <code>n</code> nodes represented as an <code>n x n</code> adjacency matrix <code>graph</code>, where the <code>i<sup>th</sup></code> node is directly connected to the <code>j<sup>th</sup></code> node if <code>graph[i][j] == 1</code>.</p> <p>Some nodes <code>initial</code> are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.</p> <p>Suppose <code>M(initial)</code> is the final number of nodes infected with malware in the entire network after the spread of malware stops.</p> <p>We will remove exactly one node from <code>initial</code>, completely removing it and any connections from this node to any other node.</p> <p>Return the node that, if removed, would minimize <code>M(initial)</code>. If multiple nodes could be removed to minimize <code>M(initial)</code>, return such a node with the smallest index.</p> <p> </p> <p>Example 1:</p> <pre>Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0\n</pre> <p>Example 2:</p> <pre>Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\nOutput: 1\n</pre> <p>Example 3:</p> <pre>Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == graph.length</code></li> <li><code>n == graph[i].length</code></li> <li><code>2 &lt;= n &lt;= 300</code></li> <li><code>graph[i][j]</code> is <code>0</code> or <code>1</code>.</li> <li><code>graph[i][j] == graph[j][i]</code></li> <li><code>graph[i][i] == 1</code></li> <li><code>1 &lt;= initial.length &lt;\u00a0n</code></li> <li><code>0 &lt;= initial[i] &lt;= n - 1</code></li> <li>All the integers in <code>initial</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0929/","title":"929. Unique Email Addresses","text":"Problem <p>Every valid email consists of a local name and a domain name, separated by the <code>'@'</code> sign. Besides lowercase letters, the email may contain one or more <code>'.'</code> or <code>'+'</code>.</p> <ul> <li>For example, in <code>\"alice@leetcode.com\"</code>, <code>\"alice\"</code> is the local name, and <code>\"leetcode.com\"</code> is the domain name.</li> </ul> <p>If you add periods <code>'.'</code> between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.</p> <ul> <li>For example, <code>\"alice.z@leetcode.com\"</code> and <code>\"alicez@leetcode.com\"</code> forward to the same email address.</li> </ul> <p>If you add a plus <code>'+'</code> in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.</p> <ul> <li>For example, <code>\"m.y+name@email.com\"</code> will be forwarded to <code>\"my@email.com\"</code>.</li> </ul> <p>It is possible to use both of these rules at the same time.</p> <p>Given an array of strings <code>emails</code> where we send one email to each <code>emails[i]</code>, return the number of different addresses that actually receive mails.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\nOutput: 2\nExplanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails.\n</pre> <p>Example 2:</p> <pre>\nInput: emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= emails.length &lt;= 100</code></li> <li><code>1 &lt;= emails[i].length &lt;= 100</code></li> <li><code>emails[i]</code> consist of lowercase English letters, <code>'+'</code>, <code>'.'</code> and <code>'@'</code>.</li> <li>Each <code>emails[i]</code> contains exactly one <code>'@'</code> character.</li> <li>All local and domain names are non-empty.</li> <li>Local names do not start with a <code>'+'</code> character.</li> <li>Domain names end with the <code>\".com\"</code> suffix.</li> </ul>"},{"location":"LeetCode_Problems/0930/","title":"930. Binary Subarrays With Sum","text":"Problem <p>Given a binary array <code>nums</code> and an integer <code>goal</code>, return the number of non-empty subarrays with a sum <code>goal</code>.</p> <p>A subarray is a contiguous part of the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,0,1,0,1], goal = 2\nOutput: 4\nExplanation: The 4 subarrays are bolded and underlined below:\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,0,0,0,0], goal = 0\nOutput: 15\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>0 &lt;= goal &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/0931/","title":"931. Minimum Falling Path Sum","text":"Problem <p>Given an <code>n x n</code> array of integers <code>matrix</code>, return the minimum sum of any falling path through <code>matrix</code>.</p> <p>A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position <code>(row, col)</code> will be <code>(row + 1, col - 1)</code>, <code>(row + 1, col)</code>, or <code>(row + 1, col + 1)</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[2,1,3],[6,5,4],[7,8,9]]\nOutput: 13\nExplanation: There are two falling paths with a minimum sum as shown.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[-19,57],[-40,-5]]\nOutput: -59\nExplanation: The falling path with a minimum sum is shown.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0932/","title":"932. Beautiful Array","text":"Problem <p>An array <code>nums</code> of length <code>n</code> is beautiful if:</p> <ul> <li><code>nums</code> is a permutation of the integers in the range <code>[1, n]</code>.</li> <li>For every <code>0 &lt;= i &lt; j &lt; n</code>, there is no index <code>k</code> with <code>i &lt; k &lt; j</code> where <code>2 * nums[k] == nums[i] + nums[j]</code>.</li> </ul> <p>Given the integer <code>n</code>, return any beautiful array <code>nums</code> of length <code>n</code>. There will be at least one valid answer for the given <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: n = 4\nOutput: [2,1,4,3]\n</pre> <p>Example 2:</p> <pre>Input: n = 5\nOutput: [3,1,2,5,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0933/","title":"933. Number of Recent Calls","text":"Problem <p>You have a <code>RecentCounter</code> class which counts the number of recent requests within a certain time frame.</p> <p>Implement the <code>RecentCounter</code> class:</p> <ul> <li><code>RecentCounter()</code> Initializes the counter with zero recent requests.</li> <li><code>int ping(int t)</code> Adds a new request at time <code>t</code>, where <code>t</code> represents some time in milliseconds, and returns the number of requests that has happened in the past <code>3000</code> milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range <code>[t - 3000, t]</code>.</li> </ul> <p>It is guaranteed that every call to <code>ping</code> uses a strictly larger value of <code>t</code> than the previous call.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n[[], [1], [100], [3001], [3002]]\nOutput\n[null, 1, 2, 3, 3]\n\nExplanation\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1\nrecentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2\nrecentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3\nrecentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= t &lt;= 10<sup>9</sup></code></li> <li>Each test case will call <code>ping</code> with strictly increasing values of <code>t</code>.</li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>ping</code>.</li> </ul>"},{"location":"LeetCode_Problems/0934/","title":"934. Shortest Bridge","text":"Problem <p>You are given an <code>n x n</code> binary matrix <code>grid</code> where <code>1</code> represents land and <code>0</code> represents water.</p> <p>An island is a 4-directionally connected group of <code>1</code>'s not connected to any other <code>1</code>'s. There are exactly two islands in <code>grid</code>.</p> <p>You may change <code>0</code>'s to <code>1</code>'s to connect the two islands to form one island.</p> <p>Return the smallest number of <code>0</code>'s you must flip to connect the two islands.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: grid = [[0,1],[1,0]]\nOutput: 1\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[0,1,0],[0,0,0],[0,0,1]]\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>2 &lt;= n &lt;= 100</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> <li>There are exactly two islands in <code>grid</code>.</li> </ul>"},{"location":"LeetCode_Problems/0935/","title":"935. Knight Dialer","text":"Problem <p>The chess knight has a unique movement,\u00a0it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:</p> <p>A chess knight can move as indicated in the chess diagram below:</p> <p></p> <p>We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell\u00a0(i.e. blue cell).</p> <p></p> <p>Given an integer <code>n</code>, return how many distinct phone numbers of length <code>n</code> we can dial.</p> <p>You are allowed to place the knight on any numeric cell initially and then you should perform <code>n - 1</code> jumps to dial a number of length <code>n</code>. All jumps should be valid knight jumps.</p> <p>As the answer may be very large, return the answer modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: 10\nExplanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: 20\nExplanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n</pre> <p>Example 3:</p> <pre>\nInput: n = 3131\nOutput: 136006598\nExplanation: Please take care of the mod.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 5000</code></li> </ul>"},{"location":"LeetCode_Problems/0936/","title":"936. Stamping The Sequence","text":"Problem <p>You are given two strings <code>stamp</code> and <code>target</code>. Initially, there is a string <code>s</code> of length <code>target.length</code> with all <code>s[i] == '?'</code>.</p> <p>In one turn, you can place <code>stamp</code> over <code>s</code> and replace every letter in the <code>s</code> with the corresponding letter from <code>stamp</code>.</p> <ul> <li>For example, if <code>stamp = \"abc\"</code> and <code>target = \"abcba\"</code>, then <code>s</code> is <code>\"?????\"</code> initially. In one turn you can:      <ul> <li>place <code>stamp</code> at index <code>0</code> of <code>s</code> to obtain <code>\"abc??\"</code>,</li> <li>place <code>stamp</code> at index <code>1</code> of <code>s</code> to obtain <code>\"?abc?\"</code>, or</li> <li>place <code>stamp</code> at index <code>2</code> of <code>s</code> to obtain <code>\"??abc\"</code>.</li> </ul>     Note that <code>stamp</code> must be fully contained in the boundaries of <code>s</code> in order to stamp (i.e., you cannot place <code>stamp</code> at index <code>3</code> of <code>s</code>).</li> </ul> <p>We want to convert <code>s</code> to <code>target</code> using at most <code>10 * target.length</code> turns.</p> <p>Return an array of the index of the left-most letter being stamped at each turn. If we cannot obtain <code>target</code> from <code>s</code> within <code>10 * target.length</code> turns, return an empty array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stamp = \"abc\", target = \"ababc\"\nOutput: [0,2]\nExplanation: Initially s = \"?????\".\n- Place stamp at index 0 to get \"abc??\".\n- Place stamp at index 2 to get \"ababc\".\n[1,0,2] would also be accepted as an answer, as well as some other answers.\n</pre> <p>Example 2:</p> <pre>\nInput: stamp = \"abca\", target = \"aabcaca\"\nOutput: [3,0,1]\nExplanation: Initially s = \"???????\".\n- Place stamp at index 3 to get \"???abca\".\n- Place stamp at index 0 to get \"abcabca\".\n- Place stamp at index 1 to get \"aabcaca\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li> <li><code>stamp</code> and <code>target</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0937/","title":"937. Reorder Data in Log Files","text":"Problem <p>You are given an array of <code>logs</code>. Each log is a space-delimited string of words, where the first word is the identifier.</p> <p>There are two types of logs:</p> <ul> <li>Letter-logs: All words (except the identifier) consist of lowercase English letters.</li> <li>Digit-logs: All words (except the identifier) consist of digits.</li> </ul> <p>Reorder these logs so that:</p> <ol> <li>The letter-logs come before all digit-logs.</li> <li>The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.</li> <li>The digit-logs maintain their relative ordering.</li> </ol> <p>Return the final order of the logs.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\nOutput: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\nExplanation:\nThe letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".\nThe digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\".\n</pre> <p>Example 2:</p> <pre>\nInput: logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]\nOutput: [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= logs.length &lt;= 100</code></li> <li><code>3 &lt;= logs[i].length &lt;= 100</code></li> <li>All the tokens of <code>logs[i]</code> are separated by a single space.</li> <li><code>logs[i]</code> is guaranteed to have an identifier and at least one word after the identifier.</li> </ul>"},{"location":"LeetCode_Problems/0938/","title":"938. Range Sum of BST","text":"Problem <p>Given the <code>root</code> node of a binary search tree and two integers <code>low</code> and <code>high</code>, return the sum of values of all nodes with a value in the inclusive range <code>[low, high]</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [10,5,15,3,7,null,18], low = 7, high = 15\nOutput: 32\nExplanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\nOutput: 23\nExplanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 2 * 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= low &lt;= high &lt;= 10<sup>5</sup></code></li> <li>All <code>Node.val</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0939/","title":"939. Minimum Area Rectangle","text":"Problem <p>You are given an array of points in the X-Y plane <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p> <p>Return the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]\nOutput: 4\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= points.length &lt;= 500</code></li> <li><code>points[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 4 * 10<sup>4</sup></code></li> <li>All the given points are unique.</li> </ul>"},{"location":"LeetCode_Problems/0940/","title":"940. Distinct Subsequences II","text":"Problem <p>Given a string s, return the number of distinct non-empty subsequences of <code>s</code>. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code> while <code>\"aec\"</code> is not.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abc\"\nOutput: 7\nExplanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aba\"\nOutput: 6\nExplanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"aaa\"\nOutput: 3\nExplanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2000</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0941/","title":"941. Valid Mountain Array","text":"Problem <p>Given an array of integers <code>arr</code>, return <code>true</code> if and only if it is a valid mountain array.</p> <p>Recall that arr is a mountain array if and only if:</p> <ul> <li><code>arr.length &gt;= 3</code></li> <li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:     <ul> <li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i] </code></li> <li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li> </ul> </li> </ul> <p></p> <p> </p> <p>Example 1:</p> <pre>Input: arr = [2,1]\nOutput: false\n</pre> <p>Example 2:</p> <pre>Input: arr = [3,5,5]\nOutput: false\n</pre> <p>Example 3:</p> <pre>Input: arr = [0,3,2,1]\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0942/","title":"942. DI String Match","text":"Problem <p>A permutation <code>perm</code> of <code>n + 1</code> integers of all the integers in the range <code>[0, n]</code> can be represented as a string <code>s</code> of length <code>n</code> where:</p> <ul> <li><code>s[i] == 'I'</code> if <code>perm[i] &lt; perm[i + 1]</code>, and</li> <li><code>s[i] == 'D'</code> if <code>perm[i] &gt; perm[i + 1]</code>.</li> </ul> <p>Given a string <code>s</code>, reconstruct the permutation <code>perm</code> and return it. If there are multiple valid permutations perm, return any of them.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"IDID\"\nOutput: [0,4,1,3,2]\n</pre> <p>Example 2:</p> <pre>Input: s = \"III\"\nOutput: [0,1,2,3]\n</pre> <p>Example 3:</p> <pre>Input: s = \"DDI\"\nOutput: [3,2,0,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'I'</code> or <code>'D'</code>.</li> </ul>"},{"location":"LeetCode_Problems/0943/","title":"943. Find the Shortest Superstring","text":"Problem <p>Given an array of strings <code>words</code>, return the smallest string that contains each string in <code>words</code> as a substring. If there are multiple valid strings of the smallest length, return any of them.</p> <p>You may assume that no string in <code>words</code> is a substring of another string in <code>words</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"alex\",\"loves\",\"leetcode\"]\nOutput: \"alexlovesleetcode\"\nExplanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]\nOutput: \"gctaagttcatgcatc\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 12</code></li> <li><code>1 &lt;= words[i].length &lt;= 20</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> <li>All the strings of <code>words</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0944/","title":"944. Delete Columns to Make Sorted","text":"Problem <p>You are given an array of <code>n</code> strings <code>strs</code>, all of the same length.</p> <p>The strings can be arranged such that there is one on each line, making a grid.</p> <ul> <li>For example, <code>strs = [\"abc\", \"bce\", \"cae\"]</code> can be arranged as follows:</li> </ul> <pre>\nabc\nbce\ncae\n</pre> <p>You want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 (<code>'a'</code>, <code>'b'</code>, <code>'c'</code>) and 2 (<code>'c'</code>, <code>'e'</code>, <code>'e'</code>) are sorted, while column 1 (<code>'b'</code>, <code>'c'</code>, <code>'a'</code>) is not, so you would delete column 1.</p> <p>Return the number of columns that you will delete.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: strs = [\"cba\",\"daf\",\"ghi\"]\nOutput: 1\nExplanation: The grid looks as follows:\n  cba\n  daf\n  ghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.\n</pre> <p>Example 2:</p> <pre>\nInput: strs = [\"a\",\"b\"]\nOutput: 0\nExplanation: The grid looks as follows:\n  a\n  b\nColumn 0 is the only column and is sorted, so you will not delete any columns.\n</pre> <p>Example 3:</p> <pre>\nInput: strs = [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: The grid looks as follows:\n  zyx\n  wvu\n  tsr\nAll 3 columns are not sorted, so you will delete all 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == strs.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= strs[i].length &lt;= 1000</code></li> <li><code>strs[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0945/","title":"945. Minimum Increment to Make Array Unique","text":"Problem <p>You are given an integer array <code>nums</code>. In one move, you can pick an index <code>i</code> where <code>0 &lt;= i &lt; nums.length</code> and increment <code>nums[i]</code> by <code>1</code>.</p> <p>Return the minimum number of moves to make every value in <code>nums</code> unique.</p> <p>The test cases are generated so that the answer fits in a 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,2]\nOutput: 1\nExplanation: After 1 move, the array could be [1, 2, 3].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,2,1,2,1,7]\nOutput: 6\nExplanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0946/","title":"946. Validate Stack Sequences","text":"Problem <p>Given two integer arrays <code>pushed</code> and <code>popped</code> each with distinct values, return <code>true</code> if this could have been the result of a sequence of push and pop operations on an initially empty stack, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\nOutput: true\nExplanation: We might do the following sequence:\npush(1), push(2), push(3), push(4),\npop() -&gt; 4,\npush(5),\npop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\n</pre> <p>Example 2:</p> <pre>\nInput: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\nOutput: false\nExplanation: 1 cannot be popped before 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= pushed.length &lt;= 1000</code></li> <li><code>0 &lt;= pushed[i] &lt;= 1000</code></li> <li>All the elements of <code>pushed</code> are unique.</li> <li><code>popped.length == pushed.length</code></li> <li><code>popped</code> is a permutation of <code>pushed</code>.</li> </ul>"},{"location":"LeetCode_Problems/0947/","title":"947. Most Stones Removed with Same Row or Column","text":"Problem <p>On a 2D plane, we place <code>n</code> stones at some integer coordinate points. Each coordinate point may have at most one stone.</p> <p>A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.</p> <p>Given an array <code>stones</code> of length <code>n</code> where <code>stones[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the location of the <code>i<sup>th</sup></code> stone, return the largest possible number of stones that can be removed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\nOutput: 5\nExplanation: One way to remove 5 stones is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,1].\n2. Remove stone [2,1] because it shares the same column as [0,1].\n3. Remove stone [1,2] because it shares the same row as [1,0].\n4. Remove stone [1,0] because it shares the same column as [0,0].\n5. Remove stone [0,1] because it shares the same row as [0,0].\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.\n</pre> <p>Example 2:</p> <pre>\nInput: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\nOutput: 3\nExplanation: One way to make 3 moves is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,0].\n2. Remove stone [2,0] because it shares the same column as [0,0].\n3. Remove stone [0,2] because it shares the same row as [0,0].\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.\n</pre> <p>Example 3:</p> <pre>\nInput: stones = [[0,0]]\nOutput: 0\nExplanation: [0,0] is the only stone on the plane, so you cannot remove it.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= stones.length &lt;= 1000</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>No two stones are at the same coordinate point.</li> </ul>"},{"location":"LeetCode_Problems/0948/","title":"948. Bag of Tokens","text":"Problem <p>You have an initial power of <code>power</code>, an initial score of <code>0</code>, and a bag of <code>tokens</code> where <code>tokens[i]</code> is the value of the <code>i<sup>th</sup></code> token (0-indexed).</p> <p>Your goal is to maximize your total score by potentially playing each token in one of two ways:</p> <ul> <li>If your current power is at least <code>tokens[i]</code>, you may play the <code>i<sup>th</sup></code> token face up, losing <code>tokens[i]</code> power and gaining <code>1</code> score.</li> <li>If your current score is at least <code>1</code>, you may play the <code>i<sup>th</sup></code> token face down, gaining <code>tokens[i]</code> power and losing <code>1</code> score.</li> </ul> <p>Each token may be played at most once and in any order. You do not have to play all the tokens.</p> <p>Return the largest possible score you can achieve after playing any number of tokens.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tokens = [100], power = 50\nOutput: 0\nExplanation: Playing the only token in the bag is impossible because you either have too little power or too little score.\n</pre> <p>Example 2:</p> <pre>\nInput: tokens = [100,200], power = 150\nOutput: 1\nExplanation: Play the 0<sup>th</sup> token (100) face up, your power becomes 50 and score becomes 1.\nThere is no need to play the 1<sup>st</sup> token since you cannot play it face up to add to your score.\n</pre> <p>Example 3:</p> <pre>\nInput: tokens = [100,200,300,400], power = 200\nOutput: 2\nExplanation: Play the tokens in this order to get a score of 2:\n1. Play the 0<sup>th</sup> token (100) face up, your power becomes 100 and score becomes 1.\n2. Play the 3<sup>rd</sup> token (400) face down, your power becomes 500 and score becomes 0.\n3. Play the 1<sup>st</sup> token (200) face up, your power becomes 300 and score becomes 1.\n4. Play the 2<sup>nd </sup>token (300) face up, your power becomes 0 and score becomes 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= tokens.length &lt;= 1000</code></li> <li><code>0 &lt;= tokens[i],\u00a0power &lt; 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0949/","title":"949. Largest Time for Given Digits","text":"Problem <p>Given an array <code>arr</code> of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.</p> <p>24-hour times are formatted as <code>\"HH:MM\"</code>, where <code>HH</code> is between <code>00</code> and <code>23</code>, and <code>MM</code> is between <code>00</code> and <code>59</code>. The earliest 24-hour time is <code>00:00</code>, and the latest is <code>23:59</code>.</p> <p>Return the latest 24-hour time in <code>\"HH:MM\"</code> format. If no valid time can be made, return an empty string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,3,4]\nOutput: \"23:41\"\nExplanation: The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [5,5,5,5]\nOutput: \"\"\nExplanation: There are no valid 24-hour times as \"55:55\" is not valid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>arr.length == 4</code></li> <li><code>0 &lt;= arr[i] &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/0950/","title":"950. Reveal Cards In Increasing Order","text":"Problem <p>You are given an integer array <code>deck</code>. There is a deck of cards where every card has a unique integer. The integer on the <code>i<sup>th</sup></code> card is <code>deck[i]</code>.</p> <p>You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.</p> <p>You will do the following steps repeatedly until all cards are revealed:</p> <ol> <li>Take the top card of the deck, reveal it, and take it out of the deck.</li> <li>If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.</li> <li>If there are still unrevealed cards, go back to step 1. Otherwise, stop.</li> </ol> <p>Return an ordering of the deck that would reveal the cards in increasing order.</p> <p>Note that the first entry in the answer is considered to be the top of the deck.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: deck = [17,13,11,2,3,5,7]\nOutput: [2,13,3,11,5,17,7]\nExplanation: \nWe get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct.\n</pre> <p>Example 2:</p> <pre>\nInput: deck = [1,1000]\nOutput: [1,1000]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= deck.length &lt;= 1000</code></li> <li><code>1 &lt;= deck[i] &lt;= 10<sup>6</sup></code></li> <li>All the values of <code>deck</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0951/","title":"951. Flip Equivalent Binary Trees","text":"Problem <p>For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.</p> <p>A binary tree X\u00a0is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.</p> <p>Given the roots of two binary trees <code>root1</code> and <code>root2</code>, return <code>true</code> if the two trees are flip equivalent or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\nOutput: true\nExplanation: We flipped at nodes with values 1, 3, and 5.\n</pre> <p>Example 2:</p> <pre>\nInput: root1 = [], root2 = []\nOutput: true\n</pre> <p>Example 3:</p> <pre>\nInput: root1 = [], root2 = [1]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in each tree is in the range <code>[0, 100]</code>.</li> <li>Each tree will have unique node values in the range <code>[0, 99]</code>.</li> </ul>"},{"location":"LeetCode_Problems/0952/","title":"952. Largest Component Size by Common Factor","text":"Problem <p>You are given an integer array of unique positive integers <code>nums</code>. Consider the following graph:</p> <ul> <li>There are <code>nums.length</code> nodes, labeled <code>nums[0]</code> to <code>nums[nums.length - 1]</code>,</li> <li>There is an undirected edge between <code>nums[i]</code> and <code>nums[j]</code> if <code>nums[i]</code> and <code>nums[j]</code> share a common factor greater than <code>1</code>.</li> </ul> <p>Return the size of the largest connected component in the graph.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [4,6,15,35]\nOutput: 4\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: nums = [20,50,9,63]\nOutput: 2\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: nums = [2,3,6,7,4,12,21,39]\nOutput: 8\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li>All the values of <code>nums</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0953/","title":"953. Verifying an Alien Dictionary","text":"Problem <p>In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different <code>order</code>. The <code>order</code> of the alphabet is some permutation of lowercase letters.</p> <p>Given a sequence of <code>words</code> written in the alien language, and the <code>order</code> of the alphabet, return <code>true</code> if and only if the given <code>words</code> are sorted lexicographically in this alien language.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"\nOutput: true\nExplanation: As 'h' comes before 'l' in this language, then the sequence is sorted.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"\nOutput: false\nExplanation: As 'd' comes after 'l' in this language, then words[0] &gt; words[1], hence the sequence is unsorted.\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"\nOutput: false\nExplanation: The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" &gt; \"app\", because 'l' &gt; '\u2205', where '\u2205' is defined as the blank character which is less than any other character (More info).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 20</code></li> <li><code>order.length == 26</code></li> <li>All characters in <code>words[i]</code> and <code>order</code> are English lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/0954/","title":"954. Array of Doubled Pairs","text":"Problem <p>Given an integer array of even length <code>arr</code>, return <code>true</code> if it is possible to reorder <code>arr</code> such that <code>arr[2 * i + 1] = 2 * arr[2 * i]</code> for every <code>0 &lt;= i &lt; len(arr) / 2</code>, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [3,1,3,6]\nOutput: false\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [2,1,2,6]\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [4,-2,2,-4]\nOutput: true\nExplanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= arr.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>arr.length</code> is even.</li> <li><code>-10<sup>5</sup> &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0955/","title":"955. Delete Columns to Make Sorted II","text":"Problem <p>You are given an array of <code>n</code> strings <code>strs</code>, all of the same length.</p> <p>We may choose any deletion indices, and we delete all the characters in those indices for each string.</p> <p>For example, if we have <code>strs = [\"abcdef\",\"uvwxyz\"]</code> and deletion indices <code>{0, 2, 3}</code>, then the final array after deletions is <code>[\"bef\", \"vyz\"]</code>.</p> <p>Suppose we chose a set of deletion indices <code>answer</code> such that after deletions, the final array has its elements in lexicographic order (i.e., <code>strs[0] &lt;= strs[1] &lt;= strs[2] &lt;= ... &lt;= strs[n - 1]</code>). Return the minimum possible value of <code>answer.length</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: strs = [\"ca\",\"bb\",\"ac\"]\nOutput: 1\nExplanation: \nAfter deleting the first column, strs = [\"a\", \"b\", \"c\"].\nNow strs is in lexicographic order (ie. strs[0] &lt;= strs[1] &lt;= strs[2]).\nWe require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.\n</pre> <p>Example 2:</p> <pre>\nInput: strs = [\"xc\",\"yb\",\"za\"]\nOutput: 0\nExplanation: \nstrs is already in lexicographic order, so we do not need to delete anything.\nNote that the rows of strs are not necessarily in lexicographic order:\ni.e., it is NOT necessarily true that (strs[0][0] &lt;= strs[0][1] &lt;= ...)\n</pre> <p>Example 3:</p> <pre>\nInput: strs = [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: We have to delete every column.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == strs.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= strs[i].length &lt;= 100</code></li> <li><code>strs[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/0956/","title":"956. Tallest Billboard","text":"Problem <p>You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.</p> <p>You are given a collection of <code>rods</code> that can be welded together. For example, if you have rods of lengths <code>1</code>, <code>2</code>, and <code>3</code>, you can weld them together to make a support of length <code>6</code>.</p> <p>Return the largest possible height of your billboard installation. If you cannot support the billboard, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rods = [1,2,3,6]\nOutput: 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\n</pre> <p>Example 2:</p> <pre>\nInput: rods = [1,2,3,4,5,6]\nOutput: 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\n</pre> <p>Example 3:</p> <pre>\nInput: rods = [1,2]\nOutput: 0\nExplanation: The billboard cannot be supported, so we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rods.length &lt;= 20</code></li> <li><code>1 &lt;= rods[i] &lt;= 1000</code></li> <li><code>sum(rods[i]) &lt;= 5000</code></li> </ul>"},{"location":"LeetCode_Problems/0957/","title":"957. Prison Cells After N Days","text":"Problem <p>There are <code>8</code> prison cells in a row and each cell is either occupied or vacant.</p> <p>Each day, whether the cell is occupied or vacant changes according to the following rules:</p> <ul> <li>If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.</li> <li>Otherwise, it becomes vacant.</li> </ul> <p>Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.</p> <p>You are given an integer array <code>cells</code> where <code>cells[i] == 1</code> if the <code>i<sup>th</sup></code> cell is occupied and <code>cells[i] == 0</code> if the <code>i<sup>th</sup></code> cell is vacant, and you are given an integer <code>n</code>.</p> <p>Return the state of the prison after <code>n</code> days (i.e., <code>n</code> such changes described above).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: cells = [0,1,0,1,1,0,0,1], n = 7\nOutput: [0,0,1,1,0,0,0,0]\nExplanation: The following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]\n</pre> <p>Example 2:</p> <pre>\nInput: cells = [1,0,0,1,0,0,1,0], n = 1000000000\nOutput: [0,0,1,1,1,1,1,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>cells.length == 8</code></li> <li><code>cells[i]</code>\u00a0is either <code>0</code> or <code>1</code>.</li> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0958/","title":"958. Check Completeness of a Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, determine if it is a complete binary tree.</p> <p>In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between <code>1</code> and <code>2<sup>h</sup></code> nodes inclusive at the last level <code>h</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,6]\nOutput: true\nExplanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,null,7]\nOutput: false\nExplanation: The node with value 7 isn't as far left as possible.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0959/","title":"959. Regions Cut By Slashes","text":"Problem <p>An <code>n x n</code> grid is composed of <code>1 x 1</code> squares where each <code>1 x 1</code> square consists of a <code>'/'</code>, <code>'\\'</code>, or blank space <code>' '</code>. These characters divide the square into contiguous regions.</p> <p>Given the grid <code>grid</code> represented as a string array, return the number of regions.</p> <p>Note that backslash characters are escaped, so a <code>'\\'</code> is represented as <code>'\\\\'</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [\" /\",\"/ \"]\nOutput: 2\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [\" /\",\"  \"]\nOutput: 1\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [\"/\\\\\",\"\\\\/\"]\nOutput: 5\nExplanation: Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 30</code></li> <li><code>grid[i][j]</code> is either <code>'/'</code>, <code>'\\'</code>, or <code>' '</code>.</li> </ul>"},{"location":"LeetCode_Problems/0960/","title":"960. Delete Columns to Make Sorted III","text":"Problem <p>You are given an array of <code>n</code> strings <code>strs</code>, all of the same length.</p> <p>We may choose any deletion indices, and we delete all the characters in those indices for each string.</p> <p>For example, if we have <code>strs = [\"abcdef\",\"uvwxyz\"]</code> and deletion indices <code>{0, 2, 3}</code>, then the final array after deletions is <code>[\"bef\", \"vyz\"]</code>.</p> <p>Suppose we chose a set of deletion indices <code>answer</code> such that after deletions, the final array has every string (row) in lexicographic order. (i.e., <code>(strs[0][0] &lt;= strs[0][1] &lt;= ... &lt;= strs[0][strs[0].length - 1])</code>, and <code>(strs[1][0] &lt;= strs[1][1] &lt;= ... &lt;= strs[1][strs[1].length - 1])</code>, and so on). Return the minimum possible value of <code>answer.length</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: strs = [\"babca\",\"bbazb\"]\nOutput: 3\nExplanation: After deleting columns 0, 1, and 4, the final array is strs = [\"bc\", \"az\"].\nBoth these rows are individually in lexicographic order (ie. strs[0][0] &lt;= strs[0][1] and strs[1][0] &lt;= strs[1][1]).\nNote that strs[0] &gt; strs[1] - the array strs is not necessarily in lexicographic order.</pre> <p>Example 2:</p> <pre>\nInput: strs = [\"edcba\"]\nOutput: 4\nExplanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.\n</pre> <p>Example 3:</p> <pre>\nInput: strs = [\"ghi\",\"def\",\"abc\"]\nOutput: 0\nExplanation: All rows are already lexicographically sorted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == strs.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= strs[i].length &lt;= 100</code></li> <li><code>strs[i]</code> consists of lowercase English letters.</li> </ul> <ul> <li> </li> </ul>"},{"location":"LeetCode_Problems/0961/","title":"961. N-Repeated Element in Size 2N Array","text":"Problem <p>You are given an integer array <code>nums</code> with the following properties:</p> <ul> <li><code>nums.length == 2 * n</code>.</li> <li><code>nums</code> contains <code>n + 1</code> unique elements.</li> <li>Exactly one element of <code>nums</code> is repeated <code>n</code> times.</li> </ul> <p>Return the element that is repeated <code>n</code> times.</p> <p> </p> <p>Example 1:</p> <pre>Input: nums = [1,2,3,3]\nOutput: 3\n</pre> <p>Example 2:</p> <pre>Input: nums = [2,1,2,5,3,2]\nOutput: 2\n</pre> <p>Example 3:</p> <pre>Input: nums = [5,1,5,2,5,3,5,4]\nOutput: 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 5000</code></li> <li><code>nums.length == 2 * n</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> contains <code>n + 1</code> unique elements and one of them is repeated exactly <code>n</code> times.</li> </ul>"},{"location":"LeetCode_Problems/0962/","title":"962. Maximum Width Ramp","text":"Problem <p>A ramp in an integer array <code>nums</code> is a pair <code>(i, j)</code> for which <code>i &lt; j</code> and <code>nums[i] &lt;= nums[j]</code>. The width of such a ramp is <code>j - i</code>.</p> <p>Given an integer array <code>nums</code>, return the maximum width of a ramp in <code>nums</code>. If there is no ramp in <code>nums</code>, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [6,0,8,2,1,5]\nOutput: 4\nExplanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [9,8,1,0,1,9,4,0,4,1]\nOutput: 7\nExplanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 5 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0963/","title":"963. Minimum Area Rectangle II","text":"Problem <p>You are given an array of points in the X-Y plane <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p> <p>Return the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the X and Y axes. If there is not any such rectangle, return <code>0</code>.</p> <p>Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: points = [[1,2],[2,1],[1,0],[0,1]]\nOutput: 2.00000\nExplanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: points = [[0,1],[2,1],[1,1],[1,0],[2,0]]\nOutput: 1.00000\nExplanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: points = [[0,3],[1,2],[3,1],[1,3],[2,1]]\nOutput: 0\nExplanation: There is no possible rectangle to form from these points.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= points.length &lt;= 50</code></li> <li><code>points[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 4 * 10<sup>4</sup></code></li> <li>All the given points are unique.</li> </ul>"},{"location":"LeetCode_Problems/0964/","title":"964. Least Operators to Express Number","text":"Problem <p>Given a single positive integer <code>x</code>, we will write an expression of the form <code>x (op1) x (op2) x (op3) x ...</code> where each operator <code>op1</code>, <code>op2</code>, etc. is either addition, subtraction, multiplication, or division (<code>+</code>, <code>-</code>, <code>*</code>, or <code>/)</code>. For example, with <code>x = 3</code>, we might write <code>3 * 3 / 3 + 3 - 3</code> which is a value of 3.</p> <p>When writing such an expression, we adhere to the following conventions:</p> <ul> <li>The division operator (<code>/</code>) returns rational numbers.</li> <li>There are no parentheses placed anywhere.</li> <li>We use the usual order of operations: multiplication and division happen before addition and subtraction.</li> <li>It is not allowed to use the unary negation operator (<code>-</code>). For example, \"<code>x - x</code>\" is a valid expression as it only uses subtraction, but \"<code>-x + x</code>\" is not because it uses negation.</li> </ul> <p>We would like to write an expression with the least number of operators such that the expression equals the given <code>target</code>. Return the least number of operators used.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: x = 3, target = 19\nOutput: 5\nExplanation: 3 * 3 + 3 * 3 + 3 / 3.\nThe expression contains 5 operations.\n</pre> <p>Example 2:</p> <pre>\nInput: x = 5, target = 501\nOutput: 8\nExplanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\nThe expression contains 8 operations.\n</pre> <p>Example 3:</p> <pre>\nInput: x = 100, target = 100000000\nOutput: 3\nExplanation: 100 * 100 * 100 * 100.\nThe expression contains 3 operations.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= x &lt;= 100</code></li> <li><code>1 &lt;= target &lt;= 2 * 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0965/","title":"965. Univalued Binary Tree","text":"Problem <p>A binary tree is uni-valued if every node in the tree has the same value.</p> <p>Given the <code>root</code> of a binary tree, return <code>true</code> if the given tree is uni-valued, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,1,1,1,1,null,1]\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [2,2,2,5,2]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt; 100</code></li> </ul>"},{"location":"LeetCode_Problems/0966/","title":"966. Vowel Spellchecker","text":"Problem <p>Given a <code>wordlist</code>, we want to implement a spellchecker that converts a query word into a correct word.</p> <p>For a given <code>query</code> word, the spell checker handles two categories of spelling mistakes:</p> <ul> <li>Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.      <ul> <li>Example: <code>wordlist = [\"yellow\"]</code>, <code>query = \"YellOw\"</code>: <code>correct = \"yellow\"</code></li> <li>Example: <code>wordlist = [\"Yellow\"]</code>, <code>query = \"yellow\"</code>: <code>correct = \"Yellow\"</code></li> <li>Example: <code>wordlist = [\"yellow\"]</code>, <code>query = \"yellow\"</code>: <code>correct = \"yellow\"</code></li> </ul> </li> <li>Vowel Errors: If after replacing the vowels <code>('a', 'e', 'i', 'o', 'u')</code> of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.     <ul> <li>Example: <code>wordlist = [\"YellOw\"]</code>, <code>query = \"yollow\"</code>: <code>correct = \"YellOw\"</code></li> <li>Example: <code>wordlist = [\"YellOw\"]</code>, <code>query = \"yeellow\"</code>: <code>correct = \"\"</code> (no match)</li> <li>Example: <code>wordlist = [\"YellOw\"]</code>, <code>query = \"yllw\"</code>: <code>correct = \"\"</code> (no match)</li> </ul> </li> </ul> <p>In addition, the spell checker operates under the following precedence rules:</p> <ul> <li>When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.</li> <li>When the query matches a word up to capitlization, you should return the first such match in the wordlist.</li> <li>When the query matches a word up to vowel errors, you should return the first such match in the wordlist.</li> <li>If the query has no matches in the wordlist, you should return the empty string.</li> </ul> <p>Given some <code>queries</code>, return a list of words <code>answer</code>, where <code>answer[i]</code> is the correct word for <code>query = queries[i]</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]\nOutput: [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]\n</pre> <p>Example 2:</p> <pre>Input: wordlist = [\"yellow\"], queries = [\"YellOw\"]\nOutput: [\"yellow\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= wordlist.length, queries.length &lt;= 5000</code></li> <li><code>1 &lt;= wordlist[i].length, queries[i].length &lt;= 7</code></li> <li><code>wordlist[i]</code> and <code>queries[i]</code> consist only of only English letters.</li> </ul>"},{"location":"LeetCode_Problems/0967/","title":"967. Numbers With Same Consecutive Differences","text":"Problem <p>Given two integers n and k, return an array of all the integers of length <code>n</code> where the difference between every two consecutive digits is <code>k</code>. You may return the answer in any order.</p> <p>Note that the integers should not have leading zeros. Integers as <code>02</code> and <code>043</code> are not allowed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, k = 7\nOutput: [181,292,707,818,929]\nExplanation: Note that 070 is not a valid number, because it has leading zeroes.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, k = 1\nOutput: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 9</code></li> <li><code>0 &lt;= k &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/0968/","title":"968. Binary Tree Cameras","text":"Problem <p>You are given the <code>root</code> of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.</p> <p>Return the minimum number of cameras needed to monitor all nodes of the tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [0,0,null,0,0]\nOutput: 1\nExplanation: One camera is enough to monitor all nodes if placed as shown.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [0,0,null,0,null,0,null,null,0]\nOutput: 2\nExplanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>Node.val == 0</code></li> </ul>"},{"location":"LeetCode_Problems/0969/","title":"969. Pancake Sorting","text":"Problem <p>Given an array of integers <code>arr</code>, sort the array by performing a series of pancake flips.</p> <p>In one pancake flip we do the following steps:</p> <ul> <li>Choose an integer <code>k</code> where <code>1 &lt;= k &lt;= arr.length</code>.</li> <li>Reverse the sub-array <code>arr[0...k-1]</code> (0-indexed).</li> </ul> <p>For example, if <code>arr = [3,2,1,4]</code> and we performed a pancake flip choosing <code>k = 3</code>, we reverse the sub-array <code>[3,2,1]</code>, so <code>arr = [1,2,3,4]</code> after the pancake flip at <code>k = 3</code>.</p> <p>Return an array of the <code>k</code>-values corresponding to a sequence of pancake flips that sort <code>arr</code>. Any valid answer that sorts the array within <code>10 * arr.length</code> flips will be judged as correct.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [3,2,4,1]\nOutput: [4,2,4,3]\nExplanation: \nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [1, 4, 2, 3]\nAfter 2nd flip (k = 2): arr = [4, 1, 2, 3]\nAfter 3rd flip (k = 4): arr = [3, 2, 1, 4]\nAfter 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2,3]\nOutput: []\nExplanation: The input is already sorted, so there is no need to flip anything.\nNote that other answers, such as [3, 3], would also be accepted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 100</code></li> <li><code>1 &lt;= arr[i] &lt;= arr.length</code></li> <li>All integers in <code>arr</code> are unique (i.e. <code>arr</code> is a permutation of the integers from <code>1</code> to <code>arr.length</code>).</li> </ul>"},{"location":"LeetCode_Problems/0970/","title":"970. Powerful Integers","text":"Problem <p>Given three integers <code>x</code>, <code>y</code>, and <code>bound</code>, return a list of all the powerful integers that have a value less than or equal to <code>bound</code>.</p> <p>An integer is powerful if it can be represented as <code>x<sup>i</sup> + y<sup>j</sup></code> for some integers <code>i &gt;= 0</code> and <code>j &gt;= 0</code>.</p> <p>You may return the answer in any order. In your answer, each value should occur at most once.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: x = 2, y = 3, bound = 10\nOutput: [2,3,4,5,7,9,10]\nExplanation:\n2 = 2<sup>0</sup> + 3<sup>0</sup>\n3 = 2<sup>1</sup> + 3<sup>0</sup>\n4 = 2<sup>0</sup> + 3<sup>1</sup>\n5 = 2<sup>1</sup> + 3<sup>1</sup>\n7 = 2<sup>2</sup> + 3<sup>1</sup>\n9 = 2<sup>3</sup> + 3<sup>0</sup>\n10 = 2<sup>0</sup> + 3<sup>2</sup>\n</pre> <p>Example 2:</p> <pre>\nInput: x = 3, y = 5, bound = 15\nOutput: [2,4,6,8,10,14]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= x, y &lt;= 100</code></li> <li><code>0 &lt;= bound &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0971/","title":"971. Flip Binary Tree To Match Preorder Traversal","text":"Problem <p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes, where each node is uniquely assigned a value from <code>1</code> to <code>n</code>. You are also given a sequence of <code>n</code> values <code>voyage</code>, which is the desired pre-order traversal of the binary tree.</p> <p>Any node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:</p> <p></p> <p>Flip the smallest number of nodes so that the pre-order traversal of the tree matches <code>voyage</code>.</p> <p>Return a list of the values of all flipped nodes. You may return the answer in any order. If it is impossible to flip the nodes in the tree to make the pre-order traversal match <code>voyage</code>, return the list <code>[-1]</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2], voyage = [2,1]\nOutput: [-1]\nExplanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,3], voyage = [1,3,2]\nOutput: [1]\nExplanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [1,2,3], voyage = [1,2,3]\nOutput: []\nExplanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is <code>n</code>.</li> <li><code>n == voyage.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= Node.val, voyage[i] &lt;= n</code></li> <li>All the values in the tree are unique.</li> <li>All the values in <code>voyage</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/0972/","title":"972. Equal Rational Numbers","text":"Problem <p>Given two strings <code>s</code> and <code>t</code>, each of which represents a non-negative rational number, return <code>true</code> if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.</p> <p>A rational number can be represented using up to three parts: <code>&lt;IntegerPart&gt;</code>, <code>&lt;NonRepeatingPart&gt;</code>, and a <code>&lt;RepeatingPart&gt;</code>. The number will be represented in one of the following three ways:</p> <ul> <li><code>&lt;IntegerPart&gt;</code> <ul> <li>For example, <code>12</code>, <code>0</code>, and <code>123</code>.</li> </ul> </li> <li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;</code> <ul> <li>For example, <code>0.5</code>, <code>1.</code>, <code>2.12</code>, and <code>123.0001</code>.</li> </ul> </li> <li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code> <ul> <li>For example, <code>0.1(6)</code>, <code>1.(9)</code>, <code>123.00(1212)</code>.</li> </ul> </li> </ul> <p>The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:</p> <ul> <li><code>1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"0.(52)\", t = \"0.5(25)\"\nOutput: true\nExplanation: Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"0.1666(6)\", t = \"0.166(66)\"\nOutput: true\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"0.9(9)\", t = \"1.\"\nOutput: true\nExplanation: \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.]\n\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>Each part consists only of digits.</li> <li>The <code>&lt;IntegerPart&gt;</code> does not have leading zeros (except for the zero itself).</li> <li><code>1 &lt;= &lt;IntegerPart&gt;.length &lt;= 4</code></li> <li><code>0 &lt;= &lt;NonRepeatingPart&gt;.length &lt;= 4</code></li> <li><code>1 &lt;= &lt;RepeatingPart&gt;.length &lt;= 4</code></li> </ul>"},{"location":"LeetCode_Problems/0973/","title":"973. K Closest Points to Origin","text":"Problem <p>Given an array of <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the X-Y plane and an integer <code>k</code>, return the <code>k</code> closest points to the origin <code>(0, 0)</code>.</p> <p>The distance between two points on the X-Y plane is the Euclidean distance (i.e., <code>\u221a(x<sub>1</sub> - x<sub>2</sub>)<sup>2</sup> + (y<sub>1</sub> - y<sub>2</sub>)<sup>2</sup></code>).</p> <p>You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: points = [[1,3],[-2,2]], k = 1\nOutput: [[-2,2]]\nExplanation:\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) &lt; sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].\n</pre> <p>Example 2:</p> <pre>\nInput: points = [[3,3],[5,-1],[-2,4]], k = 2\nOutput: [[3,3],[-2,4]]\nExplanation: The answer [[-2,4],[3,3]] would also be accepted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= points.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0974/","title":"974. Subarray Sums Divisible by K","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the number of non-empty subarrays that have a sum divisible by <code>k</code>.</p> <p>A subarray is a contiguous part of an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,5,0,-2,-3,1], k = 5\nOutput: 7\nExplanation: There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5], k = 9\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>2 &lt;= k &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0975/","title":"975. Odd Even Jump","text":"Problem <p>You are given an integer array <code>arr</code>. From some starting index, you can make a series of jumps. The (1<sup>st</sup>, 3<sup>rd</sup>, 5<sup>th</sup>, ...) jumps in the series are called odd-numbered jumps, and the (2<sup>nd</sup>, 4<sup>th</sup>, 6<sup>th</sup>, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.</p> <p>You may jump forward from index <code>i</code> to index <code>j</code> (with <code>i &lt; j</code>) in the following way:</p> <ul> <li>During odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index <code>j</code> such that <code>arr[i] &lt;= arr[j]</code> and <code>arr[j]</code> is the smallest possible value. If there are multiple such indices <code>j</code>, you can only jump to the smallest such index <code>j</code>.</li> <li>During even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index <code>j</code> such that <code>arr[i] &gt;= arr[j]</code> and <code>arr[j]</code> is the largest possible value. If there are multiple such indices <code>j</code>, you can only jump to the smallest such index <code>j</code>.</li> <li>It may be the case that for some index <code>i</code>, there are no legal jumps.</li> </ul> <p>A starting index is good if, starting from that index, you can reach the end of the array (index <code>arr.length - 1</code>) by jumping some number of times (possibly 0 or more than once).</p> <p>Return the number of good starting indices.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [10,13,12,14,15]\nOutput: 2\nExplanation: \nFrom starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\nFrom starting index i = 4, we have reached the end already.\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\njumps.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [2,3,1,1,4]\nOutput: 3\nExplanation: \nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].\nWe can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can't jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\nFrom starting index i = 4, we are already at the end.\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\nnumber of jumps.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [5,1,3,4,2]\nOutput: 3\nExplanation: We can reach the end from starting indices 1, 2, and 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= arr[i] &lt; 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0976/","title":"976. Largest Perimeter Triangle","text":"Problem <p>Given an integer array <code>nums</code>, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,2]\nOutput: 5\nExplanation: You can form a triangle with three side lengths: 1, 2, and 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,1,10]\nOutput: 0\nExplanation: \nYou cannot use the side lengths 1, 1, and 2 to form a triangle.\nYou cannot use the side lengths 1, 1, and 10 to form a triangle.\nYou cannot use the side lengths 1, 2, and 10 to form a triangle.\nAs we cannot use any three side lengths to form a triangle of non-zero area, we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0977/","title":"977. Squares of a Sorted Array","text":"Problem <p>Given an integer array <code>nums</code> sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-4,-1,0,3,10]\nOutput: [0,1,9,16,100]\nExplanation: After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-7,-3,2,3,11]\nOutput: [4,9,9,49,121]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>nums</code> is sorted in non-decreasing order.</li> </ul> <p> </p> <p>Follow up: Squaring each element and sorting the new array is very trivial, could you find an <code>O(n)</code> solution using a different approach?</p>"},{"location":"LeetCode_Problems/0978/","title":"978. Longest Turbulent Subarray","text":"Problem <p>Given an integer array <code>arr</code>, return the length of a maximum size turbulent subarray of <code>arr</code>.</p> <p>A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.</p> <p>More formally, a subarray <code>[arr[i], arr[i + 1], ..., arr[j]]</code> of <code>arr</code> is said to be turbulent if and only if:</p> <ul> <li>For <code>i &lt;= k &lt; j</code>:      <ul> <li><code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is odd, and</li> <li><code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is even.</li> </ul> </li> <li>Or, for <code>i &lt;= k &lt; j</code>:     <ul> <li><code>arr[k] &gt; arr[k + 1]</code> when <code>k</code> is even, and</li> <li><code>arr[k] &lt; arr[k + 1]</code> when <code>k</code> is odd.</li> </ul> </li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [9,4,2,10,7,8,8,1,9]\nOutput: 5\nExplanation: arr[1] &gt; arr[2] &lt; arr[3] &gt; arr[4] &lt; arr[5]\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [4,8,12,16]\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [100]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 4 * 10<sup>4</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0979/","title":"979. Distribute Coins in Binary Tree","text":"Problem <p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes where each <code>node</code> in the tree has <code>node.val</code> coins. There are <code>n</code> coins in total throughout the whole tree.</p> <p>In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.</p> <p>Return the minimum number of moves required to make every node have exactly one coin.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,0,0]\nOutput: 2\nExplanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [0,3,0]\nOutput: 3\nExplanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is <code>n</code>.</li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= Node.val &lt;= n</code></li> <li>The sum of all <code>Node.val</code> is <code>n</code>.</li> </ul>"},{"location":"LeetCode_Problems/0980/","title":"980. Unique Paths III","text":"Problem <p>You are given an <code>m x n</code> integer array <code>grid</code> where <code>grid[i][j]</code> could be:</p> <ul> <li><code>1</code> representing the starting square. There is exactly one starting square.</li> <li><code>2</code> representing the ending square. There is exactly one ending square.</li> <li><code>0</code> representing empty squares we can walk over.</li> <li><code>-1</code> representing obstacles that we cannot walk over.</li> </ul> <p>Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\nOutput: 2\nExplanation: We have the following two paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\nOutput: 4\nExplanation: We have the following four paths: \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[0,1],[2,0]]\nOutput: 0\nExplanation: There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 20</code></li> <li><code>1 &lt;= m * n &lt;= 20</code></li> <li><code>-1 &lt;= grid[i][j] &lt;= 2</code></li> <li>There is exactly one starting cell and one ending cell.</li> </ul>"},{"location":"LeetCode_Problems/0981/","title":"981. Time Based Key-Value Store","text":"Problem <p>Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.</p> <p>Implement the <code>TimeMap</code> class:</p> <ul> <li><code>TimeMap()</code> Initializes the object of the data structure.</li> <li><code>void set(String key, String value, int timestamp)</code> Stores the key <code>key</code> with the value <code>value</code> at the given time <code>timestamp</code>.</li> <li><code>String get(String key, int timestamp)</code> Returns a value such that <code>set</code> was called previously, with <code>timestamp_prev &lt;= timestamp</code>. If there are multiple such values, it returns the value associated with the largest <code>timestamp_prev</code>. If there are no values, it returns <code>\"\"</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]\nOutput\n[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]\n\nExplanation\nTimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1.\ntimeMap.get(\"foo\", 1);         // return \"bar\"\ntimeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4.\ntimeMap.get(\"foo\", 4);         // return \"bar2\"\ntimeMap.get(\"foo\", 5);         // return \"bar2\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= key.length, value.length &lt;= 100</code></li> <li><code>key</code> and <code>value</code> consist of lowercase English letters and digits.</li> <li><code>1 &lt;= timestamp &lt;= 10<sup>7</sup></code></li> <li>All the timestamps <code>timestamp</code> of <code>set</code> are strictly increasing.</li> <li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>set</code> and <code>get</code>.</li> </ul>"},{"location":"LeetCode_Problems/0982/","title":"982. Triples with Bitwise AND Equal To Zero","text":"Problem <p>Given an integer array nums, return the number of AND triples.</p> <p>An AND triple is a triple of indices <code>(i, j, k)</code> such that:</p> <ul> <li><code>0 &lt;= i &lt; nums.length</code></li> <li><code>0 &lt;= j &lt; nums.length</code></li> <li><code>0 &lt;= k &lt; nums.length</code></li> <li><code>nums[i] &amp; nums[j] &amp; nums[k] == 0</code>, where <code>&amp;</code> represents the bitwise-AND operator.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,3]\nOutput: 12\nExplanation: We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 &amp; 2 &amp; 1\n(i=0, j=1, k=0) : 2 &amp; 1 &amp; 2\n(i=0, j=1, k=1) : 2 &amp; 1 &amp; 1\n(i=0, j=1, k=2) : 2 &amp; 1 &amp; 3\n(i=0, j=2, k=1) : 2 &amp; 3 &amp; 1\n(i=1, j=0, k=0) : 1 &amp; 2 &amp; 2\n(i=1, j=0, k=1) : 1 &amp; 2 &amp; 1\n(i=1, j=0, k=2) : 1 &amp; 2 &amp; 3\n(i=1, j=1, k=0) : 1 &amp; 1 &amp; 2\n(i=1, j=2, k=0) : 1 &amp; 3 &amp; 2\n(i=2, j=0, k=1) : 3 &amp; 2 &amp; 1\n(i=2, j=1, k=0) : 3 &amp; 1 &amp; 2\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,0,0]\nOutput: 27\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt; 2<sup>16</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0983/","title":"983. Minimum Cost For Tickets","text":"Problem <p>You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array <code>days</code>. Each day is an integer from <code>1</code> to <code>365</code>.</p> <p>Train tickets are sold in three different ways:</p> <ul> <li>a 1-day pass is sold for <code>costs[0]</code> dollars,</li> <li>a 7-day pass is sold for <code>costs[1]</code> dollars, and</li> <li>a 30-day pass is sold for <code>costs[2]</code> dollars.</li> </ul> <p>The passes allow that many days of consecutive travel.</p> <ul> <li>For example, if we get a 7-day pass on day <code>2</code>, then we can travel for <code>7</code> days: <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, and <code>8</code>.</li> </ul> <p>Return the minimum number of dollars you need to travel every day in the given list of days.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: days = [1,4,6,7,8,20], costs = [2,7,15]\nOutput: 11\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel.\n</pre> <p>Example 2:</p> <pre>\nInput: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\nOutput: 17\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= days.length &lt;= 365</code></li> <li><code>1 &lt;= days[i] &lt;= 365</code></li> <li><code>days</code> is in strictly increasing order.</li> <li><code>costs.length == 3</code></li> <li><code>1 &lt;= costs[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0984/","title":"984. String Without AAA or BBB","text":"Problem <p>Given two integers <code>a</code> and <code>b</code>, return any string <code>s</code> such that:</p> <ul> <li><code>s</code> has length <code>a + b</code> and contains exactly <code>a</code> <code>'a'</code> letters, and exactly <code>b</code> <code>'b'</code> letters,</li> <li>The substring <code>'aaa'</code> does not occur in <code>s</code>, and</li> <li>The substring <code>'bbb'</code> does not occur in <code>s</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: a = 1, b = 2\nOutput: \"abb\"\nExplanation: \"abb\", \"bab\" and \"bba\" are all correct answers.\n</pre> <p>Example 2:</p> <pre>\nInput: a = 4, b = 1\nOutput: \"aabaa\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= a, b &lt;= 100</code></li> <li>It is guaranteed such an <code>s</code> exists for the given <code>a</code> and <code>b</code>.</li> </ul>"},{"location":"LeetCode_Problems/0985/","title":"985. Sum of Even Numbers After Queries","text":"Problem <p>You are given an integer array <code>nums</code> and an array <code>queries</code> where <code>queries[i] = [val<sub>i</sub>, index<sub>i</sub>]</code>.</p> <p>For each query <code>i</code>, first, apply <code>nums[index<sub>i</sub>] = nums[index<sub>i</sub>] + val<sub>i</sub></code>, then print the sum of the even values of <code>nums</code>.</p> <p>Return an integer array <code>answer</code> where <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\nOutput: [8,6,2,4]\nExplanation: At the beginning, the array is [1,2,3,4].\nAfter adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\nAfter adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\nAfter adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\nAfter adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1], queries = [[4,0]]\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= queries.length &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= val<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= index<sub>i</sub> &lt; nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/0986/","title":"986. Interval List Intersections","text":"Problem <p>You are given two lists of closed intervals, <code>firstList</code> and <code>secondList</code>, where <code>firstList[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> and <code>secondList[j] = [start<sub>j</sub>, end<sub>j</sub>]</code>. Each list of intervals is pairwise disjoint and in sorted order.</p> <p>Return the intersection of these two interval lists.</p> <p>A closed interval <code>[a, b]</code> (with <code>a &lt;= b</code>) denotes the set of real numbers <code>x</code> with <code>a &lt;= x &lt;= b</code>.</p> <p>The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of <code>[1, 3]</code> and <code>[2, 4]</code> is <code>[2, 3]</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\nOutput: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n</pre> <p>Example 2:</p> <pre>\nInput: firstList = [[1,3],[5,9]], secondList = []\nOutput: []\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= firstList.length, secondList.length &lt;= 1000</code></li> <li><code>firstList.length + secondList.length &gt;= 1</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>end<sub>i</sub> &lt; start<sub>i+1</sub></code></li> <li><code>0 &lt;= start<sub>j</sub> &lt; end<sub>j</sub> &lt;= 10<sup>9</sup> </code></li> <li><code>end<sub>j</sub> &lt; start<sub>j+1</sub></code></li> </ul>"},{"location":"LeetCode_Problems/0987/","title":"987. Vertical Order Traversal of a Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, calculate the vertical order traversal of the binary tree.</p> <p>For each node at position <code>(row, col)</code>, its left and right children will be at positions <code>(row + 1, col - 1)</code> and <code>(row + 1, col + 1)</code> respectively. The root of the tree is at <code>(0, 0)</code>.</p> <p>The vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.</p> <p>Return the vertical order traversal of the binary tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\nExplanation:\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,6,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [1,2,3,4,6,5,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/0988/","title":"988. Smallest String Starting From Leaf","text":"Problem <p>You are given the <code>root</code> of a binary tree where each node has a value in the range <code>[0, 25]</code> representing the letters <code>'a'</code> to <code>'z'</code>.</p> <p>Return the lexicographically smallest string that starts at a leaf of this tree and ends at the root.</p> <p>As a reminder, any shorter prefix of a string is lexicographically smaller.</p> <ul> <li>For example, <code>\"ab\"</code> is lexicographically smaller than <code>\"aba\"</code>.</li> </ul> <p>A leaf of a node is a node that has no children.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [0,1,2,3,4,3,4]\nOutput: \"dba\"\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [25,1,3,1,3,0,2]\nOutput: \"adz\"\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [2,2,1,null,1,0,null,0]\nOutput: \"abc\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 8500]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 25</code></li> </ul>"},{"location":"LeetCode_Problems/0989/","title":"989. Add to Array-Form of Integer","text":"Problem <p>The array-form of an integer <code>num</code> is an array representing its digits in left to right order.</p> <ul> <li>For example, for <code>num = 1321</code>, the array form is <code>[1,3,2,1]</code>.</li> </ul> <p>Given <code>num</code>, the array-form of an integer, and an integer <code>k</code>, return the array-form of the integer <code>num + k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = [1,2,0,0], k = 34\nOutput: [1,2,3,4]\nExplanation: 1200 + 34 = 1234\n</pre> <p>Example 2:</p> <pre>\nInput: num = [2,7,4], k = 181\nOutput: [4,5,5]\nExplanation: 274 + 181 = 455\n</pre> <p>Example 3:</p> <pre>\nInput: num = [2,1,5], k = 806\nOutput: [1,0,2,1]\nExplanation: 215 + 806 = 1021\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= num[i] &lt;= 9</code></li> <li><code>num</code> does not contain any leading zeros except for the zero itself.</li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0990/","title":"990. Satisfiability of Equality Equations","text":"Problem <p>You are given an array of strings <code>equations</code> that represent relationships between variables where each string <code>equations[i]</code> is of length <code>4</code> and takes one of two different forms: <code>\"x<sub>i</sub>==y<sub>i</sub>\"</code> or <code>\"x<sub>i</sub>!=y<sub>i</sub>\"</code>.Here, <code>x<sub>i</sub></code> and <code>y<sub>i</sub></code> are lowercase letters (not necessarily different) that represent one-letter variable names.</p> <p>Return <code>true</code> if it is possible to assign integers to variable names so as to satisfy all the given equations, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: equations = [\"a==b\",\"b!=a\"]\nOutput: false\nExplanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations.\n</pre> <p>Example 2:</p> <pre>\nInput: equations = [\"b==a\",\"a==b\"]\nOutput: true\nExplanation: We could assign a = 1 and b = 1 to satisfy both equations.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= equations.length &lt;= 500</code></li> <li><code>equations[i].length == 4</code></li> <li><code>equations[i][0]</code> is a lowercase letter.</li> <li><code>equations[i][1]</code> is either <code>'='</code> or <code>'!'</code>.</li> <li><code>equations[i][2]</code> is <code>'='</code>.</li> <li><code>equations[i][3]</code> is a lowercase letter.</li> </ul>"},{"location":"LeetCode_Problems/0991/","title":"991. Broken Calculator","text":"Problem <p>There is a broken calculator that has the integer <code>startValue</code> on its display initially. In one operation, you can:</p> <ul> <li>multiply the number on display by <code>2</code>, or</li> <li>subtract <code>1</code> from the number on display.</li> </ul> <p>Given two integers <code>startValue</code> and <code>target</code>, return the minimum number of operations needed to display <code>target</code> on the calculator.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: startValue = 2, target = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -&gt; 4 -&gt; 3}.\n</pre> <p>Example 2:</p> <pre>\nInput: startValue = 5, target = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -&gt; 4 -&gt; 8}.\n</pre> <p>Example 3:</p> <pre>\nInput: startValue = 3, target = 10\nOutput: 3\nExplanation: Use double, decrement and double {3 -&gt; 6 -&gt; 5 -&gt; 10}.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= startValue, target &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0992/","title":"992. Subarrays with K Different Integers","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the number of good subarrays of <code>nums</code>.</p> <p>A good array is an array where the number of different integers in that array is exactly <code>k</code>.</p> <ul> <li>For example, <code>[1,2,3,1,2]</code> has <code>3</code> different integers: <code>1</code>, <code>2</code>, and <code>3</code>.</li> </ul> <p>A subarray is a contiguous part of an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,1,2,3], k = 2\nOutput: 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,1,3,4], k = 3\nOutput: 3\nExplanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i], k &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/0993/","title":"993. Cousins in Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree with unique values and the values of two different nodes of the tree <code>x</code> and <code>y</code>, return <code>true</code> if the nodes corresponding to the values <code>x</code> and <code>y</code> in the tree are cousins, or <code>false</code> otherwise.</p> <p>Two nodes of a binary tree are cousins if they have the same depth with different parents.</p> <p>Note that in a binary tree, the root node is at the depth <code>0</code>, and children of each depth <code>k</code> node are at the depth <code>k + 1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4], x = 4, y = 3\nOutput: false\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,3,null,4,null,5], x = 5, y = 4\nOutput: true\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [1,2,3,null,4], x = 2, y = 3\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> <li>Each node has a unique value.</li> <li><code>x != y</code></li> <li><code>x</code> and <code>y</code> are exist in the tree.</li> </ul>"},{"location":"LeetCode_Problems/0994/","title":"994. Rotting Oranges","text":"Problem <p>You are given an <code>m x n</code> <code>grid</code> where each cell can have one of three values:</p> <ul> <li><code>0</code> representing an empty cell,</li> <li><code>1</code> representing a fresh orange, or</li> <li><code>2</code> representing a rotten orange.</li> </ul> <p>Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.</p> <p>Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[2,1,1],[1,1,0],[0,1,1]]\nOutput: 4\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[2,1,1],[0,1,1],[1,0,1]]\nOutput: -1\nExplanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [[0,2]]\nOutput: 0\nExplanation: Since there are already no fresh oranges at minute 0, the answer is just 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10</code></li> <li><code>grid[i][j]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</li> </ul>"},{"location":"LeetCode_Problems/0995/","title":"995. Minimum Number of K Consecutive Bit Flips","text":"Problem <p>You are given a binary array <code>nums</code> and an integer <code>k</code>.</p> <p>A k-bit flip is choosing a subarray of length <code>k</code> from <code>nums</code> and simultaneously changing every <code>0</code> in the subarray to <code>1</code>, and every <code>1</code> in the subarray to <code>0</code>.</p> <p>Return the minimum number of k-bit flips required so that there is no <code>0</code> in the array. If it is not possible, return <code>-1</code>.</p> <p>A subarray is a contiguous part of an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,0], k = 1\nOutput: 2\nExplanation: Flip nums[0], then flip nums[2].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,0], k = 2\nOutput: -1\nExplanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [0,0,0,1,0,1,1,0], k = 3\nOutput: 3\nExplanation: \nFlip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]\nFlip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]\nFlip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/0996/","title":"996. Number of Squareful Arrays","text":"Problem <p>An array is squareful if the sum of every pair of adjacent elements is a perfect square.</p> <p>Given an integer array nums, return the number of permutations of <code>nums</code> that are squareful.</p> <p>Two permutations <code>perm1</code> and <code>perm2</code> are different if there is some index <code>i</code> such that <code>perm1[i] != perm2[i]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,17,8]\nOutput: 2\nExplanation: [1,8,17] and [17,8,1] are the valid permutations.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,2]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 12</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/0997/","title":"997. Find the Town Judge","text":"Problem <p>In a town, there are <code>n</code> people labeled from <code>1</code> to <code>n</code>. There is a rumor that one of these people is secretly the town judge.</p> <p>If the town judge exists, then:</p> <ol> <li>The town judge trusts nobody.</li> <li>Everybody (except for the town judge) trusts the town judge.</li> <li>There is exactly one person that satisfies properties 1 and 2.</li> </ol> <p>You are given an array <code>trust</code> where <code>trust[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> representing that the person labeled <code>a<sub>i</sub></code> trusts the person labeled <code>b<sub>i</sub></code>. If a trust relationship does not exist in <code>trust</code> array, then such a trust relationship does not exist.</p> <p>Return the label of the town judge if the town judge exists and can be identified, or return <code>-1</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2, trust = [[1,2]]\nOutput: 2\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, trust = [[1,3],[2,3]]\nOutput: 3\n</pre> <p>Example 3:</p> <pre>\nInput: n = 3, trust = [[1,3],[2,3],[3,1]]\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= trust.length &lt;= 10<sup>4</sup></code></li> <li><code>trust[i].length == 2</code></li> <li>All the pairs of <code>trust</code> are unique.</li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/0998/","title":"998. Maximum Binary Tree II","text":"Problem <p>A maximum tree is a tree where every node has a value greater than any other value in its subtree.</p> <p>You are given the <code>root</code> of a maximum binary tree and an integer <code>val</code>.</p> <p>Just as in the previous problem, the given tree was constructed from a list <code>a</code> (<code>root = Construct(a)</code>) recursively with the following <code>Construct(a)</code> routine:</p> <ul> <li>If <code>a</code> is empty, return <code>null</code>.</li> <li>Otherwise, let <code>a[i]</code> be the largest element of <code>a</code>. Create a <code>root</code> node with the value <code>a[i]</code>.</li> <li>The left child of <code>root</code> will be <code>Construct([a[0], a[1], ..., a[i - 1]])</code>.</li> <li>The right child of <code>root</code> will be <code>Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]])</code>.</li> <li>Return <code>root</code>.</li> </ul> <p>Note that we were not given <code>a</code> directly, only a root node <code>root = Construct(a)</code>.</p> <p>Suppose <code>b</code> is a copy of <code>a</code> with the value <code>val</code> appended to it. It is guaranteed that <code>b</code> has unique values.</p> <p>Return <code>Construct(b)</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [4,1,3,null,null,2], val = 5\nOutput: [5,4,null,1,3,null,null,2]\nExplanation: a = [1,4,2,3], b = [1,4,2,3,5]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [5,2,4,null,1], val = 3\nOutput: [5,2,4,null,1,null,3]\nExplanation: a = [2,1,5,4], b = [2,1,5,4,3]\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [5,2,3,null,1], val = 4\nOutput: [5,2,4,null,1,3]\nExplanation: a = [2,1,5,3], b = [2,1,5,3,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> <li>All the values of the tree are unique.</li> <li><code>1 &lt;= val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/0999/","title":"999. Available Captures for Rook","text":"Problem <p>On an <code>8 x 8</code> chessboard, there is exactly one white rook <code>'R'</code> and some number of white bishops <code>'B'</code>, black pawns <code>'p'</code>, and empty squares <code>'.'</code>.</p> <p>When the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. The number of available captures for the white rook is the number of pawns that the rook is attacking.</p> <p>Return the number of available captures for the white rook.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\nOutput: 3\nExplanation: In this example, the rook is attacking all the pawns.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\nOutput: 0\nExplanation: The bishops are blocking the rook from attacking any of the pawns.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\nOutput: 3\nExplanation: The rook is attacking the pawns at positions b5, d6, and f5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>board.length == 8</code></li> <li><code>board[i].length == 8</code></li> <li><code>board[i][j]</code> is either <code>'R'</code>, <code>'.'</code>, <code>'B'</code>, or <code>'p'</code></li> <li>There is exactly one cell with <code>board[i][j] == 'R'</code></li> </ul>"},{"location":"LeetCode_Problems/1000/","title":"1000. Minimum Cost to Merge Stones","text":"Problem <p>There are <code>n</code> piles of <code>stones</code> arranged in a row. The <code>i<sup>th</sup></code> pile has <code>stones[i]</code> stones.</p> <p>A move consists of merging exactly <code>k</code> consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these <code>k</code> piles.</p> <p>Return the minimum cost to merge all piles of stones into one pile. If it is impossible, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stones = [3,2,4,1], k = 2\nOutput: 20\nExplanation: We start with [3, 2, 4, 1].\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\nWe merge [5, 5] for a cost of 10, and we are left with [10].\nThe total cost was 20, and this is the minimum possible.\n</pre> <p>Example 2:</p> <pre>\nInput: stones = [3,2,4,1], k = 3\nOutput: -1\nExplanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.\n</pre> <p>Example 3:</p> <pre>\nInput: stones = [3,5,1,2,6], k = 3\nOutput: 25\nExplanation: We start with [3, 5, 1, 2, 6].\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\nThe total cost was 25, and this is the minimum possible.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == stones.length</code></li> <li><code>1 &lt;= n &lt;= 30</code></li> <li><code>1 &lt;= stones[i] &lt;= 100</code></li> <li><code>2 &lt;= k &lt;= 30</code></li> </ul>"},{"location":"LeetCode_Problems/1001/","title":"1001. Grid Illumination","text":"Problem <p>There is a 2D <code>grid</code> of size <code>n x n</code> where each cell of this grid has a lamp that is initially turned off.</p> <p>You are given a 2D array of lamp positions <code>lamps</code>, where <code>lamps[i] = [row<sub>i</sub>, col<sub>i</sub>]</code> indicates that the lamp at <code>grid[row<sub>i</sub>][col<sub>i</sub>]</code> is turned on. Even if the same lamp is listed more than once, it is turned on.</p> <p>When a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.</p> <p>You are also given another 2D array <code>queries</code>, where <code>queries[j] = [row<sub>j</sub>, col<sub>j</sub>]</code>. For the <code>j<sup>th</sup></code> query, determine whether <code>grid[row<sub>j</sub>][col<sub>j</sub>]</code> is illuminated or not. After answering the <code>j<sup>th</sup></code> query, turn off the lamp at <code>grid[row<sub>j</sub>][col<sub>j</sub>]</code> and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with <code>grid[row<sub>j</sub>][col<sub>j</sub>]</code>.</p> <p>Return an array of integers <code>ans</code>, where <code>ans[j]</code> should be <code>1</code> if the cell in the <code>j<sup>th</sup></code> query was illuminated, or <code>0</code> if the lamp was not.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]\nOutput: [1,0]\nExplanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].\nThe 0<sup>th</sup>\u00a0query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.\n\nThe 1<sup>st</sup>\u00a0query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.\n\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]\nOutput: [1,1]\n</pre> <p>Example 3:</p> <pre>\nInput: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]\nOutput: [1,1,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= lamps.length &lt;= 20000</code></li> <li><code>0 &lt;= queries.length &lt;= 20000</code></li> <li><code>lamps[i].length == 2</code></li> <li><code>0 &lt;= row<sub>i</sub>, col<sub>i</sub> &lt; n</code></li> <li><code>queries[j].length == 2</code></li> <li><code>0 &lt;= row<sub>j</sub>, col<sub>j</sub> &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/1002/","title":"1002. Find Common Characters","text":"Problem <p>Given a string array <code>words</code>, return an array of all characters that show up in all strings within the <code>words</code> (including duplicates). You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>Input: words = [\"bella\",\"label\",\"roller\"]\nOutput: [\"e\",\"l\",\"l\"]\n</pre> <p>Example 2:</p> <pre>Input: words = [\"cool\",\"lock\",\"cook\"]\nOutput: [\"c\",\"o\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 100</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1003/","title":"1003. Check If Word Is Valid After Substitutions","text":"Problem <p>Given a string <code>s</code>, determine if it is valid.</p> <p>A string <code>s</code> is valid if, starting with an empty string <code>t = \"\"</code>, you can transform <code>t</code> into <code>s</code> after performing the following operation any number of times:</p> <ul> <li>Insert string <code>\"abc\"</code> into any position in <code>t</code>. More formally, <code>t</code> becomes <code>t<sub>left</sub> + \"abc\" + t<sub>right</sub></code>, where <code>t == t<sub>left</sub> + t<sub>right</sub></code>. Note that <code>t<sub>left</sub></code> and <code>t<sub>right</sub></code> may be empty.</li> </ul> <p>Return <code>true</code> if <code>s</code> is a valid string, otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aabcbc\"\nOutput: true\nExplanation:\n\"\" -&gt; \"abc\" -&gt; \"aabcbc\"\nThus, \"aabcbc\" is valid.</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcabcababcc\"\nOutput: true\nExplanation:\n\"\" -&gt; \"abc\" -&gt; \"abcabc\" -&gt; \"abcabcabc\" -&gt; \"abcabcababcc\"\nThus, \"abcabcababcc\" is valid.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"abccba\"\nOutput: false\nExplanation: It is impossible to get \"abccba\" using the operation.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>s</code> consists of letters <code>'a'</code>, <code>'b'</code>, and <code>'c'</code></li> </ul>"},{"location":"LeetCode_Problems/1004/","title":"1004. Max Consecutive Ones III","text":"Problem <p>Given a binary array <code>nums</code> and an integer <code>k</code>, return the maximum number of consecutive <code>1</code>'s in the array if you can flip at most <code>k</code> <code>0</code>'s.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\nOutput: 6\nExplanation: [1,1,1,0,0,1,1,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\nOutput: 10\nExplanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>0 &lt;= k &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/1005/","title":"1005. Maximize Sum Of Array After K Negations","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, modify the array in the following way:</p> <ul> <li>choose an index <code>i</code> and replace <code>nums[i]</code> with <code>-nums[i]</code>.</li> </ul> <p>You should apply this process exactly <code>k</code> times. You may choose the same index <code>i</code> multiple times.</p> <p>Return the largest possible sum of the array after modifying it in this way.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,2,3], k = 1\nOutput: 5\nExplanation: Choose index 1 and nums becomes [4,-2,3].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,-1,0,2], k = 3\nOutput: 6\nExplanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,-3,-1,5,-4], k = 2\nOutput: 13\nExplanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1006/","title":"1006. Clumsy Factorial","text":"Problem <p>The factorial of a positive integer <code>n</code> is the product of all positive integers less than or equal to <code>n</code>.</p> <ul> <li>For example, <code>factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>.</li> </ul> <p>We make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply <code>'*'</code>, divide <code>'/'</code>, add <code>'+'</code>, and subtract <code>'-'</code> in this order.</p> <ul> <li>For example, <code>clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1</code>.</li> </ul> <p>However, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.</p> <p>Additionally, the division that we use is floor division such that <code>10 * 9 / 8 = 90 / 8 = 11</code>.</p> <p>Given an integer <code>n</code>, return the clumsy factorial of <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4\nOutput: 7\nExplanation: 7 = 4 * 3 / 2 + 1\n</pre> <p>Example 2:</p> <pre>\nInput: n = 10\nOutput: 12\nExplanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1007/","title":"1007. Minimum Domino Rotations For Equal Row","text":"Problem <p>In a row of dominoes, <code>tops[i]</code> and <code>bottoms[i]</code> represent the top and bottom halves of the <code>i<sup>th</sup></code> domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)</p> <p>We may rotate the <code>i<sup>th</sup></code> domino, so that <code>tops[i]</code> and <code>bottoms[i]</code> swap values.</p> <p>Return the minimum number of rotations so that all the values in <code>tops</code> are the same, or all the values in <code>bottoms</code> are the same.</p> <p>If it cannot be done, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]\nOutput: 2\nExplanation: \nThe first figure represents the dominoes as given by tops and bottoms: before we do any rotations.\nIf we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.\n</pre> <p>Example 2:</p> <pre>\nInput: tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]\nOutput: -1\nExplanation: \nIn this case, it is not possible to rotate the dominoes to make one row of values equal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= tops.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>bottoms.length == tops.length</code></li> <li><code>1 &lt;= tops[i], bottoms[i] &lt;= 6</code></li> </ul>"},{"location":"LeetCode_Problems/1008/","title":"1008. Construct Binary Search Tree from Preorder Traversal","text":"Problem <p>Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.</p> <p>It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.</p> <p>A binary search tree is a binary tree where for every node, any descendant of <code>Node.left</code> has a value strictly less than <code>Node.val</code>, and any descendant of <code>Node.right</code> has a value strictly greater than <code>Node.val</code>.</p> <p>A preorder traversal of a binary tree displays the value of the node first, then traverses <code>Node.left</code>, then traverses <code>Node.right</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: preorder = [8,5,1,7,10,12]\nOutput: [8,5,10,1,7,null,12]\n</pre> <p>Example 2:</p> <pre>\nInput: preorder = [1,3]\nOutput: [1,null,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= preorder.length &lt;= 100</code></li> <li><code>1 &lt;= preorder[i] &lt;= 1000</code></li> <li>All the values of <code>preorder</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/1009/","title":"1009. Complement of Base 10 Integer","text":"Problem <p>The complement of an integer is the integer you get when you flip all the <code>0</code>'s to <code>1</code>'s and all the <code>1</code>'s to <code>0</code>'s in its binary representation.</p> <ul> <li>For example, The integer <code>5</code> is <code>\"101\"</code> in binary and its complement is <code>\"010\"</code> which is the integer <code>2</code>.</li> </ul> <p>Given an integer <code>n</code>, return its complement.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt; 10<sup>9</sup></code></li> </ul> <p> </p> <p>Note: This question is the same as 476: https://leetcode.com/problems/number-complement/</p>"},{"location":"LeetCode_Problems/1010/","title":"1010. Pairs of Songs With Total Durations Divisible by 60","text":"Problem <p>You are given a list of songs where the <code>i<sup>th</sup></code> song has a duration of <code>time[i]</code> seconds.</p> <p>Return the number of pairs of songs for which their total duration in seconds is divisible by <code>60</code>. Formally, we want the number of indices <code>i</code>, <code>j</code> such that <code>i &lt; j</code> with <code>(time[i] + time[j]) % 60 == 0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: time = [30,20,150,100,40]\nOutput: 3\nExplanation: Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60\n</pre> <p>Example 2:</p> <pre>\nInput: time = [60,60,60]\nOutput: 3\nExplanation: All three pairs have a total duration of 120, which is divisible by 60.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= time.length &lt;= 6 * 10<sup>4</sup></code></li> <li><code>1 &lt;= time[i] &lt;= 500</code></li> </ul>"},{"location":"LeetCode_Problems/1011/","title":"1011. Capacity To Ship Packages Within D Days","text":"Problem <p>A conveyor belt has packages that must be shipped from one port to another within <code>days</code> days.</p> <p>The <code>i<sup>th</sup></code> package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p> <p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>days</code> days.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: weights = [1,2,3,4,5,6,7,8,9,10], days = 5\nOutput: 15\nExplanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n</pre> <p>Example 2:</p> <pre>\nInput: weights = [3,2,2,4,1,4], days = 3\nOutput: 6\nExplanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n</pre> <p>Example 3:</p> <pre>\nInput: weights = [1,2,3,1,1], days = 4\nOutput: 3\nExplanation:\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= days &lt;= weights.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= weights[i] &lt;= 500</code></li> </ul>"},{"location":"LeetCode_Problems/1012/","title":"1012. Numbers With Repeated Digits","text":"Problem <p>Given an integer <code>n</code>, return the number of positive integers in the range <code>[1, n]</code> that have at least one repeated digit.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 20\nOutput: 1\nExplanation: The only positive number (&lt;= 20) with at least 1 repeated digit is 11.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 100\nOutput: 10\nExplanation: The positive numbers (&lt;= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 1000\nOutput: 262\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1013/","title":"1013. Partition Array Into Three Parts With Equal Sum","text":"Problem <p>Given an array of integers <code>arr</code>, return <code>true</code> if we can partition the array into three non-empty parts with equal sums.</p> <p>Formally, we can partition the array if we can find indexes <code>i + 1 &lt; j</code> with <code>(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])</code></p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [0,2,1,-6,6,-7,9,1,2,0,1]\nOutput: true\nExplanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [0,2,1,-6,6,7,9,-1,2,0,1]\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [3,3,6,5,-2,2,5,1,-9,4]\nOutput: true\nExplanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= arr.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1014/","title":"1014. Best Sightseeing Pair","text":"Problem <p>You are given an integer array <code>values</code> where values[i] represents the value of the <code>i<sup>th</sup></code> sightseeing spot. Two sightseeing spots <code>i</code> and <code>j</code> have a distance <code>j - i</code> between them.</p> <p>The score of a pair (<code>i &lt; j</code>) of sightseeing spots is <code>values[i] + values[j] + i - j</code>: the sum of the values of the sightseeing spots, minus the distance between them.</p> <p>Return the maximum score of a pair of sightseeing spots.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: values = [8,1,5,2,6]\nOutput: 11\nExplanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11\n</pre> <p>Example 2:</p> <pre>\nInput: values = [1,2]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= values.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= values[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1015/","title":"1015. Smallest Integer Divisible by K","text":"Problem <p>Given a positive integer <code>k</code>, you need to find the length of the smallest positive integer <code>n</code> such that <code>n</code> is divisible by <code>k</code>, and <code>n</code> only contains the digit <code>1</code>.</p> <p>Return the length of <code>n</code>. If there is no such <code>n</code>, return -1.</p> <p>Note: <code>n</code> may not fit in a 64-bit signed integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: k = 1\nOutput: 1\nExplanation: The smallest answer is n = 1, which has length 1.\n</pre> <p>Example 2:</p> <pre>\nInput: k = 2\nOutput: -1\nExplanation: There is no such positive integer n divisible by 2.\n</pre> <p>Example 3:</p> <pre>\nInput: k = 3\nOutput: 3\nExplanation: The smallest answer is n = 111, which has length 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1016/","title":"1016. Binary String With Substrings Representing 1 To N","text":"Problem <p>Given a binary string <code>s</code> and a positive integer <code>n</code>, return <code>true</code> if the binary representation of all the integers in the range <code>[1, n]</code> are substrings of <code>s</code>, or <code>false</code> otherwise.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"0110\", n = 3\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: s = \"0110\", n = 4\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1017/","title":"1017. Convert to Base -2","text":"Problem <p>Given an integer <code>n</code>, return a binary string representing its representation in base <code>-2</code>.</p> <p>Note that the returned string should not have leading zeros unless the string is <code>\"0\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: \"110\"\nExplantion: (-2)<sup>2</sup> + (-2)<sup>1</sup> = 2\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3\nOutput: \"111\"\nExplantion: (-2)<sup>2</sup> + (-2)<sup>1</sup> + (-2)<sup>0</sup> = 3\n</pre> <p>Example 3:</p> <pre>\nInput: n = 4\nOutput: \"100\"\nExplantion: (-2)<sup>2</sup> = 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1018/","title":"1018. Binary Prefix Divisible By 5","text":"Problem <p>You are given a binary array <code>nums</code> (0-indexed).</p> <p>We define <code>x<sub>i</sub></code> as the number whose binary representation is the subarray <code>nums[0..i]</code> (from most-significant-bit to least-significant-bit).</p> <ul> <li>For example, if <code>nums = [1,0,1]</code>, then <code>x<sub>0</sub> = 1</code>, <code>x<sub>1</sub> = 2</code>, and <code>x<sub>2</sub> = 5</code>.</li> </ul> <p>Return an array of booleans <code>answer</code> where <code>answer[i]</code> is <code>true</code> if <code>x<sub>i</sub></code> is divisible by <code>5</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,1]\nOutput: [true,false,false]\nExplanation: The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.\nOnly the first number is divisible by 5, so answer[0] is true.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1]\nOutput: [false,false,false]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1019/","title":"1019. Next Greater Node In Linked List","text":"Problem <p>You are given the <code>head</code> of a linked list with <code>n</code> nodes.</p> <p>For each node in the list, find the value of the next greater node. That is, for each node, find the value of the first node that is next to it and has a strictly larger value than it.</p> <p>Return an integer array <code>answer</code> where <code>answer[i]</code> is the value of the next greater node of the <code>i<sup>th</sup></code> node (1-indexed). If the <code>i<sup>th</sup></code> node does not have a next greater node, set <code>answer[i] = 0</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [2,1,5]\nOutput: [5,5,0]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [2,7,4,3,5]\nOutput: [7,0,5,5,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is <code>n</code>.</li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= Node.val &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1020/","title":"1020. Number of Enclaves","text":"Problem <p>You are given an <code>m x n</code> binary matrix <code>grid</code>, where <code>0</code> represents a sea cell and <code>1</code> represents a land cell.</p> <p>A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the <code>grid</code>.</p> <p>Return the number of land cells in <code>grid</code> for which we cannot walk off the boundary of the grid in any number of moves.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\nOutput: 3\nExplanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\nOutput: 0\nExplanation: All 1s are either on the boundary or can reach the boundary.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 500</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1021/","title":"1021. Remove Outermost Parentheses","text":"Problem <p>A valid parentheses string is either empty <code>\"\"</code>, <code>\"(\" + A + \")\"</code>, or <code>A + B</code>, where <code>A</code> and <code>B</code> are valid parentheses strings, and <code>+</code> represents string concatenation.</p> <ul> <li>For example, <code>\"\"</code>, <code>\"()\"</code>, <code>\"(())()\"</code>, and <code>\"(()(()))\"</code> are all valid parentheses strings.</li> </ul> <p>A valid parentheses string <code>s</code> is primitive if it is nonempty, and there does not exist a way to split it into <code>s = A + B</code>, with <code>A</code> and <code>B</code> nonempty valid parentheses strings.</p> <p>Given a valid parentheses string <code>s</code>, consider its primitive decomposition: <code>s = P<sub>1</sub> + P<sub>2</sub> + ... + P<sub>k</sub></code>, where <code>P<sub>i</sub></code> are primitive valid parentheses strings.</p> <p>Return <code>s</code> after removing the outermost parentheses of every primitive string in the primitive decomposition of <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"(()())(())\"\nOutput: \"()()()\"\nExplanation: \nThe input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"(()())(())(()(()))\"\nOutput: \"()()()()(())\"\nExplanation: \nThe input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"()()\"\nOutput: \"\"\nExplanation: \nThe input string is \"()()\", with primitive decomposition \"()\" + \"()\".\nAfter removing outer parentheses of each part, this is \"\" + \"\" = \"\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'('</code> or <code>')'</code>.</li> <li><code>s</code> is a valid parentheses string.</li> </ul>"},{"location":"LeetCode_Problems/1022/","title":"1022. Sum of Root To Leaf Binary Numbers","text":"Problem <p>You are given the <code>root</code> of a binary tree where each node has a value <code>0</code> or <code>1</code>. Each root-to-leaf path represents a binary number starting with the most significant bit.</p> <ul> <li>For example, if the path is <code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>, then this could represent <code>01101</code> in binary, which is <code>13</code>.</li> </ul> <p>For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return the sum of these numbers.</p> <p>The test cases are generated so that the answer fits in a 32-bits integer.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,0,1,0,1,0,1]\nOutput: 22\nExplanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n</pre> <p>Example 2:</p> <pre>\nInput: root = [0]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>Node.val</code> is <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1023/","title":"1023. Camelcase Matching","text":"Problem <p>Given an array of strings <code>queries</code> and a string <code>pattern</code>, return a boolean array <code>answer</code> where <code>answer[i]</code> is <code>true</code> if <code>queries[i]</code> matches <code>pattern</code>, and <code>false</code> otherwise.</p> <p>A query word <code>queries[i]</code> matches <code>pattern</code> if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"\nOutput: [true,false,true,true,false]\nExplanation: \"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\".\n\"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\".\n\"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\".\n</pre> <p>Example 2:</p> <pre>\nInput: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"\nOutput: [true,false,true,false,false]\nExplanation: \"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\".\n\"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\".\n</pre> <p>Example 3:</p> <pre>\nInput: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"\nOutput: [false,true,false,false,false]\nExplanation: \"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= pattern.length, queries.length &lt;= 100</code></li> <li><code>1 &lt;= queries[i].length &lt;= 100</code></li> <li><code>queries[i]</code> and <code>pattern</code> consist of English letters.</li> </ul>"},{"location":"LeetCode_Problems/1024/","title":"1024. Video Stitching","text":"Problem <p>You are given a series of video clips from a sporting event that lasted <code>time</code> seconds. These video clips can be overlapping with each other and have varying lengths.</p> <p>Each video clip is described by an array <code>clips</code> where <code>clips[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> indicates that the ith clip started at <code>start<sub>i</sub></code> and ended at <code>end<sub>i</sub></code>.</p> <p>We can cut these clips into segments freely.</p> <ul> <li>For example, a clip <code>[0, 7]</code> can be cut into segments <code>[0, 1] + [1, 3] + [3, 7]</code>.</li> </ul> <p>Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event <code>[0, time]</code>. If the task is impossible, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\nOutput: 3\nExplanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].\n</pre> <p>Example 2:</p> <pre>\nInput: clips = [[0,1],[1,2]], time = 5\nOutput: -1\nExplanation: We cannot cover [0,5] with only [0,1] and [1,2].\n</pre> <p>Example 3:</p> <pre>\nInput: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9\nOutput: 3\nExplanation: We can take clips [0,4], [4,7], and [6,9].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= clips.length &lt;= 100</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 100</code></li> <li><code>1 &lt;= time &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1025/","title":"1025. Divisor Game","text":"Problem <p>Alice and Bob take turns playing a game, with Alice starting first.</p> <p>Initially, there is a number <code>n</code> on the chalkboard. On each player's turn, that player makes a move consisting of:</p> <ul> <li>Choosing any <code>x</code> with <code>0 &lt; x &lt; n</code> and <code>n % x == 0</code>.</li> <li>Replacing the number <code>n</code> on the chalkboard with <code>n - x</code>.</li> </ul> <p>Also, if a player cannot make a move, they lose the game.</p> <p>Return <code>true</code> if and only if Alice wins the game, assuming both players play optimally.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: true\nExplanation: Alice chooses 1, and Bob has no more moves.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3\nOutput: false\nExplanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1026/","title":"1026. Maximum Difference Between Node and Ancestor","text":"Problem <p>Given the <code>root</code> of a binary tree, find the maximum value <code>v</code> for which there exist different nodes <code>a</code> and <code>b</code> where <code>v = |a.val - b.val|</code> and <code>a</code> is an ancestor of <code>b</code>.</p> <p>A node <code>a</code> is an ancestor of <code>b</code> if either: any child of <code>a</code> is equal to <code>b</code>\u00a0or any child of <code>a</code> is an ancestor of <code>b</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [8,3,10,1,6,null,14,null,null,4,7,13]\nOutput: 7\nExplanation: We have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,null,2,null,0,3]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 5000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1027/","title":"1027. Longest Arithmetic Subsequence","text":"Problem <p>Given an array <code>nums</code> of integers, return the length of the longest arithmetic subsequence in <code>nums</code>.</p> <p>Note that:</p> <ul> <li>A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</li> <li>A sequence <code>seq</code> is arithmetic if <code>seq[i + 1] - seq[i]</code> are all the same value (for <code>0 &lt;= i &lt; seq.length - 1</code>).</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,6,9,12]\nOutput: 4\nExplanation:  The whole array is an arithmetic sequence with steps of length = 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [9,4,7,2,10]\nOutput: 3\nExplanation:  The longest arithmetic subsequence is [4,7,10].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [20,1,15,3,10,5,8]\nOutput: 4\nExplanation:  The longest arithmetic subsequence is [20,15,10,5].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 500</code></li> </ul>"},{"location":"LeetCode_Problems/1028/","title":"1028. Recover a Tree From Preorder Traversal","text":"Problem <p>We run a\u00a0preorder\u00a0depth-first search (DFS) on the <code>root</code> of a binary tree.</p> <p>At each node in this traversal, we output <code>D</code> dashes (where <code>D</code> is the depth of this node), then we output the value of this node.\u00a0 If the depth of a node is <code>D</code>, the depth of its immediate child is <code>D + 1</code>.\u00a0 The depth of the <code>root</code> node is <code>0</code>.</p> <p>If a node has only one child, that child is guaranteed to be the left child.</p> <p>Given the output <code>traversal</code> of this traversal, recover the tree and return its <code>root</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: traversal = \"1-2--3--4-5--6--7\"\nOutput: [1,2,5,3,4,6,7]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: traversal = \"1-2--3---4-5--6---7\"\nOutput: [1,2,5,3,null,6,null,4,null,7]\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: traversal = \"1-401--349---90--88\"\nOutput: [1,401,null,349,88,90]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the original tree is in the range <code>[1, 1000]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1029/","title":"1029. Two City Scheduling","text":"Problem <p>A company is planning to interview <code>2n</code> people. Given the array <code>costs</code> where <code>costs[i] = [aCost<sub>i</sub>, bCost<sub>i</sub>]</code>,\u00a0the cost of flying the <code>i<sup>th</sup></code> person to city <code>a</code> is <code>aCost<sub>i</sub></code>, and the cost of flying the <code>i<sup>th</sup></code> person to city <code>b</code> is <code>bCost<sub>i</sub></code>.</p> <p>Return the minimum cost to fly every person to a city such that exactly <code>n</code> people arrive in each city.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: costs = [[10,20],[30,200],[400,50],[30,20]]\nOutput: 110\nExplanation: \nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.\n</pre> <p>Example 2:</p> <pre>\nInput: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\nOutput: 1859\n</pre> <p>Example 3:</p> <pre>\nInput: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\nOutput: 3086\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 * n == costs.length</code></li> <li><code>2 &lt;= costs.length &lt;= 100</code></li> <li><code>costs.length</code> is even.</li> <li><code>1 &lt;= aCost<sub>i</sub>, bCost<sub>i</sub> &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1030/","title":"1030. Matrix Cells in Distance Order","text":"Problem <p>You are given four integers <code>row</code>, <code>cols</code>, <code>rCenter</code>, and <code>cCenter</code>. There is a <code>rows x cols</code> matrix and you are on the cell with the coordinates <code>(rCenter, cCenter)</code>.</p> <p>Return the coordinates of all cells in the matrix, sorted by their distance from <code>(rCenter, cCenter)</code> from the smallest distance to the largest distance. You may return the answer in any order that satisfies this condition.</p> <p>The distance between two cells <code>(r<sub>1</sub>, c<sub>1</sub>)</code> and <code>(r<sub>2</sub>, c<sub>2</sub>)</code> is <code>|r<sub>1</sub> - r<sub>2</sub>| + |c<sub>1</sub> - c<sub>2</sub>|</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rows = 1, cols = 2, rCenter = 0, cCenter = 0\nOutput: [[0,0],[0,1]]\nExplanation: The distances from (0, 0) to other cells are: [0,1]\n</pre> <p>Example 2:</p> <pre>\nInput: rows = 2, cols = 2, rCenter = 0, cCenter = 1\nOutput: [[0,1],[0,0],[1,1],[1,0]]\nExplanation: The distances from (0, 1) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.\n</pre> <p>Example 3:</p> <pre>\nInput: rows = 2, cols = 3, rCenter = 1, cCenter = 2\nOutput: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\nExplanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rows, cols &lt;= 100</code></li> <li><code>0 &lt;= rCenter &lt; rows</code></li> <li><code>0 &lt;= cCenter &lt; cols</code></li> </ul>"},{"location":"LeetCode_Problems/1031/","title":"1031. Maximum Sum of Two Non-Overlapping Subarrays","text":"Problem <p>Given an integer array <code>nums</code> and two integers <code>firstLen</code> and <code>secondLen</code>, return the maximum sum of elements in two non-overlapping subarrays with lengths <code>firstLen</code> and <code>secondLen</code>.</p> <p>The array with length <code>firstLen</code> could occur before or after the array with length <code>secondLen</code>, but they have to be non-overlapping.</p> <p>A subarray is a contiguous part of an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2\nOutput: 20\nExplanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2\nOutput: 29\nExplanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3\nOutput: 31\nExplanation: One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= firstLen, secondLen &lt;= 1000</code></li> <li><code>2 &lt;= firstLen + secondLen &lt;= 1000</code></li> <li><code>firstLen + secondLen &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1032/","title":"1032. Stream of Characters","text":"Problem <p>Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings <code>words</code>.</p> <p>For example, if <code>words = [\"abc\", \"xyz\"]</code>\u00a0and the stream added the four characters (one by one) <code>'a'</code>, <code>'x'</code>, <code>'y'</code>, and <code>'z'</code>, your algorithm should detect that the suffix <code>\"xyz\"</code> of the characters <code>\"axyz\"</code> matches <code>\"xyz\"</code> from <code>words</code>.</p> <p>Implement the <code>StreamChecker</code> class:</p> <ul> <li><code>StreamChecker(String[] words)</code> Initializes the object with the strings array <code>words</code>.</li> <li><code>boolean query(char letter)</code> Accepts a new character from the stream and returns <code>true</code> if any non-empty suffix from the stream forms a word that is in <code>words</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"StreamChecker\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\"]\n[[[\"cd\", \"f\", \"kl\"]], [\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"e\"], [\"f\"], [\"g\"], [\"h\"], [\"i\"], [\"j\"], [\"k\"], [\"l\"]]\nOutput\n[null, false, false, false, true, false, true, false, false, false, false, false, true]\n\nExplanation\nStreamChecker streamChecker = new StreamChecker([\"cd\", \"f\", \"kl\"]);\nstreamChecker.query(\"a\"); // return False\nstreamChecker.query(\"b\"); // return False\nstreamChecker.query(\"c\"); // return False\nstreamChecker.query(\"d\"); // return True, because 'cd' is in the wordlist\nstreamChecker.query(\"e\"); // return False\nstreamChecker.query(\"f\"); // return True, because 'f' is in the wordlist\nstreamChecker.query(\"g\"); // return False\nstreamChecker.query(\"h\"); // return False\nstreamChecker.query(\"i\"); // return False\nstreamChecker.query(\"j\"); // return False\nstreamChecker.query(\"k\"); // return False\nstreamChecker.query(\"l\"); // return True, because 'kl' is in the wordlist\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 2000</code></li> <li><code>1 &lt;= words[i].length &lt;= 200</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> <li><code>letter</code> is a lowercase English letter.</li> <li>At most <code>4 * 10<sup>4</sup></code> calls will be made to query.</li> </ul>"},{"location":"LeetCode_Problems/1033/","title":"1033. Moving Stones Until Consecutive","text":"Problem <p>There are three stones in different positions on the X-axis. You are given three integers <code>a</code>, <code>b</code>, and <code>c</code>, the positions of the stones.</p> <p>In one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions <code>x</code>, <code>y</code>, and <code>z</code> with <code>x &lt; y &lt; z</code>. You pick up the stone at either position <code>x</code> or position <code>z</code>, and move that stone to an integer position <code>k</code>, with <code>x &lt; k &lt; z</code> and <code>k != y</code>.</p> <p>The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).</p> <p>Return an integer array <code>answer</code> of length <code>2</code> where:</p> <ul> <li><code>answer[0]</code> is the minimum number of moves you can play, and</li> <li><code>answer[1]</code> is the maximum number of moves you can play.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: a = 1, b = 2, c = 5\nOutput: [1,2]\nExplanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.\n</pre> <p>Example 2:</p> <pre>\nInput: a = 4, b = 3, c = 2\nOutput: [0,0]\nExplanation: We cannot make any moves.\n</pre> <p>Example 3:</p> <pre>\nInput: a = 3, b = 5, c = 1\nOutput: [1,2]\nExplanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a, b, c &lt;= 100</code></li> <li><code>a</code>, <code>b</code>, and <code>c</code> have different values.</li> </ul>"},{"location":"LeetCode_Problems/1034/","title":"1034. Coloring A Border","text":"Problem <p>You are given an <code>m x n</code> integer matrix <code>grid</code>, and three integers <code>row</code>, <code>col</code>, and <code>color</code>. Each value in the grid represents the color of the grid square at that location.</p> <p>Two squares are called adjacent if they are next to each other in any of the 4 directions.</p> <p>Two squares belong to the same connected component if they have the same color and they are adjacent.</p> <p>The border of a connected component is all the squares in the connected component that are either adjacent to (at least) a square not in the component, or on the boundary of the grid (the first or last row or column).</p> <p>You should color the border of the connected component that contains the square <code>grid[row][col]</code> with <code>color</code>.</p> <p>Return the final grid.</p> <p> </p> <p>Example 1:</p> <pre>Input: grid = [[1,1],[1,2]], row = 0, col = 0, color = 3\nOutput: [[3,3],[3,2]]\n</pre> <p>Example 2:</p> <pre>Input: grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3\nOutput: [[1,3,3],[2,3,3]]\n</pre> <p>Example 3:</p> <pre>Input: grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2\nOutput: [[2,2,2],[2,1,2],[2,2,2]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>1 &lt;= grid[i][j], color &lt;= 1000</code></li> <li><code>0 &lt;= row &lt; m</code></li> <li><code>0 &lt;= col &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/1035/","title":"1035. Uncrossed Lines","text":"Problem <p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>. We write the integers of <code>nums1</code> and <code>nums2</code> (in the order they are given) on two separate horizontal lines.</p> <p>We may draw connecting lines: a straight line connecting two numbers <code>nums1[i]</code> and <code>nums2[j]</code> such that:</p> <ul> <li><code>nums1[i] == nums2[j]</code>, and</li> <li>the line we draw does not intersect any other connecting (non-horizontal) line.</li> </ul> <p>Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).</p> <p>Return the maximum number of connecting lines we can draw in this way.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums1 = [1,4,2], nums2 = [1,2,4]\nOutput: 2\nExplanation: We can draw 2 uncrossed lines as in the diagram.\nWe cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]\nOutput: 3\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 500</code></li> <li><code>1 &lt;= nums1[i], nums2[j] &lt;= 2000</code></li> </ul>"},{"location":"LeetCode_Problems/1036/","title":"1036. Escape a Large Maze","text":"Problem <p>There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are <code>(x, y)</code>.</p> <p>We start at the <code>source = [s<sub>x</sub>, s<sub>y</sub>]</code> square and want to reach the <code>target = [t<sub>x</sub>, t<sub>y</sub>]</code> square. There is also an array of <code>blocked</code> squares, where each <code>blocked[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a blocked square with coordinates <code>(x<sub>i</sub>, y<sub>i</sub>)</code>.</p> <p>Each move, we can walk one square north, east, south, or west if the square is not in the array of <code>blocked</code> squares. We are also not allowed to walk outside of the grid.</p> <p>Return <code>true</code> if and only if it is possible to reach the <code>target</code> square from the <code>source</code> square through a sequence of valid moves.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\nOutput: false\nExplanation: The target square is inaccessible starting from the source square because we cannot move.\nWe cannot move north or east because those squares are blocked.\nWe cannot move south or west because we cannot go outside of the grid.\n</pre> <p>Example 2:</p> <pre>\nInput: blocked = [], source = [0,0], target = [999999,999999]\nOutput: true\nExplanation: Because there are no blocked cells, it is possible to reach the target square.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= blocked.length &lt;= 200</code></li> <li><code>blocked[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt; 10<sup>6</sup></code></li> <li><code>source.length == target.length == 2</code></li> <li><code>0 &lt;= s<sub>x</sub>, s<sub>y</sub>, t<sub>x</sub>, t<sub>y</sub> &lt; 10<sup>6</sup></code></li> <li><code>source != target</code></li> <li>It is guaranteed that <code>source</code> and <code>target</code> are not blocked.</li> </ul>"},{"location":"LeetCode_Problems/1037/","title":"1037. Valid Boomerang","text":"Problem <p>Given an array <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the X-Y plane, return <code>true</code> if these points are a boomerang.</p> <p>A boomerang is a set of three points that are all distinct and not in a straight line.</p> <p> </p> <p>Example 1:</p> <pre>Input: points = [[1,1],[2,3],[3,2]]\nOutput: true\n</pre> <p>Example 2:</p> <pre>Input: points = [[1,1],[2,2],[3,3]]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>points.length == 3</code></li> <li><code>points[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1038/","title":"1038. Binary Search Tree to Greater Sum Tree","text":"Problem <p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.</p> <p>As a reminder, a binary search tree is a tree that satisfies these constraints:</p> <ul> <li>The left subtree of a node contains only nodes with keys less than the node's key.</li> <li>The right subtree of a node contains only nodes with keys greater than the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</pre> <p>Example 2:</p> <pre>\nInput: root = [0,null,1]\nOutput: [1,null,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> <li>All the values in the tree are unique.</li> </ul> <p> </p> <p>Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/</p>"},{"location":"LeetCode_Problems/1039/","title":"1039. Minimum Score Triangulation of Polygon","text":"Problem <p>You have a convex <code>n</code>-sided polygon where each vertex has an integer value. You are given an integer array <code>values</code> where <code>values[i]</code> is the value of the <code>i<sup>th</sup></code> vertex (i.e., clockwise order).</p> <p>You will triangulate the polygon into <code>n - 2</code> triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all <code>n - 2</code> triangles in the triangulation.</p> <p>Return the smallest possible total score that you can achieve with some triangulation of the polygon.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: values = [1,2,3]\nOutput: 6\nExplanation: The polygon is already triangulated, and the score of the only triangle is 6.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: values = [3,7,4,5]\nOutput: 144\nExplanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.\nThe minimum score is 144.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: values = [1,3,1,4,1,5]\nOutput: 13\nExplanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == values.length</code></li> <li><code>3 &lt;= n &lt;= 50</code></li> <li><code>1 &lt;= values[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1040/","title":"1040. Moving Stones Until Consecutive II","text":"Problem <p>There are some stones in different positions on the X-axis. You are given an integer array <code>stones</code>, the positions of the stones.</p> <p>Call a stone an endpoint stone if it has the smallest or largest position. In one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.</p> <ul> <li>In particular, if the stones are at say, <code>stones = [1,2,5]</code>, you cannot move the endpoint stone at position <code>5</code>, since moving it to any position (such as <code>0</code>, or <code>3</code>) will still keep that stone as an endpoint stone.</li> </ul> <p>The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).</p> <p>Return an integer array <code>answer</code> of length <code>2</code> where:</p> <ul> <li><code>answer[0]</code> is the minimum number of moves you can play, and</li> <li><code>answer[1]</code> is the maximum number of moves you can play.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: stones = [7,4,9]\nOutput: [1,2]\nExplanation: We can move 4 -&gt; 8 for one move to finish the game.\nOr, we can move 9 -&gt; 5, 4 -&gt; 6 for two moves to finish the game.\n</pre> <p>Example 2:</p> <pre>\nInput: stones = [6,5,4,3,10]\nOutput: [2,3]\nExplanation: We can move 3 -&gt; 8 then 10 -&gt; 7 to finish the game.\nOr, we can move 3 -&gt; 7, 4 -&gt; 8, 5 -&gt; 9 to finish the game.\nNotice we cannot move 10 -&gt; 2 to finish the game, because that would be an illegal move.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= stones.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= stones[i] &lt;= 10<sup>9</sup></code></li> <li>All the values of <code>stones</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/1041/","title":"1041. Robot Bounded In Circle","text":"Problem <p>On an infinite plane, a robot initially stands at <code>(0, 0)</code> and faces north. Note that:</p> <ul> <li>The north direction is the positive direction of the y-axis.</li> <li>The south direction is the negative direction of the y-axis.</li> <li>The east direction is the positive direction of the x-axis.</li> <li>The west direction is the negative direction of the x-axis.</li> </ul> <p>The robot can receive one of three instructions:</p> <ul> <li><code>\"G\"</code>: go straight 1 unit.</li> <li><code>\"L\"</code>: turn 90 degrees to the left (i.e., anti-clockwise direction).</li> <li><code>\"R\"</code>: turn 90 degrees to the right (i.e., clockwise direction).</li> </ul> <p>The robot performs the <code>instructions</code> given in order, and repeats them forever.</p> <p>Return <code>true</code> if and only if there exists a circle in the plane such that the robot never leaves the circle.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: instructions = \"GGLLGG\"\nOutput: true\nExplanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.\n\"G\": move one step. Position: (0, 1). Direction: South.\n\"G\": move one step. Position: (0, 0). Direction: South.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --&gt; (0, 1) --&gt; (0, 2) --&gt; (0, 1) --&gt; (0, 0).\nBased on that, we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: instructions = \"GG\"\nOutput: false\nExplanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\nRepeating the instructions, keeps advancing in the north direction and does not go into cycles.\nBased on that, we return false.\n</pre> <p>Example 3:</p> <pre>\nInput: instructions = \"GL\"\nOutput: true\nExplanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.\n\"G\": move one step. Position: (-1, 1). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.\n\"G\": move one step. Position: (-1, 0). Direction: South.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.\n\"G\": move one step. Position: (0, 0). Direction: East.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --&gt; (0, 1) --&gt; (-1, 1) --&gt; (-1, 0) --&gt; (0, 0).\nBased on that, we return true.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= instructions.length &lt;= 100</code></li> <li><code>instructions[i]</code> is <code>'G'</code>, <code>'L'</code> or, <code>'R'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1042/","title":"1042. Flower Planting With No Adjacent","text":"Problem <p>You have <code>n</code> gardens, labeled from <code>1</code> to <code>n</code>, and an array <code>paths</code> where <code>paths[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> describes a bidirectional path between garden <code>x<sub>i</sub></code> to garden <code>y<sub>i</sub></code>. In each garden, you want to plant one of 4 types of flowers.</p> <p>All gardens have at most 3 paths coming into or leaving it.</p> <p>Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.</p> <p>Return any such a choice as an array <code>answer</code>, where <code>answer[i]</code> is the type of flower planted in the <code>(i+1)<sup>th</sup></code> garden. The flower types are denoted <code>1</code>, <code>2</code>, <code>3</code>, or <code>4</code>. It is guaranteed an answer exists.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, paths = [[1,2],[2,3],[3,1]]\nOutput: [1,2,3]\nExplanation:\nGardens 1 and 2 have different types.\nGardens 2 and 3 have different types.\nGardens 3 and 1 have different types.\nHence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4, paths = [[1,2],[3,4]]\nOutput: [1,2,1,2]\n</pre> <p>Example 3:</p> <pre>\nInput: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]\nOutput: [1,2,3,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= paths.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>paths[i].length == 2</code></li> <li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n</code></li> <li><code>x<sub>i</sub> != y<sub>i</sub></code></li> <li>Every garden has at most 3 paths coming into or leaving it.</li> </ul>"},{"location":"LeetCode_Problems/1043/","title":"1043. Partition Array for Maximum Sum","text":"Problem <p>Given an integer array <code>arr</code>, partition the array into (contiguous) subarrays of length at most <code>k</code>. After partitioning, each subarray has their values changed to become the maximum value of that subarray.</p> <p>Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,15,7,9,2,5,10], k = 3\nOutput: 84\nExplanation: arr becomes [15,15,15,9,10,10,10]\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\nOutput: 83\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [1], k = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 500</code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= arr.length</code></li> </ul>"},{"location":"LeetCode_Problems/1044/","title":"1044. Longest Duplicate Substring","text":"Problem <p>Given a string <code>s</code>, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times.\u00a0The occurrences\u00a0may overlap.</p> <p>Return any duplicated\u00a0substring that has the longest possible length.\u00a0If <code>s</code> does not have a duplicated substring, the answer is <code>\"\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: s = \"banana\"\nOutput: \"ana\"\n</pre> <p>Example 2:</p> <pre>Input: s = \"abcd\"\nOutput: \"\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1045/","title":"1045. Customers Who Bought All Products","text":"Problem <p>Table: <code>Customer</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| customer_id | int     |\n| product_key | int     |\n+-------------+---------+\nThis table may contain duplicates rows. \n<code>customer_id</code> is not NULL<code>.</code>\nproduct_key is a foreign key (reference column) to <code>Product</code> table.\n</pre> <p> </p> <p>Table: <code>Product</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_key | int     |\n+-------------+---------+\nproduct_key is the primary key (column with unique values) for this table.\n</pre> <p> </p> <p>Write a solution to report the customer ids from the <code>Customer</code> table that bought all the products in the <code>Product</code> table.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nCustomer table:\n+-------------+-------------+\n| customer_id | product_key |\n+-------------+-------------+\n| 1           | 5           |\n| 2           | 6           |\n| 3           | 5           |\n| 3           | 6           |\n| 1           | 6           |\n+-------------+-------------+\nProduct table:\n+-------------+\n| product_key |\n+-------------+\n| 5           |\n| 6           |\n+-------------+\nOutput: \n+-------------+\n| customer_id |\n+-------------+\n| 1           |\n| 3           |\n+-------------+\nExplanation: \nThe customers who bought all the products (5 and 6) are customers with IDs 1 and 3.\n</pre>"},{"location":"LeetCode_Problems/1046/","title":"1046. Last Stone Weight","text":"Problem <p>You are given an array of integers <code>stones</code> where <code>stones[i]</code> is the weight of the <code>i<sup>th</sup></code> stone.</p> <p>We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The result of this smash is:</p> <ul> <li>If <code>x == y</code>, both stones are destroyed, and</li> <li>If <code>x != y</code>, the stone of weight <code>x</code> is destroyed, and the stone of weight <code>y</code> has new weight <code>y - x</code>.</li> </ul> <p>At the end of the game, there is at most one stone left.</p> <p>Return the weight of the last remaining stone. If there are no stones left, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stones = [2,7,4,1,8,1]\nOutput: 1\nExplanation: \nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.\n</pre> <p>Example 2:</p> <pre>\nInput: stones = [1]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= stones.length &lt;= 30</code></li> <li><code>1 &lt;= stones[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1047/","title":"1047. Remove All Adjacent Duplicates In String","text":"Problem <p>You are given a string <code>s</code> consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.</p> <p>We repeatedly make duplicate removals on <code>s</code> until we no longer can.</p> <p>Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abbaca\"\nOutput: \"ca\"\nExplanation: \nFor example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"azxxzy\"\nOutput: \"ay\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1048/","title":"1048. Longest String Chain","text":"Problem <p>You are given an array of <code>words</code> where each word consists of lowercase English letters.</p> <p><code>word<sub>A</sub></code> is a predecessor of <code>word<sub>B</sub></code> if and only if we can insert exactly one letter anywhere in <code>word<sub>A</sub></code> without changing the order of the other characters to make it equal to <code>word<sub>B</sub></code>.</p> <ul> <li>For example, <code>\"abc\"</code> is a predecessor of <code>\"abac\"</code>, while <code>\"cba\"</code> is not a predecessor of <code>\"bcad\"</code>.</li> </ul> <p>A word chain is a sequence of words <code>[word<sub>1</sub>, word<sub>2</sub>, ..., word<sub>k</sub>]</code> with <code>k &gt;= 1</code>, where <code>word<sub>1</sub></code> is a predecessor of <code>word<sub>2</sub></code>, <code>word<sub>2</sub></code> is a predecessor of <code>word<sub>3</sub></code>, and so on. A single word is trivially a word chain with <code>k == 1</code>.</p> <p>Return the length of the longest possible word chain with words chosen from the given list of <code>words</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]\nOutput: 4\nExplanation: One of the longest word chains is [\"a\",\"ba\",\"bda\",\"bdca\"].\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]\nOutput: 5\nExplanation: All the words can be put in a word chain [\"xb\", \"xbc\", \"cxbc\", \"pcxbc\", \"pcxbcf\"].\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"abcd\",\"dbqca\"]\nOutput: 1\nExplanation: The trivial word chain [\"abcd\"] is one of the longest word chains.\n[\"abcd\",\"dbqca\"] is not a valid word chain because the ordering of the letters is changed.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 16</code></li> <li><code>words[i]</code> only consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1049/","title":"1049. Last Stone Weight II","text":"Problem <p>You are given an array of integers <code>stones</code> where <code>stones[i]</code> is the weight of the <code>i<sup>th</sup></code> stone.</p> <p>We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The result of this smash is:</p> <ul> <li>If <code>x == y</code>, both stones are destroyed, and</li> <li>If <code>x != y</code>, the stone of weight <code>x</code> is destroyed, and the stone of weight <code>y</code> has new weight <code>y - x</code>.</li> </ul> <p>At the end of the game, there is at most one stone left.</p> <p>Return the smallest possible weight of the left stone. If there are no stones left, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stones = [2,7,4,1,8,1]\nOutput: 1\nExplanation:\nWe can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,\nwe can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,\nwe can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,\nwe can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.\n</pre> <p>Example 2:</p> <pre>\nInput: stones = [31,26,33,21,40]\nOutput: 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= stones.length &lt;= 30</code></li> <li><code>1 &lt;= stones[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1050/","title":"1050. Actors and Directors Who Cooperated At Least Three Times","text":"Problem <p>Table: <code>ActorDirector</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| actor_id    | int     |\n| director_id | int     |\n| timestamp   | int     |\n+-------------+---------+\ntimestamp is the primary key (column with unique values) for this table.\n</pre> <p> </p> <p>Write a solution to find all the pairs <code>(actor_id, director_id)</code> where the actor has cooperated with the director at least three times.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nActorDirector table:\n+-------------+-------------+-------------+\n| actor_id    | director_id | timestamp   |\n+-------------+-------------+-------------+\n| 1           | 1           | 0           |\n| 1           | 1           | 1           |\n| 1           | 1           | 2           |\n| 1           | 2           | 3           |\n| 1           | 2           | 4           |\n| 2           | 1           | 5           |\n| 2           | 1           | 6           |\n+-------------+-------------+-------------+\nOutput: \n+-------------+-------------+\n| actor_id    | director_id |\n+-------------+-------------+\n| 1           | 1           |\n+-------------+-------------+\nExplanation: The only pair is (1, 1) where they cooperated exactly 3 times.\n</pre>"},{"location":"LeetCode_Problems/1051/","title":"1051. Height Checker","text":"Problem <p>A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array <code>expected</code> where <code>expected[i]</code> is the expected height of the <code>i<sup>th</sup></code> student in line.</p> <p>You are given an integer array <code>heights</code> representing the current order that the students are standing in. Each <code>heights[i]</code> is the height of the <code>i<sup>th</sup></code> student in line (0-indexed).</p> <p>Return the number of indices where <code>heights[i] != expected[i]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: heights = [1,1,4,2,1,3]\nOutput: 3\nExplanation: \nheights:  [1,1,4,2,1,3]\nexpected: [1,1,1,2,3,4]\nIndices 2, 4, and 5 do not match.\n</pre> <p>Example 2:</p> <pre>\nInput: heights = [5,1,2,3,4]\nOutput: 5\nExplanation:\nheights:  [5,1,2,3,4]\nexpected: [1,2,3,4,5]\nAll indices do not match.\n</pre> <p>Example 3:</p> <pre>\nInput: heights = [1,2,3,4,5]\nOutput: 0\nExplanation:\nheights:  [1,2,3,4,5]\nexpected: [1,2,3,4,5]\nAll indices match.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= heights.length &lt;= 100</code></li> <li><code>1 &lt;= heights[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1052/","title":"1052. Grumpy Bookstore Owner","text":"Problem <p>There is a bookstore owner that has a store open for <code>n</code> minutes. Every minute, some number of customers enter the store. You are given an integer array <code>customers</code> of length <code>n</code> where <code>customers[i]</code> is the number of the customer that enters the store at the start of the <code>i<sup>th</sup></code> minute and all those customers leave after the end of that minute.</p> <p>On some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where <code>grumpy[i]</code> is <code>1</code> if the bookstore owner is grumpy during the <code>i<sup>th</sup></code> minute, and is <code>0</code> otherwise.</p> <p>When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.</p> <p>The bookstore owner knows a secret technique to keep themselves not grumpy for <code>minutes</code> consecutive minutes, but can only use it once.</p> <p>Return the maximum number of customers that can be satisfied throughout the day.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. \nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n</pre> <p>Example 2:</p> <pre>\nInput: customers = [1], grumpy = [0], minutes = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == customers.length == grumpy.length</code></li> <li><code>1 &lt;= minutes &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= customers[i] &lt;= 1000</code></li> <li><code>grumpy[i]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1053/","title":"1053. Previous Permutation With One Swap","text":"Problem <p>Given an array of positive integers <code>arr</code> (not necessarily distinct), return the lexicographically largest permutation that is smaller than <code>arr</code>, that can be made with exactly one swap. If it cannot be done, then return the same array.</p> <p>Note that a swap exchanges the positions of two numbers <code>arr[i]</code> and <code>arr[j]</code></p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [3,2,1]\nOutput: [3,1,2]\nExplanation: Swapping 2 and 1.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,1,5]\nOutput: [1,1,5]\nExplanation: This is already the smallest permutation.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [1,9,4,6,7]\nOutput: [1,7,4,6,9]\nExplanation: Swapping 9 and 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1054/","title":"1054. Distant Barcodes","text":"Problem <p>In a warehouse, there is a row of barcodes, where the <code>i<sup>th</sup></code> barcode is <code>barcodes[i]</code>.</p> <p>Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.</p> <p> </p> <p>Example 1:</p> <pre>Input: barcodes = [1,1,1,2,2,2]\nOutput: [2,1,2,1,2,1]\n</pre> <p>Example 2:</p> <pre>Input: barcodes = [1,1,1,1,2,2,3,3]\nOutput: [1,3,1,3,1,2,1,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= barcodes.length &lt;= 10000</code></li> <li><code>1 &lt;= barcodes[i] &lt;= 10000</code></li> </ul>"},{"location":"LeetCode_Problems/1055/","title":"1055. Shortest Way to Form String","text":"Problem"},{"location":"LeetCode_Problems/1056/","title":"1056. Confusing Number","text":"Problem"},{"location":"LeetCode_Problems/1057/","title":"1057. Campus Bikes","text":"Problem"},{"location":"LeetCode_Problems/1058/","title":"1058. Minimize Rounding Error to Meet Target","text":"Problem"},{"location":"LeetCode_Problems/1059/","title":"1059. All Paths from Source Lead to Destination","text":"Problem"},{"location":"LeetCode_Problems/1060/","title":"1060. Missing Element in Sorted Array","text":"Problem"},{"location":"LeetCode_Problems/1061/","title":"1061. Lexicographically Smallest Equivalent String","text":"Problem <p>You are given two strings of the same length <code>s1</code> and <code>s2</code> and a string <code>baseStr</code>.</p> <p>We say <code>s1[i]</code> and <code>s2[i]</code> are equivalent characters.</p> <ul> <li>For example, if <code>s1 = \"abc\"</code> and <code>s2 = \"cde\"</code>, then we have <code>'a' == 'c'</code>, <code>'b' == 'd'</code>, and <code>'c' == 'e'</code>.</li> </ul> <p>Equivalent characters follow the usual rules of any equivalence relation:</p> <ul> <li>Reflexivity: <code>'a' == 'a'</code>.</li> <li>Symmetry: <code>'a' == 'b'</code> implies <code>'b' == 'a'</code>.</li> <li>Transitivity: <code>'a' == 'b'</code> and <code>'b' == 'c'</code> implies <code>'a' == 'c'</code>.</li> </ul> <p>For example, given the equivalency information from <code>s1 = \"abc\"</code> and <code>s2 = \"cde\"</code>, <code>\"acd\"</code> and <code>\"aab\"</code> are equivalent strings of <code>baseStr = \"eed\"</code>, and <code>\"aab\"</code> is the lexicographically smallest equivalent string of <code>baseStr</code>.</p> <p>Return the lexicographically smallest equivalent string of <code>baseStr</code> by using the equivalency information from <code>s1</code> and <code>s2</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"parker\", s2 = \"morris\", baseStr = \"parser\"\nOutput: \"makkek\"\nExplanation: Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].\nThe characters in each group are equivalent and sorted in lexicographical order.\nSo the answer is \"makkek\".\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"hello\", s2 = \"world\", baseStr = \"hold\"\nOutput: \"hdld\"\nExplanation: Based on the equivalency information in s1 and s2, we can group their characters as [h,w], [d,e,o], [l,r].\nSo only the second letter 'o' in baseStr is changed to 'd', the answer is \"hdld\".\n</pre> <p>Example 3:</p> <pre>\nInput: s1 = \"leetcode\", s2 = \"programs\", baseStr = \"sourcecode\"\nOutput: \"aauaaaaada\"\nExplanation: We group the equivalent characters in s1 and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in baseStr except 'u' and 'd' are transformed to 'a', the answer is \"aauaaaaada\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length, baseStr &lt;= 1000</code></li> <li><code>s1.length == s2.length</code></li> <li><code>s1</code>, <code>s2</code>, and <code>baseStr</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1062/","title":"1062. Longest Repeating Substring","text":"Problem"},{"location":"LeetCode_Problems/1063/","title":"1063. Number of Valid Subarrays","text":"Problem"},{"location":"LeetCode_Problems/1064/","title":"1064. Fixed Point","text":"Problem"},{"location":"LeetCode_Problems/1065/","title":"1065. Index Pairs of a String","text":"Problem"},{"location":"LeetCode_Problems/1066/","title":"1066. Campus Bikes II","text":"Problem"},{"location":"LeetCode_Problems/1067/","title":"1067. Digit Count in Range","text":"Problem"},{"location":"LeetCode_Problems/1068/","title":"1068. Product Sales Analysis I","text":"Problem <p>Table: <code>Sales</code></p> <pre>\n+-------------+-------+\n| Column Name | Type  |\n+-------------+-------+\n| sale_id     | int   |\n| product_id  | int   |\n| year        | int   |\n| quantity    | int   |\n| price       | int   |\n+-------------+-------+\n(sale_id, year) is the primary key (combination of columns with unique values) of this table.\nproduct_id is a foreign key (reference column) to <code>Product</code> table.\nEach row of this table shows a sale on the product product_id in a certain year.\nNote that the price is per unit.\n</pre> <p> </p> <p>Table: <code>Product</code></p> <pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| product_id   | int     |\n| product_name | varchar |\n+--------------+---------+\nproduct_id is the primary key (column with unique values) of this table.\nEach row of this table indicates the product name of each product.\n</pre> <p> </p> <p>Write a solution to report the <code>product_name</code>, <code>year</code>, and <code>price</code> for each <code>sale_id</code> in the <code>Sales</code> table.</p> <p>Return the resulting table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nSales table:\n+---------+------------+------+----------+-------+\n| sale_id | product_id | year | quantity | price |\n+---------+------------+------+----------+-------+ \n| 1       | 100        | 2008 | 10       | 5000  |\n| 2       | 100        | 2009 | 12       | 5000  |\n| 7       | 200        | 2011 | 15       | 9000  |\n+---------+------------+------+----------+-------+\nProduct table:\n+------------+--------------+\n| product_id | product_name |\n+------------+--------------+\n| 100        | Nokia        |\n| 200        | Apple        |\n| 300        | Samsung      |\n+------------+--------------+\nOutput: \n+--------------+-------+-------+\n| product_name | year  | price |\n+--------------+-------+-------+\n| Nokia        | 2008  | 5000  |\n| Nokia        | 2009  | 5000  |\n| Apple        | 2011  | 9000  |\n+--------------+-------+-------+\nExplanation: \nFrom sale_id = 1, we can conclude that Nokia was sold for 5000 in the year 2008.\nFrom sale_id = 2, we can conclude that Nokia was sold for 5000 in the year 2009.\nFrom sale_id = 7, we can conclude that Apple was sold for 9000 in the year 2011.\n</pre>"},{"location":"LeetCode_Problems/1069/","title":"1069. Product Sales Analysis II","text":"Problem"},{"location":"LeetCode_Problems/1070/","title":"1070. Product Sales Analysis III","text":"Problem <p>Table: <code>Sales</code></p> <pre>\n+-------------+-------+\n| Column Name | Type  |\n+-------------+-------+\n| sale_id     | int   |\n| product_id  | int   |\n| year        | int   |\n| quantity    | int   |\n| price       | int   |\n+-------------+-------+\n(sale_id, year) is the primary key (combination of columns with unique values) of this table.\nproduct_id is a foreign key (reference column) to <code>Product</code> table.\nEach row of this table shows a sale on the product product_id in a certain year.\nNote that the price is per unit.\n</pre> <p> </p> <p>Table: <code>Product</code></p> <pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| product_id   | int     |\n| product_name | varchar |\n+--------------+---------+\nproduct_id is the primary key (column with unique values) of this table.\nEach row of this table indicates the product name of each product.\n</pre> <p> </p> <p>Write a solution to select\u00a0the product id, year, quantity, and price for the first year of every product sold.</p> <p>Return the resulting table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nSales table:\n+---------+------------+------+----------+-------+\n| sale_id | product_id | year | quantity | price |\n+---------+------------+------+----------+-------+ \n| 1       | 100        | 2008 | 10       | 5000  |\n| 2       | 100        | 2009 | 12       | 5000  |\n| 7       | 200        | 2011 | 15       | 9000  |\n+---------+------------+------+----------+-------+\nProduct table:\n+------------+--------------+\n| product_id | product_name |\n+------------+--------------+\n| 100        | Nokia        |\n| 200        | Apple        |\n| 300        | Samsung      |\n+------------+--------------+\nOutput: \n+------------+------------+----------+-------+\n| product_id | first_year | quantity | price |\n+------------+------------+----------+-------+ \n| 100        | 2008       | 10       | 5000  |\n| 200        | 2011       | 15       | 9000  |\n+------------+------------+----------+-------+\n</pre>"},{"location":"LeetCode_Problems/1071/","title":"1071. Greatest Common Divisor of Strings","text":"Problem <p>For two strings <code>s</code> and <code>t</code>, we say \"<code>t</code> divides <code>s</code>\" if and only if <code>s = t + ... + t</code> (i.e., <code>t</code> is concatenated with itself one or more times).</p> <p>Given two strings <code>str1</code> and <code>str2</code>, return the largest string <code>x</code> such that <code>x</code> divides both <code>str1</code> and <code>str2</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: str1 = \"ABCABC\", str2 = \"ABC\"\nOutput: \"ABC\"\n</pre> <p>Example 2:</p> <pre>\nInput: str1 = \"ABABAB\", str2 = \"ABAB\"\nOutput: \"AB\"\n</pre> <p>Example 3:</p> <pre>\nInput: str1 = \"LEET\", str2 = \"CODE\"\nOutput: \"\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li> <li><code>str1</code> and <code>str2</code> consist of English uppercase letters.</li> </ul>"},{"location":"LeetCode_Problems/1072/","title":"1072. Flip Columns For Maximum Number of Equal Rows","text":"Problem <p>You are given an <code>m x n</code> binary matrix <code>matrix</code>.</p> <p>You can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from <code>0</code> to <code>1</code> or vice versa).</p> <p>Return the maximum number of rows that have all values equal after some number of flips.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: matrix = [[0,1],[1,1]]\nOutput: 1\nExplanation: After flipping no values, 1 row has all values equal.\n</pre> <p>Example 2:</p> <pre>\nInput: matrix = [[0,1],[1,0]]\nOutput: 2\nExplanation: After flipping values in the first column, both rows have equal values.\n</pre> <p>Example 3:</p> <pre>\nInput: matrix = [[0,0,0],[0,0,1],[1,1,0]]\nOutput: 2\nExplanation: After flipping values in the first two columns, the last two rows have equal values.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>matrix[i][j]</code> is either\u00a0<code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1073/","title":"1073. Adding Two Negabinary Numbers","text":"Problem <p>Given two numbers <code>arr1</code> and <code>arr2</code> in base -2, return the result of adding them together.</p> <p>Each number is given in array format:\u00a0 as an array of 0s and 1s, from most significant bit to least significant bit.\u00a0 For example, <code>arr = [1,1,0,1]</code> represents the number <code>(-2)^3\u00a0+ (-2)^2 + (-2)^0 = -3</code>.\u00a0 A number <code>arr</code> in array, format is also guaranteed to have no leading zeros: either\u00a0<code>arr == [0]</code> or <code>arr[0] == 1</code>.</p> <p>Return the result of adding <code>arr1</code> and <code>arr2</code> in the same format: as an array of 0s and 1s with no leading zeros.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr1 = [1,1,1,1,1], arr2 = [1,0,1]\nOutput: [1,0,0,0,0]\nExplanation: arr1 represents 11, arr2 represents 5, the output represents 16.\n</pre> <p>Example 2:</p> <pre>\nInput: arr1 = [0], arr2 = [0]\nOutput: [0]\n</pre> <p>Example 3:</p> <pre>\nInput: arr1 = [0], arr2 = [1]\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr1.length,\u00a0arr2.length &lt;= 1000</code></li> <li><code>arr1[i]</code>\u00a0and <code>arr2[i]</code> are\u00a0<code>0</code> or <code>1</code></li> <li><code>arr1</code> and <code>arr2</code> have no leading zeros</li> </ul>"},{"location":"LeetCode_Problems/1074/","title":"1074. Number of Submatrices That Sum to Target","text":"Problem <p>Given a <code>matrix</code>\u00a0and a <code>target</code>, return the number of non-empty submatrices that sum to target.</p> <p>A submatrix <code>x1, y1, x2, y2</code> is the set of all cells <code>matrix[x][y]</code> with <code>x1 &lt;= x &lt;= x2</code> and <code>y1 &lt;= y &lt;= y2</code>.</p> <p>Two submatrices <code>(x1, y1, x2, y2)</code> and <code>(x1', y1', x2', y2')</code> are different if they have some coordinate\u00a0that is different: for example, if <code>x1 != x1'</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0\nOutput: 4\nExplanation: The four 1x1 submatrices that only contain 0.\n</pre> <p>Example 2:</p> <pre>\nInput: matrix = [[1,-1],[-1,1]], target = 0\nOutput: 5\nExplanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.\n</pre> <p>Example 3:</p> <pre>\nInput: matrix = [[904]], target = 0\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= matrix.length &lt;= 100</code></li> <li><code>1 &lt;= matrix[0].length &lt;= 100</code></li> <li><code>-1000 &lt;= matrix[i] &lt;= 1000</code></li> <li><code>-10^8 &lt;= target &lt;= 10^8</code></li> </ul>"},{"location":"LeetCode_Problems/1075/","title":"1075. Project Employees I","text":"Problem <p>Table: <code>Project</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| project_id  | int     |\n| employee_id | int     |\n+-------------+---------+\n(project_id, employee_id) is the primary key of this table.\nemployee_id is a foreign key to <code>Employee</code> table.\nEach row of this table indicates that the employee with employee_id is working on the project with project_id.\n</pre> <p> </p> <p>Table: <code>Employee</code></p> <pre>\n+------------------+---------+\n| Column Name      | Type    |\n+------------------+---------+\n| employee_id      | int     |\n| name             | varchar |\n| experience_years | int     |\n+------------------+---------+\nemployee_id is the primary key of this table. It's guaranteed that experience_years is not NULL.\nEach row of this table contains information about one employee.\n</pre> <p> </p> <p>Write an SQL query that reports the average experience years of all the employees for each project, rounded to 2 digits.</p> <p>Return the result table in any order.</p> <p>The query result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nProject table:\n+-------------+-------------+\n| project_id  | employee_id |\n+-------------+-------------+\n| 1           | 1           |\n| 1           | 2           |\n| 1           | 3           |\n| 2           | 1           |\n| 2           | 4           |\n+-------------+-------------+\nEmployee table:\n+-------------+--------+------------------+\n| employee_id | name   | experience_years |\n+-------------+--------+------------------+\n| 1           | Khaled | 3                |\n| 2           | Ali    | 2                |\n| 3           | John   | 1                |\n| 4           | Doe    | 2                |\n+-------------+--------+------------------+\nOutput: \n+-------------+---------------+\n| project_id  | average_years |\n+-------------+---------------+\n| 1           | 2.00          |\n| 2           | 2.50          |\n+-------------+---------------+\nExplanation: The average experience years for the first project is (3 + 2 + 1) / 3 = 2.00 and for the second project is (3 + 2) / 2 = 2.50\n</pre>"},{"location":"LeetCode_Problems/1076/","title":"1076. Project Employees II","text":"Problem"},{"location":"LeetCode_Problems/1077/","title":"1077. Project Employees III","text":"Problem"},{"location":"LeetCode_Problems/1078/","title":"1078. Occurrences After Bigram","text":"Problem <p>Given two strings <code>first</code> and <code>second</code>, consider occurrences in some text of the form <code>\"first second third\"</code>, where <code>second</code> comes immediately after <code>first</code>, and <code>third</code> comes immediately after <code>second</code>.</p> <p>Return an array of all the words <code>third</code> for each occurrence of <code>\"first second third\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"\nOutput: [\"girl\",\"student\"]\n</pre> <p>Example 2:</p> <pre>Input: text = \"we will we will rock you\", first = \"we\", second = \"will\"\nOutput: [\"we\",\"rock\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text.length &lt;= 1000</code></li> <li><code>text</code> consists of lowercase English letters and spaces.</li> <li>All the words in <code>text</code> a separated by a single space.</li> <li><code>1 &lt;= first.length, second.length &lt;= 10</code></li> <li><code>first</code> and <code>second</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1079/","title":"1079. Letter Tile Possibilities","text":"Problem <p>You have <code>n</code> <code>tiles</code>, where each tile has one letter <code>tiles[i]</code> printed on it.</p> <p>Return the number of possible non-empty sequences of letters you can make using the letters printed on those <code>tiles</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tiles = \"AAB\"\nOutput: 8\nExplanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".\n</pre> <p>Example 2:</p> <pre>\nInput: tiles = \"AAABBC\"\nOutput: 188\n</pre> <p>Example 3:</p> <pre>\nInput: tiles = \"V\"\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= tiles.length &lt;= 7</code></li> <li><code>tiles</code> consists of uppercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1080/","title":"1080. Insufficient Nodes in Root to Leaf Paths","text":"Problem <p>Given the <code>root</code> of a binary tree and an integer <code>limit</code>, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree.</p> <p>A node is insufficient if every root to leaf path intersecting this node has a sum strictly less than <code>limit</code>.</p> <p>A leaf is a node with no children.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1\nOutput: [1,2,3,4,null,null,7,8,9,null,14]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22\nOutput: [5,4,8,11,null,17,4,7,null,null,null,5]\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [1,2,-3,-5,null,4,null], limit = -1\nOutput: [1,null,-3,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 5000]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= limit &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1081/","title":"1081. Smallest Subsequence of Distinct Characters","text":"Problem <p>Given a string <code>s</code>, return the lexicographically smallest subsequence of <code>s</code> that contains all the distinct characters of <code>s</code> exactly once.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"bcabc\"\nOutput: \"abc\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul> <p> </p> <p>Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/</p>"},{"location":"LeetCode_Problems/1082/","title":"1082. Sales Analysis I","text":"Problem"},{"location":"LeetCode_Problems/1083/","title":"1083. Sales Analysis II","text":"Problem"},{"location":"LeetCode_Problems/1084/","title":"1084. Sales Analysis III","text":"Problem <p>Table: <code>Product</code></p> <pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| product_id   | int     |\n| product_name | varchar |\n| unit_price   | int     |\n+--------------+---------+\nproduct_id is the primary key (column with unique values) of this table.\nEach row of this table indicates the name and the price of each product.\n</pre> <p>Table: <code>Sales</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| seller_id   | int     |\n| product_id  | int     |\n| buyer_id    | int     |\n| sale_date   | date    |\n| quantity    | int     |\n| price       | int     |\n+-------------+---------+\nThis table can have duplicate rows.\nproduct_id is a foreign key (reference column) to the Product table.\nEach row of this table contains some information about one sale.\n</pre> <p> </p> <p>Write a solution to\u00a0report\u00a0the products that were only sold in the first quarter of <code>2019</code>. That is, between <code>2019-01-01</code> and <code>2019-03-31</code> inclusive.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nProduct table:\n+------------+--------------+------------+\n| product_id | product_name | unit_price |\n+------------+--------------+------------+\n| 1          | S8           | 1000       |\n| 2          | G4           | 800        |\n| 3          | iPhone       | 1400       |\n+------------+--------------+------------+\nSales table:\n+-----------+------------+----------+------------+----------+-------+\n| seller_id | product_id | buyer_id | sale_date  | quantity | price |\n+-----------+------------+----------+------------+----------+-------+\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\n| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |\n| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |\n+-----------+------------+----------+------------+----------+-------+\nOutput: \n+-------------+--------------+\n| product_id  | product_name |\n+-------------+--------------+\n| 1           | S8           |\n+-------------+--------------+\nExplanation: \nThe product with id 1 was only sold in the spring of 2019.\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\nThe product with id 3 was sold after spring 2019.\nWe return only product 1 as it is the product that was only sold in the spring of 2019.\n</pre>"},{"location":"LeetCode_Problems/1085/","title":"1085. Sum of Digits in the Minimum Number","text":"Problem"},{"location":"LeetCode_Problems/1086/","title":"1086. High Five","text":"Problem"},{"location":"LeetCode_Problems/1087/","title":"1087. Brace Expansion","text":"Problem"},{"location":"LeetCode_Problems/1088/","title":"1088. Confusing Number II","text":"Problem"},{"location":"LeetCode_Problems/1089/","title":"1089. Duplicate Zeros","text":"Problem <p>Given a fixed-length integer array <code>arr</code>, duplicate each occurrence of zero, shifting the remaining elements to the right.</p> <p>Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,0,2,3,0,4,5,0]\nOutput: [1,0,0,2,3,0,0,4]\nExplanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2,3]\nOutput: [1,2,3]\nExplanation: After calling your function, the input array is modified to: [1,2,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/1090/","title":"1090. Largest Values From Labels","text":"Problem <p>There is a set of <code>n</code> items. You are given two integer arrays <code>values</code> and <code>labels</code> where the value and the label of the <code>i<sup>th</sup></code> element are <code>values[i]</code> and <code>labels[i]</code> respectively. You are also given two integers <code>numWanted</code> and <code>useLimit</code>.</p> <p>Choose a subset <code>s</code> of the <code>n</code> elements such that:</p> <ul> <li>The size of the subset <code>s</code> is less than or equal to <code>numWanted</code>.</li> <li>There are at most <code>useLimit</code> items with the same label in <code>s</code>.</li> </ul> <p>The score of a subset is the sum of the values in the subset.</p> <p>Return the maximum score of a subset <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1\nOutput: 9\nExplanation: The subset chosen is the first, third, and fifth items.\n</pre> <p>Example 2:</p> <pre>\nInput: values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2\nOutput: 12\nExplanation: The subset chosen is the first, second, and third items.\n</pre> <p>Example 3:</p> <pre>\nInput: values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1\nOutput: 16\nExplanation: The subset chosen is the first and fourth items.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == values.length == labels.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= values[i], labels[i] &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= numWanted, useLimit &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/1091/","title":"1091. Shortest Path in Binary Matrix","text":"Problem <p>Given an <code>n x n</code> binary matrix <code>grid</code>, return the length of the shortest clear path in the matrix. If there is no clear path, return <code>-1</code>.</p> <p>A clear path in a binary matrix is a path from the top-left cell (i.e., <code>(0, 0)</code>) to the bottom-right cell (i.e., <code>(n - 1, n - 1)</code>) such that:</p> <ul> <li>All the visited cells of the path are <code>0</code>.</li> <li>All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).</li> </ul> <p>The length of a clear path is the number of visited cells of this path.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,1],[1,0]]\nOutput: 2\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,0,0],[1,1,0],[1,1,0]]\nOutput: 4\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [[1,0,0],[1,1,0],[1,1,0]]\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>grid[i][j] is 0 or 1</code></li> </ul>"},{"location":"LeetCode_Problems/1092/","title":"1092. Shortest Common Supersequence","text":"Problem <p>Given two strings <code>str1</code> and <code>str2</code>, return the shortest string that has both <code>str1</code> and <code>str2</code> as subsequences. If there are multiple valid strings, return any of them.</p> <p>A string <code>s</code> is a subsequence of string <code>t</code> if deleting some number of characters from <code>t</code> (possibly <code>0</code>) results in the string <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: str1 = \"abac\", str2 = \"cab\"\nOutput: \"cabac\"\nExplanation: \nstr1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".\nstr2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".\nThe answer provided is the shortest such string that satisfies these properties.\n</pre> <p>Example 2:</p> <pre>\nInput: str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\"\nOutput: \"aaaaaaaa\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li> <li><code>str1</code> and <code>str2</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1093/","title":"1093. Statistics from a Large Sample","text":"Problem <p>You are given a large sample of integers in the range <code>[0, 255]</code>. Since the sample is so large, it is represented by an array <code>count</code>\u00a0where <code>count[k]</code> is the number of times that <code>k</code> appears in the sample.</p> <p>Calculate the following statistics:</p> <ul> <li><code>minimum</code>: The minimum element in the sample.</li> <li><code>maximum</code>: The maximum element in the sample.</li> <li><code>mean</code>: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.</li> <li><code>median</code>:     <ul> <li>If the sample has an odd number of elements, then the <code>median</code> is the middle element once the sample is sorted.</li> <li>If the sample has an even number of elements, then the <code>median</code> is the average of the two middle elements once the sample is sorted.</li> </ul> </li> <li><code>mode</code>: The number that appears the most in the sample. It is guaranteed to be unique.</li> </ul> <p>Return the statistics of the sample as an array of floating-point numbers <code>[minimum, maximum, mean, median, mode]</code>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nOutput: [1.00000,3.00000,2.37500,2.50000,3.00000]\nExplanation: The sample represented by count is [1,2,2,2,3,3,3,3].\nThe minimum and maximum are 1 and 3 respectively.\nThe mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.\nSince the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.\nThe mode is 3 as it appears the most in the sample.\n</pre> <p>Example 2:</p> <pre>\nInput: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nOutput: [1.00000,4.00000,2.18182,2.00000,1.00000]\nExplanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].\nThe minimum and maximum are 1 and 4 respectively.\nThe mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).\nSince the size of the sample is odd, the median is the middle element 2.\nThe mode is 1 as it appears the most in the sample.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>count.length == 256</code></li> <li><code>0 &lt;= count[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= sum(count) &lt;= 10<sup>9</sup></code></li> <li>The mode of the sample that <code>count</code> represents is unique.</li> </ul>"},{"location":"LeetCode_Problems/1094/","title":"1094. Car Pooling","text":"Problem <p>There is a car with <code>capacity</code> empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).</p> <p>You are given the integer <code>capacity</code> and an array <code>trips</code> where <code>trips[i] = [numPassengers<sub>i</sub>, from<sub>i</sub>, to<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> trip has <code>numPassengers<sub>i</sub></code> passengers and the locations to pick them up and drop them off are <code>from<sub>i</sub></code> and <code>to<sub>i</sub></code> respectively. The locations are given as the number of kilometers due east from the car's initial location.</p> <p>Return <code>true</code> if it is possible to pick up and drop off all passengers for all the given trips, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: trips = [[2,1,5],[3,3,7]], capacity = 4\nOutput: false\n</pre> <p>Example 2:</p> <pre>\nInput: trips = [[2,1,5],[3,3,7]], capacity = 5\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= trips.length &lt;= 1000</code></li> <li><code>trips[i].length == 3</code></li> <li><code>1 &lt;= numPassengers<sub>i</sub> &lt;= 100</code></li> <li><code>0 &lt;= from<sub>i</sub> &lt; to<sub>i</sub> &lt;= 1000</code></li> <li><code>1 &lt;= capacity &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1095/","title":"1095. Find in Mountain Array","text":"Problem <p>(This problem is an interactive problem.)</p> <p>You may recall that an array <code>arr</code> is a mountain array if and only if:</p> <ul> <li><code>arr.length &gt;= 3</code></li> <li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:     <ul> <li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li> <li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li> </ul> </li> </ul> <p>Given a mountain array <code>mountainArr</code>, return the minimum <code>index</code> such that <code>mountainArr.get(index) == target</code>. If such an <code>index</code> does not exist, return <code>-1</code>.</p> <p>You cannot access the mountain array directly. You may only access the array using a <code>MountainArray</code> interface:</p> <ul> <li><code>MountainArray.get(k)</code> returns the element of the array at index <code>k</code> (0-indexed).</li> <li><code>MountainArray.length()</code> returns the length of the array.</li> </ul> <p>Submissions making more than <code>100</code> calls to <code>MountainArray.get</code> will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: array = [1,2,3,4,5,3,1], target = 3\nOutput: 2\nExplanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.</pre> <p>Example 2:</p> <pre>\nInput: array = [0,1,2,4,2,1], target = 3\nOutput: -1\nExplanation: 3 does not exist in <code>the array,</code> so we return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= mountain_arr.length() &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= target &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= mountain_arr.get(index) &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1096/","title":"1096. Brace Expansion II","text":"Problem <p>Under the grammar given below, strings can represent a set of lowercase words. Let\u00a0<code>R(expr)</code>\u00a0denote the set of words the expression represents.</p> <p>The grammar can best be understood through simple examples:</p> <ul> <li>Single letters represent a singleton set containing that word.     <ul> <li><code>R(\"a\") = {\"a\"}</code></li> <li><code>R(\"w\") = {\"w\"}</code></li> </ul> </li> <li>When we take a comma-delimited list of two or more expressions, we take the union of possibilities.     <ul> <li><code>R(\"{a,b,c}\") = {\"a\",\"b\",\"c\"}</code></li> <li><code>R(\"{{a,b},{b,c}}\") = {\"a\",\"b\",\"c\"}</code> (notice the final set only contains each word at most once)</li> </ul> </li> <li>When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.     <ul> <li><code>R(\"{a,b}{c,d}\") = {\"ac\",\"ad\",\"bc\",\"bd\"}</code></li> <li><code>R(\"a{b,c}{d,e}f{g,h}\") = {\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"}</code></li> </ul> </li> </ul> <p>Formally, the three rules for our grammar:</p> <ul> <li>For every lowercase letter <code>x</code>, we have <code>R(x) = {x}</code>.</li> <li>For expressions <code>e<sub>1</sub>, e<sub>2</sub>, ... , e<sub>k</sub></code> with <code>k &gt;= 2</code>, we have <code>R({e<sub>1</sub>, e<sub>2</sub>, ...}) = R(e<sub>1</sub>) \u222a R(e<sub>2</sub>) \u222a ...</code></li> <li>For expressions <code>e<sub>1</sub></code> and <code>e<sub>2</sub></code>, we have <code>R(e<sub>1</sub> + e<sub>2</sub>) = {a + b for (a, b) in R(e<sub>1</sub>) \u00d7 R(e<sub>2</sub>)}</code>, where <code>+</code> denotes concatenation, and <code>\u00d7</code> denotes the cartesian product.</li> </ul> <p>Given an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: expression = \"{a,b}{c,{d,e}}\"\nOutput: [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]\n</pre> <p>Example 2:</p> <pre>\nInput: expression = \"{{a,z},a{b,c},{ab,z}}\"\nOutput: [\"a\",\"ab\",\"ac\",\"z\"]\nExplanation: Each distinct word is written only once in the final answer.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= expression.length &lt;= 60</code></li> <li><code>expression[i]</code> consists of <code>'{'</code>, <code>'}'</code>, <code>','</code>or lowercase English letters.</li> <li>The given\u00a0<code>expression</code>\u00a0represents a set of words based on the grammar given in the description.</li> </ul>"},{"location":"LeetCode_Problems/1097/","title":"1097. Game Play Analysis V","text":"Problem"},{"location":"LeetCode_Problems/1098/","title":"1098. Unpopular Books","text":"Problem"},{"location":"LeetCode_Problems/1099/","title":"1099. Two Sum Less Than K","text":"Problem"},{"location":"LeetCode_Problems/1100/","title":"1100. Find K-Length Substrings With No Repeated Characters","text":"Problem"},{"location":"LeetCode_Problems/1101/","title":"1101. The Earliest Moment When Everyone Become Friends","text":"Problem"},{"location":"LeetCode_Problems/1102/","title":"1102. Path With Maximum Minimum Value","text":"Problem"},{"location":"LeetCode_Problems/1103/","title":"1103. Distribute Candies to People","text":"Problem <p>We distribute some\u00a0number of <code>candies</code>, to a row of <code>n =\u00a0num_people</code>\u00a0people in the following way:</p> <p>We then give 1 candy to the first person, 2 candies to the second person, and so on until we give <code>n</code>\u00a0candies to the last person.</p> <p>Then, we go back to the start of the row, giving <code>n\u00a0+ 1</code> candies to the first person, <code>n\u00a0+ 2</code> candies to the second person, and so on until we give <code>2 * n</code>\u00a0candies to the last person.</p> <p>This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.\u00a0 The last person will receive all of our remaining candies (not necessarily one more than the previous gift).</p> <p>Return an array (of length <code>num_people</code>\u00a0and sum <code>candies</code>) that represents the final distribution of candies.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: candies = 7, num_people = 4\nOutput: [1,2,3,1]\nExplanation:\nOn the first turn, ans[0] += 1, and the array is [1,0,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3,0].\nOn the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].\n</pre> <p>Example 2:</p> <pre>\nInput: candies = 10, num_people = 3\nOutput: [5,2,3]\nExplanation: \nOn the first turn, ans[0] += 1, and the array is [1,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3].\nOn the fourth turn, ans[0] += 4, and the final array is [5,2,3].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>1 &lt;= candies &lt;= 10^9</li> <li>1 &lt;= num_people &lt;= 1000</li> </ul>"},{"location":"LeetCode_Problems/1104/","title":"1104. Path In Zigzag Labelled Binary Tree","text":"Problem <p>In an infinite binary tree where every node has two children, the nodes are labelled in row order.</p> <p>In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.</p> <p></p> <p>Given the <code>label</code> of a node in this tree, return the labels in the path from the root of the tree to the\u00a0node with that <code>label</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: label = 14\nOutput: [1,3,4,14]\n</pre> <p>Example 2:</p> <pre>\nInput: label = 26\nOutput: [1,2,6,10,26]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= label &lt;= 10^6</code></li> </ul>"},{"location":"LeetCode_Problems/1105/","title":"1105. Filling Bookcase Shelves","text":"Problem <p>You are given an array <code>books</code> where <code>books[i] = [thickness<sub>i</sub>, height<sub>i</sub>]</code> indicates the thickness and height of the <code>i<sup>th</sup></code> book. You are also given an integer <code>shelfWidth</code>.</p> <p>We want to place these books in order onto bookcase shelves that have a total width <code>shelfWidth</code>.</p> <p>We choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to <code>shelfWidth</code>, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place.</p> <p>Note that at each step of the above process, the order of the books we place is the same order as the given sequence of books.</p> <ul> <li>For example, if we have an ordered list of <code>5</code> books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.</li> </ul> <p>Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4\nOutput: 6\nExplanation:\nThe sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.\nNotice that book number 2 does not have to be on the first shelf.\n</pre> <p>Example 2:</p> <pre>\nInput: books = [[1,3],[2,4],[3,2]], shelfWidth = 6\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= books.length &lt;= 1000</code></li> <li><code>1 &lt;= thickness<sub>i</sub> &lt;= shelfWidth &lt;= 1000</code></li> <li><code>1 &lt;= height<sub>i</sub> &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1106/","title":"1106. Parsing A Boolean Expression","text":"Problem <p>A boolean expression is an expression that evaluates to either <code>true</code> or <code>false</code>. It can be in one of the following shapes:</p> <ul> <li><code>'t'</code> that evaluates to <code>true</code>.</li> <li><code>'f'</code> that evaluates to <code>false</code>.</li> <li><code>'!(subExpr)'</code> that evaluates to the logical NOT of the inner expression <code>subExpr</code>.</li> <li><code>'&amp;(subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub>)'</code> that evaluates to the logical AND of the inner expressions <code>subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub></code> where <code>n &gt;= 1</code>.</li> <li><code>'|(subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub>)'</code> that evaluates to the logical OR of the inner expressions <code>subExpr<sub>1</sub>, subExpr<sub>2</sub>, ..., subExpr<sub>n</sub></code> where <code>n &gt;= 1</code>.</li> </ul> <p>Given a string <code>expression</code> that represents a boolean expression, return the evaluation of that expression.</p> <p>It is guaranteed that the given expression is valid and follows the given rules.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: expression = \"&amp;(|(f))\"\nOutput: false\nExplanation: \nFirst, evaluate |(f) --&gt; f. The expression is now \"&amp;(f)\".\nThen, evaluate &amp;(f) --&gt; f. The expression is now \"f\".\nFinally, return false.\n</pre> <p>Example 2:</p> <pre>\nInput: expression = \"|(f,f,f,t)\"\nOutput: true\nExplanation: The evaluation of (false OR false OR false OR true) is true.\n</pre> <p>Example 3:</p> <pre>\nInput: expression = \"!(&amp;(f,t))\"\nOutput: true\nExplanation: \nFirst, evaluate &amp;(f,t) --&gt; (false AND true) --&gt; false --&gt; f. The expression is now \"!(f)\".\nThen, evaluate !(f) --&gt; NOT false --&gt; true. We return true.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= expression.length &lt;= 2 * 10<sup>4</sup></code></li> <li>expression[i] is one following characters: <code>'('</code>, <code>')'</code>, <code>'&amp;'</code>, <code>'|'</code>, <code>'!'</code>, <code>'t'</code>, <code>'f'</code>, and <code>','</code>.</li> </ul>"},{"location":"LeetCode_Problems/1107/","title":"1107. New Users Daily Count","text":"Problem"},{"location":"LeetCode_Problems/1108/","title":"1108. Defanging an IP Address","text":"Problem <p>Given a valid (IPv4) IP <code>address</code>, return a defanged version of that IP address.</p> <p>A defanged\u00a0IP address\u00a0replaces every period <code>\".\"</code> with <code>\"[.]\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: address = \"1.1.1.1\"\nOutput: \"1[.]1[.]1[.]1\"\n</pre> <p>Example 2:</p> <pre>Input: address = \"255.100.50.0\"\nOutput: \"255[.]100[.]50[.]0\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The given <code>address</code> is a valid IPv4 address.</li> </ul>"},{"location":"LeetCode_Problems/1109/","title":"1109. Corporate Flight Bookings","text":"Problem <p>There are <code>n</code> flights that are labeled from <code>1</code> to <code>n</code>.</p> <p>You are given an array of flight bookings <code>bookings</code>, where <code>bookings[i] = [first<sub>i</sub>, last<sub>i</sub>, seats<sub>i</sub>]</code> represents a booking for flights <code>first<sub>i</sub></code> through <code>last<sub>i</sub></code> (inclusive) with <code>seats<sub>i</sub></code> seats reserved for each flight in the range.</p> <p>Return an array <code>answer</code> of length <code>n</code>, where <code>answer[i]</code> is the total number of seats reserved for flight <code>i</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\nOutput: [10,55,45,25,25]\nExplanation:\nFlight labels:        1   2   3   4   5\nBooking 1 reserved:  10  10\nBooking 2 reserved:      20  20\nBooking 3 reserved:      25  25  25  25\nTotal seats:         10  55  45  25  25\nHence, answer = [10,55,45,25,25]\n</pre> <p>Example 2:</p> <pre>\nInput: bookings = [[1,2,10],[2,2,15]], n = 2\nOutput: [10,25]\nExplanation:\nFlight labels:        1   2\nBooking 1 reserved:  10  10\nBooking 2 reserved:      15\nTotal seats:         10  25\nHence, answer = [10,25]\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= bookings.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>bookings[i].length == 3</code></li> <li><code>1 &lt;= first<sub>i</sub> &lt;= last<sub>i</sub> &lt;= n</code></li> <li><code>1 &lt;= seats<sub>i</sub> &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1110/","title":"1110. Delete Nodes And Return Forest","text":"Problem <p>Given the <code>root</code> of a binary tree, each node in the tree has a distinct value.</p> <p>After deleting all nodes with a value in <code>to_delete</code>, we are left with a forest (a disjoint union of trees).</p> <p>Return the roots of the trees in the remaining forest. You may return the result in any order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,6,7], to_delete = [3,5]\nOutput: [[1,2,null,4],[6],[7]]\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1,2,4,null,3], to_delete = [3]\nOutput: [[1,2,4]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the given tree is at most <code>1000</code>.</li> <li>Each node has a distinct value between <code>1</code> and <code>1000</code>.</li> <li><code>to_delete.length &lt;= 1000</code></li> <li><code>to_delete</code> contains distinct values between <code>1</code> and <code>1000</code>.</li> </ul>"},{"location":"LeetCode_Problems/1111/","title":"1111. Maximum Nesting Depth of Two Valid Parentheses Strings","text":"Problem <p>A string is a valid parentheses string\u00a0(denoted VPS) if and only if it consists of <code>\"(\"</code> and <code>\")\"</code> characters only, and:</p> <ul> <li>It is the empty string, or</li> <li>It can be written as\u00a0<code>AB</code>\u00a0(<code>A</code>\u00a0concatenated with\u00a0<code>B</code>), where\u00a0<code>A</code>\u00a0and\u00a0<code>B</code>\u00a0are VPS's, or</li> <li>It can be written as\u00a0<code>(A)</code>, where\u00a0<code>A</code>\u00a0is a VPS.</li> </ul> <p>We can\u00a0similarly define the nesting depth <code>depth(S)</code> of any VPS <code>S</code> as follows:</p> <ul> <li><code>depth(\"\") = 0</code></li> <li><code>depth(A + B) = max(depth(A), depth(B))</code>, where <code>A</code> and <code>B</code> are VPS's</li> <li><code>depth(\"(\" + A + \")\") = 1 + depth(A)</code>, where <code>A</code> is a VPS.</li> </ul> <p>For example,\u00a0 <code>\"\"</code>,\u00a0<code>\"()()\"</code>, and\u00a0<code>\"()(()())\"</code>\u00a0are VPS's (with nesting depths 0, 1, and 2), and <code>\")(\"</code> and <code>\"(()\"</code> are not VPS's.</p> <p> </p> <p>Given a VPS seq, split it into two disjoint subsequences <code>A</code> and <code>B</code>, such that\u00a0<code>A</code> and <code>B</code> are VPS's (and\u00a0<code>A.length + B.length = seq.length</code>).</p> <p>Now choose any such <code>A</code> and <code>B</code> such that\u00a0<code>max(depth(A), depth(B))</code> is the minimum possible value.</p> <p>Return an <code>answer</code> array (of length <code>seq.length</code>) that encodes such a\u00a0choice of <code>A</code> and <code>B</code>:\u00a0 <code>answer[i] = 0</code> if <code>seq[i]</code> is part of <code>A</code>, else <code>answer[i] = 1</code>.\u00a0 Note that even though multiple answers may exist, you may return any of them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: seq = \"(()())\"\nOutput: [0,1,1,1,1,0]\n</pre> <p>Example 2:</p> <pre>\nInput: seq = \"()(())()\"\nOutput: [0,0,0,1,1,0,1,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= seq.size &lt;= 10000</code></li> </ul>"},{"location":"LeetCode_Problems/1112/","title":"1112. Highest Grade For Each Student","text":"Problem"},{"location":"LeetCode_Problems/1113/","title":"1113. Reported Posts","text":"Problem"},{"location":"LeetCode_Problems/1114/","title":"1114. Print in Order","text":"Problem <p>Suppose we have a class:</p> <pre>\npublic class Foo {\n  public void first() { print(\"first\"); }\n  public void second() { print(\"second\"); }\n  public void third() { print(\"third\"); }\n}\n</pre> <p>The same instance of <code>Foo</code> will be passed to three different threads. Thread A will call <code>first()</code>, thread B will call <code>second()</code>, and thread C will call <code>third()</code>. Design a mechanism and modify the program to ensure that <code>second()</code> is executed after <code>first()</code>, and <code>third()</code> is executed after <code>second()</code>.</p> <p>Note:</p> <p>We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is mainly to ensure our tests' comprehensiveness.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3]\nOutput: \"firstsecondthird\"\nExplanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). \"firstsecondthird\" is the correct output.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,2]\nOutput: \"firstsecondthird\"\nExplanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). \"firstsecondthird\" is the correct output.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums</code> is a permutation of <code>[1, 2, 3]</code>.</li> </ul>"},{"location":"LeetCode_Problems/1115/","title":"1115. Print FooBar Alternately","text":"Problem <p>Suppose you are given the following code:</p> <pre>\nclass FooBar {\n  public void foo() {\n    for (int i = 0; i &lt; n; i++) {\n      print(\"foo\");\n    }\n  }\n\n  public void bar() {\n    for (int i = 0; i &lt; n; i++) {\n      print(\"bar\");\n    }\n  }\n}\n</pre> <p>The same instance of <code>FooBar</code> will be passed to two different threads:</p> <ul> <li>thread <code>A</code> will call <code>foo()</code>, while</li> <li>thread <code>B</code> will call <code>bar()</code>.</li> </ul> <p>Modify the given program to output <code>\"foobar\"</code> <code>n</code> times.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: \"foobar\"\nExplanation: There are two threads being fired asynchronously. One of them calls foo(), while the other calls bar().\n\"foobar\" is being output 1 time.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: \"foobarfoobar\"\nExplanation: \"foobar\" is being output 2 times.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1116/","title":"1116. Print Zero Even Odd","text":"Problem <p>You have a function <code>printNumber</code> that can be called with an integer parameter and prints it to the console.</p> <ul> <li>For example, calling <code>printNumber(7)</code> prints <code>7</code> to the console.</li> </ul> <p>You are given an instance of the class <code>ZeroEvenOdd</code> that has three functions: <code>zero</code>, <code>even</code>, and <code>odd</code>. The same instance of <code>ZeroEvenOdd</code> will be passed to three different threads:</p> <ul> <li>Thread A: calls <code>zero()</code> that should only output <code>0</code>'s.</li> <li>Thread B: calls <code>even()</code> that should only output even numbers.</li> <li>Thread C: calls <code>odd()</code> that should only output odd numbers.</li> </ul> <p>Modify the given class to output the series <code>\"010203040506...\"</code> where the length of the series must be <code>2n</code>.</p> <p>Implement the <code>ZeroEvenOdd</code> class:</p> <ul> <li><code>ZeroEvenOdd(int n)</code> Initializes the object with the number <code>n</code> that represents the numbers that should be printed.</li> <li><code>void zero(printNumber)</code> Calls <code>printNumber</code> to output one zero.</li> <li><code>void even(printNumber)</code> Calls <code>printNumber</code> to output one even number.</li> <li><code>void odd(printNumber)</code> Calls <code>printNumber</code> to output one odd number.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: \"0102\"\nExplanation: There are three threads being fired asynchronously.\nOne of them calls zero(), the other calls even(), and the last one calls odd().\n\"0102\" is the correct output.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5\nOutput: \"0102030405\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1117/","title":"1117. Building H2O","text":"Problem <p>There are two kinds of threads: <code>oxygen</code> and <code>hydrogen</code>. Your goal is to group these threads to form water molecules.</p> <p>There is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given <code>releaseHydrogen</code> and <code>releaseOxygen</code> methods respectively, which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must immediately bond with each other to form a water molecule. You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.</p> <p>In other words:</p> <ul> <li>If an oxygen thread arrives at the barrier when no hydrogen threads are present, it must wait for two hydrogen threads.</li> <li>If a hydrogen thread arrives at the barrier when no other threads are present, it must wait for an oxygen thread and another hydrogen thread.</li> </ul> <p>We do not have to worry about matching the threads up explicitly; the threads do not necessarily know which other threads they are paired up with. The key is that threads pass the barriers in complete sets; thus, if we examine the sequence of threads that bind and divide them into groups of three, each group should contain one oxygen and two hydrogen threads.</p> <p>Write synchronization code for oxygen and hydrogen molecules that enforces these constraints.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: water = \"HOH\"\nOutput: \"HHO\"\nExplanation: \"HOH\" and \"OHH\" are also valid answers.\n</pre> <p>Example 2:</p> <pre>\nInput: water = \"OOHHHH\"\nOutput: \"HHOHHO\"\nExplanation: \"HOHHHO\", \"OHHHHO\", \"HHOHOH\", \"HOHHOH\", \"OHHHOH\", \"HHOOHH\", \"HOHOHH\" and \"OHHOHH\" are also valid answers.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 * n == water.length</code></li> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>water[i]</code> is either <code>'H'</code> or <code>'O'</code>.</li> <li>There will be exactly <code>2 * n</code> <code>'H'</code> in <code>water</code>.</li> <li>There will be exactly <code>n</code> <code>'O'</code> in <code>water</code>.</li> </ul>"},{"location":"LeetCode_Problems/1118/","title":"1118. Number of Days in a Month","text":"Problem"},{"location":"LeetCode_Problems/1119/","title":"1119. Remove Vowels from a String","text":"Problem"},{"location":"LeetCode_Problems/1120/","title":"1120. Maximum Average Subtree","text":"Problem"},{"location":"LeetCode_Problems/1121/","title":"1121. Divide Array Into Increasing Sequences","text":"Problem"},{"location":"LeetCode_Problems/1122/","title":"1122. Relative Sort Array","text":"Problem <p>Given two arrays <code>arr1</code> and <code>arr2</code>, the elements of <code>arr2</code> are distinct, and all elements in <code>arr2</code> are also in <code>arr1</code>.</p> <p>Sort the elements of <code>arr1</code> such that the relative ordering of items in <code>arr1</code> are the same as in <code>arr2</code>. Elements that do not appear in <code>arr2</code> should be placed at the end of <code>arr1</code> in ascending order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\nOutput: [2,2,2,1,4,3,3,9,6,7,19]\n</pre> <p>Example 2:</p> <pre>\nInput: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]\nOutput: [22,28,8,6,17,44]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr1.length, arr2.length &lt;= 1000</code></li> <li><code>0 &lt;= arr1[i], arr2[i] &lt;= 1000</code></li> <li>All the elements of <code>arr2</code> are distinct.</li> <li>Each\u00a0<code>arr2[i]</code> is in <code>arr1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1123/","title":"1123. Lowest Common Ancestor of Deepest Leaves","text":"Problem <p>Given the <code>root</code> of a binary tree, return the lowest common ancestor of its deepest leaves.</p> <p>Recall that:</p> <ul> <li>The node of a binary tree is a leaf if and only if it has no children</li> <li>The depth of the root of the tree is <code>0</code>. if the depth of a node is <code>d</code>, the depth of each of its children is <code>d + 1</code>.</li> <li>The lowest common ancestor of a set <code>S</code> of nodes, is the node <code>A</code> with the largest depth such that every node in <code>S</code> is in the subtree with root <code>A</code>.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,5,1,6,2,0,8,null,null,7,4]\nOutput: [2,7,4]\nExplanation: We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest leaf-nodes of the tree.\nNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.</pre> <p>Example 2:</p> <pre>\nInput: root = [1]\nOutput: [1]\nExplanation: The root is the deepest node in the tree, and it's the lca of itself.\n</pre> <p>Example 3:</p> <pre>\nInput: root = [0,1,3,null,2]\nOutput: [2]\nExplanation: The deepest leaf node in the tree is 2, the lca of one node is itself.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree will be in the range <code>[1, 1000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> <li>The values of the nodes in the tree are unique.</li> </ul> <p> </p> <p>Note: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/</p>"},{"location":"LeetCode_Problems/1124/","title":"1124. Longest Well-Performing Interval","text":"Problem <p>We are given <code>hours</code>, a list of the number of hours worked per day for a given employee.</p> <p>A day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than <code>8</code>.</p> <p>A well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.</p> <p>Return the length of the longest well-performing interval.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: hours = [9,9,6,0,6,6,9]\nOutput: 3\nExplanation: The longest well-performing interval is [9,9,6].\n</pre> <p>Example 2:</p> <pre>\nInput: hours = [6,6,6]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= hours.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= hours[i] &lt;= 16</code></li> </ul>"},{"location":"LeetCode_Problems/1125/","title":"1125. Smallest Sufficient Team","text":"Problem <p>In a project, you have a list of required skills <code>req_skills</code>, and a list of people. The <code>i<sup>th</sup></code> person <code>people[i]</code> contains a list of skills that the person has.</p> <p>Consider a sufficient team: a set of people such that for every required skill in <code>req_skills</code>, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.</p> <ul> <li>For example, <code>team = [0, 1, 3]</code> represents the people with skills <code>people[0]</code>, <code>people[1]</code>, and <code>people[3]</code>.</li> </ul> <p>Return any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order.</p> <p>It is guaranteed an answer exists.</p> <p> </p> <p>Example 1:</p> <pre>Input: req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]\nOutput: [0,2]\n</pre> <p>Example 2:</p> <pre>Input: req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]\nOutput: [1,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= req_skills.length &lt;= 16</code></li> <li><code>1 &lt;= req_skills[i].length &lt;= 16</code></li> <li><code>req_skills[i]</code> consists of lowercase English letters.</li> <li>All the strings of <code>req_skills</code> are unique.</li> <li><code>1 &lt;= people.length &lt;= 60</code></li> <li><code>0 &lt;= people[i].length &lt;= 16</code></li> <li><code>1 &lt;= people[i][j].length &lt;= 16</code></li> <li><code>people[i][j]</code> consists of lowercase English letters.</li> <li>All the strings of <code>people[i]</code> are unique.</li> <li>Every skill in <code>people[i]</code> is a skill in <code>req_skills</code>.</li> <li>It is guaranteed a sufficient team exists.</li> </ul>"},{"location":"LeetCode_Problems/1126/","title":"1126. Active Businesses","text":"Problem"},{"location":"LeetCode_Problems/1127/","title":"1127. User Purchase Platform","text":"Problem"},{"location":"LeetCode_Problems/1128/","title":"1128. Number of Equivalent Domino Pairs","text":"Problem <p>Given a list of <code>dominoes</code>, <code>dominoes[i] = [a, b]</code> is equivalent to <code>dominoes[j] = [c, d]</code> if and only if either (<code>a == c</code> and <code>b == d</code>), or (<code>a == d</code> and <code>b == c</code>) - that is, one domino can be rotated to be equal to another domino.</p> <p>Return the number of pairs <code>(i, j)</code> for which <code>0 &lt;= i &lt; j &lt; dominoes.length</code>, and <code>dominoes[i]</code> is equivalent to <code>dominoes[j]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: dominoes = [[1,2],[2,1],[3,4],[5,6]]\nOutput: 1\n</pre> <p>Example 2:</p> <pre>\nInput: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= dominoes.length &lt;= 4 * 10<sup>4</sup></code></li> <li><code>dominoes[i].length == 2</code></li> <li><code>1 &lt;= dominoes[i][j] &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/1129/","title":"1129. Shortest Path with Alternating Colors","text":"Problem <p>You are given an integer <code>n</code>, the number of nodes in a directed graph where the nodes are labeled from <code>0</code> to <code>n - 1</code>. Each edge is red or blue in this graph, and there could be self-edges and parallel edges.</p> <p>You are given two arrays <code>redEdges</code> and <code>blueEdges</code> where:</p> <ul> <li><code>redEdges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is a directed red edge from node <code>a<sub>i</sub></code> to node <code>b<sub>i</sub></code> in the graph, and</li> <li><code>blueEdges[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> indicates that there is a directed blue edge from node <code>u<sub>j</sub></code> to node <code>v<sub>j</sub></code> in the graph.</li> </ul> <p>Return an array <code>answer</code> of length <code>n</code>, where each <code>answer[x]</code> is the length of the shortest path from node <code>0</code> to node <code>x</code> such that the edge colors alternate along the path, or <code>-1</code> if such a path does not exist.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, redEdges = [[0,1],[1,2]], blueEdges = []\nOutput: [0,1,-1]\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]\nOutput: [0,1,-1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= redEdges.length,\u00a0blueEdges.length &lt;= 400</code></li> <li><code>redEdges[i].length == blueEdges[j].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub>, u<sub>j</sub>, v<sub>j</sub> &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/1130/","title":"1130. Minimum Cost Tree From Leaf Values","text":"Problem <p>Given an array <code>arr</code> of positive integers, consider all binary trees such that:</p> <ul> <li>Each node has either <code>0</code> or <code>2</code> children;</li> <li>The values of <code>arr</code> correspond to the values of each leaf in an in-order traversal of the tree.</li> <li>The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.</li> </ul> <p>Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node. It is guaranteed this sum fits into a 32-bit integer.</p> <p>A node is a leaf if and only if it has zero children.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: arr = [6,2,4]\nOutput: 32\nExplanation: There are two possible trees shown.\nThe first has a non-leaf node sum 36, and the second has non-leaf node sum 32.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: arr = [4,11]\nOutput: 44\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= arr.length &lt;= 40</code></li> <li><code>1 &lt;= arr[i] &lt;= 15</code></li> <li>It is guaranteed that the answer fits into a 32-bit signed integer (i.e., it is less than 2<sup>31</sup>).</li> </ul>"},{"location":"LeetCode_Problems/1131/","title":"1131. Maximum of Absolute Value Expression","text":"Problem <p>Given two arrays of integers with equal lengths, return the maximum value of:</p> <p><code>|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|</code></p> <p>where the maximum is taken over all <code>0 &lt;= i, j &lt; arr1.length</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]\nOutput: 13\n</pre> <p>Example 2:</p> <pre>\nInput: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]\nOutput: 20\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= arr1.length == arr2.length &lt;= 40000</code></li> <li><code>-10^6 &lt;= arr1[i], arr2[i] &lt;= 10^6</code></li> </ul>"},{"location":"LeetCode_Problems/1132/","title":"1132. Reported Posts II","text":"Problem"},{"location":"LeetCode_Problems/1133/","title":"1133. Largest Unique Number","text":"Problem"},{"location":"LeetCode_Problems/1134/","title":"1134. Armstrong Number","text":"Problem"},{"location":"LeetCode_Problems/1135/","title":"1135. Connecting Cities With Minimum Cost","text":"Problem"},{"location":"LeetCode_Problems/1136/","title":"1136. Parallel Courses","text":"Problem"},{"location":"LeetCode_Problems/1137/","title":"1137. N-th Tribonacci Number","text":"Problem <p>The Tribonacci sequence T<sub>n</sub> is defined as follows:\u00a0</p> <p>T<sub>0</sub> = 0, T<sub>1</sub> = 1, T<sub>2</sub> = 1, and T<sub>n+3</sub> = T<sub>n</sub> + T<sub>n+1</sub> + T<sub>n+2</sub> for n &gt;= 0.</p> <p>Given <code>n</code>, return the value of T<sub>n</sub>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4\nOutput: 4\nExplanation:\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4\n</pre> <p>Example 2:</p> <pre>\nInput: n = 25\nOutput: 1389537\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 37</code></li> <li>The answer is guaranteed to fit within a 32-bit integer, ie. <code>answer &lt;= 2^31 - 1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1138/","title":"1138. Alphabet Board Path","text":"Problem <p>On an alphabet board, we start at position <code>(0, 0)</code>, corresponding to character\u00a0<code>board[0][0]</code>.</p> <p>Here, <code>board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"]</code>, as shown in the diagram below.</p> <p></p> <p>We may make the following moves:</p> <ul> <li><code>'U'</code> moves our position up one row, if the position exists on the board;</li> <li><code>'D'</code> moves our position down one row, if the position exists on the board;</li> <li><code>'L'</code> moves our position left one column, if the position exists on the board;</li> <li><code>'R'</code> moves our position right one column, if the position exists on the board;</li> <li><code>'!'</code>\u00a0adds the character <code>board[r][c]</code> at our current position <code>(r, c)</code>\u00a0to the\u00a0answer.</li> </ul> <p>(Here, the only positions that exist on the board are positions with letters on them.)</p> <p>Return a sequence of moves that makes our answer equal to <code>target</code>\u00a0in the minimum number of moves.\u00a0 You may return any path that does so.</p> <p> </p> <p>Example 1:</p> <pre>Input: target = \"leet\"\nOutput: \"DDR!UURRR!!DDD!\"\n</pre> <p>Example 2:</p> <pre>Input: target = \"code\"\nOutput: \"RR!DDRR!UUL!R!\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= target.length &lt;= 100</code></li> <li><code>target</code> consists only of English lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/1139/","title":"1139. Largest 1-Bordered Square","text":"Problem <p>Given a 2D <code>grid</code> of <code>0</code>s and <code>1</code>s, return the number of elements in\u00a0the largest square\u00a0subgrid that has all <code>1</code>s on its border, or <code>0</code> if such a subgrid\u00a0doesn't exist in the <code>grid</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 9\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[1,1,0,0]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= grid.length &lt;= 100</code></li> <li><code>1 &lt;= grid[0].length &lt;= 100</code></li> <li><code>grid[i][j]</code> is <code>0</code> or <code>1</code></li> </ul>"},{"location":"LeetCode_Problems/1140/","title":"1140. Stone Game II","text":"Problem <p>Alice and Bob continue their\u00a0games with piles of stones.\u00a0 There are a number of\u00a0piles\u00a0arranged in a row, and each pile has a positive integer number of stones\u00a0<code>piles[i]</code>.\u00a0 The objective of the game is to end with the most\u00a0stones.\u00a0</p> <p>Alice\u00a0and Bob take turns, with Alice starting first.\u00a0 Initially, <code>M = 1</code>.</p> <p>On each player's turn, that player\u00a0can take all the stones in the first <code>X</code> remaining piles, where <code>1 &lt;= X &lt;= 2M</code>.\u00a0 Then, we set\u00a0<code>M = max(M, X)</code>.</p> <p>The game continues until all the stones have been taken.</p> <p>Assuming Alice and Bob play optimally, return the maximum number of stones Alice\u00a0can get.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: piles = [2,7,9,4,4]\nOutput: 10\nExplanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. \n</pre> <p>Example 2:</p> <pre>\nInput: piles = [1,2,3,4,5,100]\nOutput: 104\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= piles.length &lt;= 100</code></li> <li><code>1 &lt;= piles[i]\u00a0&lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1141/","title":"1141. User Activity for the Past 30 Days I","text":"Problem <p>Table: <code>Activity</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| user_id       | int     |\n| session_id    | int     |\n| activity_date | date    |\n| activity_type | enum    |\n+---------------+---------+\nThis table may have duplicate rows.\nThe activity_type column is an ENUM (category) of type ('open_session', 'end_session', 'scroll_down', 'send_message').\nThe table shows the user activities for a social media website. \nNote that each session belongs to exactly one user.\n</pre> <p> </p> <p>Write a solution to find the daily active user count for a period of <code>30</code> days ending <code>2019-07-27</code> inclusively. A user was active on someday if they made at least one activity on that day.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nActivity table:\n+---------+------------+---------------+---------------+\n| user_id | session_id | activity_date | activity_type |\n+---------+------------+---------------+---------------+\n| 1       | 1          | 2019-07-20    | open_session  |\n| 1       | 1          | 2019-07-20    | scroll_down   |\n| 1       | 1          | 2019-07-20    | end_session   |\n| 2       | 4          | 2019-07-20    | open_session  |\n| 2       | 4          | 2019-07-21    | send_message  |\n| 2       | 4          | 2019-07-21    | end_session   |\n| 3       | 2          | 2019-07-21    | open_session  |\n| 3       | 2          | 2019-07-21    | send_message  |\n| 3       | 2          | 2019-07-21    | end_session   |\n| 4       | 3          | 2019-06-25    | open_session  |\n| 4       | 3          | 2019-06-25    | end_session   |\n+---------+------------+---------------+---------------+\nOutput: \n+------------+--------------+ \n| day        | active_users |\n+------------+--------------+ \n| 2019-07-20 | 2            |\n| 2019-07-21 | 2            |\n+------------+--------------+ \nExplanation: Note that we do not care about days with zero active users.\n</pre>"},{"location":"LeetCode_Problems/1142/","title":"1142. User Activity for the Past 30 Days II","text":"Problem"},{"location":"LeetCode_Problems/1143/","title":"1143. Longest Common Subsequence","text":"Problem <p>Given two strings <code>text1</code> and <code>text2</code>, return the length of their longest common subsequence. If there is no common subsequence, return <code>0</code>.</p> <p>A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p> <ul> <li>For example, <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code>.</li> </ul> <p>A common subsequence of two strings is a subsequence that is common to both strings.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: text1 = \"abcde\", text2 = \"ace\" \nOutput: 3  \nExplanation: The longest common subsequence is \"ace\" and its length is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\n</pre> <p>Example 3:</p> <pre>\nInput: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li> <li><code>text1</code> and <code>text2</code> consist of only lowercase English characters.</li> </ul>"},{"location":"LeetCode_Problems/1144/","title":"1144. Decrease Elements To Make Array Zigzag","text":"Problem <p>Given an array <code>nums</code> of integers, a move\u00a0consists of choosing any element and decreasing it by 1.</p> <p>An array <code>A</code> is a\u00a0zigzag array\u00a0if either:</p> <ul> <li>Every even-indexed element is greater than adjacent elements, ie.\u00a0<code>A[0] &gt; A[1] &lt; A[2] &gt; A[3] &lt; A[4] &gt; ...</code></li> <li>OR, every odd-indexed element is greater than adjacent elements, ie.\u00a0<code>A[0] &lt; A[1] &gt; A[2] &lt; A[3] &gt; A[4] &lt; ...</code></li> </ul> <p>Return the minimum number of moves to transform the given array <code>nums</code> into a zigzag array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 2\nExplanation: We can decrease 2 to 0 or 3 to 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [9,6,1,6,2]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1145/","title":"1145. Binary Tree Coloring Game","text":"Problem <p>Two players play a turn based game on a binary tree. We are given the <code>root</code> of this binary tree, and the number of nodes <code>n</code> in the tree. <code>n</code> is odd, and each node has a distinct value from <code>1</code> to <code>n</code>.</p> <p>Initially, the first player names a value <code>x</code> with <code>1 &lt;= x &lt;= n</code>, and the second player names a value <code>y</code> with <code>1 &lt;= y &lt;= n</code> and <code>y != x</code>. The first player colors the node with value <code>x</code> red, and the second player colors the node with value <code>y</code> blue.</p> <p>Then, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)</p> <p>If (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes.</p> <p>You are the second player. If it is possible to choose such a <code>y</code> to ensure you win the game, return <code>true</code>. If it is not possible, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3\nOutput: true\nExplanation: The second player can choose the node with value 2.\n</pre> <p>Example 2:</p> <pre>\nInput: root = [1,2,3], n = 3, x = 1\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is <code>n</code>.</li> <li><code>1 &lt;= x &lt;= n &lt;= 100</code></li> <li><code>n</code> is odd.</li> <li>1 &lt;= Node.val &lt;= n</li> <li>All the values of the tree are unique.</li> </ul>"},{"location":"LeetCode_Problems/1146/","title":"1146. Snapshot Array","text":"Problem <p>Implement a SnapshotArray that supports the following interface:</p> <ul> <li><code>SnapshotArray(int length)</code> initializes an array-like data structure with the given length. Initially, each element equals 0.</li> <li><code>void set(index, val)</code> sets the element at the given <code>index</code> to be equal to <code>val</code>.</li> <li><code>int snap()</code> takes a snapshot of the array and returns the <code>snap_id</code>: the total number of times we called <code>snap()</code> minus <code>1</code>.</li> <li><code>int get(index, snap_id)</code> returns the value at the given <code>index</code>, at the time we took the snapshot with the given <code>snap_id</code></li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: [\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\n[[3],[0,5],[],[0,6],[0,0]]\nOutput: [null,null,0,null,5]\nExplanation: \nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5);  // Set array[0] = 5\nsnapshotArr.snap();  // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= index &lt; length</code></li> <li><code>0 &lt;= val &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= snap_id &lt; </code>(the total number of times we call <code>snap()</code>)</li> <li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>set</code>, <code>snap</code>, and <code>get</code>.</li> </ul>"},{"location":"LeetCode_Problems/1147/","title":"1147. Longest Chunked Palindrome Decomposition","text":"Problem <p>You are given a string <code>text</code>. You should split it to k substrings <code>(subtext<sub>1</sub>, subtext<sub>2</sub>, ..., subtext<sub>k</sub>)</code> such that:</p> <ul> <li><code>subtext<sub>i</sub></code> is a non-empty string.</li> <li>The concatenation of all the substrings is equal to <code>text</code> (i.e., <code>subtext<sub>1</sub> + subtext<sub>2</sub> + ... + subtext<sub>k</sub> == text</code>).</li> <li><code>subtext<sub>i</sub> == subtext<sub>k - i + 1</sub></code> for all valid values of <code>i</code> (i.e., <code>1 &lt;= i &lt;= k</code>).</li> </ul> <p>Return the largest possible value of <code>k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: text = \"ghiabcdefhelloadamhelloabcdefghi\"\nOutput: 7\nExplanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".\n</pre> <p>Example 2:</p> <pre>\nInput: text = \"merchant\"\nOutput: 1\nExplanation: We can split the string on \"(merchant)\".\n</pre> <p>Example 3:</p> <pre>\nInput: text = \"antaprezatepzapreanta\"\nOutput: 11\nExplanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text.length &lt;= 1000</code></li> <li><code>text</code> consists only of lowercase English characters.</li> </ul>"},{"location":"LeetCode_Problems/1148/","title":"1148. Article Views I","text":"Problem <p>Table: <code>Views</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| article_id    | int     |\n| author_id     | int     |\n| viewer_id     | int     |\n| view_date     | date    |\n+---------------+---------+\nThere is no primary key (column with unique values) for this table, the table may have duplicate rows.\nEach row of this table indicates that some viewer viewed an article (written by some author) on some date. \nNote that equal author_id and viewer_id indicate the same person.\n</pre> <p> </p> <p>Write a solution to find all the authors that viewed at least one of their own articles.</p> <p>Return the result table sorted by <code>id</code> in ascending order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nViews table:\n+------------+-----------+-----------+------------+\n| article_id | author_id | viewer_id | view_date  |\n+------------+-----------+-----------+------------+\n| 1          | 3         | 5         | 2019-08-01 |\n| 1          | 3         | 6         | 2019-08-02 |\n| 2          | 7         | 7         | 2019-08-01 |\n| 2          | 7         | 6         | 2019-08-02 |\n| 4          | 7         | 1         | 2019-07-22 |\n| 3          | 4         | 4         | 2019-07-21 |\n| 3          | 4         | 4         | 2019-07-21 |\n+------------+-----------+-----------+------------+\nOutput: \n+------+\n| id   |\n+------+\n| 4    |\n| 7    |\n+------+\n</pre>"},{"location":"LeetCode_Problems/1149/","title":"1149. Article Views II","text":"Problem"},{"location":"LeetCode_Problems/1150/","title":"1150. Check If a Number Is Majority Element in a Sorted Array","text":"Problem"},{"location":"LeetCode_Problems/1151/","title":"1151. Minimum Swaps to Group All 1's Together","text":"Problem"},{"location":"LeetCode_Problems/1152/","title":"1152. Analyze User Website Visit Pattern","text":"Problem"},{"location":"LeetCode_Problems/1153/","title":"1153. String Transforms Into Another String","text":"Problem"},{"location":"LeetCode_Problems/1154/","title":"1154. Day of the Year","text":"Problem <p>Given a string <code>date</code> representing a Gregorian calendar date formatted as <code>YYYY-MM-DD</code>, return the day number of the year.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: date = \"2019-01-09\"\nOutput: 9\nExplanation: Given date is the 9th day of the year in 2019.\n</pre> <p>Example 2:</p> <pre>\nInput: date = \"2019-02-10\"\nOutput: 41\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>date.length == 10</code></li> <li><code>date[4] == date[7] == '-'</code>, and all other <code>date[i]</code>'s are digits</li> <li><code>date</code> represents a calendar date between Jan 1<sup>st</sup>, 1900 and Dec 31<sup>th</sup>, 2019.</li> </ul>"},{"location":"LeetCode_Problems/1155/","title":"1155. Number of Dice Rolls With Target Sum","text":"Problem <p>You have <code>n</code> dice, and each die has <code>k</code> faces numbered from <code>1</code> to <code>k</code>.</p> <p>Given three integers <code>n</code>, <code>k</code>, and <code>target</code>, return the number of possible ways (out of the <code>k<sup>n</sup></code> total ways) to roll the dice, so the sum of the face-up numbers equals <code>target</code>. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1, k = 6, target = 3\nOutput: 1\nExplanation: You throw one die with 6 faces.\nThere is only one way to get a sum of 3.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, k = 6, target = 7\nOutput: 6\nExplanation: You throw two dice, each with 6 faces.\nThere are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 30, k = 30, target = 500\nOutput: 222616187\nExplanation: The answer must be returned modulo 10<sup>9</sup> + 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n, k &lt;= 30</code></li> <li><code>1 &lt;= target &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1156/","title":"1156. Swap For Longest Repeated Character Substring","text":"Problem <p>You are given a string <code>text</code>. You can swap two of the characters in the <code>text</code>.</p> <p>Return the length of the longest substring with repeated characters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: text = \"ababa\"\nOutput: 3\nExplanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\" with length 3.\n</pre> <p>Example 2:</p> <pre>\nInput: text = \"aaabaaa\"\nOutput: 6\nExplanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\" with length 6.\n</pre> <p>Example 3:</p> <pre>\nInput: text = \"aaaaa\"\nOutput: 5\nExplanation: No need to swap, longest repeated character substring is \"aaaaa\" with length is 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>text</code> consist of lowercase English characters only.</li> </ul>"},{"location":"LeetCode_Problems/1157/","title":"1157. Online Majority Element In Subarray","text":"Problem <p>Design a data structure that efficiently finds the majority element of a given subarray.</p> <p>The majority element of a subarray is an element that occurs <code>threshold</code> times or more in the subarray.</p> <p>Implementing the <code>MajorityChecker</code> class:</p> <ul> <li><code>MajorityChecker(int[] arr)</code> Initializes the instance of the class with the given array <code>arr</code>.</li> <li><code>int query(int left, int right, int threshold)</code> returns the element in the subarray <code>arr[left...right]</code> that occurs at least <code>threshold</code> times, or <code>-1</code> if no such element exists.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MajorityChecker\", \"query\", \"query\", \"query\"]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]\nOutput\n[null, 1, -1, 2]\n\nExplanation\nMajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= left &lt;= right &lt; arr.length</code></li> <li><code>threshold &lt;= right - left + 1</code></li> <li><code>2 * threshold &gt; right - left + 1</code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>query</code>.</li> </ul>"},{"location":"LeetCode_Problems/1158/","title":"1158. Market Analysis I","text":"Problem <p>Table: <code>Users</code></p> <pre>\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| user_id        | int     |\n| join_date      | date    |\n| favorite_brand | varchar |\n+----------------+---------+\nuser_id is the primary key (column with unique values) of this table.\nThis table has the info of the users of an online shopping website where users can sell and buy items.\n</pre> <p> </p> <p>Table: <code>Orders</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| order_id      | int     |\n| order_date    | date    |\n| item_id       | int     |\n| buyer_id      | int     |\n| seller_id     | int     |\n+---------------+---------+\norder_id is the primary key (column with unique values) of this table.\nitem_id is a foreign key (reference column) to the Items table.\nbuyer_id and seller_id are foreign keys to the Users table.\n</pre> <p> </p> <p>Table: <code>Items</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| item_id       | int     |\n| item_brand    | varchar |\n+---------------+---------+\nitem_id is the primary key (column with unique values) of this table.\n</pre> <p> </p> <p>Write a solution\u00a0to find for each user, the join date and the number of orders they made as a buyer in <code>2019</code>.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nUsers table:\n+---------+------------+----------------+\n| user_id | join_date  | favorite_brand |\n+---------+------------+----------------+\n| 1       | 2018-01-01 | Lenovo         |\n| 2       | 2018-02-09 | Samsung        |\n| 3       | 2018-01-19 | LG             |\n| 4       | 2018-05-21 | HP             |\n+---------+------------+----------------+\nOrders table:\n+----------+------------+---------+----------+-----------+\n| order_id | order_date | item_id | buyer_id | seller_id |\n+----------+------------+---------+----------+-----------+\n| 1        | 2019-08-01 | 4       | 1        | 2         |\n| 2        | 2018-08-02 | 2       | 1        | 3         |\n| 3        | 2019-08-03 | 3       | 2        | 3         |\n| 4        | 2018-08-04 | 1       | 4        | 2         |\n| 5        | 2018-08-04 | 1       | 3        | 4         |\n| 6        | 2019-08-05 | 2       | 2        | 4         |\n+----------+------------+---------+----------+-----------+\nItems table:\n+---------+------------+\n| item_id | item_brand |\n+---------+------------+\n| 1       | Samsung    |\n| 2       | Lenovo     |\n| 3       | LG         |\n| 4       | HP         |\n+---------+------------+\nOutput: \n+-----------+------------+----------------+\n| buyer_id  | join_date  | orders_in_2019 |\n+-----------+------------+----------------+\n| 1         | 2018-01-01 | 1              |\n| 2         | 2018-02-09 | 2              |\n| 3         | 2018-01-19 | 0              |\n| 4         | 2018-05-21 | 0              |\n+-----------+------------+----------------+\n</pre>"},{"location":"LeetCode_Problems/1159/","title":"1159. Market Analysis II","text":"Problem"},{"location":"LeetCode_Problems/1160/","title":"1160. Find Words That Can Be Formed by Characters","text":"Problem <p>You are given an array of strings <code>words</code> and a string <code>chars</code>.</p> <p>A string is good if it can be formed by characters from chars (each character can only be used once).</p> <p>Return the sum of lengths of all good strings in words.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"\nOutput: 6\nExplanation: The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"\nOutput: 10\nExplanation: The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length, chars.length &lt;= 100</code></li> <li><code>words[i]</code> and <code>chars</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1161/","title":"1161. Maximum Level Sum of a Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, the level of its root is <code>1</code>, the level of its children is <code>2</code>, and so on.</p> <p>Return the smallest level <code>x</code> such that the sum of all the values of nodes at level <code>x</code> is maximal.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,7,0,7,-8,null,null]\nOutput: 2\nExplanation: \nLevel 1 sum = 1.\nLevel 2 sum = 7 + 0 = 7.\nLevel 3 sum = 7 + -8 = -1.\nSo we return the level with the maximum sum which is level 2.\n</pre> <p>Example 2:</p> <pre>\nInput: root = [989,null,10250,98693,-89388,null,null,null,-32127]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1162/","title":"1162. As Far from Land as Possible","text":"Problem <p>Given an <code>n x n</code> <code>grid</code>\u00a0containing only values <code>0</code> and <code>1</code>, where\u00a0<code>0</code> represents water\u00a0and <code>1</code> represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance.\u00a0If no land or water exists in the grid, return <code>-1</code>.</p> <p>The distance used in this problem is the Manhattan distance:\u00a0the distance between two cells <code>(x0, y0)</code> and <code>(x1, y1)</code> is <code>|x0 - x1| + |y0 - y1|</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,0,1],[0,0,0],[1,0,1]]\nOutput: 2\nExplanation: The cell (1, 1) is as far as possible from all the land with distance 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,0,0],[0,0,0],[0,0,0]]\nOutput: 4\nExplanation: The cell (2, 2) is as far as possible from all the land with distance 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= n\u00a0&lt;= 100</code></li> <li><code>grid[i][j]</code>\u00a0is <code>0</code> or <code>1</code></li> </ul>"},{"location":"LeetCode_Problems/1163/","title":"1163. Last Substring in Lexicographical Order","text":"Problem <p>Given a string <code>s</code>, return the last substring of <code>s</code> in lexicographical order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abab\"\nOutput: \"bab\"\nExplanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"leetcode\"\nOutput: \"tcode\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 4 * 10<sup>5</sup></code></li> <li><code>s</code> contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1164/","title":"1164. Product Price at a Given Date","text":"Problem <p>Table: <code>Products</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| new_price     | int     |\n| change_date   | date    |\n+---------------+---------+\n(product_id, change_date) is the primary key (combination of columns with unique values) of this table.\nEach row of this table indicates that the price of some product was changed to a new price at some date.</pre> <p> </p> <p>Write a solution to find the prices of all products on <code>2019-08-16</code>. Assume the price of all products before any change is <code>10</code>.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nProducts table:\n+------------+-----------+-------------+\n| product_id | new_price | change_date |\n+------------+-----------+-------------+\n| 1          | 20        | 2019-08-14  |\n| 2          | 50        | 2019-08-14  |\n| 1          | 30        | 2019-08-15  |\n| 1          | 35        | 2019-08-16  |\n| 2          | 65        | 2019-08-17  |\n| 3          | 20        | 2019-08-18  |\n+------------+-----------+-------------+\nOutput: \n+------------+-------+\n| product_id | price |\n+------------+-------+\n| 2          | 50    |\n| 1          | 35    |\n| 3          | 10    |\n+------------+-------+\n</pre>"},{"location":"LeetCode_Problems/1165/","title":"1165. Single-Row Keyboard","text":"Problem"},{"location":"LeetCode_Problems/1166/","title":"1166. Design File System","text":"Problem"},{"location":"LeetCode_Problems/1167/","title":"1167. Minimum Cost to Connect Sticks","text":"Problem"},{"location":"LeetCode_Problems/1168/","title":"1168. Optimize Water Distribution in a Village","text":"Problem"},{"location":"LeetCode_Problems/1169/","title":"1169. Invalid Transactions","text":"Problem <p>A transaction is possibly invalid if:</p> <ul> <li>the amount exceeds <code>$1000</code>, or;</li> <li>if it occurs within (and including) <code>60</code> minutes of another transaction with the same name in a different city.</li> </ul> <p>You are given an array of strings <code>transaction</code> where <code>transactions[i]</code> consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.</p> <p>Return a list of <code>transactions</code> that are possibly invalid. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nOutput: [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nExplanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.</pre> <p>Example 2:</p> <pre>\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\nOutput: [\"alice,50,1200,mtv\"]\n</pre> <p>Example 3:</p> <pre>\nInput: transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]\nOutput: [\"bob,50,1200,mtv\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>transactions.length &lt;= 1000</code></li> <li>Each <code>transactions[i]</code> takes the form <code>\"{name},{time},{amount},{city}\"</code></li> <li>Each <code>{name}</code> and <code>{city}</code> consist of lowercase English letters, and have lengths between <code>1</code> and <code>10</code>.</li> <li>Each <code>{time}</code> consist of digits, and represent an integer between <code>0</code> and <code>1000</code>.</li> <li>Each <code>{amount}</code> consist of digits, and represent an integer between <code>0</code> and <code>2000</code>.</li> </ul>"},{"location":"LeetCode_Problems/1170/","title":"1170. Compare Strings by Frequency of the Smallest Character","text":"Problem <p>Let the function <code>f(s)</code> be the frequency of the lexicographically smallest character in a non-empty string <code>s</code>. For example, if <code>s = \"dcce\"</code> then <code>f(s) = 2</code> because the lexicographically smallest character is <code>'c'</code>, which has a frequency of 2.</p> <p>You are given an array of strings <code>words</code> and another array of query strings <code>queries</code>. For each query <code>queries[i]</code>, count the number of words in <code>words</code> such that <code>f(queries[i])</code> &lt; <code>f(W)</code> for each <code>W</code> in <code>words</code>.</p> <p>Return an integer array <code>answer</code>, where each <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: queries = [\"cbd\"], words = [\"zaaaz\"]\nOutput: [1]\nExplanation: On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") &lt; f(\"zaaaz\").\n</pre> <p>Example 2:</p> <pre>\nInput: queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\nOutput: [1,2]\nExplanation: On the first query only f(\"bbb\") &lt; f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both &gt; f(\"cc\").\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= queries.length &lt;= 2000</code></li> <li><code>1 &lt;= words.length &lt;= 2000</code></li> <li><code>1 &lt;= queries[i].length, words[i].length &lt;= 10</code></li> <li><code>queries[i][j]</code>, <code>words[i][j]</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1171/","title":"1171. Remove Zero Sum Consecutive Nodes from Linked List","text":"Problem <p>Given the <code>head</code> of a linked list, we repeatedly delete consecutive sequences of nodes that sum to <code>0</code> until there are no such sequences.</p> <p>After doing so, return the head of the final linked list.\u00a0 You may return any such answer.</p> <p> </p> <p>(Note that in the examples below, all sequences are serializations of <code>ListNode</code> objects.)</p> <p>Example 1:</p> <pre>\nInput: head = [1,2,-3,3,1]\nOutput: [3,1]\nNote: The answer [1,2,1] would also be accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: head = [1,2,3,-3,4]\nOutput: [1,2,4]\n</pre> <p>Example 3:</p> <pre>\nInput: head = [1,2,3,-3,-2]\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The given linked list will contain between <code>1</code> and <code>1000</code> nodes.</li> <li>Each node in the linked list has <code>-1000 &lt;= node.val &lt;= 1000</code>.</li> </ul>"},{"location":"LeetCode_Problems/1172/","title":"1172. Dinner Plate Stacks","text":"Problem <p>You have an infinite number of stacks arranged in a row and numbered (left to right) from <code>0</code>, each of the stacks has the same maximum capacity.</p> <p>Implement the <code>DinnerPlates</code> class:</p> <ul> <li><code>DinnerPlates(int capacity)</code> Initializes the object with the maximum capacity of the stacks <code>capacity</code>.</li> <li><code>void push(int val)</code> Pushes the given integer <code>val</code> into the leftmost stack with a size less than <code>capacity</code>.</li> <li><code>int pop()</code> Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns <code>-1</code> if all the stacks are empty.</li> <li><code>int popAtStack(int index)</code> Returns the value at the top of the stack with the given index <code>index</code> and removes it from that stack or returns <code>-1</code> if the stack with that given index is empty.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"DinnerPlates\", \"push\", \"push\", \"push\", \"push\", \"push\", \"popAtStack\", \"push\", \"push\", \"popAtStack\", \"popAtStack\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[2], [1], [2], [3], [4], [5], [0], [20], [21], [0], [2], [], [], [], [], []]\nOutput\n[null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1]\n\nExplanation: \nDinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5);         // The stacks are now:  2  4\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 2.  The stacks are now:     4\n                                                       1  3  5\n                                                       \ufe48 \ufe48 \ufe48\nD.push(20);        // The stacks are now: 20  4\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.push(21);        // The stacks are now: 20  4 21\n                                           1  3  5\n                                           \ufe48 \ufe48 \ufe48\nD.popAtStack(0);   // Returns 20.  The stacks are now:     4 21\n                                                        1  3  5\n                                                        \ufe48 \ufe48 \ufe48\nD.popAtStack(2);   // Returns 21.  The stacks are now:     4\n                                                        1  3  5\n                                                        \ufe48 \ufe48 \ufe48 \nD.pop()            // Returns 5.  The stacks are now:      4\n                                                        1  3 \n                                                        \ufe48 \ufe48  \nD.pop()            // Returns 4.  The stacks are now:   1  3 \n                                                        \ufe48 \ufe48   \nD.pop()            // Returns 3.  The stacks are now:   1 \n                                                        \ufe48   \nD.pop()            // Returns 1.  There are no stacks.\nD.pop()            // Returns -1.  There are still no stacks.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= capacity &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= val &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= index &lt;= 10<sup>5</sup></code></li> <li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>push</code>, <code>pop</code>, and <code>popAtStack</code>.</li> </ul>"},{"location":"LeetCode_Problems/1173/","title":"1173. Immediate Food Delivery I","text":"Problem"},{"location":"LeetCode_Problems/1174/","title":"1174. Immediate Food Delivery II","text":"Problem <p>Table: <code>Delivery</code></p> <pre>\n+-----------------------------+---------+\n| Column Name                 | Type    |\n+-----------------------------+---------+\n| delivery_id                 | int     |\n| customer_id                 | int     |\n| order_date                  | date    |\n| customer_pref_delivery_date | date    |\n+-----------------------------+---------+\ndelivery_id is the column of unique values of this table.\nThe table holds information about food delivery to customers that make orders at some date and specify a preferred delivery date (on the same order date or after it).\n</pre> <p> </p> <p>If the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled.</p> <p>The first order of a customer is the order with the earliest order date that the customer made. It is guaranteed that a customer has precisely one first order.</p> <p>Write a solution to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nDelivery table:\n+-------------+-------------+------------+-----------------------------+\n| delivery_id | customer_id | order_date | customer_pref_delivery_date |\n+-------------+-------------+------------+-----------------------------+\n| 1           | 1           | 2019-08-01 | 2019-08-02                  |\n| 2           | 2           | 2019-08-02 | 2019-08-02                  |\n| 3           | 1           | 2019-08-11 | 2019-08-12                  |\n| 4           | 3           | 2019-08-24 | 2019-08-24                  |\n| 5           | 3           | 2019-08-21 | 2019-08-22                  |\n| 6           | 2           | 2019-08-11 | 2019-08-13                  |\n| 7           | 4           | 2019-08-09 | 2019-08-09                  |\n+-------------+-------------+------------+-----------------------------+\nOutput: \n+----------------------+\n| immediate_percentage |\n+----------------------+\n| 50.00                |\n+----------------------+\nExplanation: \nThe customer id 1 has a first order with delivery id 1 and it is scheduled.\nThe customer id 2 has a first order with delivery id 2 and it is immediate.\nThe customer id 3 has a first order with delivery id 5 and it is scheduled.\nThe customer id 4 has a first order with delivery id 7 and it is immediate.\nHence, half the customers have immediate first orders.\n</pre>"},{"location":"LeetCode_Problems/1175/","title":"1175. Prime Arrangements","text":"Problem <p>Return the number of permutations of 1 to <code>n</code> so that prime numbers are at prime indices (1-indexed.)</p> <p>(Recall that an integer\u00a0is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers\u00a0both smaller than it.)</p> <p>Since the answer may be large, return the answer modulo <code>10^9 + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5\nOutput: 12\nExplanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 100\nOutput: 682289015\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1176/","title":"1176. Diet Plan Performance","text":"Problem"},{"location":"LeetCode_Problems/1177/","title":"1177. Can Make Palindrome from Substring","text":"Problem <p>You are given a string <code>s</code> and array <code>queries</code> where <code>queries[i] = [left<sub>i</sub>, right<sub>i</sub>, k<sub>i</sub>]</code>. We may rearrange the substring <code>s[left<sub>i</sub>...right<sub>i</sub>]</code> for each query and then choose up to <code>k<sub>i</sub></code> of them to replace with any lowercase English letter.</p> <p>If the substring is possible to be a palindrome string after the operations above, the result of the query is <code>true</code>. Otherwise, the result is <code>false</code>.</p> <p>Return a boolean array <code>answer</code> where <code>answer[i]</code> is the result of the <code>i<sup>th</sup></code> query <code>queries[i]</code>.</p> <p>Note that each letter is counted individually for replacement, so if, for example <code>s[left<sub>i</sub>...right<sub>i</sub>] = \"aaa\"</code>, and <code>k<sub>i</sub> = 2</code>, we can only replace two of the letters. Also, note that no query modifies the initial string <code>s</code>.</p> <p> </p> <p>Example :</p> <pre>\nInput: s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]\nOutput: [true,false,false,true,true]\nExplanation:\nqueries[0]: substring = \"d\", is palidrome.\nqueries[1]: substring = \"bc\", is not palidrome.\nqueries[2]: substring = \"abcd\", is not palidrome after replacing only 1 character.\nqueries[3]: substring = \"abcd\", could be changed to \"abba\" which is palidrome. Also this can be changed to \"baab\" first rearrange it \"bacd\" then replace \"cd\" with \"ab\".\nqueries[4]: substring = \"abcda\", could be changed to \"abcba\" which is palidrome.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"lyb\", queries = [[0,1,0],[2,2,1]]\nOutput: [false,true]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, queries.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt; s.length</code></li> <li><code>0 &lt;= k<sub>i</sub> &lt;= s.length</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1178/","title":"1178. Number of Valid Words for Each Puzzle","text":"Problem <p>With respect to a given <code>puzzle</code> string, a <code>word</code> is valid if both the following conditions are satisfied:</p> <ul> <li><code>word</code> contains the first letter of <code>puzzle</code>.</li> <li>For each letter in <code>word</code>, that letter is in <code>puzzle</code>.     <ul> <li>For example, if the puzzle is <code>\"abcdefg\"</code>, then valid words are <code>\"faced\"</code>, <code>\"cabbage\"</code>, and <code>\"baggage\"</code>, while</li> <li>invalid words are <code>\"beefed\"</code> (does not include <code>'a'</code>) and <code>\"based\"</code> (includes <code>'s'</code> which is not in the puzzle).</li> </ul> </li> </ul> <p>Return an array <code>answer</code>, where <code>answer[i]</code> is the number of words in the given word list <code>words</code> that is valid with respect to the puzzle <code>puzzles[i]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]\nOutput: [1,1,3,2,4,0]\nExplanation: \n1 valid word for \"aboveyz\" : \"aaaa\" \n1 valid word for \"abrodyz\" : \"aaaa\"\n3 valid words for \"abslute\" : \"aaaa\", \"asas\", \"able\"\n2 valid words for \"absoryz\" : \"aaaa\", \"asas\"\n4 valid words for \"actresz\" : \"aaaa\", \"asas\", \"actt\", \"access\"\nThere are no valid words for \"gaswxyz\" cause none of the words in the list contains letter 'g'.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"apple\",\"pleas\",\"please\"], puzzles = [\"aelwxyz\",\"aelpxyz\",\"aelpsxy\",\"saelpxy\",\"xaelpsy\"]\nOutput: [0,1,3,2,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 10<sup>5</sup></code></li> <li><code>4 &lt;= words[i].length &lt;= 50</code></li> <li><code>1 &lt;= puzzles.length &lt;= 10<sup>4</sup></code></li> <li><code>puzzles[i].length == 7</code></li> <li><code>words[i]</code> and <code>puzzles[i]</code> consist of lowercase English letters.</li> <li>Each <code>puzzles[i] </code>does not contain repeated characters.</li> </ul>"},{"location":"LeetCode_Problems/1179/","title":"1179. Reformat Department Table","text":"Problem <p>Table: <code>Department</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| revenue     | int     |\n| month       | varchar |\n+-------------+---------+\nIn SQL,(id, month) is the primary key of this table.\nThe table has information about the revenue of each department per month.\nThe month has values in [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"].\n</pre> <p> </p> <p>Reformat the table such that there is a department id column and a revenue column for each month.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nDepartment table:\n+------+---------+-------+\n| id   | revenue | month |\n+------+---------+-------+\n| 1    | 8000    | Jan   |\n| 2    | 9000    | Jan   |\n| 3    | 10000   | Feb   |\n| 1    | 7000    | Feb   |\n| 1    | 6000    | Mar   |\n+------+---------+-------+\nOutput: \n+------+-------------+-------------+-------------+-----+-------------+\n| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |\n+------+-------------+-------------+-------------+-----+-------------+\n| 1    | 8000        | 7000        | 6000        | ... | null        |\n| 2    | 9000        | null        | null        | ... | null        |\n| 3    | null        | 10000       | null        | ... | null        |\n+------+-------------+-------------+-------------+-----+-------------+\nExplanation: The revenue from Apr to Dec is null.\nNote that the result table has 13 columns (1 for the department id + 12 for the months).\n</pre>"},{"location":"LeetCode_Problems/1180/","title":"1180. Count Substrings with Only One Distinct Letter","text":"Problem"},{"location":"LeetCode_Problems/1181/","title":"1181. Before and After Puzzle","text":"Problem"},{"location":"LeetCode_Problems/1182/","title":"1182. Shortest Distance to Target Color","text":"Problem"},{"location":"LeetCode_Problems/1183/","title":"1183. Maximum Number of Ones","text":"Problem"},{"location":"LeetCode_Problems/1184/","title":"1184. Distance Between Bus Stops","text":"Problem <p>A bus\u00a0has <code>n</code> stops numbered from <code>0</code> to <code>n - 1</code> that form\u00a0a circle. We know the distance between all pairs of neighboring stops where <code>distance[i]</code> is the distance between the stops number\u00a0<code>i</code> and <code>(i + 1) % n</code>.</p> <p>The bus goes along both directions\u00a0i.e. clockwise and counterclockwise.</p> <p>Return the shortest distance between the given\u00a0<code>start</code>\u00a0and <code>destination</code>\u00a0stops.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: distance = [1,2,3,4], start = 0, destination = 1\nOutput: 1\nExplanation: Distance between 0 and 1 is 1 or 9, minimum is 1.</pre> <p> </p> <p>Example 2:</p> <p></p> <pre>\nInput: distance = [1,2,3,4], start = 0, destination = 2\nOutput: 3\nExplanation: Distance between 0 and 2 is 3 or 7, minimum is 3.\n</pre> <p> </p> <p>Example 3:</p> <p></p> <pre>\nInput: distance = [1,2,3,4], start = 0, destination = 3\nOutput: 4\nExplanation: Distance between 0 and 3 is 6 or 4, minimum is 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n\u00a0&lt;= 10^4</code></li> <li><code>distance.length == n</code></li> <li><code>0 &lt;= start, destination &lt; n</code></li> <li><code>0 &lt;= distance[i] &lt;= 10^4</code></li> </ul>"},{"location":"LeetCode_Problems/1185/","title":"1185. Day of the Week","text":"Problem <p>Given a date, return the corresponding day of the week for that date.</p> <p>The input is given as three integers representing the <code>day</code>, <code>month</code> and <code>year</code> respectively.</p> <p>Return the answer as one of the following values\u00a0<code>{\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: day = 31, month = 8, year = 2019\nOutput: \"Saturday\"\n</pre> <p>Example 2:</p> <pre>\nInput: day = 18, month = 7, year = 1999\nOutput: \"Sunday\"\n</pre> <p>Example 3:</p> <pre>\nInput: day = 15, month = 8, year = 1993\nOutput: \"Sunday\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The given dates are valid dates between the years <code>1971</code> and <code>2100</code>.</li> </ul>"},{"location":"LeetCode_Problems/1186/","title":"1186. Maximum Subarray Sum with One Deletion","text":"Problem <p>Given an array of integers, return the maximum sum for a non-empty\u00a0subarray (contiguous elements) with at most one element deletion.\u00a0In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the\u00a0sum of the remaining elements is maximum possible.</p> <p>Note that the subarray needs to be non-empty after deleting one element.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,-2,0,3]\nOutput: 4\nExplanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,-2,-2,3]\nOutput: 3\nExplanation: We just choose [3] and it's the maximum sum.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [-1,-1,-1,-1]\nOutput: -1\nExplanation:\u00a0The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1187/","title":"1187. Make Array Strictly Increasing","text":"Problem <p>Given two integer arrays\u00a0<code>arr1</code> and <code>arr2</code>, return the minimum number of operations (possibly zero) needed\u00a0to make <code>arr1</code> strictly increasing.</p> <p>In one operation, you can choose two indices\u00a0<code>0 &lt;=\u00a0i &lt; arr1.length</code>\u00a0and\u00a0<code>0 &lt;= j &lt; arr2.length</code>\u00a0and do the assignment\u00a0<code>arr1[i] = arr2[j]</code>.</p> <p>If there is no way to make\u00a0<code>arr1</code>\u00a0strictly increasing,\u00a0return\u00a0<code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\nOutput: 1\nExplanation: Replace <code>5</code> with <code>2</code>, then <code>arr1 = [1, 2, 3, 6, 7]</code>.\n</pre> <p>Example 2:</p> <pre>\nInput: arr1 = [1,5,3,6,7], arr2 = [4,3,1]\nOutput: 2\nExplanation: Replace <code>5</code> with <code>3</code> and then replace <code>3</code> with <code>4</code>. <code>arr1 = [1, 3, 4, 6, 7]</code>.\n</pre> <p>Example 3:</p> <pre>\nInput: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\nOutput: -1\nExplanation: You can't make <code>arr1</code> strictly increasing.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr1.length, arr2.length &lt;= 2000</code></li> <li><code>0 &lt;= arr1[i], arr2[i] &lt;= 10^9</code></li> </ul> <p> </p>"},{"location":"LeetCode_Problems/1188/","title":"1188. Design Bounded Blocking Queue","text":"Problem"},{"location":"LeetCode_Problems/1189/","title":"1189. Maximum Number of Balloons","text":"Problem <p>Given a string <code>text</code>, you want to use the characters of <code>text</code> to form as many instances of the word \"balloon\" as possible.</p> <p>You can use each character in <code>text</code> at most once. Return the maximum number of instances that can be formed.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: text = \"nlaebolko\"\nOutput: 1\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: text = \"loonbalxballpoon\"\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: text = \"leetcode\"\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text.length &lt;= 10<sup>4</sup></code></li> <li><code>text</code> consists of lower case English letters only.</li> </ul>"},{"location":"LeetCode_Problems/1190/","title":"1190. Reverse Substrings Between Each Pair of Parentheses","text":"Problem <p>You are given a string <code>s</code> that consists of lower case English letters and brackets.</p> <p>Reverse the strings in each pair of matching parentheses, starting from the innermost one.</p> <p>Your result should not contain any brackets.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"(abcd)\"\nOutput: \"dcba\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"(u(love)i)\"\nOutput: \"iloveu\"\nExplanation: The substring \"love\" is reversed first, then the whole string is reversed.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"(ed(et(oc))el)\"\nOutput: \"leetcode\"\nExplanation: First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2000</code></li> <li><code>s</code> only contains lower case English characters and parentheses.</li> <li>It is guaranteed that all parentheses are balanced.</li> </ul>"},{"location":"LeetCode_Problems/1191/","title":"1191. K-Concatenation Maximum Sum","text":"Problem <p>Given an integer array <code>arr</code> and an integer <code>k</code>, modify the array by repeating it <code>k</code> times.</p> <p>For example, if <code>arr = [1, 2]</code> and <code>k = 3 </code>then the modified array will be <code>[1, 2, 1, 2, 1, 2]</code>.</p> <p>Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be <code>0</code> and its sum in that case is <code>0</code>.</p> <p>As the answer can be very large, return the answer modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2], k = 3\nOutput: 9\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,-2,1], k = 5\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [-1,-2], k = 7\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= arr[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1192/","title":"1192. Critical Connections in a Network","text":"Problem <p>There are <code>n</code> servers numbered from <code>0</code> to <code>n - 1</code> connected by undirected server-to-server <code>connections</code> forming a network where <code>connections[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents a connection between servers <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>. Any server can reach other servers directly or indirectly through the network.</p> <p>A critical connection is a connection that, if removed, will make some servers unable to reach some other server.</p> <p>Return all critical connections in the network in any order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]\nOutput: [[1,3]]\nExplanation: [[3,1]] is also accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, connections = [[0,1]]\nOutput: [[0,1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>n - 1 &lt;= connections.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>There are no repeated connections.</li> </ul>"},{"location":"LeetCode_Problems/1193/","title":"1193. Monthly Transactions I","text":"Problem <p>Table: <code>Transactions</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| country       | varchar |\n| state         | enum    |\n| amount        | int     |\n| trans_date    | date    |\n+---------------+---------+\nid is the primary key of this table.\nThe table has information about incoming transactions.\nThe state column is an enum of type [\"approved\", \"declined\"].\n</pre> <p> </p> <p>Write an SQL query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount.</p> <p>Return the result table in any order.</p> <p>The query result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nTransactions table:\n+------+---------+----------+--------+------------+\n| id   | country | state    | amount | trans_date |\n+------+---------+----------+--------+------------+\n| 121  | US      | approved | 1000   | 2018-12-18 |\n| 122  | US      | declined | 2000   | 2018-12-19 |\n| 123  | US      | approved | 2000   | 2019-01-01 |\n| 124  | DE      | approved | 2000   | 2019-01-07 |\n+------+---------+----------+--------+------------+\nOutput: \n+----------+---------+-------------+----------------+--------------------+-----------------------+\n| month    | country | trans_count | approved_count | trans_total_amount | approved_total_amount |\n+----------+---------+-------------+----------------+--------------------+-----------------------+\n| 2018-12  | US      | 2           | 1              | 3000               | 1000                  |\n| 2019-01  | US      | 1           | 1              | 2000               | 2000                  |\n| 2019-01  | DE      | 1           | 1              | 2000               | 2000                  |\n+----------+---------+-------------+----------------+--------------------+-----------------------+\n</pre>"},{"location":"LeetCode_Problems/1194/","title":"1194. Tournament Winners","text":"Problem"},{"location":"LeetCode_Problems/1195/","title":"1195. Fizz Buzz Multithreaded","text":"Problem <p>You have the four functions:</p> <ul> <li><code>printFizz</code> that prints the word <code>\"fizz\"</code> to the console,</li> <li><code>printBuzz</code> that prints the word <code>\"buzz\"</code> to the console,</li> <li><code>printFizzBuzz</code> that prints the word <code>\"fizzbuzz\"</code> to the console, and</li> <li><code>printNumber</code> that prints a given integer to the console.</li> </ul> <p>You are given an instance of the class <code>FizzBuzz</code> that has four functions: <code>fizz</code>, <code>buzz</code>, <code>fizzbuzz</code> and <code>number</code>. The same instance of <code>FizzBuzz</code> will be passed to four different threads:</p> <ul> <li>Thread A: calls <code>fizz()</code> that should output the word <code>\"fizz\"</code>.</li> <li>Thread B: calls <code>buzz()</code> that should output the word <code>\"buzz\"</code>.</li> <li>Thread C: calls <code>fizzbuzz()</code> that should output the word <code>\"fizzbuzz\"</code>.</li> <li>Thread D: calls <code>number()</code> that should only output the integers.</li> </ul> <p>Modify the given class to output the series <code>[1, 2, \"fizz\", 4, \"buzz\", ...]</code> where the <code>i<sup>th</sup></code> token (1-indexed) of the series is:</p> <ul> <li><code>\"fizzbuzz\"</code> if <code>i</code> is divisible by <code>3</code> and <code>5</code>,</li> <li><code>\"fizz\"</code> if <code>i</code> is divisible by <code>3</code> and not <code>5</code>,</li> <li><code>\"buzz\"</code> if <code>i</code> is divisible by <code>5</code> and not <code>3</code>, or</li> <li><code>i</code> if <code>i</code> is not divisible by <code>3</code> or <code>5</code>.</li> </ul> <p>Implement the <code>FizzBuzz</code> class:</p> <ul> <li><code>FizzBuzz(int n)</code> Initializes the object with the number <code>n</code> that represents the length of the sequence that should be printed.</li> <li><code>void fizz(printFizz)</code> Calls <code>printFizz</code> to output <code>\"fizz\"</code>.</li> <li><code>void buzz(printBuzz)</code> Calls <code>printBuzz</code> to output <code>\"buzz\"</code>.</li> <li><code>void fizzbuzz(printFizzBuzz)</code> Calls <code>printFizzBuzz</code> to output <code>\"fizzbuzz\"</code>.</li> <li><code>void number(printNumber)</code> Calls <code>printnumber</code> to output the numbers.</li> </ul> <p> </p> <p>Example 1:</p> <pre>Input: n = 15\nOutput: [1,2,\"fizz\",4,\"buzz\",\"fizz\",7,8,\"fizz\",\"buzz\",11,\"fizz\",13,14,\"fizzbuzz\"]\n</pre> <p>Example 2:</p> <pre>Input: n = 5\nOutput: [1,2,\"fizz\",4,\"buzz\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/1196/","title":"1196. How Many Apples Can You Put into the Basket","text":"Problem"},{"location":"LeetCode_Problems/1197/","title":"1197. Minimum Knight Moves","text":"Problem"},{"location":"LeetCode_Problems/1198/","title":"1198. Find Smallest Common Element in All Rows","text":"Problem"},{"location":"LeetCode_Problems/1199/","title":"1199. Minimum Time to Build Blocks","text":"Problem"},{"location":"LeetCode_Problems/1200/","title":"1200. Minimum Absolute Difference","text":"Problem <p>Given an array of distinct integers <code>arr</code>, find all pairs of elements with the minimum absolute difference of any two elements.</p> <p>Return a list of pairs in ascending order(with respect to pairs), each pair <code>[a, b]</code> follows</p> <ul> <li><code>a, b</code> are from <code>arr</code></li> <li><code>a &lt; b</code></li> <li><code>b - a</code> equals to the minimum absolute difference of any two elements in <code>arr</code></li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [4,2,1,3]\nOutput: [[1,2],[2,3],[3,4]]\nExplanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,3,6,10,15]\nOutput: [[1,3]]\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [3,8,-10,23,19,-4,-14,27]\nOutput: [[-14,-10],[19,23],[23,27]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1201/","title":"1201. Ugly Number III","text":"Problem <p>An ugly number is a positive integer that is divisible by <code>a</code>, <code>b</code>, or <code>c</code>.</p> <p>Given four integers <code>n</code>, <code>a</code>, <code>b</code>, and <code>c</code>, return the <code>n<sup>th</sup></code> ugly number.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, a = 2, b = 3, c = 5\nOutput: 4\nExplanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3<sup>rd</sup> is 4.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4, a = 2, b = 3, c = 4\nOutput: 6\nExplanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4<sup>th</sup> is 6.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 5, a = 2, b = 11, c = 13\nOutput: 10\nExplanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5<sup>th</sup> is 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n, a, b, c &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= a * b * c &lt;= 10<sup>18</sup></code></li> <li>It is guaranteed that the result will be in range <code>[1, 2 * 10<sup>9</sup>]</code>.</li> </ul>"},{"location":"LeetCode_Problems/1202/","title":"1202. Smallest String With Swaps","text":"Problem <p>You are given a string <code>s</code>, and an array of pairs of indices in the string\u00a0<code>pairs</code>\u00a0where\u00a0<code>pairs[i] =\u00a0[a, b]</code>\u00a0indicates 2 indices(0-indexed) of the string.</p> <p>You can\u00a0swap the characters at any pair of indices in the given\u00a0<code>pairs</code> any number of times.</p> <p>Return the\u00a0lexicographically smallest string that <code>s</code>\u00a0can be changed to after using the swaps.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"dcab\", pairs = [[0,3],[1,2]]\nOutput: \"bacd\"\nExplaination: \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[1] and s[2], s = \"bacd\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]\nOutput: \"abcd\"\nExplaination: \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[0] and s[2], s = \"acbd\"\nSwap s[1] and s[2], s = \"abcd\"</pre> <p>Example 3:</p> <pre>\nInput: s = \"cba\", pairs = [[0,1],[1,2]]\nOutput: \"abc\"\nExplaination: \nSwap s[0] and s[1], s = \"bca\"\nSwap s[1] and s[2], s = \"bac\"\nSwap s[0] and s[1], s = \"abc\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10^5</code></li> <li><code>0 &lt;= pairs.length &lt;= 10^5</code></li> <li><code>0 &lt;= pairs[i][0], pairs[i][1] &lt;\u00a0s.length</code></li> <li><code>s</code>\u00a0only contains lower case English letters.</li> </ul>"},{"location":"LeetCode_Problems/1203/","title":"1203. Sort Items by Groups Respecting Dependencies","text":"Problem <p>There are\u00a0<code>n</code>\u00a0items each\u00a0belonging to zero or one of\u00a0<code>m</code>\u00a0groups where <code>group[i]</code>\u00a0is the group that the <code>i</code>-th item belongs to and it's equal to <code>-1</code>\u00a0if the <code>i</code>-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.</p> <p>Return a sorted list of the items such that:</p> <ul> <li>The items that belong to the same group are next to each other in the sorted list.</li> <li>There are some\u00a0relations\u00a0between these items where\u00a0<code>beforeItems[i]</code>\u00a0is a list containing all the items that should come before the\u00a0<code>i</code>-th item in the sorted array (to the left of the\u00a0<code>i</code>-th item).</li> </ul> <p>Return any solution if there is more than one solution and return an empty list\u00a0if there is no solution.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]\nOutput: [6,3,4,1,5,2,0,7]\n</pre> <p>Example 2:</p> <pre>\nInput: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]\nOutput: []\nExplanation:\u00a0This is the same as example 1 except that 4 needs to be before 6 in the sorted list.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m &lt;= n &lt;= 3 * 10<sup>4</sup></code></li> <li><code>group.length == beforeItems.length == n</code></li> <li><code>-1 &lt;= group[i] &lt;= m - 1</code></li> <li><code>0 &lt;= beforeItems[i].length &lt;= n - 1</code></li> <li><code>0 &lt;= beforeItems[i][j] &lt;= n - 1</code></li> <li><code>i != beforeItems[i][j]</code></li> <li><code>beforeItems[i]\u00a0</code>does not contain\u00a0duplicates elements.</li> </ul>"},{"location":"LeetCode_Problems/1204/","title":"1204. Last Person to Fit in the Bus","text":"Problem <p>Table: <code>Queue</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| person_id   | int     |\n| person_name | varchar |\n| weight      | int     |\n| turn        | int     |\n+-------------+---------+\nperson_id column contains unique values.\nThis table has the information about all people waiting for a bus.\nThe person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table.\nturn determines the order of which the people will board the bus, where turn=1 denotes the first person to board and turn=n denotes the last person to board.\nweight is the weight of the person in kilograms.\n</pre> <p> </p> <p>There is a queue of people waiting to board a bus. However, the bus has a weight limit of <code>1000</code> kilograms, so there may be some people who cannot board.</p> <p>Write a solution to find the <code>person_name</code> of the last person that can fit on the bus without exceeding the weight limit. The test cases are generated such that the first person does not exceed the weight limit.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nQueue table:\n+-----------+-------------+--------+------+\n| person_id | person_name | weight | turn |\n+-----------+-------------+--------+------+\n| 5         | Alice       | 250    | 1    |\n| 4         | Bob         | 175    | 5    |\n| 3         | Alex        | 350    | 2    |\n| 6         | John Cena   | 400    | 3    |\n| 1         | Winston     | 500    | 6    |\n| 2         | Marie       | 200    | 4    |\n+-----------+-------------+--------+------+\nOutput: \n+-------------+\n| person_name |\n+-------------+\n| John Cena   |\n+-------------+\nExplanation: The folowing table is ordered by the turn for simplicity.\n+------+----+-----------+--------+--------------+\n| Turn | ID | Name      | Weight | Total Weight |\n+------+----+-----------+--------+--------------+\n| 1    | 5  | Alice     | 250    | 250          |\n| 2    | 3  | Alex      | 350    | 600          |\n| 3    | 6  | John Cena | 400    | 1000         | (last person to board)\n| 4    | 2  | Marie     | 200    | 1200         | (cannot board)\n| 5    | 4  | Bob       | 175    | ___          |\n| 6    | 1  | Winston   | 500    | ___          |\n+------+----+-----------+--------+--------------+\n</pre>"},{"location":"LeetCode_Problems/1205/","title":"1205. Monthly Transactions II","text":"Problem"},{"location":"LeetCode_Problems/1206/","title":"1206. Design Skiplist","text":"Problem <p>Design a Skiplist without using any built-in libraries.</p> <p>A skiplist is a data structure that takes <code>O(log(n))</code> time to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists.</p> <p>For example, we have a Skiplist containing <code>[30,40,50,60,70,90]</code> and we want to add <code>80</code> and <code>45</code> into it. The Skiplist works this way:</p> <p> Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons</p> <p>You can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add, erase and search can be faster than <code>O(n)</code>. It can be proven that the average time complexity for each operation is <code>O(log(n))</code> and space complexity is <code>O(n)</code>.</p> <p>See more about Skiplist: https://en.wikipedia.org/wiki/Skip_list</p> <p>Implement the <code>Skiplist</code> class:</p> <ul> <li><code>Skiplist()</code> Initializes the object of the skiplist.</li> <li><code>bool search(int target)</code> Returns <code>true</code> if the integer <code>target</code> exists in the Skiplist or <code>false</code> otherwise.</li> <li><code>void add(int num)</code> Inserts the value <code>num</code> into the SkipList.</li> <li><code>bool erase(int num)</code> Removes the value <code>num</code> from the Skiplist and returns <code>true</code>. If <code>num</code> does not exist in the Skiplist, do nothing and return <code>false</code>. If there exist multiple <code>num</code> values, removing any one of them is fine.</li> </ul> <p>Note that duplicates may exist in the Skiplist, your code needs to handle this situation.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Skiplist\", \"add\", \"add\", \"add\", \"search\", \"add\", \"search\", \"erase\", \"erase\", \"search\"]\n[[], [1], [2], [3], [0], [4], [1], [0], [1], [1]]\nOutput\n[null, null, null, null, false, null, true, false, true, false]\n\nExplanation\nSkiplist skiplist = new Skiplist();\nskiplist.add(1);\nskiplist.add(2);\nskiplist.add(3);\nskiplist.search(0); // return False\nskiplist.add(4);\nskiplist.search(1); // return True\nskiplist.erase(0);  // return False, 0 is not in skiplist.\nskiplist.erase(1);  // return True\nskiplist.search(1); // return False, 1 has already been erased.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num, target &lt;= 2 * 10<sup>4</sup></code></li> <li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>search</code>, <code>add</code>, and <code>erase</code>.</li> </ul>"},{"location":"LeetCode_Problems/1207/","title":"1207. Unique Number of Occurrences","text":"Problem <p>Given an array of integers <code>arr</code>, return <code>true</code> if the number of occurrences of each value in the array is unique or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,2,1,1,3]\nOutput: true\nExplanation:\u00a0The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2]\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [-3,0,1,-3,1,1,1,-3,10,0]\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 1000</code></li> <li><code>-1000 &lt;= arr[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1208/","title":"1208. Get Equal Substrings Within Budget","text":"Problem <p>You are given two strings <code>s</code> and <code>t</code> of the same length and an integer <code>maxCost</code>.</p> <p>You want to change <code>s</code> to <code>t</code>. Changing the <code>i<sup>th</sup></code> character of <code>s</code> to <code>i<sup>th</sup></code> character of <code>t</code> costs <code>|s[i] - t[i]|</code> (i.e., the absolute difference between the ASCII values of the characters).</p> <p>Return the maximum length of a substring of <code>s</code> that can be changed to be the same as the corresponding substring of <code>t</code> with a cost less than or equal to <code>maxCost</code>. If there is no substring from <code>s</code> that can be changed to its corresponding substring from <code>t</code>, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcd\", t = \"bcdf\", maxCost = 3\nOutput: 3\nExplanation: \"abc\" of s can change to \"bcd\".\nThat costs 3, so the maximum length is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcd\", t = \"cdef\", maxCost = 3\nOutput: 1\nExplanation: Each character in s costs 2 to change to character in t,  so the maximum length is 1.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"abcd\", t = \"acde\", maxCost = 0\nOutput: 1\nExplanation: You cannot make any change, so the maximum length is 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>t.length == s.length</code></li> <li><code>0 &lt;= maxCost &lt;= 10<sup>6</sup></code></li> <li><code>s</code> and <code>t</code> consist of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1209/","title":"1209. Remove All Adjacent Duplicates in String II","text":"Problem <p>You are given a string <code>s</code> and an integer <code>k</code>, a <code>k</code> duplicate removal consists of choosing <code>k</code> adjacent and equal letters from <code>s</code> and removing them, causing the left and the right side of the deleted substring to concatenate together.</p> <p>We repeatedly make <code>k</code> duplicate removals on <code>s</code> until we no longer can.</p> <p>Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcd\", k = 2\nOutput: \"abcd\"\nExplanation: There's nothing to delete.</pre> <p>Example 2:</p> <pre>\nInput: s = \"deeedbbcccbdaa\", k = 3\nOutput: \"aa\"\nExplanation: \nFirst delete \"eee\" and \"ccc\", get \"ddbbbdaa\"\nThen delete \"bbb\", get \"dddaa\"\nFinally delete \"ddd\", get \"aa\"</pre> <p>Example 3:</p> <pre>\nInput: s = \"pbbcggttciiippooaais\", k = 2\nOutput: \"ps\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>2 &lt;= k &lt;= 10<sup>4</sup></code></li> <li><code>s</code> only contains lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1210/","title":"1210. Minimum Moves to Reach Target with Rotations","text":"Problem <p>In an\u00a0<code>n*n</code>\u00a0grid, there is a snake that spans 2 cells and starts moving from the top left corner at <code>(0, 0)</code> and <code>(0, 1)</code>. The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at\u00a0<code>(n-1, n-2)</code>\u00a0and\u00a0<code>(n-1, n-1)</code>.</p> <p>In one move the snake can:</p> <ul> <li>Move one cell to the right\u00a0if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.</li> <li>Move down one cell\u00a0if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.</li> <li>Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from\u00a0<code>(r, c)</code>\u00a0and\u00a0<code>(r, c+1)</code>\u00a0to\u00a0<code>(r, c)</code>\u00a0and\u00a0<code>(r+1, c)</code>. </li> <li>Rotate counterclockwise\u00a0if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from\u00a0<code>(r, c)</code>\u00a0and\u00a0<code>(r+1, c)</code>\u00a0to\u00a0<code>(r, c)</code>\u00a0and\u00a0<code>(r, c+1)</code>. </li> </ul> <p>Return the minimum number of moves to reach the target.</p> <p>If there is no way to reach the target, return\u00a0<code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,0,0,0,0,1],\n               [1,1,0,0,1,0],\n\u00a0              [0,0,0,0,1,1],\n\u00a0              [0,0,1,0,1,0],\n\u00a0              [0,1,1,0,0,0],\n\u00a0              [0,1,1,0,0,0]]\nOutput: 11\nExplanation:\nOne possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[0,0,1,1,1,1],\n\u00a0              [0,0,0,0,1,1],\n\u00a0              [1,1,0,0,0,1],\n\u00a0              [1,1,1,0,0,1],\n\u00a0              [1,1,1,0,0,1],\n\u00a0              [1,1,1,0,0,0]]\nOutput: 9\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 1</code></li> <li>It is guaranteed that the snake starts at empty cells.</li> </ul>"},{"location":"LeetCode_Problems/1211/","title":"1211. Queries Quality and Percentage","text":"Problem <p>Table: <code>Queries</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| query_name  | varchar |\n| result      | varchar |\n| position    | int     |\n| rating      | int     |\n+-------------+---------+\nThis table may have duplicate rows.\nThis table contains information collected from some queries on a database.\nThe <code>position</code> column has a value from 1 to 500.\nThe <code>rating</code> column has a value from 1 to 5. Query with <code>rating</code> less than 3 is a poor query.\n</pre> <p> </p> <p>We define query <code>quality</code> as:</p> <p>The average of the ratio between query rating and its position.</p> <p>We also define <code>poor query percentage</code> as:</p> <p>The percentage of all queries with rating less than 3.</p> <p>Write a solution to find each <code>query_name</code>, the <code>quality</code> and <code>poor_query_percentage</code>.</p> <p>Both <code>quality</code> and <code>poor_query_percentage</code> should be rounded to 2 decimal places.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nQueries table:\n+------------+-------------------+----------+--------+\n| query_name | result            | position | rating |\n+------------+-------------------+----------+--------+\n| Dog        | Golden Retriever  | 1        | 5      |\n| Dog        | German Shepherd   | 2        | 5      |\n| Dog        | Mule              | 200      | 1      |\n| Cat        | Shirazi           | 5        | 2      |\n| Cat        | Siamese           | 3        | 3      |\n| Cat        | Sphynx            | 7        | 4      |\n+------------+-------------------+----------+--------+\nOutput: \n+------------+---------+-----------------------+\n| query_name | quality | poor_query_percentage |\n+------------+---------+-----------------------+\n| Dog        | 2.50    | 33.33                 |\n| Cat        | 0.66    | 33.33                 |\n+------------+---------+-----------------------+\nExplanation: \nDog queries quality is ((5 / 1) + (5 / 2) + (1 / 200)) / 3 = 2.50\nDog queries poor_ query_percentage is (1 / 3) * 100 = 33.33\n\nCat queries quality equals ((2 / 5) + (3 / 3) + (4 / 7)) / 3 = 0.66\nCat queries poor_ query_percentage is (1 / 3) * 100 = 33.33\n</pre>"},{"location":"LeetCode_Problems/1212/","title":"1212. Team Scores in Football Tournament","text":"Problem"},{"location":"LeetCode_Problems/1213/","title":"1213. Intersection of Three Sorted Arrays","text":"Problem"},{"location":"LeetCode_Problems/1214/","title":"1214. Two Sum BSTs","text":"Problem"},{"location":"LeetCode_Problems/1215/","title":"1215. Stepping Numbers","text":"Problem"},{"location":"LeetCode_Problems/1216/","title":"1216. Valid Palindrome III","text":"Problem"},{"location":"LeetCode_Problems/1217/","title":"1217. Minimum Cost to Move Chips to The Same Position","text":"Problem <p>We have <code>n</code> chips, where the position of the <code>i<sup>th</sup></code> chip is <code>position[i]</code>.</p> <p>We need to move all the chips to the same position. In one step, we can change the position of the <code>i<sup>th</sup></code> chip from <code>position[i]</code> to:</p> <ul> <li><code>position[i] + 2</code> or <code>position[i] - 2</code> with <code>cost = 0</code>.</li> <li><code>position[i] + 1</code> or <code>position[i] - 1</code> with <code>cost = 1</code>.</li> </ul> <p>Return the minimum cost needed to move all the chips to the same position.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: position = [1,2,3]\nOutput: 1\nExplanation: First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: position = [2,2,2,3,3]\nOutput: 2\nExplanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.\n</pre> <p>Example 3:</p> <pre>\nInput: position = [1,1000000000]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= position.length &lt;= 100</code></li> <li><code>1 &lt;= position[i] &lt;= 10^9</code></li> </ul>"},{"location":"LeetCode_Problems/1218/","title":"1218. Longest Arithmetic Subsequence of Given Difference","text":"Problem <p>Given an integer array <code>arr</code> and an integer <code>difference</code>, return the length of the longest subsequence in <code>arr</code> which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals <code>difference</code>.</p> <p>A subsequence is a sequence that can be derived from <code>arr</code> by deleting some or no elements without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,3,5,7], difference = 1\nOutput: 1\nExplanation: The longest arithmetic subsequence is any single element.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [1,5,7,8,5,3,4,2,1], difference = -2\nOutput: 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= arr[i], difference &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1219/","title":"1219. Path with Maximum Gold","text":"Problem <p>In a gold mine <code>grid</code> of size <code>m x n</code>, each cell in this mine has an integer representing the amount of gold in that cell, <code>0</code> if it is empty.</p> <p>Return the maximum amount of gold you can collect under the conditions:</p> <ul> <li>Every time you are located in a cell you will collect all the gold in that cell.</li> <li>From your position, you can walk one step to the left, right, up, or down.</li> <li>You can't visit the same cell more than once.</li> <li>Never visit a cell with <code>0</code> gold.</li> <li>You can start and stop collecting gold from any position in the grid that has some gold.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n [5,8,7],\n [0,9,0]]\nPath to get the maximum gold, 9 -&gt; 8 -&gt; 7.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation:\n[[1,0,7],\n [2,0,6],\n [3,4,5],\n [0,3,0],\n [9,0,20]]\nPath to get the maximum gold, 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 15</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 100</code></li> <li>There are at most 25 cells containing gold.</li> </ul>"},{"location":"LeetCode_Problems/1220/","title":"1220. Count Vowels Permutation","text":"Problem <p>Given an integer <code>n</code>, your task is to count how many strings of length <code>n</code> can be formed under the following rules:</p> <ul> <li>Each character is a lower case vowel\u00a0(<code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, <code>'u'</code>)</li> <li>Each vowel\u00a0<code>'a'</code> may only be followed by an <code>'e'</code>.</li> <li>Each vowel\u00a0<code>'e'</code> may only be followed by an <code>'a'</code>\u00a0or an <code>'i'</code>.</li> <li>Each vowel\u00a0<code>'i'</code> may not be followed by another <code>'i'</code>.</li> <li>Each vowel\u00a0<code>'o'</code> may only be followed by an <code>'i'</code> or a\u00a0<code>'u'</code>.</li> <li>Each vowel\u00a0<code>'u'</code> may only be followed by an <code>'a'.</code></li> </ul> <p>Since the answer\u00a0may be too large,\u00a0return it modulo <code>10^9 + 7.</code></p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: 5\nExplanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: 10\nExplanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".\n</pre> <p>Example 3:\u00a0</p> <pre>\nInput: n = 5\nOutput: 68</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2 * 10^4</code></li> </ul>"},{"location":"LeetCode_Problems/1221/","title":"1221. Split a String in Balanced Strings","text":"Problem <p>Balanced strings are those that have an equal quantity of <code>'L'</code> and <code>'R'</code> characters.</p> <p>Given a balanced string <code>s</code>, split it into some number of substrings such that:</p> <ul> <li>Each substring is balanced.</li> </ul> <p>Return the maximum number of balanced strings you can obtain.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"RLRRLLRLRL\"\nOutput: 4\nExplanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"RLRRRLLRLL\"\nOutput: 2\nExplanation: s can be split into \"RL\", \"RRRLLRLL\", each substring contains same number of 'L' and 'R'.\nNote that s cannot be split into \"RL\", \"RR\", \"RL\", \"LR\", \"LL\", because the 2<sup>nd</sup> and 5<sup>th</sup> substrings are not balanced.</pre> <p>Example 3:</p> <pre>\nInput: s = \"LLLLRRRR\"\nOutput: 1\nExplanation: s can be split into \"LLLLRRRR\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'L'</code> or <code>'R'</code>.</li> <li><code>s</code> is a balanced string.</li> </ul>"},{"location":"LeetCode_Problems/1222/","title":"1222. Queens That Can Attack the King","text":"Problem <p>On a 0-indexed <code>8 x 8</code> chessboard, there can be multiple black queens ad one white king.</p> <p>You are given a 2D integer array <code>queens</code> where <code>queens[i] = [xQueen<sub>i</sub>, yQueen<sub>i</sub>]</code> represents the position of the <code>i<sup>th</sup></code> black queen on the chessboard. You are also given an integer array <code>king</code> of length <code>2</code> where <code>king = [xKing, yKing]</code> represents the position of the white king.</p> <p>Return the coordinates of the black queens that can directly attack the king. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]\nOutput: [[0,1],[1,0],[3,3]]\nExplanation: The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]\nOutput: [[2,2],[3,4],[4,4]]\nExplanation: The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= queens.length &lt; 64</code></li> <li><code>queens[i].length == king.length == 2</code></li> <li><code>0 &lt;= xQueen<sub>i</sub>, yQueen<sub>i</sub>, xKing, yKing &lt; 8</code></li> <li>All the given positions are unique.</li> </ul>"},{"location":"LeetCode_Problems/1223/","title":"1223. Dice Roll Simulation","text":"Problem <p>A die simulator generates a random number from <code>1</code> to <code>6</code> for each roll. You introduced a constraint to the generator such that it cannot roll the number <code>i</code> more than <code>rollMax[i]</code> (1-indexed) consecutive times.</p> <p>Given an array of integers <code>rollMax</code> and an integer <code>n</code>, return the number of distinct sequences that can be obtained with exact <code>n</code> rolls. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Two sequences are considered different if at least one element differs from each other.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2, rollMax = [1,1,2,2,2,3]\nOutput: 34\nExplanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, rollMax = [1,1,1,1,1,1]\nOutput: 30\n</pre> <p>Example 3:</p> <pre>\nInput: n = 3, rollMax = [1,1,1,2,2,3]\nOutput: 181\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 5000</code></li> <li><code>rollMax.length == 6</code></li> <li><code>1 &lt;= rollMax[i] &lt;= 15</code></li> </ul>"},{"location":"LeetCode_Problems/1224/","title":"1224. Maximum Equal Frequency","text":"Problem <p>Given an array <code>nums</code> of positive integers, return the longest possible length of an array prefix of <code>nums</code>, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.</p> <p>If after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,2,1,1,5,3,3,5]\nOutput: 7\nExplanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4] = 5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]\nOutput: 13\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1225/","title":"1225. Report Contiguous Dates","text":"Problem"},{"location":"LeetCode_Problems/1226/","title":"1226. The Dining Philosophers","text":"Problem <p>Five silent philosophers\u00a0sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.</p> <p>Each philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.</p> <p>Eating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed.</p> <p>Design a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve;\u00a0i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think.</p> <p></p> <p>The problem statement and the image above are taken from wikipedia.org</p> <p> </p> <p>The philosophers' ids are numbered from 0 to 4 in a clockwise order. Implement the function\u00a0<code>void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)</code> where:</p> <ul> <li><code>philosopher</code>\u00a0is the id of the philosopher who wants to eat.</li> <li><code>pickLeftFork</code>\u00a0and\u00a0<code>pickRightFork</code>\u00a0are functions you can call to pick the corresponding forks of that philosopher.</li> <li><code>eat</code>\u00a0is a function you can call to let the philosopher eat once he has picked\u00a0both forks.</li> <li><code>putLeftFork</code>\u00a0and\u00a0<code>putRightFork</code>\u00a0are functions you can call to put down the corresponding forks of that philosopher.</li> <li>The philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number).</li> </ul> <p>Five threads, each representing a philosopher, will\u00a0simultaneously use one object of your class to simulate the process. The function may be called for the same philosopher more than once, even before the last call ends.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]\nExplanation:\nn is the number of times each philosopher will call the function.\nThe output array describes the calls you made to the functions controlling the forks and the eat function, its format is:\noutput[i] = [a, b, c] (three integers)\n- a is the id of a philosopher.\n- b specifies the fork: {1 : left, 2 : right}.\n- c specifies the operation: {1 : pick, 2 : put, 3 : eat}.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 60</code></li> </ul>"},{"location":"LeetCode_Problems/1227/","title":"1227. Airplane Seat Assignment Probability","text":"Problem <p><code>n</code> passengers board an airplane with exactly <code>n</code> seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:</p> <ul> <li>Take their own seat if it is still available, and</li> <li>Pick other seats randomly when they find their seat occupied</li> </ul> <p>Return the probability that the <code>n<sup>th</sup></code> person gets his own seat.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: 1.00000\nExplanation: The first person can only get the first seat.</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: 0.50000\nExplanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1228/","title":"1228. Missing Number In Arithmetic Progression","text":"Problem"},{"location":"LeetCode_Problems/1229/","title":"1229. Meeting Scheduler","text":"Problem"},{"location":"LeetCode_Problems/1230/","title":"1230. Toss Strange Coins","text":"Problem"},{"location":"LeetCode_Problems/1231/","title":"1231. Divide Chocolate","text":"Problem"},{"location":"LeetCode_Problems/1232/","title":"1232. Check If It Is a Straight Line","text":"Problem <p>You are given an array\u00a0<code>coordinates</code>, <code>coordinates[i] = [x, y]</code>, where <code>[x, y]</code> represents the coordinate of a point. Check if these points\u00a0make a straight line in the XY plane.</p> <p> </p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;=\u00a0coordinates.length &lt;= 1000</code></li> <li><code>coordinates[i].length == 2</code></li> <li><code>-10^4 &lt;=\u00a0coordinates[i][0],\u00a0coordinates[i][1] &lt;= 10^4</code></li> <li><code>coordinates</code>\u00a0contains no duplicate point.</li> </ul>"},{"location":"LeetCode_Problems/1233/","title":"1233. Remove Sub-Folders from the Filesystem","text":"Problem <p>Given a list of folders <code>folder</code>, return the folders after removing all sub-folders in those folders. You may return the answer in any order.</p> <p>If a <code>folder[i]</code> is located within another <code>folder[j]</code>, it is called a sub-folder of it.</p> <p>The format of a path is one or more concatenated strings of the form: <code>'/'</code> followed by one or more lowercase English letters.</p> <ul> <li>For example, <code>\"/leetcode\"</code> and <code>\"/leetcode/problems\"</code> are valid paths while an empty string and <code>\"/\"</code> are not.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]\nOutput: [\"/a\",\"/c/d\",\"/c/f\"]\nExplanation: Folders \"/a/b\" is a subfolder of \"/a\" and \"/c/d/e\" is inside of folder \"/c/d\" in our filesystem.\n</pre> <p>Example 2:</p> <pre>\nInput: folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]\nOutput: [\"/a\"]\nExplanation: Folders \"/a/b/c\" and \"/a/b/d\" will be removed because they are subfolders of \"/a\".\n</pre> <p>Example 3:</p> <pre>\nInput: folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]\nOutput: [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= folder.length &lt;= 4 * 10<sup>4</sup></code></li> <li><code>2 &lt;= folder[i].length &lt;= 100</code></li> <li><code>folder[i]</code> contains only lowercase letters and <code>'/'</code>.</li> <li><code>folder[i]</code> always starts with the character <code>'/'</code>.</li> <li>Each folder name is unique.</li> </ul>"},{"location":"LeetCode_Problems/1234/","title":"1234. Replace the Substring for Balanced String","text":"Problem <p>You are given a string s of length <code>n</code> containing only four kinds of characters: <code>'Q'</code>, <code>'W'</code>, <code>'E'</code>, and <code>'R'</code>.</p> <p>A string is said to be balanced if each of its characters appears <code>n / 4</code> times where <code>n</code> is the length of the string.</p> <p>Return the minimum length of the substring that can be replaced with any other string of the same length to make <code>s</code> balanced. If s is already balanced, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"QWER\"\nOutput: 0\nExplanation: s is already balanced.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"QQWE\"\nOutput: 1\nExplanation: We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"QQQW\"\nOutput: 2\nExplanation: We can replace the first \"QQ\" to \"ER\". \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == s.length</code></li> <li><code>4 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>n</code> is a multiple of <code>4</code>.</li> <li><code>s</code> contains only <code>'Q'</code>, <code>'W'</code>, <code>'E'</code>, and <code>'R'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1235/","title":"1235. Maximum Profit in Job Scheduling","text":"Problem <p>We have <code>n</code> jobs, where every job is scheduled to be done from <code>startTime[i]</code> to <code>endTime[i]</code>, obtaining a profit of <code>profit[i]</code>.</p> <p>You're given the <code>startTime</code>, <code>endTime</code> and <code>profit</code> arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.</p> <p>If you choose a job that ends at time <code>X</code> you will be able to start another job that starts at time <code>X</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.\n</pre> <p>Example 2:</p> <p> </p> <pre>\nInput: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\nOutput: 150\nExplanation: The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\nOutput: 6\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= startTime.length == endTime.length == profit.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= startTime[i] &lt; endTime[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= profit[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1236/","title":"1236. Web Crawler","text":"Problem"},{"location":"LeetCode_Problems/1237/","title":"1237. Find Positive Integer Solution for a Given Equation","text":"Problem <p>Given a callable function <code>f(x, y)</code> with a hidden formula and a value <code>z</code>, reverse engineer the formula and return all positive integer pairs <code>x</code> and <code>y</code> where <code>f(x,y) == z</code>. You may return the pairs in any order.</p> <p>While the exact formula is hidden, the function is monotonically increasing, i.e.:</p> <ul> <li><code>f(x, y) &lt; f(x + 1, y)</code></li> <li><code>f(x, y) &lt; f(x, y + 1)</code></li> </ul> <p>The function interface is defined like this:</p> <pre>\ninterface CustomFunction {\npublic:\n  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.\n  int f(int x, int y);\n};\n</pre> <p>We will judge your solution as follows:</p> <ul> <li>The judge has a list of <code>9</code> hidden implementations of <code>CustomFunction</code>, along with a way to generate an answer key of all valid pairs for a specific <code>z</code>.</li> <li>The judge will receive two inputs: a <code>function_id</code> (to determine which implementation to test your code with), and the target <code>z</code>.</li> <li>The judge will call your <code>findSolution</code> and compare your results with the answer key.</li> <li>If your results match the answer key, your solution will be <code>Accepted</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: function_id = 1, z = 5\nOutput: [[1,4],[2,3],[3,2],[4,1]]\nExplanation: The hidden formula for function_id = 1 is f(x, y) = x + y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=4 -&gt; f(1, 4) = 1 + 4 = 5.\nx=2, y=3 -&gt; f(2, 3) = 2 + 3 = 5.\nx=3, y=2 -&gt; f(3, 2) = 3 + 2 = 5.\nx=4, y=1 -&gt; f(4, 1) = 4 + 1 = 5.\n</pre> <p>Example 2:</p> <pre>\nInput: function_id = 2, z = 5\nOutput: [[1,5],[5,1]]\nExplanation: The hidden formula for function_id = 2 is f(x, y) = x * y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=5 -&gt; f(1, 5) = 1 * 5 = 5.\nx=5, y=1 -&gt; f(5, 1) = 5 * 1 = 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= function_id &lt;= 9</code></li> <li><code>1 &lt;= z &lt;= 100</code></li> <li>It is guaranteed that the solutions of <code>f(x, y) == z</code> will be in the range <code>1 &lt;= x, y &lt;= 1000</code>.</li> <li>It is also guaranteed that <code>f(x, y)</code> will fit in 32 bit signed integer if <code>1 &lt;= x, y &lt;= 1000</code>.</li> </ul>"},{"location":"LeetCode_Problems/1238/","title":"1238. Circular Permutation in Binary Representation","text":"Problem <p>Given 2 integers <code>n</code> and <code>start</code>. Your task is return any permutation <code>p</code>\u00a0of <code>(0,1,2.....,2^n -1) </code>such that :</p> <ul> <li><code>p[0] = start</code></li> <li><code>p[i]</code> and <code>p[i+1]</code>\u00a0differ by only one bit in their binary representation.</li> <li><code>p[0]</code> and <code>p[2^n -1]</code>\u00a0must also differ by only one bit in their binary representation.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2, start = 3\nOutput: [3,2,0,1]\nExplanation: The binary representation of the permutation is (11,10,00,01). \nAll the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, start = 2\nOutput: [2,6,7,5,4,0,1,3]\nExplanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 16</code></li> <li><code>0 &lt;= start\u00a0&lt;\u00a02 ^ n</code></li> </ul>"},{"location":"LeetCode_Problems/1239/","title":"1239. Maximum Length of a Concatenated String with Unique Characters","text":"Problem <p>You are given an array of strings <code>arr</code>. A string <code>s</code> is formed by the concatenation of a subsequence of <code>arr</code> that has unique characters.</p> <p>Return the maximum possible length of <code>s</code>.</p> <p>A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [\"un\",\"iq\",\"ue\"]\nOutput: 4\nExplanation: All the valid concatenations are:\n- \"\"\n- \"un\"\n- \"iq\"\n- \"ue\"\n- \"uniq\" (\"un\" + \"iq\")\n- \"ique\" (\"iq\" + \"ue\")\nMaximum length is 4.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [\"cha\",\"r\",\"act\",\"ers\"]\nOutput: 6\nExplanation: Possible longest valid concatenations are \"chaers\" (\"cha\" + \"ers\") and \"acters\" (\"act\" + \"ers\").\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [\"abcdefghijklmnopqrstuvwxyz\"]\nOutput: 26\nExplanation: The only string in arr has all 26 characters.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 16</code></li> <li><code>1 &lt;= arr[i].length &lt;= 26</code></li> <li><code>arr[i]</code> contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1240/","title":"1240. Tiling a Rectangle with the Fewest Squares","text":"Problem <p>Given a rectangle of size <code>n</code> x <code>m</code>, return the minimum number of integer-sided squares that tile the rectangle.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 2, m = 3\nOutput: 3\nExplanation: <code>3</code> squares are necessary to cover the rectangle.\n<code>2</code> (squares of <code>1x1</code>)\n<code>1</code> (square of <code>2x2</code>)</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 5, m = 8\nOutput: 5\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 11, m = 13\nOutput: 6\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n, m &lt;= 13</code></li> </ul>"},{"location":"LeetCode_Problems/1241/","title":"1241. Number of Comments per Post","text":"Problem"},{"location":"LeetCode_Problems/1242/","title":"1242. Web Crawler Multithreaded","text":"Problem"},{"location":"LeetCode_Problems/1243/","title":"1243. Array Transformation","text":"Problem"},{"location":"LeetCode_Problems/1244/","title":"1244. Design A Leaderboard","text":"Problem"},{"location":"LeetCode_Problems/1245/","title":"1245. Tree Diameter","text":"Problem"},{"location":"LeetCode_Problems/1246/","title":"1246. Palindrome Removal","text":"Problem"},{"location":"LeetCode_Problems/1247/","title":"1247. Minimum Swaps to Make Strings Equal","text":"Problem <p>You are given two strings <code>s1</code> and <code>s2</code> of equal length consisting of letters <code>\"x\"</code> and <code>\"y\"</code> only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap <code>s1[i]</code> and <code>s2[j]</code>.</p> <p>Return the minimum number of swaps required to make <code>s1</code> and <code>s2</code> equal, or return <code>-1</code> if it is impossible to do so.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"xx\", s2 = \"yy\"\nOutput: 1\nExplanation: Swap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\".\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"xy\", s2 = \"yx\"\nOutput: 2\nExplanation: Swap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".\nSwap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".\nNote that you cannot swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings.\n</pre> <p>Example 3:</p> <pre>\nInput: s1 = \"xx\", s2 = \"xy\"\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length &lt;= 1000</code></li> <li><code>s1.length == s2.length</code></li> <li><code>s1, s2</code> only contain <code>'x'</code> or <code>'y'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1248/","title":"1248. Count Number of Nice Subarrays","text":"Problem <p>Given an array of integers <code>nums</code> and an integer <code>k</code>. A continuous subarray is called nice if there are <code>k</code> odd numbers on it.</p> <p>Return the number of nice sub-arrays.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,2,1,1], k = 3\nOutput: 2\nExplanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,4,6], k = 1\nOutput: 0\nExplanation: There is no odd numbers in the array.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,2,2,1,2,2,1,2,2,2], k = 2\nOutput: 16\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 50000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10^5</code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/1249/","title":"1249. Minimum Remove to Make Valid Parentheses","text":"Problem <p>Given a string s of <code>'('</code> , <code>')'</code> and lowercase English characters.</p> <p>Your task is to remove the minimum number of parentheses ( <code>'('</code> or <code>')'</code>, in any positions ) so that the resulting parentheses string is valid and return any valid string.</p> <p>Formally, a parentheses string is valid if and only if:</p> <ul> <li>It is the empty string, contains only lowercase characters, or</li> <li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid strings, or</li> <li>It can be written as <code>(A)</code>, where <code>A</code> is a valid string.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"lee(t(c)o)de)\"\nOutput: \"lee(t(c)o)de\"\nExplanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"a)b(c)d\"\nOutput: \"ab(c)d\"\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"))((\"\nOutput: \"\"\nExplanation: An empty string is also valid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either<code>'('</code> , <code>')'</code>, or lowercase English letter<code>.</code></li> </ul>"},{"location":"LeetCode_Problems/1250/","title":"1250. Check If It Is a Good Array","text":"Problem <p>Given an array <code>nums</code> of\u00a0positive integers. Your task is to select some subset of <code>nums</code>, multiply each element by an integer and add all these numbers.\u00a0The array is said to be\u00a0good\u00a0if you can obtain a sum of\u00a0<code>1</code>\u00a0from the array by any possible subset and multiplicand.</p> <p>Return\u00a0<code>True</code>\u00a0if the array is good\u00a0otherwise\u00a0return\u00a0<code>False</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [12,5,7,23]\nOutput: true\nExplanation: Pick numbers 5 and 7.\n5*3 + 7*(-2) = 1\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [29,6,10]\nOutput: true\nExplanation: Pick numbers 29, 6 and 10.\n29*1 + 6*(-3) + 10*(-1) = 1\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,6]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10^5</code></li> <li><code>1 &lt;= nums[i] &lt;= 10^9</code></li> </ul>"},{"location":"LeetCode_Problems/1251/","title":"1251. Average Selling Price","text":"Problem <p>Table: <code>Prices</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| start_date    | date    |\n| end_date      | date    |\n| price         | int     |\n+---------------+---------+\n(product_id, start_date, end_date) is the primary key (combination of columns with unique values) for this table.\nEach row of this table indicates the price of the product_id in the period from start_date to end_date.\nFor each product_id there will be no two overlapping periods. That means there will be no two intersecting periods for the same product_id.\n</pre> <p> </p> <p>Table: <code>UnitsSold</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| purchase_date | date    |\n| units         | int     |\n+---------------+---------+\nThis table may contain duplicate rows.\nEach row of this table indicates the date, units, and product_id of each product sold. \n</pre> <p> </p> <p>Write a solution to find the average selling price for each product. <code>average_price</code> should be rounded to 2 decimal places.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nPrices table:\n+------------+------------+------------+--------+\n| product_id | start_date | end_date   | price  |\n+------------+------------+------------+--------+\n| 1          | 2019-02-17 | 2019-02-28 | 5      |\n| 1          | 2019-03-01 | 2019-03-22 | 20     |\n| 2          | 2019-02-01 | 2019-02-20 | 15     |\n| 2          | 2019-02-21 | 2019-03-31 | 30     |\n+------------+------------+------------+--------+\nUnitsSold table:\n+------------+---------------+-------+\n| product_id | purchase_date | units |\n+------------+---------------+-------+\n| 1          | 2019-02-25    | 100   |\n| 1          | 2019-03-01    | 15    |\n| 2          | 2019-02-10    | 200   |\n| 2          | 2019-03-22    | 30    |\n+------------+---------------+-------+\nOutput: \n+------------+---------------+\n| product_id | average_price |\n+------------+---------------+\n| 1          | 6.96          |\n| 2          | 16.96         |\n+------------+---------------+\nExplanation: \nAverage selling price = Total Price of Product / Number of products sold.\nAverage selling price for product 1 = ((100 * 5) + (15 * 20)) / 115 = 6.96\nAverage selling price for product 2 = ((200 * 15) + (30 * 30)) / 230 = 16.96\n</pre>"},{"location":"LeetCode_Problems/1252/","title":"1252. Cells with Odd Values in a Matrix","text":"Problem <p>There is an <code>m x n</code> matrix that is initialized to all <code>0</code>'s. There is also a 2D array <code>indices</code> where each <code>indices[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> represents a 0-indexed location to perform some increment operations on the matrix.</p> <p>For each location <code>indices[i]</code>, do both of the following:</p> <ol> <li>Increment all the cells on row <code>r<sub>i</sub></code>.</li> <li>Increment all the cells on column <code>c<sub>i</sub></code>.</li> </ol> <p>Given <code>m</code>, <code>n</code>, and <code>indices</code>, return the number of odd-valued cells in the matrix after applying the increment to all locations in <code>indices</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: m = 2, n = 3, indices = [[0,1],[1,1]]\nOutput: 6\nExplanation: Initial matrix = [[0,0,0],[0,0,0]].\nAfter applying first increment it becomes [[1,2,1],[0,1,0]].\nThe final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: m = 2, n = 2, indices = [[1,1],[0,0]]\nOutput: 0\nExplanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>1 &lt;= indices.length &lt;= 100</code></li> <li><code>0 &lt;= r<sub>i</sub> &lt; m</code></li> <li><code>0 &lt;= c<sub>i</sub> &lt; n</code></li> </ul> <p> </p> <p>Follow up: Could you solve this in <code>O(n + m + indices.length)</code> time with only <code>O(n + m)</code> extra space?</p>"},{"location":"LeetCode_Problems/1253/","title":"1253. Reconstruct a 2-Row Binary Matrix","text":"Problem <p>Given the following details of a matrix with <code>n</code> columns and <code>2</code> rows :</p> <ul> <li>The matrix is a binary matrix, which means each element in the matrix can be <code>0</code> or <code>1</code>.</li> <li>The sum of elements of the 0-th(upper) row is given as <code>upper</code>.</li> <li>The sum of elements of the 1-st(lower) row is given as <code>lower</code>.</li> <li>The sum of elements in the i-th column(0-indexed) is <code>colsum[i]</code>, where <code>colsum</code> is given as an integer array with length <code>n</code>.</li> </ul> <p>Your task is to reconstruct the matrix with <code>upper</code>, <code>lower</code> and <code>colsum</code>.</p> <p>Return it as a 2-D integer array.</p> <p>If there are more than one valid solution, any of them will be accepted.</p> <p>If no valid solution exists, return an empty 2-D array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: upper = 2, lower = 1, colsum = [1,1,1]\nOutput: [[1,1,0],[0,0,1]]\nExplanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.\n</pre> <p>Example 2:</p> <pre>\nInput: upper = 2, lower = 3, colsum = [2,2,1,1]\nOutput: []\n</pre> <p>Example 3:</p> <pre>\nInput: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]\nOutput: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= colsum.length &lt;= 10^5</code></li> <li><code>0 &lt;= upper, lower &lt;= colsum.length</code></li> <li><code>0 &lt;= colsum[i] &lt;= 2</code></li> </ul>"},{"location":"LeetCode_Problems/1254/","title":"1254. Number of Closed Islands","text":"Problem <p>Given a 2D\u00a0<code>grid</code> consists of <code>0s</code> (land)\u00a0and <code>1s</code> (water).\u00a0 An island is a maximal 4-directionally connected group of <code>0s</code> and a closed island\u00a0is an island totally\u00a0(all left, top, right, bottom) surrounded by <code>1s.</code></p> <p>Return the number of closed islands.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]\nOutput: 2\nExplanation: \nIslands in gray are closed because they are completely surrounded by water (group of 1s).</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [[1,1,1,1,1,1,1],\n\u00a0              [1,0,0,0,0,0,1],\n\u00a0              [1,0,1,1,1,0,1],\n\u00a0              [1,0,1,0,1,0,1],\n\u00a0              [1,0,1,1,1,0,1],\n\u00a0              [1,0,0,0,0,0,1],\n               [1,1,1,1,1,1,1]]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= grid.length, grid[0].length &lt;= 100</code></li> <li><code>0 &lt;= grid[i][j] &lt;=1</code></li> </ul>"},{"location":"LeetCode_Problems/1255/","title":"1255. Maximum Score Words Formed by Letters","text":"Problem <p>Given a list of <code>words</code>, list of\u00a0 single\u00a0<code>letters</code> (might be repeating)\u00a0and <code>score</code>\u00a0of every character.</p> <p>Return the maximum score of any valid set of words formed by using the given letters (<code>words[i]</code> cannot be used two\u00a0or more times).</p> <p>It is not necessary to use all characters in <code>letters</code> and each letter can only be used once. Score of letters\u00a0<code>'a'</code>, <code>'b'</code>, <code>'c'</code>, ... ,<code>'z'</code> is given by\u00a0<code>score[0]</code>, <code>score[1]</code>, ... , <code>score[25]</code> respectively.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]\nOutput: 23\nExplanation:\nScore  a=1, c=9, d=5, g=3, o=2\nGiven letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23.\nWords \"dad\" and \"dog\" only get a score of 21.</pre> <p>Example 2:</p> <pre>\nInput: words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]\nOutput: 27\nExplanation:\nScore  a=4, b=4, c=4, x=5, z=10\nGiven letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27.\nWord \"xxxz\" only get a score of 25.</pre> <p>Example 3:</p> <pre>\nInput: words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]\nOutput: 0\nExplanation:\nLetter \"e\" can only be used once.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 14</code></li> <li><code>1 &lt;= words[i].length &lt;= 15</code></li> <li><code>1 &lt;= letters.length &lt;= 100</code></li> <li><code>letters[i].length == 1</code></li> <li><code>score.length ==\u00a026</code></li> <li><code>0 &lt;= score[i] &lt;= 10</code></li> <li><code>words[i]</code>, <code>letters[i]</code>\u00a0contains only lower case English letters.</li> </ul>"},{"location":"LeetCode_Problems/1256/","title":"1256. Encode Number","text":"Problem"},{"location":"LeetCode_Problems/1257/","title":"1257. Smallest Common Region","text":"Problem"},{"location":"LeetCode_Problems/1258/","title":"1258. Synonymous Sentences","text":"Problem"},{"location":"LeetCode_Problems/1259/","title":"1259. Handshakes That Don't Cross","text":"Problem"},{"location":"LeetCode_Problems/1260/","title":"1260. Shift 2D Grid","text":"Problem <p>Given a 2D <code>grid</code> of size <code>m x n</code>\u00a0and an integer <code>k</code>. You need to shift the <code>grid</code> <code>k</code> times.</p> <p>In one shift operation:</p> <ul> <li>Element at <code>grid[i][j]</code> moves to <code>grid[i][j + 1]</code>.</li> <li>Element at <code>grid[i][n - 1]</code> moves to <code>grid[i + 1][0]</code>.</li> <li>Element at <code>grid[m\u00a0- 1][n - 1]</code> moves to <code>grid[0][0]</code>.</li> </ul> <p>Return the 2D grid after applying shift operation <code>k</code> times.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: <code>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[9,1,2],[3,4,5],[6,7,8]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: <code>grid</code> = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\nOutput: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]\n</pre> <p>Example 3:</p> <pre>\nInput: <code>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 9\nOutput: [[1,2,3],[4,5,6],[7,8,9]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m ==\u00a0grid.length</code></li> <li><code>n ==\u00a0grid[i].length</code></li> <li><code>1 &lt;= m &lt;= 50</code></li> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>-1000 &lt;= grid[i][j] &lt;= 1000</code></li> <li><code>0 &lt;= k &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1261/","title":"1261. Find Elements in a Contaminated Binary Tree","text":"Problem <p>Given a binary tree with the following rules:</p> <ol> <li><code>root.val == 0</code></li> <li>If <code>treeNode.val == x</code> and <code>treeNode.left != null</code>, then <code>treeNode.left.val == 2 * x + 1</code></li> <li>If <code>treeNode.val == x</code> and <code>treeNode.right != null</code>, then <code>treeNode.right.val == 2 * x + 2</code></li> </ol> <p>Now the binary tree is contaminated, which means all <code>treeNode.val</code> have been changed to <code>-1</code>.</p> <p>Implement the <code>FindElements</code> class:</p> <ul> <li><code>FindElements(TreeNode* root)</code> Initializes the object with a contaminated binary tree and recovers it.</li> <li><code>bool find(int target)</code> Returns <code>true</code> if the <code>target</code> value exists in the recovered binary tree.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"FindElements\",\"find\",\"find\"]\n[[[-1,null,-1]],[1],[2]]\nOutput\n[null,false,true]\nExplanation\nFindElements findElements = new FindElements([-1,null,-1]); \nfindElements.find(1); // return False \nfindElements.find(2); // return True </pre> <p>Example 2:</p> <p></p> <pre>\nInput\n[\"FindElements\",\"find\",\"find\",\"find\"]\n[[[-1,-1,-1,-1,-1]],[1],[3],[5]]\nOutput\n[null,true,true,false]\nExplanation\nFindElements findElements = new FindElements([-1,-1,-1,-1,-1]);\nfindElements.find(1); // return True\nfindElements.find(3); // return True\nfindElements.find(5); // return False</pre> <p>Example 3:</p> <p></p> <pre>\nInput\n[\"FindElements\",\"find\",\"find\",\"find\",\"find\"]\n[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]\nOutput\n[null,true,false,false,true]\nExplanation\nFindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);\nfindElements.find(2); // return True\nfindElements.find(3); // return False\nfindElements.find(4); // return False\nfindElements.find(5); // return True\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>TreeNode.val == -1</code></li> <li>The height of the binary tree is less than or equal to <code>20</code></li> <li>The total number of nodes is between <code>[1, 10<sup>4</sup>]</code></li> <li>Total calls of <code>find()</code> is between <code>[1, 10<sup>4</sup>]</code></li> <li><code>0 &lt;= target &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1262/","title":"1262. Greatest Sum Divisible by Three","text":"Problem <p>Given an integer array <code>nums</code>, return the maximum possible sum of elements of the array such that it is divisible by three.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,6,5,1,8]\nOutput: 18\nExplanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).</pre> <p>Example 2:</p> <pre>\nInput: nums = [4]\nOutput: 0\nExplanation: Since 4 is not divisible by 3, do not pick any number.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,4,4]\nOutput: 12\nExplanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 4 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1263/","title":"1263. Minimum Moves to Move a Box to Their Target Location","text":"Problem <p>A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.</p> <p>The game is represented by an <code>m x n</code> grid of characters <code>grid</code> where each element is a wall, floor, or box.</p> <p>Your task is to move the box <code>'B'</code> to the target position <code>'T'</code> under the following rules:</p> <ul> <li>The character <code>'S'</code> represents the player. The player can move up, down, left, right in <code>grid</code> if it is a floor (empty cell).</li> <li>The character <code>'.'</code> represents the floor which means a free cell to walk.</li> <li>The character <code>'#'</code> represents the wall which means an obstacle (impossible to walk there).</li> <li>There is only one box <code>'B'</code> and one target cell <code>'T'</code> in the <code>grid</code>.</li> <li>The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.</li> <li>The player cannot walk through the box.</li> </ul> <p>Return the minimum number of pushes to move the box to the target. If there is no way to reach the target, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n               [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 3\nExplanation: We return only the number of times the box is pushed.</pre> <p>Example 2:</p> <pre>\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: -1\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n               [\"#\",\"T\",\".\",\".\",\"#\",\"#\"],\n               [\"#\",\".\",\"#\",\"B\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\".\",\"#\"],\n               [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n               [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 5\nExplanation: push the box down, left, left, up and up.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 20</code></li> <li><code>grid</code> contains only characters <code>'.'</code>, <code>'#'</code>, <code>'S'</code>, <code>'T'</code>, or <code>'B'</code>.</li> <li>There is only one character <code>'S'</code>, <code>'B'</code>, and <code>'T'</code> in the <code>grid</code>.</li> </ul>"},{"location":"LeetCode_Problems/1264/","title":"1264. Page Recommendations","text":"Problem"},{"location":"LeetCode_Problems/1265/","title":"1265. Print Immutable Linked List in Reverse","text":"Problem"},{"location":"LeetCode_Problems/1266/","title":"1266. Minimum Time Visiting All Points","text":"Problem <p>On a 2D plane, there are <code>n</code> points with integer coordinates <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>. Return the minimum time in seconds to visit all the points in the order given by <code>points</code>.</p> <p>You can move according to these rules:</p> <ul> <li>In <code>1</code> second, you can either:      <ul> <li>move vertically by one\u00a0unit,</li> <li>move horizontally by one unit, or</li> <li>move diagonally <code>sqrt(2)</code> units (in other words, move one unit vertically then one unit horizontally in <code>1</code> second).</li> </ul> </li> <li>You have to visit the points in the same order as they appear in the array.</li> <li>You are allowed to pass through points that appear later in the order, but these do not count as visits.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: points = [[1,1],[3,4],[-1,0]]\nOutput: 7\nExplanation: One optimal path is [1,1] -&gt; [2,2] -&gt; [3,3] -&gt; [3,4] -&gt; [2,3] -&gt; [1,2] -&gt; [0,1] -&gt; [-1,0]   \nTime from [1,1] to [3,4] = 3 seconds \nTime from [3,4] to [-1,0] = 4 seconds\nTotal time = 7 seconds</pre> <p>Example 2:</p> <pre>\nInput: points = [[3,2],[-2,2]]\nOutput: 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>points.length == n</code></li> <li><code>1 &lt;= n\u00a0&lt;= 100</code></li> <li><code>points[i].length == 2</code></li> <li><code>-1000\u00a0&lt;= points[i][0], points[i][1]\u00a0&lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1267/","title":"1267. Count Servers that Communicate","text":"Problem <p>You are given a map of a server center, represented as a <code>m * n</code> integer matrix\u00a0<code>grid</code>, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.  Return the number of servers\u00a0that communicate with any other server.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,0],[0,1]]\nOutput: 0\nExplanation:\u00a0No servers can communicate with others.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,0],[1,1]]\nOutput: 3\nExplanation:\u00a0All three servers can communicate with at least one other server.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]\nOutput: 4\nExplanation:\u00a0The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m &lt;= 250</code></li> <li><code>1 &lt;= n &lt;= 250</code></li> <li><code>grid[i][j] == 0 or 1</code></li> </ul>"},{"location":"LeetCode_Problems/1268/","title":"1268. Search Suggestions System","text":"Problem <p>You are given an array of strings <code>products</code> and a string <code>searchWord</code>.</p> <p>Design a system that suggests at most three product names from <code>products</code> after each character of <code>searchWord</code> is typed. Suggested products should have common prefix with <code>searchWord</code>. If there are more than three products with a common prefix return the three lexicographically minimums products.</p> <p>Return a list of lists of the suggested products after each character of <code>searchWord</code> is typed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"\nOutput: [[\"mobile\",\"moneypot\",\"monitor\"],[\"mobile\",\"moneypot\",\"monitor\"],[\"mouse\",\"mousepad\"],[\"mouse\",\"mousepad\"],[\"mouse\",\"mousepad\"]]\nExplanation: products sorted lexicographically = [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"].\nAfter typing m and mo all products match and we show user [\"mobile\",\"moneypot\",\"monitor\"].\nAfter typing mou, mous and mouse the system suggests [\"mouse\",\"mousepad\"].\n</pre> <p>Example 2:</p> <pre>\nInput: products = [\"havana\"], searchWord = \"havana\"\nOutput: [[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]\nExplanation: The only word \"havana\" will be always suggested while typing the search word.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= products.length &lt;= 1000</code></li> <li><code>1 &lt;= products[i].length &lt;= 3000</code></li> <li><code>1 &lt;= sum(products[i].length) &lt;= 2 * 10<sup>4</sup></code></li> <li>All the strings of <code>products</code> are unique.</li> <li><code>products[i]</code> consists of lowercase English letters.</li> <li><code>1 &lt;= searchWord.length &lt;= 1000</code></li> <li><code>searchWord</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1269/","title":"1269. Number of Ways to Stay in the Same Place After Some Steps","text":"Problem <p>You have a pointer at index <code>0</code> in an array of size <code>arrLen</code>. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).</p> <p>Given two integers <code>steps</code> and <code>arrLen</code>, return the number of ways such that your pointer is still at index <code>0</code> after exactly <code>steps</code> steps. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: steps = 3, arrLen = 2\nOutput: 4\nExplanation: There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay\n</pre> <p>Example 2:</p> <pre>\nInput: steps = 2, arrLen = 4\nOutput: 2\nExplanation: There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay\n</pre> <p>Example 3:</p> <pre>\nInput: steps = 4, arrLen = 2\nOutput: 8\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= steps &lt;= 500</code></li> <li><code>1 &lt;= arrLen &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1270/","title":"1270. All People Report to the Given Manager","text":"Problem"},{"location":"LeetCode_Problems/1271/","title":"1271. Hexspeak","text":"Problem"},{"location":"LeetCode_Problems/1272/","title":"1272. Remove Interval","text":"Problem"},{"location":"LeetCode_Problems/1273/","title":"1273. Delete Tree Nodes","text":"Problem"},{"location":"LeetCode_Problems/1274/","title":"1274. Number of Ships in a Rectangle","text":"Problem"},{"location":"LeetCode_Problems/1275/","title":"1275. Find Winner on a Tic Tac Toe Game","text":"Problem <p>Tic-tac-toe is played by two players <code>A</code> and <code>B</code> on a <code>3 x 3</code> grid. The rules of Tic-Tac-Toe are:</p> <ul> <li>Players take turns placing characters into empty squares <code>' '</code>.</li> <li>The first player <code>A</code> always places <code>'X'</code> characters, while the second player <code>B</code> always places <code>'O'</code> characters.</li> <li><code>'X'</code> and <code>'O'</code> characters are always placed into empty squares, never on filled ones.</li> <li>The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.</li> <li>The game also ends if all squares are non-empty.</li> <li>No more moves can be played if the game is over.</li> </ul> <p>Given a 2D integer array <code>moves</code> where <code>moves[i] = [row<sub>i</sub>, col<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> move will be played on <code>grid[row<sub>i</sub>][col<sub>i</sub>]</code>. return the winner of the game if it exists (<code>A</code> or <code>B</code>). In case the game ends in a draw return <code>\"Draw\"</code>. If there are still movements to play return <code>\"Pending\"</code>.</p> <p>You can assume that <code>moves</code> is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and <code>A</code> will play first.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\nOutput: \"A\"\nExplanation: A wins, they always play first.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\nOutput: \"B\"\nExplanation: B wins.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\nOutput: \"Draw\"\nExplanation: The game ends in a draw since there are no moves to make.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= moves.length &lt;= 9</code></li> <li><code>moves[i].length == 2</code></li> <li><code>0 &lt;= row<sub>i</sub>, col<sub>i</sub> &lt;= 2</code></li> <li>There are no repeated elements on <code>moves</code>.</li> <li><code>moves</code> follow the rules of tic tac toe.</li> </ul>"},{"location":"LeetCode_Problems/1276/","title":"1276. Number of Burgers with No Waste of Ingredients","text":"Problem <p>Given two integers <code>tomatoSlices</code> and <code>cheeseSlices</code>. The ingredients of different burgers are as follows:</p> <ul> <li>Jumbo Burger: <code>4</code> tomato slices and <code>1</code> cheese slice.</li> <li>Small Burger: <code>2</code> Tomato slices and <code>1</code> cheese slice.</li> </ul> <p>Return <code>[total_jumbo, total_small]</code> so that the number of remaining <code>tomatoSlices</code> equal to <code>0</code> and the number of remaining <code>cheeseSlices</code> equal to <code>0</code>. If it is not possible to make the remaining <code>tomatoSlices</code> and <code>cheeseSlices</code> equal to <code>0</code> return <code>[]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tomatoSlices = 16, cheeseSlices = 7\nOutput: [1,6]\nExplantion: To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese.\nThere will be no remaining ingredients.\n</pre> <p>Example 2:</p> <pre>\nInput: tomatoSlices = 17, cheeseSlices = 4\nOutput: []\nExplantion: There will be no way to use all ingredients to make small and jumbo burgers.\n</pre> <p>Example 3:</p> <pre>\nInput: tomatoSlices = 4, cheeseSlices = 17\nOutput: []\nExplantion: Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= tomatoSlices, cheeseSlices &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1277/","title":"1277. Count Square Submatrices with All Ones","text":"Problem <p>Given a <code>m * n</code> matrix of ones and zeros, return how many square submatrices have all ones.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: matrix =\n[\n\u00a0 [0,1,1,1],\n\u00a0 [1,1,1,1],\n\u00a0 [0,1,1,1]\n]\nOutput: 15\nExplanation: \nThere are 10 squares of side 1.\nThere are 4 squares of side 2.\nThere is  1 square of side 3.\nTotal number of squares = 10 + 4 + 1 = 15.\n</pre> <p>Example 2:</p> <pre>\nInput: matrix = \n[\n  [1,0,1],\n  [1,1,0],\n  [1,1,0]\n]\nOutput: 7\nExplanation: \nThere are 6 squares of side 1.  \nThere is 1 square of side 2. \nTotal number of squares = 6 + 1 = 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length\u00a0&lt;= 300</code></li> <li><code>1 &lt;= arr[0].length\u00a0&lt;= 300</code></li> <li><code>0 &lt;= arr[i][j] &lt;= 1</code></li> </ul>"},{"location":"LeetCode_Problems/1278/","title":"1278. Palindrome Partitioning III","text":"Problem <p>You are given a string <code>s</code> containing lowercase letters and an integer <code>k</code>. You need to :</p> <ul> <li>First, change some characters of <code>s</code> to other lowercase English letters.</li> <li>Then divide <code>s</code> into <code>k</code> non-empty disjoint substrings such that each substring is a palindrome.</li> </ul> <p>Return the minimal number of characters that you need to change to divide the string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abc\", k = 2\nOutput: 1\nExplanation:\u00a0You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aabbc\", k = 3\nOutput: 0\nExplanation:\u00a0You can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome.</pre> <p>Example 3:</p> <pre>\nInput: s = \"leetcode\", k = 8\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= s.length &lt;= 100</code>.</li> <li><code>s</code> only contains lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1279/","title":"1279. Traffic Light Controlled Intersection","text":"Problem"},{"location":"LeetCode_Problems/1280/","title":"1280. Students and Examinations","text":"Problem <p>Table: <code>Students</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| student_id    | int     |\n| student_name  | varchar |\n+---------------+---------+\nstudent_id is the primary key (column with unique values) for this table.\nEach row of this table contains the ID and the name of one student in the school.\n</pre> <p> </p> <p>Table: <code>Subjects</code></p> <pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| subject_name | varchar |\n+--------------+---------+\nsubject_name is the primary key (column with unique values) for this table.\nEach row of this table contains the name of one subject in the school.\n</pre> <p> </p> <p>Table: <code>Examinations</code></p> <pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| student_id   | int     |\n| subject_name | varchar |\n+--------------+---------+\nThere is no primary key (column with unique values) for this table. It may contain duplicates.\nEach student from the Students table takes every course from the Subjects table.\nEach row of this table indicates that a student with ID student_id attended the exam of subject_name.\n</pre> <p> </p> <p>Write a solution to find the number of times each student attended each exam.</p> <p>Return the result table ordered by <code>student_id</code> and <code>subject_name</code>.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nStudents table:\n+------------+--------------+\n| student_id | student_name |\n+------------+--------------+\n| 1          | Alice        |\n| 2          | Bob          |\n| 13         | John         |\n| 6          | Alex         |\n+------------+--------------+\nSubjects table:\n+--------------+\n| subject_name |\n+--------------+\n| Math         |\n| Physics      |\n| Programming  |\n+--------------+\nExaminations table:\n+------------+--------------+\n| student_id | subject_name |\n+------------+--------------+\n| 1          | Math         |\n| 1          | Physics      |\n| 1          | Programming  |\n| 2          | Programming  |\n| 1          | Physics      |\n| 1          | Math         |\n| 13         | Math         |\n| 13         | Programming  |\n| 13         | Physics      |\n| 2          | Math         |\n| 1          | Math         |\n+------------+--------------+\nOutput: \n+------------+--------------+--------------+----------------+\n| student_id | student_name | subject_name | attended_exams |\n+------------+--------------+--------------+----------------+\n| 1          | Alice        | Math         | 3              |\n| 1          | Alice        | Physics      | 2              |\n| 1          | Alice        | Programming  | 1              |\n| 2          | Bob          | Math         | 1              |\n| 2          | Bob          | Physics      | 0              |\n| 2          | Bob          | Programming  | 1              |\n| 6          | Alex         | Math         | 0              |\n| 6          | Alex         | Physics      | 0              |\n| 6          | Alex         | Programming  | 0              |\n| 13         | John         | Math         | 1              |\n| 13         | John         | Physics      | 1              |\n| 13         | John         | Programming  | 1              |\n+------------+--------------+--------------+----------------+\nExplanation: \nThe result table should contain all students and all subjects.\nAlice attended the Math exam 3 times, the Physics exam 2 times, and the Programming exam 1 time.\nBob attended the Math exam 1 time, the Programming exam 1 time, and did not attend the Physics exam.\nAlex did not attend any exams.\nJohn attended the Math exam 1 time, the Physics exam 1 time, and the Programming exam 1 time.\n</pre>"},{"location":"LeetCode_Problems/1281/","title":"1281. Subtract the Product and Sum of Digits of an Integer","text":"Problem <p>Given an integer number <code>n</code>, return the difference between the product of its digits and the sum of its digits.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 234\nOutput: 15 \nExplanation: \nProduct of digits = 2 * 3 * 4 = 24 \nSum of digits = 2 + 3 + 4 = 9 \nResult = 24 - 9 = 15\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4421\nOutput: 21\nExplanation: \nProduct of digits = 4 * 4 * 2 * 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10^5</code></li> </ul>"},{"location":"LeetCode_Problems/1282/","title":"1282. Group the People Given the Group Size They Belong To","text":"Problem <p>There are <code>n</code> people\u00a0that are split into some unknown number of groups. Each person is labeled with a\u00a0unique ID\u00a0from\u00a0<code>0</code>\u00a0to\u00a0<code>n - 1</code>.</p> <p>You are given an integer array\u00a0<code>groupSizes</code>, where <code>groupSizes[i]</code>\u00a0is the size of the group that person\u00a0<code>i</code>\u00a0is in. For example, if\u00a0<code>groupSizes[1] = 3</code>, then\u00a0person\u00a0<code>1</code>\u00a0must be in a\u00a0group of size\u00a0<code>3</code>.</p> <p>Return\u00a0a list of groups\u00a0such that\u00a0each person\u00a0<code>i</code>\u00a0is in a group of size\u00a0<code>groupSizes[i]</code>.</p> <p>Each person should\u00a0appear in\u00a0exactly one group,\u00a0and every person must be in a group. If there are\u00a0multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: groupSizes = [3,3,3,3,3,1,3]\nOutput: [[5],[0,1,2],[3,4,6]]\nExplanation: \nThe first group is [5]. The size is 1, and groupSizes[5] = 1.\nThe second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.\nThe third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.\nOther possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].\n</pre> <p>Example 2:</p> <pre>\nInput: groupSizes = [2,1,3,3,3,2]\nOutput: [[1],[0,5],[2,3,4]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>groupSizes.length == n</code></li> <li><code>1 &lt;= n\u00a0&lt;= 500</code></li> <li><code>1 &lt;=\u00a0groupSizes[i] &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/1283/","title":"1283. Find the Smallest Divisor Given a Threshold","text":"Problem <p>Given an array of integers <code>nums</code> and an integer <code>threshold</code>, we will choose a positive integer <code>divisor</code>, divide all the array by it, and sum the division's result. Find the smallest <code>divisor</code> such that the result mentioned above is less than or equal to <code>threshold</code>.</p> <p>Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: <code>7/3 = 3</code> and <code>10/2 = 5</code>).</p> <p>The test cases are generated so\u00a0that there will be an answer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,5,9], threshold = 6\nOutput: 5\nExplanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. \nIf the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [44,22,33,11,1], threshold = 5\nOutput: 44\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> <li><code>nums.length &lt;= threshold &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1284/","title":"1284. Minimum Number of Flips to Convert Binary Matrix to Zero Matrix","text":"Problem <p>Given a <code>m x n</code> binary matrix <code>mat</code>. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing <code>1</code> to <code>0</code> and <code>0</code> to <code>1</code>). A pair of cells are called neighbors if they share one edge.</p> <p>Return the minimum number of steps required to convert <code>mat</code> to a zero matrix or <code>-1</code> if you cannot.</p> <p>A binary matrix is a matrix with all cells equal to <code>0</code> or <code>1</code> only.</p> <p>A zero matrix is a matrix with all cells equal to <code>0</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[0,0],[0,1]]\nOutput: 3\nExplanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.\n</pre> <p>Example 2:</p> <pre>\nInput: mat = [[0]]\nOutput: 0\nExplanation: Given matrix is a zero matrix. We do not need to change it.\n</pre> <p>Example 3:</p> <pre>\nInput: mat = [[1,0,0],[1,0,0]]\nOutput: -1\nExplanation: Given matrix cannot be a zero matrix.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 3</code></li> <li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1285/","title":"1285. Find the Start and End Number of Continuous Ranges","text":"Problem"},{"location":"LeetCode_Problems/1286/","title":"1286. Iterator for Combination","text":"Problem <p>Design the <code>CombinationIterator</code> class:</p> <ul> <li><code>CombinationIterator(string characters, int combinationLength)</code> Initializes the object with a string <code>characters</code> of sorted distinct lowercase English letters and a number <code>combinationLength</code> as arguments.</li> <li><code>next()</code> Returns the next combination of length <code>combinationLength</code> in lexicographical order.</li> <li><code>hasNext()</code> Returns <code>true</code> if and only if there exists a next combination.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[\"abc\", 2], [], [], [], [], [], []]\nOutput\n[null, \"ab\", true, \"ac\", true, \"bc\", false]\n\nExplanation\nCombinationIterator itr = new CombinationIterator(\"abc\", 2);\nitr.next();    // return \"ab\"\nitr.hasNext(); // return True\nitr.next();    // return \"ac\"\nitr.hasNext(); // return True\nitr.next();    // return \"bc\"\nitr.hasNext(); // return False\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= combinationLength &lt;= characters.length &lt;= 15</code></li> <li>All the characters of <code>characters</code> are unique.</li> <li>At most <code>10<sup>4</sup></code> calls will be made to <code>next</code> and <code>hasNext</code>.</li> <li>It is guaranteed that all calls of the function <code>next</code> are valid.</li> </ul>"},{"location":"LeetCode_Problems/1287/","title":"1287. Element Appearing More Than 25% In Sorted Array","text":"Problem <p>Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,2,6,6,6,6,7,10]\nOutput: 6\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,1]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1288/","title":"1288. Remove Covered Intervals","text":"Problem <p>Given an array <code>intervals</code> where <code>intervals[i] = [l<sub>i</sub>, r<sub>i</sub>]</code> represent the interval <code>[l<sub>i</sub>, r<sub>i</sub>)</code>, remove all intervals that are covered by another interval in the list.</p> <p>The interval <code>[a, b)</code> is covered by the interval <code>[c, d)</code> if and only if <code>c &lt;= a</code> and <code>b &lt;= d</code>.</p> <p>Return the number of remaining intervals.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: intervals = [[1,4],[3,6],[2,8]]\nOutput: 2\nExplanation: Interval [3,6] is covered by [2,8], therefore it is removed.\n</pre> <p>Example 2:</p> <pre>\nInput: intervals = [[1,4],[2,3]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= intervals.length &lt;= 1000</code></li> <li><code>intervals[i].length == 2</code></li> <li><code>0 &lt;= l<sub>i</sub> &lt; r<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li>All the given intervals are unique.</li> </ul>"},{"location":"LeetCode_Problems/1289/","title":"1289. Minimum Falling Path Sum II","text":"Problem <p>Given an <code>n x n</code> integer matrix <code>grid</code>, return the minimum sum of a falling path with non-zero shifts.</p> <p>A falling path with non-zero shifts is a choice of exactly one element from each row of <code>grid</code> such that no two elements chosen in adjacent rows are in the same column.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 13\nExplanation: \nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is\u00a0[1,5,7], so the answer is\u00a013.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[7]]\nOutput: 7\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 200</code></li> <li><code>-99 &lt;= grid[i][j] &lt;= 99</code></li> </ul>"},{"location":"LeetCode_Problems/1290/","title":"1290. Convert Binary Number in a Linked List to Integer","text":"Problem <p>Given <code>head</code> which is a reference node to a singly-linked list. The value of each node in the linked list is either <code>0</code> or <code>1</code>. The linked list holds the binary representation of a number.</p> <p>Return the decimal value of the number in the linked list.</p> <p>The most significant bit is at the head of the linked list.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,0,1]\nOutput: 5\nExplanation: (101) in base 2 = (5) in base 10\n</pre> <p>Example 2:</p> <pre>\nInput: head = [0]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The Linked List is not empty.</li> <li>Number of nodes will not exceed <code>30</code>.</li> <li>Each node's value is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1291/","title":"1291. Sequential Digits","text":"Problem <p>An\u00a0integer has sequential digits if and only if each digit in the number is one more than the previous digit.</p> <p>Return a sorted list of all the integers\u00a0in the range <code>[low, high]</code>\u00a0inclusive that have sequential digits.</p> <p> </p> <p>Example 1:</p> <pre>Input: low = 100, high = 300\nOutput: [123,234]\n</pre> <p>Example 2:</p> <pre>Input: low = 1000, high = 13000\nOutput: [1234,2345,3456,4567,5678,6789,12345]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>10 &lt;= low &lt;= high &lt;= 10^9</code></li> </ul>"},{"location":"LeetCode_Problems/1292/","title":"1292. Maximum Side Length of a Square with Sum Less than or Equal to Threshold","text":"Problem <p>Given a <code>m x n</code> matrix <code>mat</code> and an integer <code>threshold</code>, return the maximum side-length of a square with a sum less than or equal to <code>threshold</code> or return <code>0</code> if there is no such square.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\nOutput: 2\nExplanation: The maximum side length of square with sum less than 4 is 2 as shown.\n</pre> <p>Example 2:</p> <pre>\nInput: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>0 &lt;= mat[i][j] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= threshold &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1293/","title":"1293. Shortest Path in a Grid with Obstacles Elimination","text":"Problem <p>You are given an <code>m x n</code> integer matrix <code>grid</code> where each cell is either <code>0</code> (empty) or <code>1</code> (obstacle). You can move up, down, left, or right from and to an empty cell in one step.</p> <p>Return the minimum number of steps to walk from the upper left corner <code>(0, 0)</code> to the lower right corner <code>(m - 1, n - 1)</code> given that you can eliminate at most <code>k</code> obstacles. If it is not possible to find such walk return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1\nOutput: 6\nExplanation: \nThe shortest path without eliminating any obstacle is 10.\nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; (3,2) -&gt; (4,2).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1\nOutput: -1\nExplanation: We need to eliminate at least two obstacles to find such a walk.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 40</code></li> <li><code>1 &lt;= k &lt;= m * n</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>grid[0][0] == grid[m - 1][n - 1] == 0</code></li> </ul>"},{"location":"LeetCode_Problems/1294/","title":"1294. Weather Type in Each Country","text":"Problem"},{"location":"LeetCode_Problems/1295/","title":"1295. Find Numbers with Even Number of Digits","text":"Problem <p>Given an array <code>nums</code> of integers, return how many of them contain an even number of digits.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [12,345,2,6,7896]\nOutput: 2\nExplanation: \n12 contains 2 digits (even number of digits).\u00a0\n345 contains 3 digits (odd number of digits).\u00a0\n2 contains 1 digit (odd number of digits).\u00a0\n6 contains 1 digit (odd number of digits).\u00a0\n7896 contains 4 digits (even number of digits).\u00a0\nTherefore only 12 and 7896 contain an even number of digits.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [555,901,482,1771]\nOutput: 1 \nExplanation: \nOnly 1771 contains an even number of digits.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 500</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1296/","title":"1296. Divide Array in Sets of K Consecutive Numbers","text":"Problem <p>Given an array of integers <code>nums</code> and a positive integer <code>k</code>, check whether it is possible to divide this array into sets of <code>k</code> consecutive numbers.</p> <p>Return <code>true</code> if it is possible. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,3,4,4,5,6], k = 4\nOutput: true\nExplanation: Array can be divided into [1,2,3,4] and [3,4,5,6].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3\nOutput: true\nExplanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,4], k = 3\nOutput: false\nExplanation: Each array should be divided in subarrays of size 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul> <p> </p> <p>Note: This question is the same as\u00a0846:\u00a0https://leetcode.com/problems/hand-of-straights/</p>"},{"location":"LeetCode_Problems/1297/","title":"1297. Maximum Number of Occurrences of a Substring","text":"Problem <p>Given a string <code>s</code>, return the maximum number of occurrences of any substring under the following rules:</p> <ul> <li>The number of unique characters in the substring must be less than or equal to <code>maxLetters</code>.</li> <li>The substring size must be between <code>minSize</code> and <code>maxSize</code> inclusive.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4\nOutput: 2\nExplanation: Substring \"aab\" has 2 occurrences in the original string.\nIt satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3\nOutput: 2\nExplanation: Substring \"aaa\" occur 2 times in the string. It can overlap.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= maxLetters &lt;= 26</code></li> <li><code>1 &lt;= minSize &lt;= maxSize &lt;= min(26, s.length)</code></li> <li><code>s</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1298/","title":"1298. Maximum Candies You Can Get from Boxes","text":"Problem <p>You have <code>n</code> boxes labeled from <code>0</code> to <code>n - 1</code>. You are given four arrays: <code>status</code>, <code>candies</code>, <code>keys</code>, and <code>containedBoxes</code> where:</p> <ul> <li><code>status[i]</code> is <code>1</code> if the <code>i<sup>th</sup></code> box is open and <code>0</code> if the <code>i<sup>th</sup></code> box is closed,</li> <li><code>candies[i]</code> is the number of candies in the <code>i<sup>th</sup></code> box,</li> <li><code>keys[i]</code> is a list of the labels of the boxes you can open after opening the <code>i<sup>th</sup></code> box.</li> <li><code>containedBoxes[i]</code> is a list of the boxes you found inside the <code>i<sup>th</sup></code> box.</li> </ul> <p>You are given an integer array <code>initialBoxes</code> that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.</p> <p>Return the maximum number of candies you can get following the rules above.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\nOutput: 16\nExplanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2.\nBox 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\nTotal number of candies collected = 7 + 4 + 5 = 16 candy.\n</pre> <p>Example 2:</p> <pre>\nInput: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]\nOutput: 6\nExplanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys.\nThe total number of candies will be 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == status.length == candies.length == keys.length == containedBoxes.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>status[i]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>1 &lt;= candies[i] &lt;= 1000</code></li> <li><code>0 &lt;= keys[i].length &lt;= n</code></li> <li><code>0 &lt;= keys[i][j] &lt; n</code></li> <li>All values of <code>keys[i]</code> are unique.</li> <li><code>0 &lt;= containedBoxes[i].length &lt;= n</code></li> <li><code>0 &lt;= containedBoxes[i][j] &lt; n</code></li> <li>All values of <code>containedBoxes[i]</code> are unique.</li> <li>Each box is contained in one box at most.</li> <li><code>0 &lt;= initialBoxes.length &lt;= n</code></li> <li><code>0 &lt;= initialBoxes[i] &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/1299/","title":"1299. Replace Elements with Greatest Element on Right Side","text":"Problem <p>Given an array <code>arr</code>,\u00a0replace every element in that array with the greatest element among the elements to its\u00a0right, and replace the last element with <code>-1</code>.</p> <p>After doing so, return the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [17,18,5,4,6,1]\nOutput: [18,6,6,6,1,-1]\nExplanation: \n- index 0 --&gt; the greatest element to the right of index 0 is index 1 (18).\n- index 1 --&gt; the greatest element to the right of index 1 is index 4 (6).\n- index 2 --&gt; the greatest element to the right of index 2 is index 4 (6).\n- index 3 --&gt; the greatest element to the right of index 3 is index 4 (6).\n- index 4 --&gt; the greatest element to the right of index 4 is index 5 (1).\n- index 5 --&gt; there are no elements to the right of index 5, so we put -1.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [400]\nOutput: [-1]\nExplanation: There are no elements to the right of index 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1300/","title":"1300. Sum of Mutated Array Closest to Target","text":"Problem <p>Given an integer array <code>arr</code> and a target value <code>target</code>, return the integer <code>value</code> such that when we change all the integers larger than <code>value</code> in the given array to be equal to <code>value</code>, the sum of the array gets as close as possible (in absolute difference) to <code>target</code>.</p> <p>In case of a tie, return the minimum such integer.</p> <p>Notice that the answer is not neccesarilly a number from <code>arr</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [4,9,3], target = 10\nOutput: 3\nExplanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [2,3,5], target = 10\nOutput: 5\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [60864,25176,27249,21296,20204], target = 56803\nOutput: 11361\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= arr[i], target &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1301/","title":"1301. Number of Paths with Max Score","text":"Problem <p>You are given a square <code>board</code>\u00a0of characters. You can move on the board starting at the bottom right square marked with the character\u00a0<code>'S'</code>.</p> <p>You need\u00a0to reach the top left square marked with the character <code>'E'</code>. The rest of the squares are labeled either with a numeric character\u00a0<code>1, 2, ..., 9</code> or with an obstacle <code>'X'</code>. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.</p> <p>Return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo <code>10^9 + 7</code>.</p> <p>In case there is no path, return\u00a0<code>[0, 0]</code>.</p> <p> </p> <p>Example 1:</p> <pre>Input: board = [\"E23\",\"2X2\",\"12S\"]\nOutput: [7,1]\n</pre> <p>Example 2:</p> <pre>Input: board = [\"E12\",\"1X1\",\"21S\"]\nOutput: [4,2]\n</pre> <p>Example 3:</p> <pre>Input: board = [\"E11\",\"XXX\",\"11S\"]\nOutput: [0,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= board.length == board[i].length &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1302/","title":"1302. Deepest Leaves Sum","text":"Problem <p>Given the <code>root</code> of a binary tree, return the sum of values of its deepest leaves.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\nOutput: 15\n</pre> <p>Example 2:</p> <pre>\nInput: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\nOutput: 19\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1303/","title":"1303. Find the Team Size","text":"Problem"},{"location":"LeetCode_Problems/1304/","title":"1304. Find N Unique Integers Sum up to Zero","text":"Problem <p>Given an integer <code>n</code>, return any array containing <code>n</code> unique integers such that they add up to <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5\nOutput: [-7,-1,1,3,4]\nExplanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3\nOutput: [-1,0,1]\n</pre> <p>Example 3:</p> <pre>\nInput: n = 1\nOutput: [0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1305/","title":"1305. All Elements in Two Binary Search Trees","text":"Problem <p>Given two binary search trees <code>root1</code> and <code>root2</code>, return a list containing all the integers from both trees sorted in ascending order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root1 = [2,1,4], root2 = [1,0,3]\nOutput: [0,1,1,2,3,4]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root1 = [1,null,8], root2 = [8,1]\nOutput: [1,1,8,8]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in each tree is in the range <code>[0, 5000]</code>.</li> <li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1306/","title":"1306. Jump Game III","text":"Problem <p>Given an array of non-negative integers <code>arr</code>, you are initially positioned at <code>start</code>\u00a0index of the array. When you are at index <code>i</code>, you can jump\u00a0to <code>i + arr[i]</code> or <code>i - arr[i]</code>, check if you can reach\u00a0any index with value 0.</p> <p>Notice that you can not jump outside of the array at any time.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [4,2,3,0,3,1,2], start = 5\nOutput: true\nExplanation: \nAll possible ways to reach at index 3 with value 0 are: \nindex 5 -&gt; index 4 -&gt; index 1 -&gt; index 3 \nindex 5 -&gt; index 6 -&gt; index 4 -&gt; index 1 -&gt; index 3 \n</pre> <p>Example 2:</p> <pre>\nInput: arr = [4,2,3,0,3,1,2], start = 0\nOutput: true \nExplanation: \nOne possible way to reach at index 3 with value 0 is: \nindex 0 -&gt; index 4 -&gt; index 1 -&gt; index 3\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [3,0,2,1,2], start = 2\nOutput: false\nExplanation: There is no way to reach at index 1 with value 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= arr[i] &lt;\u00a0arr.length</code></li> <li><code>0 &lt;= start &lt; arr.length</code></li> </ul>"},{"location":"LeetCode_Problems/1307/","title":"1307. Verbal Arithmetic Puzzle","text":"Problem <p>Given an equation, represented by <code>words</code> on the left side and the <code>result</code> on the right side.</p> <p>You need to check if the equation is solvable under the following rules:</p> <ul> <li>Each character is decoded as one digit (0 - 9).</li> <li>No two characters can map to the same digit.</li> <li>Each <code>words[i]</code> and <code>result</code> are decoded as one number without leading zeros.</li> <li>Sum of numbers on the left side (<code>words</code>) will equal to the number on the right side (<code>result</code>).</li> </ul> <p>Return <code>true</code> if the equation is solvable, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"SEND\",\"MORE\"], result = \"MONEY\"\nOutput: true\nExplanation: Map 'S'-&gt; 9, 'E'-&gt;5, 'N'-&gt;6, 'D'-&gt;7, 'M'-&gt;1, 'O'-&gt;0, 'R'-&gt;8, 'Y'-&gt;'2'\nSuch that: \"SEND\" + \"MORE\" = \"MONEY\" ,  9567 + 1085 = 10652</pre> <p>Example 2:</p> <pre>\nInput: words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"\nOutput: true\nExplanation: Map 'S'-&gt; 6, 'I'-&gt;5, 'X'-&gt;0, 'E'-&gt;8, 'V'-&gt;7, 'N'-&gt;2, 'T'-&gt;1, 'W'-&gt;'3', 'Y'-&gt;4\nSuch that: \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" ,  650 + 68782 + 68782 = 138214</pre> <p>Example 3:</p> <pre>\nInput: words = [\"LEET\",\"CODE\"], result = \"POINT\"\nOutput: false\nExplanation: There is no possible mapping to satisfy the equation, so we return false.\nNote that two different characters cannot map to the same digit.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= words.length &lt;= 5</code></li> <li><code>1 &lt;= words[i].length, result.length &lt;= 7</code></li> <li><code>words[i], result</code> contain only uppercase English letters.</li> <li>The number of different characters used in the expression is at most <code>10</code>.</li> </ul>"},{"location":"LeetCode_Problems/1308/","title":"1308. Running Total for Different Genders","text":"Problem"},{"location":"LeetCode_Problems/1309/","title":"1309. Decrypt String from Alphabet to Integer Mapping","text":"Problem <p>You are given a string <code>s</code> formed by digits and <code>'#'</code>. We want to map <code>s</code> to English lowercase characters as follows:</p> <ul> <li>Characters (<code>'a'</code> to <code>'i'</code>) are represented by (<code>'1'</code> to <code>'9'</code>) respectively.</li> <li>Characters (<code>'j'</code> to <code>'z'</code>) are represented by (<code>'10#'</code> to <code>'26#'</code>) respectively.</li> </ul> <p>Return the string formed after mapping.</p> <p>The test cases are generated so that a unique mapping will always exist.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"10#11#12\"\nOutput: \"jkab\"\nExplanation: \"j\" -&gt; \"10#\" , \"k\" -&gt; \"11#\" , \"a\" -&gt; \"1\" , \"b\" -&gt; \"2\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"1326#\"\nOutput: \"acz\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists of digits and the <code>'#'</code> letter.</li> <li><code>s</code> will be a valid string such that mapping is always possible.</li> </ul>"},{"location":"LeetCode_Problems/1310/","title":"1310. XOR Queries of a Subarray","text":"Problem <p>You are given an array <code>arr</code> of positive integers. You are also given the array <code>queries</code> where <code>queries[i] = [left<sub>i, </sub>right<sub>i</sub>]</code>.</p> <p>For each query <code>i</code> compute the XOR of elements from <code>left<sub>i</sub></code> to <code>right<sub>i</sub></code> (that is, <code>arr[left<sub>i</sub>] XOR arr[left<sub>i</sub> + 1] XOR ... XOR arr[right<sub>i</sub>]</code> ).</p> <p>Return an array <code>answer</code> where <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]\nOutput: [2,7,14,8] \nExplanation: \nThe binary representation of the elements in the array are:\n1 = 0001 \n3 = 0011 \n4 = 0100 \n8 = 1000 \nThe XOR values for queries are:\n[0,1] = 1 xor 3 = 2 \n[1,2] = 3 xor 4 = 7 \n[0,3] = 1 xor 3 xor 4 xor 8 = 14 \n[3,3] = 8\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]\nOutput: [8,0,4,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length, queries.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> <li><code>queries[i].length == 2</code></li> <li><code>0 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt; arr.length</code></li> </ul>"},{"location":"LeetCode_Problems/1311/","title":"1311. Get Watched Videos by Your Friends","text":"Problem <p>There are <code>n</code> people, each person has a unique id between <code>0</code> and <code>n-1</code>. Given the arrays <code>watchedVideos</code> and <code>friends</code>, where <code>watchedVideos[i]</code> and <code>friends[i]</code> contain the list of watched videos and the list of friends respectively for the person with <code>id = i</code>.</p> <p>Level 1 of videos are all watched videos by your\u00a0friends, level 2 of videos are all watched videos by the friends of your\u00a0friends and so on. In general, the level <code>k</code> of videos are all\u00a0watched videos by people\u00a0with the shortest path exactly equal\u00a0to\u00a0<code>k</code> with you. Given your\u00a0<code>id</code> and the <code>level</code> of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.\u00a0</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1\nOutput: [\"B\",\"C\"] \nExplanation: \nYou have id = 0 (green color in the figure) and your friends are (yellow color in the figure):\nPerson with id = 1 -&gt; watchedVideos = [\"C\"]\u00a0\nPerson with id = 2 -&gt; watchedVideos = [\"B\",\"C\"]\u00a0\nThe frequencies of watchedVideos by your friends are:\u00a0\nB -&gt; 1\u00a0\nC -&gt; 2\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2\nOutput: [\"D\"]\nExplanation: \nYou have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == watchedVideos.length ==\u00a0friends.length</code></li> <li><code>2 &lt;= n\u00a0&lt;= 100</code></li> <li><code>1 &lt;=\u00a0watchedVideos[i].length &lt;= 100</code></li> <li><code>1 &lt;=\u00a0watchedVideos[i][j].length &lt;= 8</code></li> <li><code>0 &lt;= friends[i].length &lt; n</code></li> <li><code>0 &lt;= friends[i][j]\u00a0&lt; n</code></li> <li><code>0 &lt;= id &lt; n</code></li> <li><code>1 &lt;= level &lt; n</code></li> <li>if\u00a0<code>friends[i]</code> contains <code>j</code>, then <code>friends[j]</code> contains <code>i</code></li> </ul>"},{"location":"LeetCode_Problems/1312/","title":"1312. Minimum Insertion Steps to Make a String Palindrome","text":"Problem <p>Given a string <code>s</code>. In one step you can insert any character at any index of the string.</p> <p>Return the minimum number of steps to make <code>s</code>\u00a0palindrome.</p> <p>A\u00a0Palindrome String\u00a0is one that reads the same backward as well as forward.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"zzazz\"\nOutput: 0\nExplanation: The string \"zzazz\" is already palindrome we do not need any insertions.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"mbadm\"\nOutput: 2\nExplanation: String can be \"mbdadbm\" or \"mdbabdm\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"leetcode\"\nOutput: 5\nExplanation: Inserting 5 characters the string becomes \"leetcodocteel\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1313/","title":"1313. Decompress Run-Length Encoded List","text":"Problem <p>We are given a list <code>nums</code> of integers representing a list compressed with run-length encoding.</p> <p>Consider each adjacent pair\u00a0of elements <code>[freq, val] = [nums[2*i], nums[2*i+1]]</code>\u00a0(with <code>i &gt;= 0</code>).\u00a0 For each such pair, there are <code>freq</code> elements with value <code>val</code> concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.</p> <p>Return the decompressed list.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: [2,4,4,4]\nExplanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].\nThe second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].\nAt the end the concatenation [2] + [4,4,4] is [2,4,4,4].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,2,3]\nOutput: [1,3,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 100</code></li> <li><code>nums.length % 2 == 0</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1314/","title":"1314. Matrix Block Sum","text":"Problem <p>Given a <code>m x n</code> matrix <code>mat</code> and an integer <code>k</code>, return a matrix <code>answer</code> where each <code>answer[i][j]</code> is the sum of all elements <code>mat[r][c]</code> for:</p> <ul> <li><code>i - k &lt;= r &lt;= i + k,</code></li> <li><code>j - k &lt;= c &lt;= j + k</code>, and</li> <li><code>(r, c)</code> is a valid position in the matrix.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[12,21,16],[27,45,33],[24,39,28]]\n</pre> <p>Example 2:</p> <pre>\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2\nOutput: [[45,45,45],[45,45,45],[45,45,45]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m ==\u00a0mat.length</code></li> <li><code>n ==\u00a0mat[i].length</code></li> <li><code>1 &lt;= m, n, k &lt;= 100</code></li> <li><code>1 &lt;= mat[i][j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1315/","title":"1315. Sum of Nodes with Even-Valued Grandparent","text":"Problem <p>Given the <code>root</code> of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return <code>0</code>.</p> <p>A grandparent of a node is the parent of its parent if it exists.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\nOutput: 18\nExplanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1316/","title":"1316. Distinct Echo Substrings","text":"Problem <p>Return the number of distinct non-empty substrings of <code>text</code>\u00a0that can be written as the concatenation of some string with itself (i.e. it can be written as <code>a + a</code>\u00a0where <code>a</code> is some string).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: text = \"abcabcabc\"\nOutput: 3\nExplanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\".\n</pre> <p>Example 2:</p> <pre>\nInput: text = \"leetcodeleetcode\"\nOutput: 2\nExplanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text.length &lt;= 2000</code></li> <li><code>text</code>\u00a0has only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1317/","title":"1317. Convert Integer to the Sum of Two No-Zero Integers","text":"Problem <p>No-Zero integer is a positive integer that does not contain any <code>0</code> in its decimal representation.</p> <p>Given an integer <code>n</code>, return a list of two integers <code>[a, b]</code> where:</p> <ul> <li><code>a</code> and <code>b</code> are No-Zero integers.</li> <li><code>a + b = n</code></li> </ul> <p>The test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: [1,1]\nExplanation: Let a = 1 and b = 1.\nBoth a and b are no-zero integers, and a + b = 2 = n.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 11\nOutput: [2,9]\nExplanation: Let a = 2 and b = 9.\nBoth a and b are no-zero integers, and a + b = 9 = n.\nNote that there are other valid answers as [8, 3] that can be accepted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1318/","title":"1318. Minimum Flips to Make a OR b Equal to c","text":"Problem <p>Given 3 positives numbers <code>a</code>, <code>b</code> and <code>c</code>. Return the minimum flips required in some bits of <code>a</code> and <code>b</code> to make (\u00a0<code>a</code> OR <code>b</code> == <code>c</code>\u00a0). (bitwise OR operation). Flip operation\u00a0consists of change\u00a0any\u00a0single bit 1 to 0 or change the bit 0 to 1\u00a0in their binary representation.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: a = 2, b = 6, c = 5\nOutput: 3\nExplanation: After flips a = 1 , b = 4 , c = 5 such that (<code>a</code> OR <code>b</code> == <code>c</code>)</pre> <p>Example 2:</p> <pre>\nInput: a = 4, b = 2, c = 7\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: a = 1, b = 2, c = 3\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a &lt;= 10^9</code></li> <li><code>1 &lt;= b\u00a0&lt;= 10^9</code></li> <li><code>1 &lt;= c\u00a0&lt;= 10^9</code></li> </ul>"},{"location":"LeetCode_Problems/1319/","title":"1319. Number of Operations to Make Network Connected","text":"Problem <p>There are <code>n</code> computers numbered from <code>0</code> to <code>n - 1</code> connected by ethernet cables <code>connections</code> forming a network where <code>connections[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents a connection between computers <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>. Any computer can reach any other computer directly or indirectly through the network.</p> <p>You are given an initial computer network <code>connections</code>. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.</p> <p>Return the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, connections = [[0,1],[0,2],[1,2]]\nOutput: 1\nExplanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]\nOutput: -1\nExplanation: There are not enough cables.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= connections.length &lt;= min(n * (n - 1) / 2, 10<sup>5</sup>)</code></li> <li><code>connections[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>There are no repeated connections.</li> <li>No two computers are connected by more than one cable.</li> </ul>"},{"location":"LeetCode_Problems/1320/","title":"1320. Minimum Distance to Type a Word Using Two Fingers","text":"Problem <p>You have a keyboard layout as shown above in the X-Y plane, where each English uppercase letter is located at some coordinate.</p> <ul> <li>For example, the letter <code>'A'</code> is located at coordinate <code>(0, 0)</code>, the letter <code>'B'</code> is located at coordinate <code>(0, 1)</code>, the letter <code>'P'</code> is located at coordinate <code>(2, 3)</code> and the letter <code>'Z'</code> is located at coordinate <code>(4, 1)</code>.</li> </ul> <p>Given the string <code>word</code>, return the minimum total distance to type such string using only two fingers.</p> <p>The distance between coordinates <code>(x<sub>1</sub>, y<sub>1</sub>)</code> and <code>(x<sub>2</sub>, y<sub>2</sub>)</code> is <code>|x<sub>1</sub> - x<sub>2</sub>| + |y<sub>1</sub> - y<sub>2</sub>|</code>.</p> <p>Note that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"CAKE\"\nOutput: 3\nExplanation: Using two fingers, one optimal way to type \"CAKE\" is: \nFinger 1 on letter 'C' -&gt; cost = 0 \nFinger 1 on letter 'A' -&gt; cost = Distance from letter 'C' to letter 'A' = 2 \nFinger 2 on letter 'K' -&gt; cost = 0 \nFinger 2 on letter 'E' -&gt; cost = Distance from letter 'K' to letter 'E' = 1 \nTotal distance = 3\n</pre> <p>Example 2:</p> <pre>\nInput: word = \"HAPPY\"\nOutput: 6\nExplanation: Using two fingers, one optimal way to type \"HAPPY\" is:\nFinger 1 on letter 'H' -&gt; cost = 0\nFinger 1 on letter 'A' -&gt; cost = Distance from letter 'H' to letter 'A' = 2\nFinger 2 on letter 'P' -&gt; cost = 0\nFinger 2 on letter 'P' -&gt; cost = Distance from letter 'P' to letter 'P' = 0\nFinger 1 on letter 'Y' -&gt; cost = Distance from letter 'A' to letter 'Y' = 4\nTotal distance = 6\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= word.length &lt;= 300</code></li> <li><code>word</code> consists of uppercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1321/","title":"1321. Restaurant Growth","text":"Problem <p>Table: <code>Customer</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| customer_id   | int     |\n| name          | varchar |\n| visited_on    | date    |\n| amount        | int     |\n+---------------+---------+\nIn SQL,(customer_id, visited_on) is the primary key for this table.\nThis table contains data about customer transactions in a restaurant.\nvisited_on is the date on which the customer with ID (customer_id) has visited the restaurant.\namount is the total paid by a customer.\n</pre> <p> </p> <p>You are the restaurant owner and you want to analyze a possible expansion (there will be at least one customer every day).</p> <p>Compute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before). <code>average_amount</code> should be rounded to two decimal places.</p> <p>Return the result table ordered by <code>visited_on</code> in ascending order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nCustomer table:\n+-------------+--------------+--------------+-------------+\n| customer_id | name         | visited_on   | amount      |\n+-------------+--------------+--------------+-------------+\n| 1           | Jhon         | 2019-01-01   | 100         |\n| 2           | Daniel       | 2019-01-02   | 110         |\n| 3           | Jade         | 2019-01-03   | 120         |\n| 4           | Khaled       | 2019-01-04   | 130         |\n| 5           | Winston      | 2019-01-05   | 110         | \n| 6           | Elvis        | 2019-01-06   | 140         | \n| 7           | Anna         | 2019-01-07   | 150         |\n| 8           | Maria        | 2019-01-08   | 80          |\n| 9           | Jaze         | 2019-01-09   | 110         | \n| 1           | Jhon         | 2019-01-10   | 130         | \n| 3           | Jade         | 2019-01-10   | 150         | \n+-------------+--------------+--------------+-------------+\nOutput: \n+--------------+--------------+----------------+\n| visited_on   | amount       | average_amount |\n+--------------+--------------+----------------+\n| 2019-01-07   | 860          | 122.86         |\n| 2019-01-08   | 840          | 120            |\n| 2019-01-09   | 840          | 120            |\n| 2019-01-10   | 1000         | 142.86         |\n+--------------+--------------+----------------+\nExplanation: \n1st moving average from 2019-01-01 to 2019-01-07 has an average_amount of (100 + 110 + 120 + 130 + 110 + 140 + 150)/7 = 122.86\n2nd moving average from 2019-01-02 to 2019-01-08 has an average_amount of (110 + 120 + 130 + 110 + 140 + 150 + 80)/7 = 120\n3rd moving average from 2019-01-03 to 2019-01-09 has an average_amount of (120 + 130 + 110 + 140 + 150 + 80 + 110)/7 = 120\n4th moving average from 2019-01-04 to 2019-01-10 has an average_amount of (130 + 110 + 140 + 150 + 80 + 110 + 130 + 150)/7 = 142.86\n</pre>"},{"location":"LeetCode_Problems/1322/","title":"1322. Ads Performance","text":"Problem"},{"location":"LeetCode_Problems/1323/","title":"1323. Maximum 69 Number","text":"Problem <p>You are given a positive integer <code>num</code> consisting only of digits <code>6</code> and <code>9</code>.</p> <p>Return the maximum number you can get by changing at most one digit (<code>6</code> becomes <code>9</code>, and <code>9</code> becomes <code>6</code>).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 9669\nOutput: 9969\nExplanation: \nChanging the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\nThe maximum number is 9969.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 9996\nOutput: 9999\nExplanation: Changing the last digit 6 to 9 results in the maximum number.\n</pre> <p>Example 3:</p> <pre>\nInput: num = 9999\nOutput: 9999\nExplanation: It is better not to apply any change.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 10<sup>4</sup></code></li> <li><code>num</code>\u00a0consists of only <code>6</code> and <code>9</code> digits.</li> </ul>"},{"location":"LeetCode_Problems/1324/","title":"1324. Print Words Vertically","text":"Problem <p>Given a string <code>s</code>.\u00a0Return\u00a0all the words vertically in the same order in which they appear in <code>s</code>. Words are returned as a list of strings, complete with\u00a0spaces when is necessary. (Trailing spaces are not allowed). Each word would be put on only one column and that in one column there will be only one word.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"HOW ARE YOU\"\nOutput: [\"HAY\",\"ORO\",\"WEU\"]\nExplanation: Each word is printed vertically. \n \"HAY\"\n\u00a0\"ORO\"\n\u00a0\"WEU\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"TO BE OR NOT TO BE\"\nOutput: [\"TBONTB\",\"OEROOE\",\"   T\"]\nExplanation: Trailing spaces is not allowed. \n\"TBONTB\"\n\"OEROOE\"\n\"   T\"\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"CONTEST IS COMING\"\nOutput: [\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 200</code></li> <li><code>s</code>\u00a0contains only upper case English letters.</li> <li>It's guaranteed that there is only one\u00a0space between 2 words.</li> </ul>"},{"location":"LeetCode_Problems/1325/","title":"1325. Delete Leaves With a Given Value","text":"Problem <p>Given a binary tree <code>root</code> and an integer <code>target</code>, delete all the leaf nodes with value <code>target</code>.</p> <p>Note that once you delete a leaf node with value <code>target</code>, if its parent node becomes a leaf node and has the value <code>target</code>, it should also be deleted (you need to continue doing that until you cannot).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,2,null,2,4], target = 2\nOutput: [1,null,3,null,4]\nExplanation: Leaf nodes in green with value (target = 2) are removed (Picture in left). \nAfter removing, new nodes become leaf nodes with value (target = 2) (Picture in center).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,3,3,3,2], target = 3\nOutput: [1,3,null,null,2]\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [1,2,null,2,null,2], target = 2\nOutput: [1]\nExplanation: Leaf nodes in green with value (target = 2) are removed at each step.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 3000]</code>.</li> <li><code>1 &lt;= Node.val, target &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1326/","title":"1326. Minimum Number of Taps to Open to Water a Garden","text":"Problem <p>There is a one-dimensional garden on the x-axis. The garden starts at the point <code>0</code> and ends at the point <code>n</code>. (i.e., the\u00a0length of the garden is <code>n</code>).</p> <p>There are <code>n + 1</code> taps located at points <code>[0, 1, ..., n]</code> in the garden.</p> <p>Given an integer <code>n</code> and an integer array <code>ranges</code> of length <code>n + 1</code> where <code>ranges[i]</code> (0-indexed) means the <code>i-th</code> tap can water the area <code>[i - ranges[i], i + ranges[i]]</code> if it was open.</p> <p>Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, ranges = [3,4,1,1,0,0]\nOutput: 1\nExplanation: The tap at point 0 can cover the interval [-3,3]\nThe tap at point 1 can cover the interval [-3,5]\nThe tap at point 2 can cover the interval [1,3]\nThe tap at point 3 can cover the interval [2,4]\nThe tap at point 4 can cover the interval [4,4]\nThe tap at point 5 can cover the interval [5,5]\nOpening Only the second tap will water the whole garden [0,5]\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, ranges = [0,0,0,0]\nOutput: -1\nExplanation: Even if you activate all the four taps you cannot water the whole garden.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>ranges.length == n + 1</code></li> <li><code>0 &lt;= ranges[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1327/","title":"1327. List the Products Ordered in a Period","text":"Problem <p>Table: <code>Products</code></p> <pre>\n+------------------+---------+\n| Column Name      | Type    |\n+------------------+---------+\n| product_id       | int     |\n| product_name     | varchar |\n| product_category | varchar |\n+------------------+---------+\nproduct_id is the primary key (column with unique values) for this table.\nThis table contains data about the company's products.\n</pre> <p> </p> <p>Table: <code>Orders</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| product_id    | int     |\n| order_date    | date    |\n| unit          | int     |\n+---------------+---------+\nThis table may have duplicate rows.\nproduct_id is a foreign key (reference column) to the Products table.\nunit is the number of products ordered in order_date.\n</pre> <p> </p> <p>Write a solution to get the names of products that have at least <code>100</code> units ordered in February 2020 and their amount.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nProducts table:\n+-------------+-----------------------+------------------+\n| product_id  | product_name          | product_category |\n+-------------+-----------------------+------------------+\n| 1           | Leetcode Solutions    | Book             |\n| 2           | Jewels of Stringology | Book             |\n| 3           | HP                    | Laptop           |\n| 4           | Lenovo                | Laptop           |\n| 5           | Leetcode Kit          | T-shirt          |\n+-------------+-----------------------+------------------+\nOrders table:\n+--------------+--------------+----------+\n| product_id   | order_date   | unit     |\n+--------------+--------------+----------+\n| 1            | 2020-02-05   | 60       |\n| 1            | 2020-02-10   | 70       |\n| 2            | 2020-01-18   | 30       |\n| 2            | 2020-02-11   | 80       |\n| 3            | 2020-02-17   | 2        |\n| 3            | 2020-02-24   | 3        |\n| 4            | 2020-03-01   | 20       |\n| 4            | 2020-03-04   | 30       |\n| 4            | 2020-03-04   | 60       |\n| 5            | 2020-02-25   | 50       |\n| 5            | 2020-02-27   | 50       |\n| 5            | 2020-03-01   | 50       |\n+--------------+--------------+----------+\nOutput: \n+--------------------+---------+\n| product_name       | unit    |\n+--------------------+---------+\n| Leetcode Solutions | 130     |\n| Leetcode Kit       | 100     |\n+--------------------+---------+\nExplanation: \nProducts with product_id = 1 is ordered in February a total of (60 + 70) = 130.\nProducts with product_id = 2 is ordered in February a total of 80.\nProducts with product_id = 3 is ordered in February a total of (2 + 3) = 5.\nProducts with product_id = 4 was not ordered in February 2020.\nProducts with product_id = 5 is ordered in February a total of (50 + 50) = 100.\n</pre>"},{"location":"LeetCode_Problems/1328/","title":"1328. Break a Palindrome","text":"Problem <p>Given a palindromic string of lowercase English letters <code>palindrome</code>, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.</p> <p>Return the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.</p> <p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, <code>a</code> has a character strictly smaller than the corresponding character in <code>b</code>. For example, <code>\"abcc\"</code> is lexicographically smaller than <code>\"abcd\"</code> because the first position they differ is at the fourth character, and <code>'c'</code> is smaller than <code>'d'</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: palindrome = \"abccba\"\nOutput: \"aaccba\"\nExplanation: There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\".\nOf all the ways, \"aaccba\" is the lexicographically smallest.\n</pre> <p>Example 2:</p> <pre>\nInput: palindrome = \"a\"\nOutput: \"\"\nExplanation: There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= palindrome.length &lt;= 1000</code></li> <li><code>palindrome</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1329/","title":"1329. Sort the Matrix Diagonally","text":"Problem <p>A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from <code>mat[2][0]</code>, where <code>mat</code> is a <code>6 x 3</code> matrix, includes cells <code>mat[2][0]</code>, <code>mat[3][1]</code>, and <code>mat[4][2]</code>.</p> <p>Given an <code>m x n</code> matrix <code>mat</code> of integers, sort each matrix diagonal in ascending order and return the resulting matrix.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\nOutput: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]\n</pre> <p>Example 2:</p> <pre>\nInput: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\nOutput: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>1 &lt;= mat[i][j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1330/","title":"1330. Reverse Subarray To Maximize Array Value","text":"Problem <p>You are given an integer array <code>nums</code>. The value of this array is defined as the sum of <code>|nums[i] - nums[i + 1]|</code> for all <code>0 &lt;= i &lt; nums.length - 1</code>.</p> <p>You are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.</p> <p>Find maximum possible value of the final array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,1,5,4]\nOutput: 10\nExplanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,4,9,24,2,1,10]\nOutput: 68\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1331/","title":"1331. Rank Transform of an Array","text":"Problem <p>Given an array of integers\u00a0<code>arr</code>, replace each element with its rank.</p> <p>The rank represents how large the element is. The rank has the following rules:</p> <ul> <li>Rank is an integer starting from 1.</li> <li>The larger the element, the larger the rank. If two elements are equal, their rank must be the same.</li> <li>Rank should be as small as possible.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [40,10,20,30]\nOutput: [4,1,2,3]\nExplanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.</pre> <p>Example 2:</p> <pre>\nInput: arr = [100,100,100]\nOutput: [1,1,1]\nExplanation: Same elements share the same rank.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [37,12,28,9,100,56,80,5,12]\nOutput: [5,3,4,2,8,6,7,1,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup>\u00a0&lt;= arr[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1332/","title":"1332. Remove Palindromic Subsequences","text":"Problem <p>You are given a string <code>s</code> consisting only of letters <code>'a'</code> and <code>'b'</code>. In a single step you can remove one palindromic subsequence from <code>s</code>.</p> <p>Return the minimum number of steps to make the given string empty.</p> <p>A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.</p> <p>A string is called palindrome if is one that reads the same backward as well as forward.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ababa\"\nOutput: 1\nExplanation: s is already a palindrome, so its entirety can be removed in a single step.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abb\"\nOutput: 2\nExplanation: \"abb\" -&gt; \"bb\" -&gt; \"\". \nRemove palindromic subsequence \"a\" then \"bb\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"baabb\"\nOutput: 2\nExplanation: \"baabb\" -&gt; \"b\" -&gt; \"\". \nRemove palindromic subsequence \"baab\" then \"b\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'a'</code> or <code>'b'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1333/","title":"1333. Filter Restaurants by Vegan-Friendly, Price and Distance","text":"Problem <p>Given the array <code>restaurants</code> where \u00a0<code>restaurants[i] = [id<sub>i</sub>, rating<sub>i</sub>, veganFriendly<sub>i</sub>, price<sub>i</sub>, distance<sub>i</sub>]</code>. You have to filter the restaurants using three filters.</p> <p>The <code>veganFriendly</code> filter will be either true (meaning you should only include restaurants with <code>veganFriendly<sub>i</sub></code> set to true)\u00a0or false\u00a0(meaning you can include any restaurant). In addition, you have the filters\u00a0<code>maxPrice</code> and <code>maxDistance</code>\u00a0which\u00a0are the maximum value for price and distance of restaurants you should consider respectively.</p> <p>Return the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity <code>veganFriendly<sub>i</sub></code> and <code>veganFriendly</code> take value 1 when it is true, and 0 when it is false.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10\nOutput: [3,1,5] \nExplanation: \nThe restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). \n</pre> <p>Example 2:</p> <pre>\nInput: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10\nOutput: [4,3,2,1,5]\nExplanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.\n</pre> <p>Example 3:</p> <pre>\nInput: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3\nOutput: [4,5]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;=\u00a0restaurants.length &lt;= 10^4</code></li> <li><code>restaurants[i].length == 5</code></li> <li><code>1 &lt;=\u00a0id<sub>i</sub>, rating<sub>i</sub>, price<sub>i</sub>, distance<sub>i </sub>&lt;= 10^5</code></li> <li><code>1 &lt;=\u00a0maxPrice,\u00a0maxDistance &lt;= 10^5</code></li> <li><code>veganFriendly<sub>i</sub></code> and\u00a0<code>veganFriendly</code>\u00a0are\u00a00 or 1.</li> <li>All <code>id<sub>i</sub></code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1334/","title":"1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance","text":"Problem <p>There are <code>n</code> cities numbered from <code>0</code> to <code>n-1</code>. Given the array <code>edges</code> where <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]</code> represents a bidirectional and weighted edge between cities <code>from<sub>i</sub></code> and <code>to<sub>i</sub></code>, and given the integer <code>distanceThreshold</code>.</p> <p>Return the city with the smallest number of cities that are reachable through some path and whose distance is at most <code>distanceThreshold</code>, If there are multiple such cities, return the city with the greatest number.</p> <p>Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4\nOutput: 3\nExplanation: The figure above describes the graph.\u00a0\nThe neighboring cities at a distanceThreshold = 4 for each city are:\nCity 0 -&gt; [City 1, City 2]\u00a0\nCity 1 -&gt; [City 0, City 2, City 3]\u00a0\nCity 2 -&gt; [City 0, City 1, City 3]\u00a0\nCity 3 -&gt; [City 1, City 2]\u00a0\nCities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2\nOutput: 0\nExplanation: The figure above describes the graph.\u00a0\nThe neighboring cities at a distanceThreshold = 2 for each city are:\nCity 0 -&gt; [City 1]\u00a0\nCity 1 -&gt; [City 0, City 4]\u00a0\nCity 2 -&gt; [City 3, City 4]\u00a0\nCity 3 -&gt; [City 2, City 4]\nCity 4 -&gt; [City 1, City 2, City 3]\u00a0\nThe city 0 has 1 neighboring city at a distanceThreshold = 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li> <li><code>edges[i].length == 3</code></li> <li><code>0 &lt;= from<sub>i</sub> &lt; to<sub>i</sub> &lt; n</code></li> <li><code>1 &lt;= weight<sub>i</sub>,\u00a0distanceThreshold &lt;= 10^4</code></li> <li>All pairs <code>(from<sub>i</sub>, to<sub>i</sub>)</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1335/","title":"1335. Minimum Difficulty of a Job Schedule","text":"Problem <p>You want to schedule a list of jobs in <code>d</code> days. Jobs are dependent (i.e To work on the <code>i<sup>th</sup></code> job, you have to finish all the jobs <code>j</code> where <code>0 &lt;= j &lt; i</code>).</p> <p>You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the <code>d</code> days. The difficulty of a day is the maximum difficulty of a job done on that day.</p> <p>You are given an integer array <code>jobDifficulty</code> and an integer <code>d</code>. The difficulty of the <code>i<sup>th</sup></code> job is <code>jobDifficulty[i]</code>.</p> <p>Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: jobDifficulty = [6,5,4,3,2,1], d = 2\nOutput: 7\nExplanation: First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7 \n</pre> <p>Example 2:</p> <pre>\nInput: jobDifficulty = [9,9,9], d = 4\nOutput: -1\nExplanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.\n</pre> <p>Example 3:</p> <pre>\nInput: jobDifficulty = [1,1,1], d = 3\nOutput: 3\nExplanation: The schedule is one job per day. total difficulty will be 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= jobDifficulty.length &lt;= 300</code></li> <li><code>0 &lt;= jobDifficulty[i] &lt;= 1000</code></li> <li><code>1 &lt;= d &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/1336/","title":"1336. Number of Transactions per Visit","text":"Problem"},{"location":"LeetCode_Problems/1337/","title":"1337. The K Weakest Rows in a Matrix","text":"Problem <p>You are given an <code>m x n</code> binary matrix <code>mat</code> of <code>1</code>'s (representing soldiers) and <code>0</code>'s (representing civilians). The soldiers are positioned in front of the civilians. That is, all the <code>1</code>'s will appear to the left of all the <code>0</code>'s in each row.</p> <p>A row <code>i</code> is weaker than a row <code>j</code> if one of the following is true:</p> <ul> <li>The number of soldiers in row <code>i</code> is less than the number of soldiers in row <code>j</code>.</li> <li>Both rows have the same number of soldiers and <code>i &lt; j</code>.</li> </ul> <p>Return the indices of the <code>k</code> weakest rows in the matrix ordered from weakest to strongest.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: mat = \n[[1,1,0,0,0],\n [1,1,1,1,0],\n [1,0,0,0,0],\n [1,1,0,0,0],\n [1,1,1,1,1]], \nk = 3\nOutput: [2,0,3]\nExplanation: \nThe number of soldiers in each row is: \n- Row 0: 2 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 2 \n- Row 4: 5 \nThe rows ordered from weakest to strongest are [2,0,3,1,4].\n</pre> <p>Example 2:</p> <pre>\nInput: mat = \n[[1,0,0,0],\n [1,1,1,1],\n [1,0,0,0],\n [1,0,0,0]], \nk = 2\nOutput: [0,2]\nExplanation: \nThe number of soldiers in each row is: \n- Row 0: 1 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 1 \nThe rows ordered from weakest to strongest are [0,2,3,1].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>2 &lt;= n, m &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= m</code></li> <li><code>matrix[i][j]</code> is either 0 or 1.</li> </ul>"},{"location":"LeetCode_Problems/1338/","title":"1338. Reduce Array Size to The Half","text":"Problem <p>You are given an integer array <code>arr</code>. You can choose a set of integers and remove all the occurrences of these integers in the array.</p> <p>Return the minimum size of the set so that at least half of the integers of the array are removed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [3,3,3,3,5,5,5,2,2,7]\nOutput: 2\nExplanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [7,7,7,7,7,7]\nOutput: 1\nExplanation: The only possible set you can choose is {7}. This will make the new array empty.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>arr.length</code> is even.</li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1339/","title":"1339. Maximum Product of Splitted Binary Tree","text":"Problem <p>Given the <code>root</code> of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.</p> <p>Return the maximum product of the sums of the two subtrees. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Note that you need to maximize the answer before taking the mod and not after taking it.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,6]\nOutput: 110\nExplanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,null,2,3,4,null,null,5,6]\nOutput: 90\nExplanation: Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 5 * 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1340/","title":"1340. Jump Game V","text":"Problem <p>Given an array of\u00a0integers <code>arr</code> and an integer <code>d</code>. In one step you can jump from index <code>i</code> to index:</p> <ul> <li><code>i + x</code> where:\u00a0<code>i + x &lt; arr.length</code> and <code> 0 &lt;\u00a0x &lt;= d</code>.</li> <li><code>i - x</code> where:\u00a0<code>i - x &gt;= 0</code> and <code> 0 &lt;\u00a0x &lt;= d</code>.</li> </ul> <p>In addition, you can only jump from index <code>i</code> to index <code>j</code>\u00a0if <code>arr[i] &gt; arr[j]</code> and <code>arr[i] &gt; arr[k]</code> for all indices <code>k</code> between <code>i</code> and <code>j</code> (More formally <code>min(i,\u00a0j) &lt; k &lt; max(i, j)</code>).</p> <p>You can choose any index of the array and start jumping. Return the maximum number of indices\u00a0you can visit.</p> <p>Notice that you can not jump outside of the array at any time.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\nOutput: 4\nExplanation: You can start at index 10. You can jump 10 --&gt; 8 --&gt; 6 --&gt; 7 as shown.\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 &gt; 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 &gt; 9.\nSimilarly You cannot jump from index 3 to index 2 or index 1.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [3,3,3,3,3], d = 3\nOutput: 1\nExplanation: You can start at any index. You always cannot jump to any index.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [7,6,5,4,3,2,1], d = 1\nOutput: 7\nExplanation: Start at index 0. You can visit all the indicies. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 1000</code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= d &lt;= arr.length</code></li> </ul>"},{"location":"LeetCode_Problems/1341/","title":"1341. Movie Rating","text":"Problem <p>Table: <code>Movies</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| movie_id      | int     |\n| title         | varchar |\n+---------------+---------+\nmovie_id is the primary key (column with unique values) for this table.\ntitle is the name of the movie.\n</pre> <p> </p> <p>Table: <code>Users</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| user_id       | int     |\n| name          | varchar |\n+---------------+---------+\nuser_id is the primary key (column with unique values) for this table.\n</pre> <p> </p> <p>Table: <code>MovieRating</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| movie_id      | int     |\n| user_id       | int     |\n| rating        | int     |\n| created_at    | date    |\n+---------------+---------+\n(movie_id, user_id) is the primary key (column with unique values)\u00a0for this table.\nThis table contains the rating of a movie by a user in their review.\ncreated_at is the user's review date. \n</pre> <p> </p> <p>Write a solution to:</p> <ul> <li>Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.</li> <li>Find the movie name with the highest average rating in <code>February 2020</code>. In case of a tie, return the lexicographically smaller movie name.</li> </ul> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nMovies table:\n+-------------+--------------+\n| movie_id    |  title       |\n+-------------+--------------+\n| 1           | Avengers     |\n| 2           | Frozen 2     |\n| 3           | Joker        |\n+-------------+--------------+\nUsers table:\n+-------------+--------------+\n| user_id     |  name        |\n+-------------+--------------+\n| 1           | Daniel       |\n| 2           | Monica       |\n| 3           | Maria        |\n| 4           | James        |\n+-------------+--------------+\nMovieRating table:\n+-------------+--------------+--------------+-------------+\n| movie_id    | user_id      | rating       | created_at  |\n+-------------+--------------+--------------+-------------+\n| 1           | 1            | 3            | 2020-01-12  |\n| 1           | 2            | 4            | 2020-02-11  |\n| 1           | 3            | 2            | 2020-02-12  |\n| 1           | 4            | 1            | 2020-01-01  |\n| 2           | 1            | 5            | 2020-02-17  | \n| 2           | 2            | 2            | 2020-02-01  | \n| 2           | 3            | 2            | 2020-03-01  |\n| 3           | 1            | 3            | 2020-02-22  | \n| 3           | 2            | 4            | 2020-02-25  | \n+-------------+--------------+--------------+-------------+\nOutput: \n+--------------+\n| results      |\n+--------------+\n| Daniel       |\n| Frozen 2     |\n+--------------+\nExplanation: \nDaniel and Monica have rated 3 movies (\"Avengers\", \"Frozen 2\" and \"Joker\") but Daniel is smaller lexicographically.\nFrozen 2 and Joker have a rating average of 3.5 in February but Frozen 2 is smaller lexicographically.\n</pre>"},{"location":"LeetCode_Problems/1342/","title":"1342. Number of Steps to Reduce a Number to Zero","text":"Problem <p>Given an integer <code>num</code>, return the number of steps to reduce it to zero.</p> <p>In one step, if the current number is even, you have to divide it by <code>2</code>, otherwise, you have to subtract <code>1</code> from it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 14\nOutput: 6\nExplanation:\u00a0\nStep 1) 14 is even; divide by 2 and obtain 7.\u00a0\nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3.\u00a0\nStep 4) 3 is odd; subtract 1 and obtain 2.\u00a0\nStep 5) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 6) 1 is odd; subtract 1 and obtain 0.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 8\nOutput: 4\nExplanation:\u00a0\nStep 1) 8 is even; divide by 2 and obtain 4.\u00a0\nStep 2) 4 is even; divide by 2 and obtain 2.\u00a0\nStep 3) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 4) 1 is odd; subtract 1 and obtain 0.\n</pre> <p>Example 3:</p> <pre>\nInput: num = 123\nOutput: 12\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1343/","title":"1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold","text":"Problem <p>Given an array of integers <code>arr</code> and two integers <code>k</code> and <code>threshold</code>, return the number of sub-arrays of size <code>k</code> and average greater than or equal to <code>threshold</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\nOutput: 3\nExplanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\nOutput: 6\nExplanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= k &lt;= arr.length</code></li> <li><code>0 &lt;= threshold &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1344/","title":"1344. Angle Between Hands of a Clock","text":"Problem <p>Given two numbers, <code>hour</code> and <code>minutes</code>, return the smaller angle (in degrees) formed between the <code>hour</code> and the <code>minute</code> hand.</p> <p>Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted as correct.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: hour = 12, minutes = 30\nOutput: 165\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: hour = 3, minutes = 30\nOutput: 75\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: hour = 3, minutes = 15\nOutput: 7.5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= hour &lt;= 12</code></li> <li><code>0 &lt;= minutes &lt;= 59</code></li> </ul>"},{"location":"LeetCode_Problems/1345/","title":"1345. Jump Game IV","text":"Problem <p>Given an array of\u00a0integers <code>arr</code>, you are initially positioned at the first index of the array.</p> <p>In one step you can jump from index <code>i</code> to index:</p> <ul> <li><code>i + 1</code> where:\u00a0<code>i + 1 &lt; arr.length</code>.</li> <li><code>i - 1</code> where:\u00a0<code>i - 1 &gt;= 0</code>.</li> <li><code>j</code> where: <code>arr[i] == arr[j]</code> and <code>i != j</code>.</li> </ul> <p>Return the minimum number of steps to reach the last index of the array.</p> <p>Notice that you can not jump outside of the array at any time.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [100,-23,-23,404,100,23,23,23,3,404]\nOutput: 3\nExplanation: You need three jumps from index 0 --&gt; 4 --&gt; 3 --&gt; 9. Note that index 9 is the last index of the array.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [7]\nOutput: 0\nExplanation: Start index is the last index. You do not need to jump.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [7,6,9,6,9,6,9,7]\nOutput: 1\nExplanation: You can jump directly from index 0 to index 7 which is last index of the array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-10<sup>8</sup> &lt;= arr[i] &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1346/","title":"1346. Check If N and Its Double Exist","text":"Problem <p>Given an array <code>arr</code> of integers, check if there exist two indices <code>i</code> and <code>j</code> such that :</p> <ul> <li><code>i != j</code></li> <li><code>0 &lt;= i, j &lt; arr.length</code></li> <li><code>arr[i] == 2 * arr[j]</code></li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [10,2,5,3]\nOutput: true\nExplanation: For i = 0 and j = 2, arr[i] == 10 == 2 * 5 == 2 * arr[j]\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [3,1,7,11]\nOutput: false\nExplanation: There is no i and j that satisfy the conditions.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= arr.length &lt;= 500</code></li> <li><code>-10<sup>3</sup> &lt;= arr[i] &lt;= 10<sup>3</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1347/","title":"1347. Minimum Number of Steps to Make Two Strings Anagram","text":"Problem <p>You are given two strings of the same length <code>s</code> and <code>t</code>. In one step you can choose any character of <code>t</code> and replace it with another character.</p> <p>Return the minimum number of steps to make <code>t</code> an anagram of <code>s</code>.</p> <p>An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"bab\", t = \"aba\"\nOutput: 1\nExplanation: Replace the first 'a' in t with b, t = \"bba\" which is anagram of s.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"leetcode\", t = \"practice\"\nOutput: 5\nExplanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"anagram\", t = \"mangaar\"\nOutput: 0\nExplanation: \"anagram\" and \"mangaar\" are anagrams. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s.length == t.length</code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/1348/","title":"1348. Tweet Counts Per Frequency","text":"Problem <p>A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).</p> <p>For example, the period <code>[10, 10000]</code> (in seconds) would be partitioned into the following time chunks with these frequencies:</p> <ul> <li>Every minute (60-second chunks): <code>[10,69]</code>, <code>[70,129]</code>, <code>[130,189]</code>, <code>...</code>, <code>[9970,10000]</code></li> <li>Every hour (3600-second chunks): <code>[10,3609]</code>, <code>[3610,7209]</code>, <code>[7210,10000]</code></li> <li>Every day (86400-second chunks): <code>[10,10000]</code></li> </ul> <p>Notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (<code>10000</code> in the above example).</p> <p>Design and implement an API to help the company with their analysis.</p> <p>Implement the <code>TweetCounts</code> class:</p> <ul> <li><code>TweetCounts()</code> Initializes the <code>TweetCounts</code> object.</li> <li><code>void recordTweet(String tweetName, int time)</code> Stores the <code>tweetName</code> at the recorded <code>time</code> (in seconds).</li> <li><code>List&lt;Integer&gt; getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)</code> Returns a list of integers representing the number of tweets with <code>tweetName</code> in each time chunk for the given period of time <code>[startTime, endTime]</code> (in seconds) and frequency <code>freq</code>.     <ul> <li><code>freq</code> is one of <code>\"minute\"</code>, <code>\"hour\"</code>, or <code>\"day\"</code> representing a frequency of every minute, hour, or day respectively.</li> </ul> </li> </ul> <p> </p> <p>Example:</p> <pre>\nInput\n[\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]\n[[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]\n\nOutput\n[null,null,null,null,[2],[2,1],null,[4]]\n\nExplanation\nTweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet(\"tweet3\", 0);                              // New tweet \"tweet3\" at time 0\ntweetCounts.recordTweet(\"tweet3\", 60);                             // New tweet \"tweet3\" at time 60\ntweetCounts.recordTweet(\"tweet3\", 10);                             // New tweet \"tweet3\" at time 10\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); // return [2]; chunk [0,59] had 2 tweets\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet\ntweetCounts.recordTweet(\"tweet3\", 120);                            // New tweet \"tweet3\" at time 120\ntweetCounts.getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210);  // return [4]; chunk [0,210] had 4 tweets\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= time, startTime, endTime &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= endTime - startTime &lt;= 10<sup>4</sup></code></li> <li>There will be at most <code>10<sup>4</sup></code> calls in total to <code>recordTweet</code> and <code>getTweetCountsPerFrequency</code>.</li> </ul>"},{"location":"LeetCode_Problems/1349/","title":"1349. Maximum Students Taking Exam","text":"Problem <p>Given a <code>m\u00a0* n</code>\u00a0matrix <code>seats</code>\u00a0\u00a0that represent seats distributions\u00a0in a classroom.\u00a0If a seat\u00a0is\u00a0broken, it is denoted by <code>'#'</code> character otherwise it is denoted by a <code>'.'</code> character.</p> <p>Students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting\u00a0directly in front or behind him. Return the maximum number of students that can take the exam together\u00a0without any cheating being possible.</p> <p>Students must be placed in seats in good condition.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n\u00a0               [\".\",\"#\",\"#\",\"#\",\"#\",\".\"],\n\u00a0               [\"#\",\".\",\"#\",\"#\",\".\",\"#\"]]\nOutput: 4\nExplanation: Teacher can place 4 students in available seats so they don't cheat on the exam. \n</pre> <p>Example 2:</p> <pre>\nInput: seats = [[\".\",\"#\"],\n\u00a0               [\"#\",\"#\"],\n\u00a0               [\"#\",\".\"],\n\u00a0               [\"#\",\"#\"],\n\u00a0               [\".\",\"#\"]]\nOutput: 3\nExplanation: Place all students in available seats. \n\n</pre> <p>Example 3:</p> <pre>\nInput: seats = [[\"#\",\".\",\".\",\".\",\"#\"],\n\u00a0               [\".\",\"#\",\".\",\"#\",\".\"],\n\u00a0               [\".\",\".\",\"#\",\".\",\".\"],\n\u00a0               [\".\",\"#\",\".\",\"#\",\".\"],\n\u00a0               [\"#\",\".\",\".\",\".\",\"#\"]]\nOutput: 10\nExplanation: Place students in available seats in column 1, 3 and 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>seats</code>\u00a0contains only characters\u00a0<code>'.'\u00a0and</code><code>'#'.</code></li> <li><code>m ==\u00a0seats.length</code></li> <li><code>n ==\u00a0seats[i].length</code></li> <li><code>1 &lt;= m &lt;= 8</code></li> <li><code>1 &lt;= n &lt;= 8</code></li> </ul>"},{"location":"LeetCode_Problems/1350/","title":"1350. Students With Invalid Departments","text":"Problem"},{"location":"LeetCode_Problems/1351/","title":"1351. Count Negative Numbers in a Sorted Matrix","text":"Problem <p>Given a <code>m x n</code> matrix <code>grid</code> which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in <code>grid</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\nOutput: 8\nExplanation: There are 8 negatives number in the matrix.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[3,2],[1,0]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>-100 &lt;= grid[i][j] &lt;= 100</code></li> </ul> <p> </p> <p>Follow up: Could you find an <code>O(n + m)</code> solution?</p>"},{"location":"LeetCode_Problems/1352/","title":"1352. Product of the Last K Numbers","text":"Problem <p>Design an algorithm that accepts a stream of integers and retrieves the product of the last <code>k</code> integers of the stream.</p> <p>Implement the <code>ProductOfNumbers</code> class:</p> <ul> <li><code>ProductOfNumbers()</code> Initializes the object with an empty stream.</li> <li><code>void add(int num)</code> Appends the integer <code>num</code> to the stream.</li> <li><code>int getProduct(int k)</code> Returns the product of the last <code>k</code> numbers in the current list. You can assume that always the current list has at least <code>k</code> numbers.</li> </ul> <p>The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.</p> <p> </p> <p>Example:</p> <pre>\nInput\n[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\n[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\n\nOutput\n[null,null,null,null,null,null,20,40,0,null,32]\n\nExplanation\nProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3);        // [3]\nproductOfNumbers.add(0);        // [3,0]\nproductOfNumbers.add(2);        // [3,0,2]\nproductOfNumbers.add(5);        // [3,0,2,5]\nproductOfNumbers.add(4);        // [3,0,2,5,4]\nproductOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\nproductOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\nproductOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\nproductOfNumbers.add(8);        // [3,0,2,5,4,8]\nproductOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= 4 * 10<sup>4</sup></code></li> <li>At most <code>4 * 10<sup>4</sup></code> calls will be made to <code>add</code> and <code>getProduct</code>.</li> <li>The product of the stream at any point in time will fit in a 32-bit integer.</li> </ul>"},{"location":"LeetCode_Problems/1353/","title":"1353. Maximum Number of Events That Can Be Attended","text":"Problem <p>You are given an array of <code>events</code> where <code>events[i] = [startDay<sub>i</sub>, endDay<sub>i</sub>]</code>. Every event <code>i</code> starts at <code>startDay<sub>i</sub></code><sub> </sub>and ends at <code>endDay<sub>i</sub></code>.</p> <p>You can attend an event <code>i</code> at any day <code>d</code> where <code>startTime<sub>i</sub> &lt;= d &lt;= endTime<sub>i</sub></code>. You can only attend one event at any time <code>d</code>.</p> <p>Return the maximum number of events you can attend.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: events = [[1,2],[2,3],[3,4]]\nOutput: 3\nExplanation: You can attend all the three events.\nOne way to attend them all is as shown.\nAttend the first event on day 1.\nAttend the second event on day 2.\nAttend the third event on day 3.\n</pre> <p>Example 2:</p> <pre>\nInput: events= [[1,2],[2,3],[3,4],[1,2]]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= events.length &lt;= 10<sup>5</sup></code></li> <li><code>events[i].length == 2</code></li> <li><code>1 &lt;= startDay<sub>i</sub> &lt;= endDay<sub>i</sub> &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1354/","title":"1354. Construct Target Array With Multiple Sums","text":"Problem <p>You are given an array <code>target</code> of n integers. From a starting array <code>arr</code> consisting of <code>n</code> 1's, you may perform the following procedure :</p> <ul> <li>let <code>x</code> be the sum of all elements currently in your array.</li> <li>choose index <code>i</code>, such that <code>0 &lt;= i &lt; n</code> and set the value of <code>arr</code> at index <code>i</code> to <code>x</code>.</li> <li>You may repeat this procedure as many times as needed.</li> </ul> <p>Return <code>true</code> if it is possible to construct the <code>target</code> array from <code>arr</code>, otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = [9,3,5]\nOutput: true\nExplanation: Start with arr = [1, 1, 1] \n[1, 1, 1], sum = 3 choose index 1\n[1, 3, 1], sum = 5 choose index 2\n[1, 3, 5], sum = 9 choose index 0\n[9, 3, 5] Done\n</pre> <p>Example 2:</p> <pre>\nInput: target = [1,1,1,2]\nOutput: false\nExplanation: Impossible to create target array from [1,1,1,1].\n</pre> <p>Example 3:</p> <pre>\nInput: target = [8,5]\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == target.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= target[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1355/","title":"1355. Activity Participants","text":"Problem"},{"location":"LeetCode_Problems/1356/","title":"1356. Sort Integers by The Number of 1 Bits","text":"Problem <p>You are given an integer array <code>arr</code>. Sort the integers in the array\u00a0in ascending order by the number of <code>1</code>'s\u00a0in their binary representation and in case of two or more integers have the same number of <code>1</code>'s you have to sort them in ascending order.</p> <p>Return the array after sorting it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [0,1,2,3,4,5,6,7,8]\nOutput: [0,1,2,4,8,3,5,6,7]\nExplantion: [0] is the only integer with 0 bits.\n[1,2,4,8] all have 1 bit.\n[3,5,6] have 2 bits.\n[7] has 3 bits.\nThe sorted array by bits is [0,1,2,4,8,3,5,6,7]\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1024,512,256,128,64,32,16,8,4,2,1]\nOutput: [1,2,4,8,16,32,64,128,256,512,1024]\nExplantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 500</code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1357/","title":"1357. Apply Discount Every n Orders","text":"Problem <p>There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays <code>products</code> and <code>prices</code>, where the <code>i<sup>th</sup></code> product has an ID of <code>products[i]</code> and a price of <code>prices[i]</code>.</p> <p>When a customer is paying, their bill is represented as two parallel integer arrays <code>product</code> and <code>amount</code>, where the <code>j<sup>th</sup></code> product they purchased has an ID of <code>product[j]</code>, and <code>amount[j]</code> is how much of the product they bought. Their subtotal is calculated as the sum of each <code>amount[j] * (price of the j<sup>th</sup> product)</code>.</p> <p>The supermarket decided to have a sale. Every <code>n<sup>th</sup></code> customer paying for their groceries will be given a percentage discount. The discount amount is given by <code>discount</code>, where they will be given <code>discount</code> percent off their subtotal. More formally, if their subtotal is <code>bill</code>, then they would actually pay <code>bill * ((100 - discount) / 100)</code>.</p> <p>Implement the <code>Cashier</code> class:</p> <ul> <li><code>Cashier(int n, int discount, int[] products, int[] prices)</code> Initializes the object with <code>n</code>, the <code>discount</code>, and the <code>products</code> and their <code>prices</code>.</li> <li><code>double getBill(int[] product, int[] amount)</code> Returns the final total of the bill with the discount applied (if any). Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\nOutput\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\nExplanation\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]);                        // return 500.0. 1<sup>st</sup> customer, no discount.\n                                                     // bill = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]);                      // return 4000.0. 2<sup>nd</sup> customer, no discount.\n                                                     // bill = 10 * 300 + 10 * 100 = 4000.\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0. 3<sup>rd</sup> customer, 50% discount.\n                                                     // Original bill = 1600\n                                                     // Actual bill = 1600 * ((100 - 50) / 100) = 800.\ncashier.getBill([4],[10]);                           // return 4000.0. 4<sup>th</sup> customer, no discount.\ncashier.getBill([7,3],[10,10]);                      // return 4000.0. 5<sup>th</sup> customer, no discount.\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0. 6<sup>th</sup> customer, 50% discount.\n                                                     // Original bill = 14700, but with\n                                                     // Actual bill = 14700 * ((100 - 50) / 100) = 7350.\ncashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0.  7<sup>th</sup> customer, no discount.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= discount &lt;= 100</code></li> <li><code>1 &lt;= products.length &lt;= 200</code></li> <li><code>prices.length == products.length</code></li> <li><code>1 &lt;= products[i] &lt;= 200</code></li> <li><code>1 &lt;= prices[i] &lt;= 1000</code></li> <li>The elements in <code>products</code> are unique.</li> <li><code>1 &lt;= product.length &lt;= products.length</code></li> <li><code>amount.length == product.length</code></li> <li><code>product[j]</code> exists in <code>products</code>.</li> <li><code>1 &lt;= amount[j] &lt;= 1000</code></li> <li>The elements of <code>product</code> are unique.</li> <li>At most <code>1000</code> calls will be made to <code>getBill</code>.</li> <li>Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</li> </ul>"},{"location":"LeetCode_Problems/1358/","title":"1358. Number of Substrings Containing All Three Characters","text":"Problem <p>Given a string <code>s</code>\u00a0consisting only of characters a, b and c.</p> <p>Return the number of substrings containing at least\u00a0one occurrence of all these characters a, b and c.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcabc\"\nOutput: 10\nExplanation: The substrings containing\u00a0at least\u00a0one occurrence of the characters\u00a0a,\u00a0b\u00a0and\u00a0c are \"abc\", \"abca\", \"abcab\", \"abcabc\", \"bca\", \"bcab\", \"bcabc\", \"cab\", \"cabc\" and \"abc\" (again). \n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aaacb\"\nOutput: 3\nExplanation: The substrings containing\u00a0at least\u00a0one occurrence of the characters\u00a0a,\u00a0b\u00a0and\u00a0c are \"aaacb\", \"aacb\" and \"acb\". \n</pre> <p>Example 3:</p> <pre>\nInput: s = \"abc\"\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= s.length &lt;= 5 x 10^4</code></li> <li><code>s</code>\u00a0only consists of\u00a0a, b or c\u00a0characters.</li> </ul>"},{"location":"LeetCode_Problems/1359/","title":"1359. Count All Valid Pickup and Delivery Options","text":"Problem <p>Given <code>n</code> orders, each order consists of a pickup and a delivery service.</p> <p>Count all valid pickup/delivery possible sequences such that delivery(i) is always after of\u00a0pickup(i).\u00a0</p> <p>Since the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: 1\nExplanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: 6\nExplanation: All possible orders: \n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 3\nOutput: 90\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 500</code></li> </ul>"},{"location":"LeetCode_Problems/1360/","title":"1360. Number of Days Between Two Dates","text":"Problem <p>Write a program to count the number of days between two dates.</p> <p>The two dates are given as strings, their format is <code>YYYY-MM-DD</code>\u00a0as shown in the examples.</p> <p> </p> <p>Example 1:</p> <pre>Input: date1 = \"2019-06-29\", date2 = \"2019-06-30\"\nOutput: 1\n</pre> <p>Example 2:</p> <pre>Input: date1 = \"2020-01-15\", date2 = \"2019-12-31\"\nOutput: 15\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The given dates are valid\u00a0dates between the years <code>1971</code> and <code>2100</code>.</li> </ul>"},{"location":"LeetCode_Problems/1361/","title":"1361. Validate Binary Tree Nodes","text":"Problem <p>You have <code>n</code> binary tree nodes numbered from <code>0</code> to <code>n - 1</code> where node <code>i</code> has two children <code>leftChild[i]</code> and <code>rightChild[i]</code>, return <code>true</code> if and only if all the given nodes form exactly one valid binary tree.</p> <p>If node <code>i</code> has no left child then <code>leftChild[i]</code> will equal <code>-1</code>, similarly for the right child.</p> <p>Note that the nodes have no values and that we only use the node numbers in this problem.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\nOutput: false\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 2, leftChild = [1,0], rightChild = [-1,-1]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == leftChild.length == rightChild.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>-1 &lt;= leftChild[i], rightChild[i] &lt;= n - 1</code></li> </ul>"},{"location":"LeetCode_Problems/1362/","title":"1362. Closest Divisors","text":"Problem <p>Given an integer <code>num</code>, find the closest two integers in absolute difference whose product equals\u00a0<code>num + 1</code>\u00a0or <code>num + 2</code>.</p> <p>Return the two integers in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 8\nOutput: [3,3]\nExplanation: For num + 1 = 9, the closest divisors are 3 &amp; 3, for num + 2 = 10, the closest divisors are 2 &amp; 5, hence 3 &amp; 3 is chosen.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 123\nOutput: [5,25]\n</pre> <p>Example 3:</p> <pre>\nInput: num = 999\nOutput: [40,25]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 10^9</code></li> </ul>"},{"location":"LeetCode_Problems/1363/","title":"1363. Largest Multiple of Three","text":"Problem <p>Given an array of digits <code>digits</code>, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer return an empty string.</p> <p>Since the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: digits = [8,1,9]\nOutput: \"981\"\n</pre> <p>Example 2:</p> <pre>\nInput: digits = [8,6,7,1,0]\nOutput: \"8760\"\n</pre> <p>Example 3:</p> <pre>\nInput: digits = [1]\nOutput: \"\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= digits.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= digits[i] &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/1364/","title":"1364. Number of Trusted Contacts of a Customer","text":"Problem"},{"location":"LeetCode_Problems/1365/","title":"1365. How Many Numbers Are Smaller Than the Current Number","text":"Problem <p>Given the array <code>nums</code>, for each <code>nums[i]</code> find out how many numbers in the array are smaller than it. That is, for each <code>nums[i]</code> you have to count the number of valid <code>j's</code>\u00a0such that\u00a0<code>j != i</code> and <code>nums[j] &lt; nums[i]</code>.</p> <p>Return the answer in an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation: \nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1). \nFor nums[3]=2 there exist one smaller number than it (1). \nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [6,5,4,8]\nOutput: [2,1,0,3]\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [7,7,7,7]\nOutput: [0,0,0,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 500</code></li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1366/","title":"1366. Rank Teams by Votes","text":"Problem <p>In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition.</p> <p>The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.</p> <p>You are given an array of strings <code>votes</code> which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.</p> <p>Return a string of all teams sorted by the ranking system.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]\nOutput: \"ACB\"\nExplanation: \nTeam A was ranked first place by 5 voters. No other team was voted as first place, so team A is the first team.\nTeam B was ranked second by 2 voters and ranked third by 3 voters.\nTeam C was ranked second by 3 voters and ranked third by 2 voters.\nAs most of the voters ranked C second, team C is the second team, and team B is the third.\n</pre> <p>Example 2:</p> <pre>\nInput: votes = [\"WXYZ\",\"XYZW\"]\nOutput: \"XWYZ\"\nExplanation:\nX is the winner due to the tie-breaking rule. X has the same votes as W for the first position, but X has one vote in the second position, while W does not have any votes in the second position. \n</pre> <p>Example 3:</p> <pre>\nInput: votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]\nOutput: \"ZMNAGUEDSJYLBOPHRQICWFXTVK\"\nExplanation: Only one voter, so their votes are used for the ranking.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= votes.length &lt;= 1000</code></li> <li><code>1 &lt;= votes[i].length &lt;= 26</code></li> <li><code>votes[i].length == votes[j].length</code> for <code>0 &lt;= i, j &lt; votes.length</code>.</li> <li><code>votes[i][j]</code> is an English uppercase letter.</li> <li>All characters of <code>votes[i]</code> are unique.</li> <li>All the characters that occur in <code>votes[0]</code> also occur in <code>votes[j]</code> where <code>1 &lt;= j &lt; votes.length</code>.</li> </ul>"},{"location":"LeetCode_Problems/1367/","title":"1367. Linked List in Binary Tree","text":"Problem <p>Given a binary tree <code>root</code> and a\u00a0linked list with\u00a0<code>head</code>\u00a0as the first node.\u00a0</p> <p>Return True if all the elements in the linked list starting from the <code>head</code> correspond to some downward path connected in the binary tree\u00a0otherwise return False.</p> <p>In this context downward path means a path that starts at some node and goes downwards.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true\nExplanation: Nodes in blue form a subpath in the binary Tree.  \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true\n</pre> <p>Example 3:</p> <pre>\nInput: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: false\nExplanation: There is no path in the binary tree that contains all the elements of the linked list from <code>head</code>.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree will be in the range <code>[1, 2500]</code>.</li> <li>The number of nodes in the list will be in the range <code>[1, 100]</code>.</li> <li><code>1 &lt;= Node.val\u00a0&lt;= 100</code>\u00a0for each node in the linked list and binary tree.</li> </ul>"},{"location":"LeetCode_Problems/1368/","title":"1368. Minimum Cost to Make at Least One Valid Path in a Grid","text":"Problem <p>Given an <code>m x n</code> grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of <code>grid[i][j]</code> can be:</p> <ul> <li><code>1</code> which means go to the cell to the right. (i.e go from <code>grid[i][j]</code> to <code>grid[i][j + 1]</code>)</li> <li><code>2</code> which means go to the cell to the left. (i.e go from <code>grid[i][j]</code> to <code>grid[i][j - 1]</code>)</li> <li><code>3</code> which means go to the lower cell. (i.e go from <code>grid[i][j]</code> to <code>grid[i + 1][j]</code>)</li> <li><code>4</code> which means go to the upper cell. (i.e go from <code>grid[i][j]</code> to <code>grid[i - 1][j]</code>)</li> </ul> <p>Notice that there could be some signs on the cells of the grid that point outside the grid.</p> <p>You will initially start at the upper left cell <code>(0, 0)</code>. A valid path in the grid is a path that starts from the upper left cell <code>(0, 0)</code> and ends at the bottom-right cell <code>(m - 1, n - 1)</code> following the signs on the grid. The valid path does not have to be the shortest.</p> <p>You can modify the sign on a cell with <code>cost = 1</code>. You can modify the sign on a cell one time only.</p> <p>Return the minimum cost to make the grid have at least one valid path.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]\nOutput: 3\nExplanation: You will start at point (0, 0).\nThe path to (3, 3) is as follows. (0, 0) --&gt; (0, 1) --&gt; (0, 2) --&gt; (0, 3) change the arrow to down with cost = 1 --&gt; (1, 3) --&gt; (1, 2) --&gt; (1, 1) --&gt; (1, 0) change the arrow to down with cost = 1 --&gt; (2, 0) --&gt; (2, 1) --&gt; (2, 2) --&gt; (2, 3) change the arrow to down with cost = 1 --&gt; (3, 3)\nThe total cost = 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,1,3],[3,2,2],[1,1,4]]\nOutput: 0\nExplanation: You can follow the path from (0, 0) to (2, 2).\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[1,2],[4,3]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>1 &lt;= grid[i][j] &lt;= 4</code></li> </ul>"},{"location":"LeetCode_Problems/1369/","title":"1369. Get the Second Most Recent Activity","text":"Problem"},{"location":"LeetCode_Problems/1370/","title":"1370. Increasing Decreasing String","text":"Problem <p>You are given a string <code>s</code>. Reorder the string using the following algorithm:</p> <ol> <li>Pick the smallest character from <code>s</code> and append it to the result.</li> <li>Pick the smallest character from <code>s</code> which is greater than the last appended character to the result and append it.</li> <li>Repeat step 2 until you cannot pick more characters.</li> <li>Pick the largest character from <code>s</code> and append it to the result.</li> <li>Pick the largest character from <code>s</code> which is smaller than the last appended character to the result and append it.</li> <li>Repeat step 5 until you cannot pick more characters.</li> <li>Repeat the steps from 1 to 6 until you pick all characters from <code>s</code>.</li> </ol> <p>In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.</p> <p>Return the result string after sorting <code>s</code> with this algorithm.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aaaabbbbcccc\"\nOutput: \"abccbaabccba\"\nExplanation: After steps 1, 2 and 3 of the first iteration, result = \"abc\"\nAfter steps 4, 5 and 6 of the first iteration, result = \"abccba\"\nFirst iteration is done. Now s = \"aabbcc\" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\"\nAfter steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"rat\"\nOutput: \"art\"\nExplanation: The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1371/","title":"1371. Find the Longest Substring Containing Vowels in Even Counts","text":"Problem <p>Given the string <code>s</code>, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"eleetminicoworoep\"\nOutput: 13\nExplanation: The longest substring is \"leetminicowor\" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"leetcodeisgreat\"\nOutput: 5\nExplanation: The longest substring is \"leetc\" which contains two e's.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"bcbcbc\"\nOutput: 6\nExplanation: In this case, the given string \"bcbcbc\" is the longest because all vowels: a, e, i, o and u appear zero times.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 5 x 10^5</code></li> <li><code>s</code>\u00a0contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1372/","title":"1372. Longest ZigZag Path in a Binary Tree","text":"Problem <p>You are given the <code>root</code> of a binary tree.</p> <p>A ZigZag path for a binary tree is defined as follow:</p> <ul> <li>Choose any node in the binary tree and a direction (right or left).</li> <li>If the current direction is right, move to the right child of the current node; otherwise, move to the left child.</li> <li>Change the direction from right to left or from left to right.</li> <li>Repeat the second and third steps until you can't move in the tree.</li> </ul> <p>Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).</p> <p>Return the longest ZigZag path contained in that tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1]\nOutput: 3\nExplanation: Longest ZigZag path in blue nodes (right -&gt; left -&gt; right).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,1,1,null,1,null,null,1,1,null,1]\nOutput: 4\nExplanation: Longest ZigZag path in blue nodes (left -&gt; right -&gt; left -&gt; right).\n</pre> <p>Example 3:</p> <pre>\nInput: root = [1]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 5 * 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1373/","title":"1373. Maximum Sum BST in Binary Tree","text":"Problem <p>Given a binary tree <code>root</code>, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).</p> <p>Assume a BST is defined as follows:</p> <ul> <li>The left subtree of a node contains only nodes with keys less than the node's key.</li> <li>The right subtree of a node contains only nodes with keys greater than the node's key.</li> <li>Both the left and right subtrees must also be binary search trees.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]\nOutput: 20\nExplanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [4,3,null,1,2]\nOutput: 2\nExplanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.\n</pre> <p>Example 3:</p> <pre>\nInput: root = [-4,-2,-5]\nOutput: 0\nExplanation: All values are negatives. Return an empty BST.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 4 * 10<sup>4</sup>]</code>.</li> <li><code>-4 * 10<sup>4</sup> &lt;= Node.val &lt;= 4 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1374/","title":"1374. Generate a String With Characters That Have Odd Counts","text":"Problem <p>Given an\u00a0integer <code>n</code>, return a string with <code>n</code>\u00a0characters such that each character in such string occurs an odd number of times.</p> <p>The returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them. \u00a0</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4\nOutput: \"pppz\"\nExplanation: \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\".\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: \"xy\"\nExplanation: \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\".\n</pre> <p>Example 3:</p> <pre>\nInput: n = 7\nOutput: \"holasss\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 500</code></li> </ul>"},{"location":"LeetCode_Problems/1375/","title":"1375. Number of Times Binary String Is Prefix-Aligned","text":"Problem <p>You have a 1-indexed binary string of length <code>n</code> where all the bits are <code>0</code> initially. We will flip all the bits of this binary string (i.e., change them from <code>0</code> to <code>1</code>) one by one. You are given a 1-indexed integer array <code>flips</code> where <code>flips[i]</code> indicates that the bit at index <code>i</code> will be flipped in the <code>i<sup>th</sup></code> step.</p> <p>A binary string is prefix-aligned if, after the <code>i<sup>th</sup></code> step, all the bits in the inclusive range <code>[1, i]</code> are ones and all the other bits are zeros.</p> <p>Return the number of times the binary string is prefix-aligned during the flipping process.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: flips = [3,2,4,1,5]\nOutput: 2\nExplanation: The binary string is initially \"00000\".\nAfter applying step 1: The string becomes \"00100\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"01100\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"01110\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"11110\", which is prefix-aligned.\nAfter applying step 5: The string becomes \"11111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 2 times, so we return 2.\n</pre> <p>Example 2:</p> <pre>\nInput: flips = [4,1,2,3]\nOutput: 1\nExplanation: The binary string is initially \"0000\".\nAfter applying step 1: The string becomes \"0001\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"1001\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"1101\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"1111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 1 time, so we return 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == flips.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>flips</code> is a permutation of the integers in the range <code>[1, n]</code>.</li> </ul>"},{"location":"LeetCode_Problems/1376/","title":"1376. Time Needed to Inform All Employees","text":"Problem <p>A company has <code>n</code> employees with a unique ID for each employee from <code>0</code> to <code>n - 1</code>. The head of the company is the one with <code>headID</code>.</p> <p>Each employee has one direct manager given in the <code>manager</code> array where <code>manager[i]</code> is the direct manager of the <code>i-th</code> employee, <code>manager[headID] = -1</code>. Also, it is guaranteed that the subordination relationships have a tree structure.</p> <p>The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.</p> <p>The <code>i-th</code> employee needs <code>informTime[i]</code> minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).</p> <p>Return the number of minutes needed to inform all the employees about the urgent news.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1, headID = 0, manager = [-1], informTime = [0]\nOutput: 0\nExplanation: The head of the company is the only employee in the company.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]\nOutput: 1\nExplanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\nThe tree structure of the employees in the company is shown.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= headID &lt; n</code></li> <li><code>manager.length == n</code></li> <li><code>0 &lt;= manager[i] &lt; n</code></li> <li><code>manager[headID] == -1</code></li> <li><code>informTime.length == n</code></li> <li><code>0 &lt;= informTime[i] &lt;= 1000</code></li> <li><code>informTime[i] == 0</code> if employee <code>i</code> has no subordinates.</li> <li>It is guaranteed that all the employees can be informed.</li> </ul>"},{"location":"LeetCode_Problems/1377/","title":"1377. Frog Position After T Seconds","text":"Problem <p>Given an undirected tree consisting of <code>n</code> vertices numbered from <code>1</code> to <code>n</code>. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.</p> <p>The edges of the undirected tree are given in the array <code>edges</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> means that exists an edge connecting the vertices <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p> <p>Return the probability that after <code>t</code> seconds the frog is on the vertex <code>target</code>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4\nOutput: 0.16666666666666666 \nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7\nOutput: 0.3333333333333333\nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li> <li><code>1 &lt;= t &lt;= 50</code></li> <li><code>1 &lt;= target &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/1378/","title":"1378. Replace Employee ID With The Unique Identifier","text":"Problem <p>Table: <code>Employees</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| name          | varchar |\n+---------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains the id and the name of an employee in a company.\n</pre> <p> </p> <p>Table: <code>EmployeeUNI</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| unique_id     | int     |\n+---------------+---------+\n(id, unique_id) is the primary key (combination of columns with unique values) for this table.\nEach row of this table contains the id and the corresponding unique id of an employee in the company.\n</pre> <p> </p> <p>Write a solution to show the unique ID of each user, If a user does not have a unique ID replace just show <code>null</code>.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployees table:\n+----+----------+\n| id | name     |\n+----+----------+\n| 1  | Alice    |\n| 7  | Bob      |\n| 11 | Meir     |\n| 90 | Winston  |\n| 3  | Jonathan |\n+----+----------+\nEmployeeUNI table:\n+----+-----------+\n| id | unique_id |\n+----+-----------+\n| 3  | 1         |\n| 11 | 2         |\n| 90 | 3         |\n+----+-----------+\nOutput: \n+-----------+----------+\n| unique_id | name     |\n+-----------+----------+\n| null      | Alice    |\n| null      | Bob      |\n| 2         | Meir     |\n| 3         | Winston  |\n| 1         | Jonathan |\n+-----------+----------+\nExplanation: \nAlice and Bob do not have a unique ID, We will show null instead.\nThe unique ID of Meir is 2.\nThe unique ID of Winston is 3.\nThe unique ID of Jonathan is 1.\n</pre>"},{"location":"LeetCode_Problems/1379/","title":"1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree","text":"Problem <p>Given two binary trees <code>original</code> and <code>cloned</code> and given a reference to a node <code>target</code> in the original tree.</p> <p>The <code>cloned</code> tree is a copy of the <code>original</code> tree.</p> <p>Return a reference to the same node in the <code>cloned</code> tree.</p> <p>Note that you are not allowed to change any of the two trees or the <code>target</code> node and the answer must be a reference to a node in the <code>cloned</code> tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: tree = [7,4,3,null,null,6,19], target = 3\nOutput: 3\nExplanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: tree = [7], target =  7\nOutput: 7\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the <code>tree</code> is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li>The values of the nodes of the <code>tree</code> are unique.</li> <li><code>target</code> node is a node from the <code>original</code> tree and is not <code>null</code>.</li> </ul> <p> </p> <p>Follow up: Could you solve the problem if repeated values on the tree are allowed?</p>"},{"location":"LeetCode_Problems/1380/","title":"1380. Lucky Numbers in a Matrix","text":"Problem <p>Given an <code>m x n</code> matrix of distinct numbers, return all lucky numbers in the matrix in any order.</p> <p>A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: matrix = [[3,7,8],[9,11,13],[15,16,17]]\nOutput: [15]\nExplanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.\n</pre> <p>Example 2:</p> <pre>\nInput: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]\nOutput: [12]\nExplanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.\n</pre> <p>Example 3:</p> <pre>\nInput: matrix = [[7,8],[1,2]]\nOutput: [7]\nExplanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= n, m &lt;= 50</code></li> <li><code>1 &lt;= matrix[i][j] &lt;= 10<sup>5</sup></code>.</li> <li>All elements in the matrix are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1381/","title":"1381. Design a Stack With Increment Operation","text":"Problem <p>Design a stack that supports increment operations on its elements.</p> <p>Implement the <code>CustomStack</code> class:</p> <ul> <li><code>CustomStack(int maxSize)</code> Initializes the object with <code>maxSize</code> which is the maximum number of elements in the stack.</li> <li><code>void push(int x)</code> Adds <code>x</code> to the top of the stack if the stack has not reached the <code>maxSize</code>.</li> <li><code>int pop()</code> Pops and returns the top of the stack or <code>-1</code> if the stack is empty.</li> <li><code>void inc(int k, int val)</code> Increments the bottom <code>k</code> elements of the stack by <code>val</code>. If there are less than <code>k</code> elements in the stack, increment all the elements in the stack.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\nOutput\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\nExplanation\nCustomStack stk = new CustomStack(3); // Stack is Empty []\nstk.push(1);                          // stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.pop();                            // return 2 --&gt; Return top of the stack 2, stack becomes [1]\nstk.push(2);                          // stack becomes [1, 2]\nstk.push(3);                          // stack becomes [1, 2, 3]\nstk.push(4);                          // stack still [1, 2, 3], Do not add another elements as size is 4\nstk.increment(5, 100);                // stack becomes [101, 102, 103]\nstk.increment(2, 100);                // stack becomes [201, 202, 103]\nstk.pop();                            // return 103 --&gt; Return top of the stack 103, stack becomes [201, 202]\nstk.pop();                            // return 202 --&gt; Return top of the stack 202, stack becomes [201]\nstk.pop();                            // return 201 --&gt; Return top of the stack 201, stack becomes []\nstk.pop();                            // return -1 --&gt; Stack is empty return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= maxSize, x, k &lt;= 1000</code></li> <li><code>0 &lt;= val &lt;= 100</code></li> <li>At most <code>1000</code> calls will be made to each method of <code>increment</code>, <code>push</code> and <code>pop</code> each separately.</li> </ul>"},{"location":"LeetCode_Problems/1382/","title":"1382. Balance a Binary Search Tree","text":"Problem <p>Given the <code>root</code> of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.</p> <p>A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than <code>1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,null,2,null,3,null,4,null,null]\nOutput: [2,1,3,null,null,null,4]\nExplanation: This is not the only correct answer, [3,1,4,null,2] is also correct.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [2,1,3]\nOutput: [2,1,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1383/","title":"1383. Maximum Performance of a Team","text":"Problem <p>You are given two integers <code>n</code> and <code>k</code> and two integer arrays <code>speed</code> and <code>efficiency</code> both of length <code>n</code>. There are <code>n</code> engineers numbered from <code>1</code> to <code>n</code>. <code>speed[i]</code> and <code>efficiency[i]</code> represent the speed and efficiency of the <code>i<sup>th</sup></code> engineer respectively.</p> <p>Choose at most <code>k</code> different engineers out of the <code>n</code> engineers to form a team with the maximum performance.</p> <p>The performance of a team is the sum of its engineers' speeds multiplied by the minimum efficiency among its engineers.</p> <p>Return the maximum performance of this team. Since the answer can be a huge number, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\nOutput: 60\nExplanation: \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\nOutput: 68\nExplanation:\nThis is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\nOutput: 72\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>speed.length == n</code></li> <li><code>efficiency.length == n</code></li> <li><code>1 &lt;= speed[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= efficiency[i] &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1384/","title":"1384. Total Sales Amount by Year","text":"Problem"},{"location":"LeetCode_Problems/1385/","title":"1385. Find the Distance Value Between Two Arrays","text":"Problem <p>Given two integer arrays <code>arr1</code> and <code>arr2</code>, and the integer <code>d</code>, return the distance value between the two arrays.</p> <p>The distance value is defined as the number of elements <code>arr1[i]</code> such that there is not any element <code>arr2[j]</code> where <code>|arr1[i]-arr2[j]| &lt;= d</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\nOutput: 2\nExplanation: \nFor arr1[0]=4 we have: \n|4-10|=6 &gt; d=2 \n|4-9|=5 &gt; d=2 \n|4-1|=3 &gt; d=2 \n|4-8|=4 &gt; d=2 \nFor arr1[1]=5 we have: \n|5-10|=5 &gt; d=2 \n|5-9|=4 &gt; d=2 \n|5-1|=4 &gt; d=2 \n|5-8|=3 &gt; d=2\nFor arr1[2]=8 we have:\n|8-10|=2 &lt;= d=2\n|8-9|=1 &lt;= d=2\n|8-1|=7 &gt; d=2\n|8-8|=0 &lt;= d=2\n</pre> <p>Example 2:</p> <pre>\nInput: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr1.length, arr2.length &lt;= 500</code></li> <li><code>-1000 &lt;= arr1[i], arr2[j] &lt;= 1000</code></li> <li><code>0 &lt;= d &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1386/","title":"1386. Cinema Seat Allocation","text":"Problem <p>A cinema\u00a0has <code>n</code>\u00a0rows of seats, numbered from 1 to <code>n</code>\u00a0and there are ten\u00a0seats in each row, labelled from 1\u00a0to 10\u00a0as shown in the figure above.</p> <p>Given the array <code>reservedSeats</code> containing the numbers of seats already reserved, for example, <code>reservedSeats[i] = [3,8]</code>\u00a0means the seat located in row 3 and labelled with 8\u00a0is already reserved.</p> <p>Return the maximum number of four-person groups\u00a0you can assign on the cinema\u00a0seats. A four-person group\u00a0occupies four\u00a0adjacent seats in one single row. Seats across an aisle (such as [3,3]\u00a0and [3,4]) are not considered to be adjacent, but there is an exceptional case\u00a0on which an aisle split\u00a0a four-person group, in that case, the aisle split\u00a0a four-person group in the middle,\u00a0which means to have two people on each side.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\nOutput: 4\nExplanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10^9</code></li> <li><code>1 &lt;=\u00a0reservedSeats.length &lt;= min(10*n, 10^4)</code></li> <li><code>reservedSeats[i].length == 2</code></li> <li><code>1\u00a0&lt;=\u00a0reservedSeats[i][0] &lt;= n</code></li> <li><code>1 &lt;=\u00a0reservedSeats[i][1] &lt;= 10</code></li> <li>All <code>reservedSeats[i]</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1387/","title":"1387. Sort Integers by The Power Value","text":"Problem <p>The power of an integer <code>x</code> is defined as the number of steps needed to transform <code>x</code> into <code>1</code> using the following steps:</p> <ul> <li>if <code>x</code> is even then <code>x = x / 2</code></li> <li>if <code>x</code> is odd then <code>x = 3 * x + 1</code></li> </ul> <p>For example, the power of <code>x = 3</code> is <code>7</code> because <code>3</code> needs <code>7</code> steps to become <code>1</code> (<code>3 --&gt; 10 --&gt; 5 --&gt; 16 --&gt; 8 --&gt; 4 --&gt; 2 --&gt; 1</code>).</p> <p>Given three integers <code>lo</code>, <code>hi</code> and <code>k</code>. The task is to sort all integers in the interval <code>[lo, hi]</code> by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.</p> <p>Return the <code>k<sup>th</sup></code> integer in the range <code>[lo, hi]</code> sorted by the power value.</p> <p>Notice that for any integer <code>x</code> <code>(lo &lt;= x &lt;= hi)</code> it is guaranteed that <code>x</code> will transform into <code>1</code> using these steps and that the power of <code>x</code> is will fit in a 32-bit signed integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: lo = 12, hi = 15, k = 2\nOutput: 13\nExplanation: The power of 12 is 9 (12 --&gt; 6 --&gt; 3 --&gt; 10 --&gt; 5 --&gt; 16 --&gt; 8 --&gt; 4 --&gt; 2 --&gt; 1)\nThe power of 13 is 9\nThe power of 14 is 17\nThe power of 15 is 17\nThe interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.\nNotice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.\n</pre> <p>Example 2:</p> <pre>\nInput: lo = 7, hi = 11, k = 4\nOutput: 7\nExplanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].\nThe interval sorted by power is [8, 10, 11, 7, 9].\nThe fourth number in the sorted array is 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= lo &lt;= hi &lt;= 1000</code></li> <li><code>1 &lt;= k &lt;= hi - lo + 1</code></li> </ul>"},{"location":"LeetCode_Problems/1388/","title":"1388. Pizza With 3n Slices","text":"Problem <p>There is a pizza with <code>3n</code> slices of varying size, you and your friends will take slices of pizza as follows:</p> <ul> <li>You will pick any pizza slice.</li> <li>Your friend Alice will pick the next slice in the anti-clockwise direction of your pick.</li> <li>Your friend Bob will pick the next slice in the clockwise direction of your pick.</li> <li>Repeat until there are no more slices of pizzas.</li> </ul> <p>Given an integer array <code>slices</code> that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: slices = [1,2,3,4,5,6]\nOutput: 10\nExplanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: slices = [8,9,8,6,1,1]\nOutput: 16\nExplanation: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 * n == slices.length</code></li> <li><code>1 &lt;= slices.length &lt;= 500</code></li> <li><code>1 &lt;= slices[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1389/","title":"1389. Create Target Array in the Given Order","text":"Problem <p>Given two arrays of integers\u00a0<code>nums</code> and <code>index</code>. Your task is to create target array under the following rules:</p> <ul> <li>Initially target array is empty.</li> <li>From left to right read nums[i] and index[i], insert at index <code>index[i]</code>\u00a0the value <code>nums[i]</code>\u00a0in\u00a0target array.</li> <li>Repeat the previous step until there are no elements to read in <code>nums</code> and <code>index.</code></li> </ul> <p>Return the target array.</p> <p>It is guaranteed that the insertion operations will be valid.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,2,3,4], index = [0,1,2,2,1]\nOutput: [0,4,1,3,2]\nExplanation:\nnums       index     target\n0            0        [0]\n1            1        [0,1]\n2            2        [0,1,2]\n3            2        [0,1,3,2]\n4            1        [0,4,1,3,2]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4,0], index = [0,1,2,3,0]\nOutput: [0,1,2,3,4]\nExplanation:\nnums       index     target\n1            0        [1]\n2            1        [1,2]\n3            2        [1,2,3]\n4            3        [1,2,3,4]\n0            0        [0,1,2,3,4]\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1], index = [0]\nOutput: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length, index.length &lt;= 100</code></li> <li><code>nums.length == index.length</code></li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li> <li><code>0 &lt;= index[i] &lt;= i</code></li> </ul>"},{"location":"LeetCode_Problems/1390/","title":"1390. Four Divisors","text":"Problem <p>Given an integer array <code>nums</code>, return the sum of divisors of the integers in that array that have exactly four divisors. If there is no such integer in the array, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [21,4,7]\nOutput: 32\nExplanation: \n21 has 4 divisors: 1, 3, 7, 21\n4 has 3 divisors: 1, 2, 4\n7 has 2 divisors: 1, 7\nThe answer is the sum of divisors of 21 only.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [21,21]\nOutput: 64\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,4,5]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1391/","title":"1391. Check if There is a Valid Path in a Grid","text":"Problem <p>You are given an <code>m x n</code> <code>grid</code>. Each cell of <code>grid</code> represents a street. The street of <code>grid[i][j]</code> can be:</p> <ul> <li><code>1</code> which means a street connecting the left cell and the right cell.</li> <li><code>2</code> which means a street connecting the upper cell and the lower cell.</li> <li><code>3</code> which means a street connecting the left cell and the lower cell.</li> <li><code>4</code> which means a street connecting the right cell and the lower cell.</li> <li><code>5</code> which means a street connecting the left cell and the upper cell.</li> <li><code>6</code> which means a street connecting the right cell and the upper cell.</li> </ul> <p></p> <p>You will initially start at the street of the upper-left cell <code>(0, 0)</code>. A valid path in the grid is a path that starts from the upper left cell <code>(0, 0)</code> and ends at the bottom-right cell <code>(m - 1, n - 1)</code>. The path should only follow the streets.</p> <p>Notice that you are not allowed to change any street.</p> <p>Return <code>true</code> if there is a valid path in the grid or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[2,4,3],[6,5,2]]\nOutput: true\nExplanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,2,1],[1,2,1]]\nOutput: false\nExplanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [[1,1,2]]\nOutput: false\nExplanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>1 &lt;= grid[i][j] &lt;= 6</code></li> </ul>"},{"location":"LeetCode_Problems/1392/","title":"1392. Longest Happy Prefix","text":"Problem <p>A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).</p> <p>Given a string <code>s</code>, return the longest happy prefix of <code>s</code>. Return an empty string <code>\"\"</code> if no such prefix exists.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"level\"\nOutput: \"l\"\nExplanation: s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"ababab\"\nOutput: \"abab\"\nExplanation: \"abab\" is the largest prefix which is also suffix. They can overlap in the original string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1393/","title":"1393. Capital Gain/Loss","text":"Problem <p>Table: <code>Stocks</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| stock_name    | varchar |\n| operation     | enum    |\n| operation_day | int     |\n| price         | int     |\n+---------------+---------+\n(stock_name, operation_day) is the primary key (combination of columns with unique values) for this table.\nThe operation column is an ENUM (category) of type ('Sell', 'Buy')\nEach row of this table indicates that the stock which has stock_name had an operation on the day operation_day with the price.\nIt is guaranteed that each 'Sell' operation for a stock has a corresponding 'Buy' operation in a previous day. It is also guaranteed that each 'Buy' operation for a stock has a corresponding 'Sell' operation in an upcoming day.\n</pre> <p> </p> <p>Write a solution to report the Capital gain/loss for each stock.</p> <p>The Capital gain/loss of a stock is the total gain or loss after buying and selling the stock one or many times.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nStocks table:\n+---------------+-----------+---------------+--------+\n| stock_name    | operation | operation_day | price  |\n+---------------+-----------+---------------+--------+\n| Leetcode      | Buy       | 1             | 1000   |\n| Corona Masks  | Buy       | 2             | 10     |\n| Leetcode      | Sell      | 5             | 9000   |\n| Handbags      | Buy       | 17            | 30000  |\n| Corona Masks  | Sell      | 3             | 1010   |\n| Corona Masks  | Buy       | 4             | 1000   |\n| Corona Masks  | Sell      | 5             | 500    |\n| Corona Masks  | Buy       | 6             | 1000   |\n| Handbags      | Sell      | 29            | 7000   |\n| Corona Masks  | Sell      | 10            | 10000  |\n+---------------+-----------+---------------+--------+\nOutput: \n+---------------+-------------------+\n| stock_name    | capital_gain_loss |\n+---------------+-------------------+\n| Corona Masks  | 9500              |\n| Leetcode      | 8000              |\n| Handbags      | -23000            |\n+---------------+-------------------+\nExplanation: \nLeetcode stock was bought at day 1 for 1000$ and was sold at day 5 for 9000$. Capital gain = 9000 - 1000 = 8000$.\nHandbags stock was bought at day 17 for 30000$ and was sold at day 29 for 7000$. Capital loss = 7000 - 30000 = -23000$.\nCorona Masks stock was bought at day 1 for 10$ and was sold at day 3 for 1010$. It was bought again at day 4 for 1000$ and was sold at day 5 for 500$. At last, it was bought at day 6 for 1000$ and was sold at day 10 for 10000$. Capital gain/loss is the sum of capital gains/losses for each ('Buy' --&gt; 'Sell') operation = (1010 - 10) + (500 - 1000) + (10000 - 1000) = 1000 - 500 + 9000 = 9500$.\n</pre>"},{"location":"LeetCode_Problems/1394/","title":"1394. Find Lucky Integer in an Array","text":"Problem <p>Given an array of integers <code>arr</code>, a lucky integer is an integer that has a frequency in the array equal to its value.</p> <p>Return the largest lucky integer in the array. If there is no lucky integer return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [2,2,3,4]\nOutput: 2\nExplanation: The only lucky number in the array is 2 because frequency[2] == 2.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2,2,3,3,3]\nOutput: 3\nExplanation: 1, 2 and 3 are all lucky numbers, return the largest of them.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [2,2,2,3,3]\nOutput: -1\nExplanation: There are no lucky numbers in the array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 500</code></li> <li><code>1 &lt;= arr[i] &lt;= 500</code></li> </ul>"},{"location":"LeetCode_Problems/1395/","title":"1395. Count Number of Teams","text":"Problem <p>There are <code>n</code> soldiers standing in a line. Each soldier is assigned a unique <code>rating</code> value.</p> <p>You have to form a team of 3 soldiers amongst them under the following rules:</p> <ul> <li>Choose 3 soldiers with index (<code>i</code>, <code>j</code>, <code>k</code>) with rating (<code>rating[i]</code>, <code>rating[j]</code>, <code>rating[k]</code>).</li> <li>A team is valid if: (<code>rating[i] &lt; rating[j] &lt; rating[k]</code>) or (<code>rating[i] &gt; rating[j] &gt; rating[k]</code>) where (<code>0 &lt;= i &lt; j &lt; k &lt; n</code>).</li> </ul> <p>Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rating = [2,5,3,4,1]\nOutput: 3\nExplanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). \n</pre> <p>Example 2:</p> <pre>\nInput: rating = [2,1,3]\nOutput: 0\nExplanation: We can't form any team given the conditions.\n</pre> <p>Example 3:</p> <pre>\nInput: rating = [1,2,3,4]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == rating.length</code></li> <li><code>3 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= rating[i] &lt;= 10<sup>5</sup></code></li> <li>All the integers in <code>rating</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/1396/","title":"1396. Design Underground System","text":"Problem <p>An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.</p> <p>Implement the <code>UndergroundSystem</code> class:</p> <ul> <li><code>void checkIn(int id, string stationName, int t)</code> <ul> <li>A customer with a card ID equal to <code>id</code>, checks in at the station <code>stationName</code> at time <code>t</code>.</li> <li>A customer can only be checked into one place at a time.</li> </ul> </li> <li><code>void checkOut(int id, string stationName, int t)</code> <ul> <li>A customer with a card ID equal to <code>id</code>, checks out from the station <code>stationName</code> at time <code>t</code>.</li> </ul> </li> <li><code>double getAverageTime(string startStation, string endStation)</code> <ul> <li>Returns the average time it takes to travel from <code>startStation</code> to <code>endStation</code>.</li> <li>The average time is computed from all the previous traveling times from <code>startStation</code> to <code>endStation</code> that happened directly, meaning a check in at <code>startStation</code> followed by a check out from <code>endStation</code>.</li> <li>The time it takes to travel from <code>startStation</code> to <code>endStation</code> may be different from the time it takes to travel from <code>endStation</code> to <code>startStation</code>.</li> <li>There will be at least one customer that has traveled from <code>startStation</code> to <code>endStation</code> before <code>getAverageTime</code> is called.</li> </ul> </li> </ul> <p>You may assume all calls to the <code>checkIn</code> and <code>checkOut</code> methods are consistent. If a customer checks in at time <code>t<sub>1</sub></code> then checks out at time <code>t<sub>2</sub></code>, then <code>t<sub>1</sub> &lt; t<sub>2</sub></code>. All events happen in chronological order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\n[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]\n\nOutput\n[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]\n\nExplanation\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, \"Leyton\", 3);\nundergroundSystem.checkIn(32, \"Paradise\", 8);\nundergroundSystem.checkIn(27, \"Leyton\", 10);\nundergroundSystem.checkOut(45, \"Waterloo\", 15);  // Customer 45 \"Leyton\" -&gt; \"Waterloo\" in 15-3 = 12\nundergroundSystem.checkOut(27, \"Waterloo\", 20);  // Customer 27 \"Leyton\" -&gt; \"Waterloo\" in 20-10 = 10\nundergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -&gt; \"Cambridge\" in 22-8 = 14\nundergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -&gt; \"Cambridge\", (14) / 1 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000. Two trips \"Leyton\" -&gt; \"Waterloo\", (10 + 12) / 2 = 11\nundergroundSystem.checkIn(10, \"Leyton\", 24);\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000\nundergroundSystem.checkOut(10, \"Waterloo\", 38);  // Customer 10 \"Leyton\" -&gt; \"Waterloo\" in 38-24 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 12.00000. Three trips \"Leyton\" -&gt; \"Waterloo\", (10 + 12 + 14) / 3 = 12\n</pre> <p>Example 2:</p> <pre>\nInput\n[\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]\n[[],[10,\"Leyton\",3],[10,\"Paradise\",8],[\"Leyton\",\"Paradise\"],[5,\"Leyton\",10],[5,\"Paradise\",16],[\"Leyton\",\"Paradise\"],[2,\"Leyton\",21],[2,\"Paradise\",30],[\"Leyton\",\"Paradise\"]]\n\nOutput\n[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]\n\nExplanation\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(10, \"Leyton\", 3);\nundergroundSystem.checkOut(10, \"Paradise\", 8); // Customer 10 \"Leyton\" -&gt; \"Paradise\" in 8-3 = 5\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.00000, (5) / 1 = 5\nundergroundSystem.checkIn(5, \"Leyton\", 10);\nundergroundSystem.checkOut(5, \"Paradise\", 16); // Customer 5 \"Leyton\" -&gt; \"Paradise\" in 16-10 = 6\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.50000, (5 + 6) / 2 = 5.5\nundergroundSystem.checkIn(2, \"Leyton\", 21);\nundergroundSystem.checkOut(2, \"Paradise\", 30); // Customer 2 \"Leyton\" -&gt; \"Paradise\" in 30-21 = 9\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= id, t &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= stationName.length, startStation.length, endStation.length &lt;= 10</code></li> <li>All strings consist of uppercase and lowercase English letters and digits.</li> <li>There will be at most <code>2 * 10<sup>4</sup></code> calls in total to <code>checkIn</code>, <code>checkOut</code>, and <code>getAverageTime</code>.</li> <li>Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</li> </ul>"},{"location":"LeetCode_Problems/1397/","title":"1397. Find All Good Strings","text":"Problem <p>Given the strings <code>s1</code> and <code>s2</code> of size <code>n</code> and the string <code>evil</code>, return the number of good strings.</p> <p>A good string has size <code>n</code>, it is alphabetically greater than or equal to <code>s1</code>, it is alphabetically smaller than or equal to <code>s2</code>, and it does not contain the string <code>evil</code> as a substring. Since the answer can be a huge number, return this modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"\nOutput: 51 \nExplanation: There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\".\u00a0\n</pre> <p>Example 2:</p> <pre>\nInput: n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"\nOutput: 0 \nExplanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>s1.length == n</code></li> <li><code>s2.length == n</code></li> <li><code>s1 &lt;= s2</code></li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>1 &lt;= evil.length &lt;= 50</code></li> <li>All strings consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1398/","title":"1398. Customers Who Bought Products A and B but Not C","text":"Problem"},{"location":"LeetCode_Problems/1399/","title":"1399. Count Largest Group","text":"Problem <p>You are given an integer <code>n</code>.</p> <p>Each number from <code>1</code> to <code>n</code> is grouped according to the sum of its digits.</p> <p>Return the number of groups that have the largest size.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 13\nOutput: 4\nExplanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].\nThere are 4 groups with largest size.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: 2\nExplanation: There are 2 groups [1], [2] of size 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1400/","title":"1400. Construct K Palindrome Strings","text":"Problem <p>Given a string <code>s</code> and an integer <code>k</code>, return <code>true</code> if you can use all the characters in <code>s</code> to construct <code>k</code> palindrome strings or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"annabelle\", k = 2\nOutput: true\nExplanation: You can construct two palindromes using all characters in s.\nSome possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"leetcode\", k = 3\nOutput: false\nExplanation: It is impossible to construct 3 palindromes using all the characters of s.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"true\", k = 4\nOutput: true\nExplanation: The only possible solution is to put each character in a separate string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1401/","title":"1401. Circle and Rectangle Overlapping","text":"Problem <p>You are given a circle represented as <code>(radius, xCenter, yCenter)</code> and an axis-aligned rectangle represented as <code>(x1, y1, x2, y2)</code>, where <code>(x1, y1)</code> are the coordinates of the bottom-left corner, and <code>(x2, y2)</code> are the coordinates of the top-right corner of the rectangle.</p> <p>Return <code>true</code> if the circle and rectangle are overlapped otherwise return <code>false</code>. In other words, check if there is any point <code>(x<sub>i</sub>, y<sub>i</sub>)</code> that belongs to the circle and the rectangle at the same time.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1\nOutput: true\nExplanation: Circle and rectangle share the point (1,0).\n</pre> <p>Example 2:</p> <pre>\nInput: radius = 1, xCenter = 1, yCenter = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1\nOutput: false\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= radius &lt;= 2000</code></li> <li><code>-10<sup>4</sup> &lt;= xCenter, yCenter &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= x1 &lt; x2 &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= y1 &lt; y2 &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1402/","title":"1402. Reducing Dishes","text":"Problem <p>A chef has collected data on the <code>satisfaction</code> level of his <code>n</code> dishes. Chef can cook any dish in 1 unit of time.</p> <p>Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. <code>time[i] * satisfaction[i]</code>.</p> <p>Return the maximum sum of like-time coefficient that the chef can obtain after preparing some amount of dishes.</p> <p>Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: satisfaction = [-1,-8,0,5,-9]\nOutput: 14\nExplanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14).\nEach dish is prepared in one unit of time.</pre> <p>Example 2:</p> <pre>\nInput: satisfaction = [4,3,2]\nOutput: 20\nExplanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)\n</pre> <p>Example 3:</p> <pre>\nInput: satisfaction = [-1,-4,-5]\nOutput: 0\nExplanation: People do not like the dishes. No dish is prepared.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == satisfaction.length</code></li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>-1000 &lt;= satisfaction[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1403/","title":"1403. Minimum Subsequence in Non-Increasing Order","text":"Problem <p>Given the array <code>nums</code>, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non\u00a0included elements in such subsequence.\u00a0</p> <p>If there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.\u00a0</p> <p>Note that the solution with the given constraints is guaranteed to be\u00a0unique. Also return the answer sorted in non-increasing order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,3,10,9,8]\nOutput: [10,9] \nExplanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence [10,9] has the maximum total sum of its elements.\u00a0\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,4,7,6,7]\nOutput: [7,7,6] \nExplanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to be returned in non-decreasing order.  \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 500</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1404/","title":"1404. Number of Steps to Reduce a Number in Binary Representation to One","text":"Problem <p>Given the binary representation of an integer as a string <code>s</code>, return the number of steps to reduce it to <code>1</code> under the following rules:</p> <ul> <li> <p>If the current number is even, you have to divide it by <code>2</code>.</p> </li> <li> <p>If the current number is odd, you have to add <code>1</code> to it.</p> </li> </ul> <p>It is guaranteed that you can always reach one for all test cases.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"1101\"\nOutput: 6\nExplanation: \"1101\" corressponds to number 13 in their decimal representation.\nStep 1) 13 is odd, add 1 and obtain 14.\u00a0\nStep 2) 14 is even, divide by 2 and obtain 7.\nStep 3) 7 is odd, add 1 and obtain 8.\nStep 4) 8 is even, divide by 2 and obtain 4.\u00a0 \nStep 5) 4 is even, divide by 2 and obtain 2.\u00a0\nStep 6) 2 is even, divide by 2 and obtain 1.\u00a0 \n</pre> <p>Example 2:</p> <pre>\nInput: s = \"10\"\nOutput: 1\nExplanation: \"10\" corressponds to number 2 in their decimal representation.\nStep 1) 2 is even, divide by 2 and obtain 1.\u00a0 \n</pre> <p>Example 3:</p> <pre>\nInput: s = \"1\"\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length\u00a0&lt;= 500</code></li> <li><code>s</code> consists of characters '0' or '1'</li> <li><code>s[0] == '1'</code></li> </ul>"},{"location":"LeetCode_Problems/1405/","title":"1405. Longest Happy String","text":"Problem <p>A string <code>s</code> is called happy if it satisfies the following conditions:</p> <ul> <li><code>s</code> only contains the letters <code>'a'</code>, <code>'b'</code>, and <code>'c'</code>.</li> <li><code>s</code> does not contain any of <code>\"aaa\"</code>, <code>\"bbb\"</code>, or <code>\"ccc\"</code> as a substring.</li> <li><code>s</code> contains at most <code>a</code> occurrences of the letter <code>'a'</code>.</li> <li><code>s</code> contains at most <code>b</code> occurrences of the letter <code>'b'</code>.</li> <li><code>s</code> contains at most <code>c</code> occurrences of the letter <code>'c'</code>.</li> </ul> <p>Given three integers <code>a</code>, <code>b</code>, and <code>c</code>, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string <code>\"\"</code>.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: a = 1, b = 1, c = 7\nOutput: \"ccaccbcc\"\nExplanation: \"ccbccacc\" would also be a correct answer.\n</pre> <p>Example 2:</p> <pre>\nInput: a = 7, b = 1, c = 0\nOutput: \"aabaa\"\nExplanation: It is the only correct answer in this case.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= a, b, c &lt;= 100</code></li> <li><code>a + b + c &gt; 0</code></li> </ul>"},{"location":"LeetCode_Problems/1406/","title":"1406. Stone Game III","text":"Problem <p>Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array <code>stoneValue</code>.</p> <p>Alice and Bob take turns, with Alice starting first. On each player's turn, that player can take <code>1</code>, <code>2</code>, or <code>3</code> stones from the first remaining stones in the row.</p> <p>The score of each player is the sum of the values of the stones taken. The score of each player is <code>0</code> initially.</p> <p>The objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.</p> <p>Assume Alice and Bob play optimally.</p> <p>Return <code>\"Alice\"</code> if Alice will win, <code>\"Bob\"</code> if Bob will win, or <code>\"Tie\"</code> if they will end the game with the same score.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stoneValue = [1,2,3,7]\nOutput: \"Bob\"\nExplanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.\n</pre> <p>Example 2:</p> <pre>\nInput: stoneValue = [1,2,3,-9]\nOutput: \"Alice\"\nExplanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.\nIf Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. In the next move, Alice will take the pile with value = -9 and lose.\nIf Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. In the next move, Alice will take the pile with value = -9 and also lose.\nRemember that both play optimally so here Alice will choose the scenario that makes her win.\n</pre> <p>Example 3:</p> <pre>\nInput: stoneValue = [1,2,3,6]\nOutput: \"Tie\"\nExplanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= stoneValue.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-1000 &lt;= stoneValue[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1407/","title":"1407. Top Travellers","text":"Problem <p>Table: <code>Users</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| name          | varchar |\n+---------------+---------+\nid is the column with unique values for this table.\nname is the name of the user.\n</pre> <p> </p> <p>Table: <code>Rides</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| user_id       | int     |\n| distance      | int     |\n+---------------+---------+\nid is the column with unique values for this table.\nuser_id is the id of the user who traveled the distance \"distance\".\n</pre> <p> </p> <p>Write a solution\u00a0to report the distance traveled by each user.</p> <p>Return the result table ordered by <code>travelled_distance</code> in descending order, if two or more users traveled the same distance, order them by their <code>name</code> in ascending order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nUsers table:\n+------+-----------+\n| id   | name      |\n+------+-----------+\n| 1    | Alice     |\n| 2    | Bob       |\n| 3    | Alex      |\n| 4    | Donald    |\n| 7    | Lee       |\n| 13   | Jonathan  |\n| 19   | Elvis     |\n+------+-----------+\nRides table:\n+------+----------+----------+\n| id   | user_id  | distance |\n+------+----------+----------+\n| 1    | 1        | 120      |\n| 2    | 2        | 317      |\n| 3    | 3        | 222      |\n| 4    | 7        | 100      |\n| 5    | 13       | 312      |\n| 6    | 19       | 50       |\n| 7    | 7        | 120      |\n| 8    | 19       | 400      |\n| 9    | 7        | 230      |\n+------+----------+----------+\nOutput: \n+----------+--------------------+\n| name     | travelled_distance |\n+----------+--------------------+\n| Elvis    | 450                |\n| Lee      | 450                |\n| Bob      | 317                |\n| Jonathan | 312                |\n| Alex     | 222                |\n| Alice    | 120                |\n| Donald   | 0                  |\n+----------+--------------------+\nExplanation: \nElvis and Lee traveled 450 miles, Elvis is the top traveler as his name is alphabetically smaller than Lee.\nBob, Jonathan, Alex, and Alice have only one ride and we just order them by the total distances of the ride.\nDonald did not have any rides, the distance traveled by him is 0.\n</pre>"},{"location":"LeetCode_Problems/1408/","title":"1408. String Matching in an Array","text":"Problem <p>Given an array of string <code>words</code>, return all strings in <code>words</code> that is a substring of another word. You can return the answer in any order.</p> <p>A substring is a contiguous sequence of characters within a string</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"mass\",\"as\",\"hero\",\"superhero\"]\nOutput: [\"as\",\"hero\"]\nExplanation: \"as\" is substring of \"mass\" and \"hero\" is substring of \"superhero\".\n[\"hero\",\"as\"] is also a valid answer.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"leetcode\",\"et\",\"code\"]\nOutput: [\"et\",\"code\"]\nExplanation: \"et\", \"code\" are substring of \"leetcode\".\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"blue\",\"green\",\"bu\"]\nOutput: []\nExplanation: No string of words is substring of another string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 30</code></li> <li><code>words[i]</code> contains only lowercase English letters.</li> <li>All the strings of <code>words</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/1409/","title":"1409. Queries on a Permutation With Key","text":"Problem <p>Given the array <code>queries</code> of positive integers between <code>1</code> and <code>m</code>, you have to process all <code>queries[i]</code> (from <code>i=0</code> to <code>i=queries.length-1</code>) according to the following rules:</p> <ul> <li>In the beginning, you have the permutation <code>P=[1,2,3,...,m]</code>.</li> <li>For the current <code>i</code>, find the position of <code>queries[i]</code> in the permutation <code>P</code> (indexing from 0) and then move this at the beginning of the permutation <code>P</code>. Notice that the position of <code>queries[i]</code> in <code>P</code> is the result for <code>queries[i]</code>.</li> </ul> <p>Return an array containing the result for the given <code>queries</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: queries = [3,1,2,1], m = 5\nOutput: [2,1,2,1] \nExplanation: The queries are processed as follow: \nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. \nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. \nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. \nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. \nTherefore, the array containing the result is [2,1,2,1].  \n</pre> <p>Example 2:</p> <pre>\nInput: queries = [4,1,2,2], m = 4\nOutput: [3,1,2,0]\n</pre> <p>Example 3:</p> <pre>\nInput: queries = [7,5,5,8,3], m = 8\nOutput: [6,5,0,7,5]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m &lt;= 10^3</code></li> <li><code>1 &lt;= queries.length &lt;= m</code></li> <li><code>1 &lt;= queries[i] &lt;= m</code></li> </ul>"},{"location":"LeetCode_Problems/1410/","title":"1410. HTML Entity Parser","text":"Problem <p>HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.</p> <p>The special characters and their entities for HTML are:</p> <ul> <li>Quotation Mark: the entity is <code>&amp;quot;</code> and symbol character is <code>\"</code>.</li> <li>Single Quote Mark: the entity is <code>&amp;apos;</code> and symbol character is <code>'</code>.</li> <li>Ampersand: the entity is <code>&amp;amp;</code> and symbol character is <code>&amp;</code>.</li> <li>Greater Than Sign: the entity is <code>&amp;gt;</code> and symbol character is <code>&gt;</code>.</li> <li>Less Than Sign: the entity is <code>&amp;lt;</code> and symbol character is <code>&lt;</code>.</li> <li>Slash: the entity is <code>&amp;frasl;</code> and symbol character is <code>/</code>.</li> </ul> <p>Given the input <code>text</code> string to the HTML parser, you have to implement the entity parser.</p> <p>Return the text after replacing the entities by the special characters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: text = \"&amp;amp; is an HTML entity but &amp;ambassador; is not.\"\nOutput: \"&amp; is an HTML entity but &amp;ambassador; is not.\"\nExplanation: The parser will replace the &amp;amp; entity by &amp;\n</pre> <p>Example 2:</p> <pre>\nInput: text = \"and I quote: &amp;quot;...&amp;quot;\"\nOutput: \"and I quote: \\\"...\\\"\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text.length &lt;= 10<sup>5</sup></code></li> <li>The string may contain any possible characters out of all the 256 ASCII characters.</li> </ul>"},{"location":"LeetCode_Problems/1411/","title":"1411. Number of Ways to Paint N \u00d7 3 Grid","text":"Problem <p>You have a <code>grid</code> of size <code>n x 3</code> and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).</p> <p>Given <code>n</code> the number of rows of the grid, return the number of ways you can paint this <code>grid</code>. As the answer may grow large, the answer must be computed modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 1\nOutput: 12\nExplanation: There are 12 possible way to paint the grid as shown.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5000\nOutput: 30228214\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length</code></li> <li><code>1 &lt;= n &lt;= 5000</code></li> </ul>"},{"location":"LeetCode_Problems/1412/","title":"1412. Find the Quiet Students in All Exams","text":"Problem"},{"location":"LeetCode_Problems/1413/","title":"1413. Minimum Value to Get Positive Step by Step Sum","text":"Problem <p>Given an array of integers\u00a0<code>nums</code>, you start with an initial positive value startValue.</p> <p>In each iteration, you calculate the step by step sum of startValue\u00a0plus\u00a0elements in <code>nums</code>\u00a0(from left to right).</p> <p>Return the minimum positive value of\u00a0startValue such that the step by step sum is never less than 1.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-3,2,-3,4,2]\nOutput: 5\nExplanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\nstep by step sum\nstartValue = 4 | startValue = 5 | nums\n  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3\n  (1 +2 ) = 3  | (2 +2 ) = 4    |   2\n  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3\n  (0 +4 ) = 4  | (1 +4 ) = 5    |   4\n  (4 +2 ) = 6  | (5 +2 ) = 7    |   2\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2]\nOutput: 1\nExplanation: Minimum start value should be positive. \n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,-2,-3]\nOutput: 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1414/","title":"1414. Find the Minimum Number of Fibonacci Numbers Whose Sum Is K","text":"Problem <p>Given an integer\u00a0<code>k</code>, return the minimum number of Fibonacci numbers whose sum is equal to <code>k</code>. The same Fibonacci number can be used multiple times.</p> <p>The Fibonacci numbers are defined as:</p> <ul> <li><code>F<sub>1</sub> = 1</code></li> <li><code>F<sub>2</sub> = 1</code></li> <li><code>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub></code> for <code>n &gt; 2.</code></li> </ul> <p>It is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to <code>k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: k = 7\nOutput: 2 \nExplanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... \nFor k = 7 we can use 2 + 5 = 7.</pre> <p>Example 2:</p> <pre>\nInput: k = 10\nOutput: 2 \nExplanation: For k = 10 we can use 2 + 8 = 10.\n</pre> <p>Example 3:</p> <pre>\nInput: k = 19\nOutput: 3 \nExplanation: For k = 19 we can use 1 + 5 + 13 = 19.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1415/","title":"1415. The k-th Lexicographical String of All Happy Strings of Length n","text":"Problem <p>A happy string is a string that:</p> <ul> <li>consists only of letters of the set <code>['a', 'b', 'c']</code>.</li> <li><code>s[i] != s[i + 1]</code> for all values of <code>i</code> from <code>1</code> to <code>s.length - 1</code> (string is 1-indexed).</li> </ul> <p>For example, strings \"abc\", \"ac\", \"b\" and \"abcbabcbcb\" are all happy strings and strings \"aa\", \"baa\" and \"ababbc\" are not happy strings.</p> <p>Given two integers <code>n</code> and <code>k</code>, consider a list of all happy strings of length <code>n</code> sorted in lexicographical order.</p> <p>Return the kth string of this list or return an empty string if there are less than <code>k</code> happy strings of length <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1, k = 3\nOutput: \"c\"\nExplanation: The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\".\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1, k = 4\nOutput: \"\"\nExplanation: There are only 3 happy strings of length 1.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 3, k = 9\nOutput: \"cab\"\nExplanation: There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9<sup>th</sup> string = \"cab\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10</code></li> <li><code>1 &lt;= k &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1416/","title":"1416. Restore The Array","text":"Problem <p>A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits <code>s</code> and all we know is that all integers in the array were in the range <code>[1, k]</code> and there are no leading zeros in the array.</p> <p>Given the string <code>s</code> and the integer <code>k</code>, return the number of the possible arrays that can be printed as <code>s</code> using the mentioned program. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"1000\", k = 10000\nOutput: 1\nExplanation: The only possible array is [1000]\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"1000\", k = 10\nOutput: 0\nExplanation: There cannot be an array that was printed this way and has all integer &gt;= 1 and &lt;= 10.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"1317\", k = 2000\nOutput: 8\nExplanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only digits and does not contain leading zeros.</li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1417/","title":"1417. Reformat The String","text":"Problem <p>You are given an alphanumeric string <code>s</code>. (Alphanumeric string is a string consisting of lowercase English letters and digits).</p> <p>You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.</p> <p>Return the reformatted string or return an empty string if it is impossible to reformat the string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"a0b1c2\"\nOutput: \"0a1b2c\"\nExplanation: No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" are also valid permutations.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"leetcode\"\nOutput: \"\"\nExplanation: \"leetcode\" has only characters so we cannot separate them by digits.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"1229857369\"\nOutput: \"\"\nExplanation: \"1229857369\" has only digits so we cannot separate them by characters.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of only lowercase English letters and/or digits.</li> </ul>"},{"location":"LeetCode_Problems/1418/","title":"1418. Display Table of Food Orders in a Restaurant","text":"Problem <p>Given\u00a0the array <code>orders</code>, which represents the orders that customers have done in a restaurant. More specifically\u00a0<code>orders[i]=[customerName<sub>i</sub>,tableNumber<sub>i</sub>,foodItem<sub>i</sub>]</code> where <code>customerName<sub>i</sub></code> is the name of the customer, <code>tableNumber<sub>i</sub></code>\u00a0is the table customer sit at, and <code>foodItem<sub>i</sub></code>\u00a0is the item customer orders.</p> <p>Return the restaurant's \u201cdisplay table\u201d. The \u201cdisplay table\u201d is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is \u201cTable\u201d, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]\nOutput: [[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]] \nExplanation:\nThe displaying table looks like:\nTable,Beef Burrito,Ceviche,Fried Chicken,Water\n3    ,0           ,2      ,1            ,0\n5    ,0           ,1      ,0            ,1\n10   ,1           ,0      ,0            ,0\nFor the table 3: David orders \"Ceviche\" and \"Fried Chicken\", and Rous orders \"Ceviche\".\nFor the table 5: Carla orders \"Water\" and \"Ceviche\".\nFor the table 10: Corina orders \"Beef Burrito\". \n</pre> <p>Example 2:</p> <pre>\nInput: orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]\nOutput: [[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]] \nExplanation: \nFor the table 1: Adam and Brianna order \"Canadian Waffles\".\nFor the table 12: James, Ratesh and Amadeus order \"Fried Chicken\".\n</pre> <p>Example 3:</p> <pre>\nInput: orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]\nOutput: [[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;=\u00a0orders.length &lt;= 5 * 10^4</code></li> <li><code>orders[i].length == 3</code></li> <li><code>1 &lt;= customerName<sub>i</sub>.length, foodItem<sub>i</sub>.length &lt;= 20</code></li> <li><code>customerName<sub>i</sub></code> and <code>foodItem<sub>i</sub></code> consist of lowercase and uppercase English letters and the space character.</li> <li><code>tableNumber<sub>i</sub> </code>is a valid integer between <code>1</code> and <code>500</code>.</li> </ul>"},{"location":"LeetCode_Problems/1419/","title":"1419. Minimum Number of Frogs Croaking","text":"Problem <p>You are given the string <code>croakOfFrogs</code>, which represents a combination of the string <code>\"croak\"</code> from different frogs, that is, multiple frogs can croak at the same time, so multiple <code>\"croak\"</code> are mixed.</p> <p>Return the minimum number of different frogs to finish all the croaks in the given string.</p> <p>A valid <code>\"croak\"</code> means a frog is printing five letters <code>'c'</code>, <code>'r'</code>, <code>'o'</code>, <code>'a'</code>, and <code>'k'</code> sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid <code>\"croak\"</code> return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: croakOfFrogs = \"croakcroak\"\nOutput: 1 \nExplanation: One frog yelling \"croak\" twice.\n</pre> <p>Example 2:</p> <pre>\nInput: croakOfFrogs = \"crcoakroak\"\nOutput: 2 \nExplanation: The minimum number of frogs is two. \nThe first frog could yell \"crcoakroak\".\nThe second frog could yell later \"crcoakroak\".\n</pre> <p>Example 3:</p> <pre>\nInput: croakOfFrogs = \"croakcrook\"\nOutput: -1\nExplanation: The given string is an invalid combination of \"croak\" from different frogs.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= croakOfFrogs.length &lt;= 10<sup>5</sup></code></li> <li><code>croakOfFrogs</code> is either <code>'c'</code>, <code>'r'</code>, <code>'o'</code>, <code>'a'</code>, or <code>'k'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1420/","title":"1420. Build Array Where You Can Find The Maximum Exactly K Comparisons","text":"Problem <p>You are given three integers <code>n</code>, <code>m</code> and <code>k</code>. Consider the following algorithm to find the maximum element of an array of positive integers:</p> <p></p> <p>You should build the array arr which has the following properties:</p> <ul> <li><code>arr</code> has exactly <code>n</code> integers.</li> <li><code>1 &lt;= arr[i] &lt;= m</code> where <code>(0 &lt;= i &lt; n)</code>.</li> <li>After applying the mentioned algorithm to <code>arr</code>, the value <code>search_cost</code> is equal to <code>k</code>.</li> </ul> <p>Return the number of ways to build the array <code>arr</code> under the mentioned conditions. As the answer may grow large, the answer must be computed modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2, m = 3, k = 1\nOutput: 6\nExplanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5, m = 2, k = 3\nOutput: 0\nExplanation: There are no possible arrays that satisfy the mentioned conditions.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 9, m = 1, k = 1\nOutput: 1\nExplanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>1 &lt;= m &lt;= 100</code></li> <li><code>0 &lt;= k &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/1421/","title":"1421. NPV Queries","text":"Problem"},{"location":"LeetCode_Problems/1422/","title":"1422. Maximum Score After Splitting a String","text":"Problem <p>Given a\u00a0string <code>s</code>\u00a0of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).</p> <p>The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"011101\"\nOutput: 5 \nExplanation: \nAll possible ways of splitting s into two non-empty substrings are:\nleft = \"0\" and right = \"11101\", score = 1 + 4 = 5 \nleft = \"01\" and right = \"1101\", score = 1 + 3 = 4 \nleft = \"011\" and right = \"101\", score = 1 + 2 = 3 \nleft = \"0111\" and right = \"01\", score = 1 + 1 = 2 \nleft = \"01110\" and right = \"1\", score = 2 + 1 = 3\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"00111\"\nOutput: 5\nExplanation: When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"1111\"\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 500</code></li> <li>The string <code>s</code> consists of characters <code>'0'</code> and <code>'1'</code> only.</li> </ul>"},{"location":"LeetCode_Problems/1423/","title":"1423. Maximum Points You Can Obtain from Cards","text":"Problem <p>There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array <code>cardPoints</code>.</p> <p>In one step, you can take one card from the beginning or from the end of the row. You have to take exactly <code>k</code> cards.</p> <p>Your score is the sum of the points of the cards you have taken.</p> <p>Given the integer array <code>cardPoints</code> and the integer <code>k</code>, return the maximum score you can obtain.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: cardPoints = [1,2,3,4,5,6,1], k = 3\nOutput: 12\nExplanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.\n</pre> <p>Example 2:</p> <pre>\nInput: cardPoints = [2,2,2], k = 2\nOutput: 4\nExplanation: Regardless of which two cards you take, your score will always be 4.\n</pre> <p>Example 3:</p> <pre>\nInput: cardPoints = [9,7,7,9,7,7,9], k = 7\nOutput: 55\nExplanation: You have to take all the cards. Your score is the sum of points of all cards.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= cardPoints.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= cardPoints[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= k &lt;= cardPoints.length</code></li> </ul>"},{"location":"LeetCode_Problems/1424/","title":"1424. Diagonal Traverse II","text":"Problem <p>Given a 2D integer array <code>nums</code>, return all elements of <code>nums</code> in diagonal order as shown in the below images.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,4,2,7,5,3,8,6,9]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\nOutput: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i].length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= sum(nums[i].length) &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i][j] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1425/","title":"1425. Constrained Subsequence Sum","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, <code>nums[i]</code> and <code>nums[j]</code>, where <code>i &lt; j</code>, the condition <code>j - i &lt;= k</code> is satisfied.</p> <p>A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [10,2,-10,5,20], k = 2\nOutput: 37\nExplanation: The subsequence is [10, 2, 5, 20].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-1,-2,-3], k = 1\nOutput: -1\nExplanation: The subsequence must be non-empty, so we choose the largest number.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [10,-2,-10,-5,20], k = 2\nOutput: 23\nExplanation: The subsequence is [10, -2, -5, 20].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1426/","title":"1426. Counting Elements","text":"Problem"},{"location":"LeetCode_Problems/1427/","title":"1427. Perform String Shifts","text":"Problem"},{"location":"LeetCode_Problems/1428/","title":"1428. Leftmost Column with at Least a One","text":"Problem"},{"location":"LeetCode_Problems/1429/","title":"1429. First Unique Number","text":"Problem"},{"location":"LeetCode_Problems/1430/","title":"1430. Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree","text":"Problem"},{"location":"LeetCode_Problems/1431/","title":"1431. Kids With the Greatest Number of Candies","text":"Problem <p>There are <code>n</code> kids with candies. You are given an integer array <code>candies</code>, where each <code>candies[i]</code> represents the number of candies the <code>i<sup>th</sup></code> kid has, and an integer <code>extraCandies</code>, denoting the number of extra candies that you have.</p> <p>Return a boolean array <code>result</code> of length <code>n</code>, where <code>result[i]</code> is <code>true</code> if, after giving the <code>i<sup>th</sup></code> kid all the <code>extraCandies</code>, they will have the greatest number of candies among all the kids, or <code>false</code> otherwise.</p> <p>Note that multiple kids can have the greatest number of candies.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: candies = [2,3,5,1,3], extraCandies = 3\nOutput: [true,true,true,false,true] \nExplanation: If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n</pre> <p>Example 2:</p> <pre>\nInput: candies = [4,2,1,1,2], extraCandies = 1\nOutput: [true,false,false,false,false] \nExplanation: There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.\n</pre> <p>Example 3:</p> <pre>\nInput: candies = [12,1,12], extraCandies = 10\nOutput: [true,false,true]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == candies.length</code></li> <li><code>2 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= candies[i] &lt;= 100</code></li> <li><code>1 &lt;= extraCandies &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/1432/","title":"1432. Max Difference You Can Get From Changing an Integer","text":"Problem <p>You are given an integer <code>num</code>. You will apply the following steps exactly two times:</p> <ul> <li>Pick a digit <code>x (0 &lt;= x &lt;= 9)</code>.</li> <li>Pick another digit <code>y (0 &lt;= y &lt;= 9)</code>. The digit <code>y</code> can be equal to <code>x</code>.</li> <li>Replace all the occurrences of <code>x</code> in the decimal representation of <code>num</code> by <code>y</code>.</li> <li>The new integer cannot have any leading zeros, also the new integer cannot be 0.</li> </ul> <p>Let <code>a</code> and <code>b</code> be the results of applying the operations to <code>num</code> the first and second times, respectively.</p> <p>Return the max difference between <code>a</code> and <code>b</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 555\nOutput: 888\nExplanation: The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888\n</pre> <p>Example 2:</p> <pre>\nInput: num = 9\nOutput: 8\nExplanation: The first time pick x = 9 and y = 9 and store the new integer in a.\nThe second time pick x = 9 and y = 1 and store the new integer in b.\nWe have now a = 9 and b = 1 and max difference = 8\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 10</code><sup>8</sup></li> </ul>"},{"location":"LeetCode_Problems/1433/","title":"1433. Check If a String Can Break Another String","text":"Problem <p>Given two strings: <code>s1</code> and <code>s2</code> with the same\u00a0size, check if some\u00a0permutation of string <code>s1</code> can break\u00a0some\u00a0permutation of string <code>s2</code> or vice-versa. In other words <code>s2</code> can break <code>s1</code>\u00a0or vice-versa.</p> <p>A string <code>x</code>\u00a0can break\u00a0string <code>y</code>\u00a0(both of size <code>n</code>) if <code>x[i] &gt;= y[i]</code>\u00a0(in alphabetical order)\u00a0for all <code>i</code>\u00a0between <code>0</code> and <code>n-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"abc\", s2 = \"xya\"\nOutput: true\nExplanation: \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\".\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"abe\", s2 = \"acd\"\nOutput: false \nExplanation: All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.\n</pre> <p>Example 3:</p> <pre>\nInput: s1 = \"leetcodee\", s2 = \"interview\"\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>s1.length == n</code></li> <li><code>s2.length == n</code></li> <li><code>1 &lt;= n &lt;= 10^5</code></li> <li>All strings consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1434/","title":"1434. Number of Ways to Wear Different Hats to Each Other","text":"Problem <p>There are <code>n</code> people and <code>40</code> types of hats labeled from <code>1</code> to <code>40</code>.</p> <p>Given a 2D integer array <code>hats</code>, where <code>hats[i]</code> is a list of all hats preferred by the <code>i<sup>th</sup></code> person.</p> <p>Return the number of ways that the <code>n</code> people wear different hats to each other.</p> <p>Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: hats = [[3,4],[4,5],[5]]\nOutput: 1\nExplanation: There is only one way to choose hats given the conditions. \nFirst person choose hat 3, Second person choose hat 4 and last one hat 5.\n</pre> <p>Example 2:</p> <pre>\nInput: hats = [[3,5,1],[3,5]]\nOutput: 4\nExplanation: There are 4 ways to choose hats:\n(3,5), (5,3), (1,3) and (1,5)\n</pre> <p>Example 3:</p> <pre>\nInput: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nOutput: 24\nExplanation: Each person can choose hats labeled from 1 to 4.\nNumber of Permutations of (1,2,3,4) = 24.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == hats.length</code></li> <li><code>1 &lt;= n &lt;= 10</code></li> <li><code>1 &lt;= hats[i].length &lt;= 40</code></li> <li><code>1 &lt;= hats[i][j] &lt;= 40</code></li> <li><code>hats[i]</code> contains a list of unique integers.</li> </ul>"},{"location":"LeetCode_Problems/1435/","title":"1435. Create a Session Bar Chart","text":"Problem"},{"location":"LeetCode_Problems/1436/","title":"1436. Destination City","text":"Problem <p>You are given the array <code>paths</code>, where <code>paths[i] = [cityA<sub>i</sub>, cityB<sub>i</sub>]</code> means there exists a direct path going from <code>cityA<sub>i</sub></code> to <code>cityB<sub>i</sub></code>. Return the destination city, that is, the city without any path outgoing to another city.</p> <p>It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\nOutput: \"Sao Paulo\" \nExplanation: Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -&gt; \"New York\" -&gt; \"Lima\" -&gt; \"Sao Paulo\".\n</pre> <p>Example 2:</p> <pre>\nInput: paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\nOutput: \"A\"\nExplanation: All possible trips are:\u00a0\n\"D\" -&gt; \"B\" -&gt; \"C\" -&gt; \"A\".\u00a0\n\"B\" -&gt; \"C\" -&gt; \"A\".\u00a0\n\"C\" -&gt; \"A\".\u00a0\n\"A\".\u00a0\nClearly the destination city is \"A\".\n</pre> <p>Example 3:</p> <pre>\nInput: paths = [[\"A\",\"Z\"]]\nOutput: \"Z\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= paths.length &lt;= 100</code></li> <li><code>paths[i].length == 2</code></li> <li><code>1 &lt;= cityA<sub>i</sub>.length, cityB<sub>i</sub>.length &lt;= 10</code></li> <li><code>cityA<sub>i</sub> != cityB<sub>i</sub></code></li> <li>All strings consist of lowercase and uppercase English letters and the space character.</li> </ul>"},{"location":"LeetCode_Problems/1437/","title":"1437. Check If All 1's Are at Least Length K Places Away","text":"Problem <p>Given an binary array <code>nums</code> and an integer <code>k</code>, return <code>true</code> if all <code>1</code>'s are at least <code>k</code> places away from each other, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [1,0,0,0,1,0,0,1], k = 2\nOutput: true\nExplanation: Each of the 1s are at least 2 places away from each other.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: nums = [1,0,0,1,0,1], k = 2\nOutput: false\nExplanation: The second 1 and third 1 are only one apart from each other.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= k &lt;= nums.length</code></li> <li><code>nums[i]</code> is <code>0</code> or <code>1</code></li> </ul>"},{"location":"LeetCode_Problems/1438/","title":"1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit","text":"Problem <p>Given an array of integers <code>nums</code> and an integer <code>limit</code>, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to <code>limit</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [8,2,4,7], limit = 4\nOutput: 2 \nExplanation: All subarrays are: \n[8] with maximum absolute diff |8-8| = 0 &lt;= 4.\n[8,2] with maximum absolute diff |8-2| = 6 &gt; 4. \n[8,2,4] with maximum absolute diff |8-2| = 6 &gt; 4.\n[8,2,4,7] with maximum absolute diff |8-2| = 6 &gt; 4.\n[2] with maximum absolute diff |2-2| = 0 &lt;= 4.\n[2,4] with maximum absolute diff |2-4| = 2 &lt;= 4.\n[2,4,7] with maximum absolute diff |2-7| = 5 &gt; 4.\n[4] with maximum absolute diff |4-4| = 0 &lt;= 4.\n[4,7] with maximum absolute diff |4-7| = 3 &lt;= 4.\n[7] with maximum absolute diff |7-7| = 0 &lt;= 4. \nTherefore, the size of the longest subarray is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [10,1,2,4,7,2], limit = 5\nOutput: 4 \nExplanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 &lt;= 5.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [4,2,2,2,4,4,2,2], limit = 0\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= limit &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1439/","title":"1439. Find the Kth Smallest Sum of a Matrix With Sorted Rows","text":"Problem <p>You are given an <code>m x n</code> matrix <code>mat</code> that has its rows sorted in non-decreasing order and an integer <code>k</code>.</p> <p>You are allowed to choose exactly one element from each row to form an array.</p> <p>Return the <code>k<sup>th</sup></code> smallest array sum among all possible arrays.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: mat = [[1,3,11],[2,4,6]], k = 5\nOutput: 7\nExplanation: Choosing one element from each row, the first k smallest sum are:\n[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.\n</pre> <p>Example 2:</p> <pre>\nInput: mat = [[1,3,11],[2,4,6]], k = 9\nOutput: 17\n</pre> <p>Example 3:</p> <pre>\nInput: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7\nOutput: 9\nExplanation: Choosing one element from each row, the first k smallest sum are:\n[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.  \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat.length[i]</code></li> <li><code>1 &lt;= m, n &lt;= 40</code></li> <li><code>1 &lt;= mat[i][j] &lt;= 5000</code></li> <li><code>1 &lt;= k &lt;= min(200, n<sup>m</sup>)</code></li> <li><code>mat[i]</code> is a non-decreasing array.</li> </ul>"},{"location":"LeetCode_Problems/1440/","title":"1440. Evaluate Boolean Expression","text":"Problem"},{"location":"LeetCode_Problems/1441/","title":"1441. Build an Array With Stack Operations","text":"Problem <p>You are given an integer array <code>target</code> and an integer <code>n</code>.</p> <p>You have an empty stack with the two following operations:</p> <ul> <li><code>\"Push\"</code>: pushes an integer to the top of the stack.</li> <li><code>\"Pop\"</code>: removes the integer on the top of the stack.</li> </ul> <p>You also have a stream of the integers in the range <code>[1, n]</code>.</p> <p>Use the two stack operations to make the numbers in the stack (from the bottom to the top) equal to <code>target</code>. You should follow the following rules:</p> <ul> <li>If the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack.</li> <li>If the stack is not empty, pop the integer at the top of the stack.</li> <li>If, at any moment, the elements in the stack (from the bottom to the top) are equal to <code>target</code>, do not read new integers from the stream and do not do more operations on the stack.</li> </ul> <p>Return the stack operations needed to build <code>target</code> following the mentioned rules. If there are multiple valid answers, return any of them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = [1,3], n = 3\nOutput: [\"Push\",\"Push\",\"Pop\",\"Push\"]\nExplanation: Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = [1].\nRead 2 from the stream and push it to the stack. s = [1,2].\nPop the integer on the top of the stack. s = [1].\nRead 3 from the stream and push it to the stack. s = [1,3].\n</pre> <p>Example 2:</p> <pre>\nInput: target = [1,2,3], n = 3\nOutput: [\"Push\",\"Push\",\"Push\"]\nExplanation: Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = [1].\nRead 2 from the stream and push it to the stack. s = [1,2].\nRead 3 from the stream and push it to the stack. s = [1,2,3].\n</pre> <p>Example 3:</p> <pre>\nInput: target = [1,2], n = 4\nOutput: [\"Push\",\"Push\"]\nExplanation: Initially the stack s is empty. The last element is the top of the stack.\nRead 1 from the stream and push it to the stack. s = [1].\nRead 2 from the stream and push it to the stack. s = [1,2].\nSince the stack (from the bottom to the top) is equal to target, we stop the stack operations.\nThe answers that read integer 3 from the stream are not accepted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= target.length &lt;= 100</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= target[i] &lt;= n</code></li> <li><code>target</code> is strictly increasing.</li> </ul>"},{"location":"LeetCode_Problems/1442/","title":"1442. Count Triplets That Can Form Two Arrays of Equal XOR","text":"Problem <p>Given an array of integers <code>arr</code>.</p> <p>We want to select three indices <code>i</code>, <code>j</code> and <code>k</code> where <code>(0 &lt;= i &lt; j &lt;= k &lt; arr.length)</code>.</p> <p>Let's define <code>a</code> and <code>b</code> as follows:</p> <ul> <li><code>a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]</code></li> <li><code>b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]</code></li> </ul> <p>Note that ^ denotes the bitwise-xor operation.</p> <p>Return the number of triplets (<code>i</code>, <code>j</code> and <code>k</code>) Where <code>a == b</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [2,3,1,6,7]\nOutput: 4\nExplanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,1,1,1,1]\nOutput: 10\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 300</code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1443/","title":"1443. Minimum Time to Collect All Apples in a Tree","text":"Problem <p>Given an undirected tree consisting of <code>n</code> vertices numbered from <code>0</code> to <code>n-1</code>, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.</p> <p>The edges of the undirected tree are given in the array <code>edges</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> means that exists an edge connecting the vertices <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>. Additionally, there is a boolean array <code>hasApple</code>, where <code>hasApple[i] = true</code> means that vertex <code>i</code> has an apple; otherwise, it does not have any apple.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]\nOutput: 8 \nExplanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]\nOutput: 6\nExplanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  \n</pre> <p>Example 3:</p> <pre>\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt;= n - 1</code></li> <li><code>hasApple.length == n</code></li> </ul>"},{"location":"LeetCode_Problems/1444/","title":"1444. Number of Ways of Cutting a Pizza","text":"Problem <p>Given a rectangular pizza represented as a <code>rows x cols</code>\u00a0matrix containing the following characters: <code>'A'</code> (an apple) and <code>'.'</code> (empty cell) and given the integer <code>k</code>. You have to cut the pizza into <code>k</code> pieces using <code>k-1</code> cuts.\u00a0</p> <p>For each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.</p> <p>Return the number of ways of cutting the pizza such that each piece contains at least one apple.\u00a0Since the answer can be a huge number, return this modulo 10^9 + 7.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: pizza = [\"A..\",\"AAA\",\"...\"], k = 3\nOutput: 3 \nExplanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.\n</pre> <p>Example 2:</p> <pre>\nInput: pizza = [\"A..\",\"AA.\",\"...\"], k = 3\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: pizza = [\"A..\",\"A..\",\"...\"], k = 1\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rows, cols &lt;= 50</code></li> <li><code>rows ==\u00a0pizza.length</code></li> <li><code>cols ==\u00a0pizza[i].length</code></li> <li><code>1 &lt;= k &lt;= 10</code></li> <li><code>pizza</code> consists of characters <code>'A'</code>\u00a0and <code>'.'</code> only.</li> </ul>"},{"location":"LeetCode_Problems/1445/","title":"1445. Apples &amp; Oranges","text":"Problem"},{"location":"LeetCode_Problems/1446/","title":"1446. Consecutive Characters","text":"Problem <p>The power of the string is the maximum length of a non-empty substring that contains only one unique character.</p> <p>Given a string <code>s</code>, return the power of <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"leetcode\"\nOutput: 2\nExplanation: The substring \"ee\" is of length 2 with the character 'e' only.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abbcccddddeeeeedcba\"\nOutput: 5\nExplanation: The substring \"eeeee\" is of length 5 with the character 'e' only.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1447/","title":"1447. Simplified Fractions","text":"Problem <p>Given an integer <code>n</code>, return a list of all simplified fractions between <code>0</code> and <code>1</code> (exclusive) such that the denominator is less-than-or-equal-to <code>n</code>. You can return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: [\"1/2\"]\nExplanation: \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3\nOutput: [\"1/2\",\"1/3\",\"2/3\"]\n</pre> <p>Example 3:</p> <pre>\nInput: n = 4\nOutput: [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]\nExplanation: \"2/4\" is not a simplified fraction because it can be simplified to \"1/2\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1448/","title":"1448. Count Good Nodes in Binary Tree","text":"Problem <p>Given a binary tree <code>root</code>, a node X in the tree is named\u00a0good if in the path from root to X there are no nodes with a value greater than X.</p> <p>Return the number of good nodes in the binary tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [3,1,4,3,null,1,5]\nOutput: 4\nExplanation: Nodes in blue are good.\nRoot Node (3) is always a good node.\nNode 4 -&gt; (3,4) is the maximum value in the path starting from the root.\nNode 5 -&gt; (3,4,5) is the maximum value in the path\nNode 3 -&gt; (3,1,3) is the maximum value in the path.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [3,3,null,4,2]\nOutput: 3\nExplanation: Node 2 -&gt; (3, 3, 2) is not good, because \"3\" is higher than it.</pre> <p>Example 3:</p> <pre>\nInput: root = [1]\nOutput: 1\nExplanation: Root is considered as good.</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the binary tree is in the range\u00a0<code>[1, 10^5]</code>.</li> <li>Each node's value is between <code>[-10^4, 10^4]</code>.</li> </ul>"},{"location":"LeetCode_Problems/1449/","title":"1449. Form Largest Integer With Digits That Add up to Target","text":"Problem <p>Given an array of integers <code>cost</code> and an integer <code>target</code>, return the maximum integer you can paint under the following rules:</p> <ul> <li>The cost of painting a digit <code>(i + 1)</code> is given by <code>cost[i]</code> (0-indexed).</li> <li>The total cost used must be equal to <code>target</code>.</li> <li>The integer does not have <code>0</code> digits.</li> </ul> <p>Since the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return <code>\"0\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: cost = [4,3,2,5,6,7,2,5,5], target = 9\nOutput: \"7772\"\nExplanation: The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\nDigit    cost\n  1  -&gt;   4\n  2  -&gt;   3\n  3  -&gt;   2\n  4  -&gt;   5\n  5  -&gt;   6\n  6  -&gt;   7\n  7  -&gt;   2\n  8  -&gt;   5\n  9  -&gt;   5\n</pre> <p>Example 2:</p> <pre>\nInput: cost = [7,6,5,5,5,6,8,7,8], target = 12\nOutput: \"85\"\nExplanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12.\n</pre> <p>Example 3:</p> <pre>\nInput: cost = [2,4,6,2,4,6,4,4,4], target = 5\nOutput: \"0\"\nExplanation: It is impossible to paint any integer with total cost equal to target.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>cost.length == 9</code></li> <li><code>1 &lt;= cost[i], target &lt;= 5000</code></li> </ul>"},{"location":"LeetCode_Problems/1450/","title":"1450. Number of Students Doing Homework at a Given Time","text":"Problem <p>Given two integer arrays <code>startTime</code> and <code>endTime</code> and given an integer <code>queryTime</code>.</p> <p>The <code>ith</code> student started doing their homework at the time <code>startTime[i]</code> and finished it at time <code>endTime[i]</code>.</p> <p>Return the number of students doing their homework at time <code>queryTime</code>. More formally, return the number of students where <code>queryTime</code> lays in the interval <code>[startTime[i], endTime[i]]</code> inclusive.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\nOutput: 1\nExplanation: We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.\n</pre> <p>Example 2:</p> <pre>\nInput: startTime = [4], endTime = [4], queryTime = 4\nOutput: 1\nExplanation: The only student was doing their homework at the queryTime.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>startTime.length == endTime.length</code></li> <li><code>1 &lt;= startTime.length &lt;= 100</code></li> <li><code>1 &lt;= startTime[i] &lt;= endTime[i] &lt;= 1000</code></li> <li><code>1 &lt;= queryTime &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1451/","title":"1451. Rearrange Words in a Sentence","text":"Problem <p>Given a sentence\u00a0<code>text</code> (A\u00a0sentence\u00a0is a string of space-separated words) in the following format:</p> <ul> <li>First letter is in upper case.</li> <li>Each word in <code>text</code> are separated by a single space.</li> </ul> <p>Your task is to rearrange the words in text such that\u00a0all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.</p> <p>Return the new text\u00a0following the format shown above.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: text = \"Leetcode is cool\"\nOutput: \"Is cool leetcode\"\nExplanation: There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4.\nOutput is ordered by length and the new first word starts with capital letter.\n</pre> <p>Example 2:</p> <pre>\nInput: text = \"Keep calm and code on\"\nOutput: \"On and keep calm code\"\nExplanation: Output is ordered as follows:\n\"On\" 2 letters.\n\"and\" 3 letters.\n\"keep\" 4 letters in case of tie order by position in original text.\n\"calm\" 4 letters.\n\"code\" 4 letters.\n</pre> <p>Example 3:</p> <pre>\nInput: text = \"To be or not to be\"\nOutput: \"To be or to be not\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>text</code> begins with a capital letter and then contains lowercase letters and single space between words.</li> <li><code>1 &lt;= text.length &lt;= 10^5</code></li> </ul>"},{"location":"LeetCode_Problems/1452/","title":"1452. People Whose List of Favorite Companies Is Not a Subset of Another List","text":"Problem <p>Given the array <code>favoriteCompanies</code> where <code>favoriteCompanies[i]</code> is the list of favorites companies for the <code>ith</code> person (indexed from 0).</p> <p>Return the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. You must return the indices in increasing order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]\nOutput: [0,1,4] \nExplanation: \nPerson with index=2 has favoriteCompanies[2]=[\"google\",\"facebook\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] corresponding to the person with index 0. \nPerson with index=3 has favoriteCompanies[3]=[\"google\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] and favoriteCompanies[1]=[\"google\",\"microsoft\"]. \nOther lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].\n</pre> <p>Example 2:</p> <pre>\nInput: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]\nOutput: [0,1] \nExplanation: In this case favoriteCompanies[2]=[\"facebook\",\"google\"] is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"], therefore, the answer is [0,1].\n</pre> <p>Example 3:</p> <pre>\nInput: favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]\nOutput: [0,1,2,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= favoriteCompanies.length &lt;= 100</code></li> <li><code>1 &lt;= favoriteCompanies[i].length &lt;= 500</code></li> <li><code>1 &lt;= favoriteCompanies[i][j].length &lt;= 20</code></li> <li>All strings in <code>favoriteCompanies[i]</code> are distinct.</li> <li>All lists of favorite companies are distinct, that is, If we sort alphabetically each list then <code>favoriteCompanies[i] != favoriteCompanies[j].</code></li> <li>All strings consist of lowercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/1453/","title":"1453. Maximum Number of Darts Inside of a Circular Dartboard","text":"Problem <p>Alice is throwing <code>n</code> darts on a very large wall. You are given an array <code>darts</code> where <code>darts[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> is the position of the <code>i<sup>th</sup></code> dart that Alice threw on the wall.</p> <p>Bob knows the positions of the <code>n</code> darts on the wall. He wants to place a dartboard of radius <code>r</code> on the wall so that the maximum number of darts that Alice throws lie\u00a0on the dartboard.</p> <p>Given the integer <code>r</code>, return the maximum number of darts that can lie on the dartboard.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\nExplanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\nOutput: 5\nExplanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= darts.length &lt;= 100</code></li> <li><code>darts[i].length == 2</code></li> <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>All the <code>darts</code>\u00a0are unique</li> <li><code>1 &lt;= r &lt;= 5000</code></li> </ul>"},{"location":"LeetCode_Problems/1454/","title":"1454. Active Users","text":"Problem"},{"location":"LeetCode_Problems/1455/","title":"1455. Check If a Word Occurs As a Prefix of Any Word in a Sentence","text":"Problem <p>Given a <code>sentence</code> that consists of some words separated by a single space, and a <code>searchWord</code>, check if <code>searchWord</code> is a prefix of any word in <code>sentence</code>.</p> <p>Return the index of the word in <code>sentence</code> (1-indexed) where <code>searchWord</code> is a prefix of this word. If <code>searchWord</code> is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return <code>-1</code>.</p> <p>A prefix of a string <code>s</code> is any leading contiguous substring of <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: sentence = \"i love eating burger\", searchWord = \"burg\"\nOutput: 4\nExplanation: \"burg\" is prefix of \"burger\" which is the 4th word in the sentence.\n</pre> <p>Example 2:</p> <pre>\nInput: sentence = \"this problem is an easy problem\", searchWord = \"pro\"\nOutput: 2\nExplanation: \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.\n</pre> <p>Example 3:</p> <pre>\nInput: sentence = \"i am tired\", searchWord = \"you\"\nOutput: -1\nExplanation: \"you\" is not a prefix of any word in the sentence.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sentence.length &lt;= 100</code></li> <li><code>1 &lt;= searchWord.length &lt;= 10</code></li> <li><code>sentence</code> consists of lowercase English letters and spaces.</li> <li><code>searchWord</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1456/","title":"1456. Maximum Number of Vowels in a Substring of Given Length","text":"Problem <p>Given a string <code>s</code> and an integer <code>k</code>, return the maximum number of vowel letters in any substring of <code>s</code> with length <code>k</code>.</p> <p>Vowel letters in English are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abciiidef\", k = 3\nOutput: 3\nExplanation: The substring \"iii\" contains 3 vowel letters.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aeiou\", k = 2\nOutput: 2\nExplanation: Any substring of length 2 contains 2 vowels.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"leetcode\", k = 3\nOutput: 2\nExplanation: \"lee\", \"eet\" and \"ode\" contain 2 vowels.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> <li><code>1 &lt;= k &lt;= s.length</code></li> </ul>"},{"location":"LeetCode_Problems/1457/","title":"1457. Pseudo-Palindromic Paths in a Binary Tree","text":"Problem <p>Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.</p> <p>Return the number of pseudo-palindromic paths going from the root node to leaf nodes.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [2,3,1,3,1,null,1]\nOutput: 2 \nExplanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [2,1,1,1,3,null,null,null,null,null,1]\nOutput: 1 \nExplanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).\n</pre> <p>Example 3:</p> <pre>\nInput: root = [9]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/1458/","title":"1458. Max Dot Product of Two Subsequences","text":"Problem <p>Given two arrays <code>nums1</code>\u00a0and <code>nums2</code>.</p> <p>Return the maximum dot product\u00a0between\u00a0non-empty subsequences of nums1 and nums2 with the same length.</p> <p>A subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,\u00a0<code>[2,3,5]</code>\u00a0is a subsequence of\u00a0<code>[1,2,3,4,5]</code>\u00a0while <code>[1,5,3]</code>\u00a0is not).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [2,1,-2,5], nums2 = [3,0,-6]\nOutput: 18\nExplanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18.</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [3,-2], nums2 = [2,-6,7]\nOutput: 21\nExplanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21.</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [-1,-1], nums2 = [1,1]\nOutput: -1\nExplanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 500</code></li> <li><code>-1000 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1459/","title":"1459. Rectangles Area","text":"Problem"},{"location":"LeetCode_Problems/1460/","title":"1460. Make Two Arrays Equal by Reversing Subarrays","text":"Problem <p>You are given two integer arrays of equal length <code>target</code> and <code>arr</code>. In one step, you can select any non-empty subarray of <code>arr</code> and reverse it. You are allowed to make any number of steps.</p> <p>Return <code>true</code> if you can make <code>arr</code> equal to <code>target</code>\u00a0or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = [1,2,3,4], arr = [2,4,1,3]\nOutput: true\nExplanation: You can follow the next steps to convert arr to target:\n1- Reverse subarray [2,4,1], arr becomes [1,4,2,3]\n2- Reverse subarray [4,2], arr becomes [1,2,4,3]\n3- Reverse subarray [4,3], arr becomes [1,2,3,4]\nThere are multiple ways to convert arr to target, this is not the only way to do so.\n</pre> <p>Example 2:</p> <pre>\nInput: target = [7], arr = [7]\nOutput: true\nExplanation: arr is equal to target without any reverses.\n</pre> <p>Example 3:</p> <pre>\nInput: target = [3,7,9], arr = [3,7,11]\nOutput: false\nExplanation: arr does not have value 9 and it can never be converted to target.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>target.length == arr.length</code></li> <li><code>1 &lt;= target.length &lt;= 1000</code></li> <li><code>1 &lt;= target[i] &lt;= 1000</code></li> <li><code>1 &lt;= arr[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1461/","title":"1461. Check If a String Contains All Binary Codes of Size K","text":"Problem <p>Given a binary string <code>s</code> and an integer <code>k</code>, return <code>true</code> if every binary code of length <code>k</code> is a substring of <code>s</code>. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"00110110\", k = 2\nOutput: true\nExplanation: The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indices 0, 1, 3 and 2 respectively.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"0110\", k = 1\nOutput: true\nExplanation: The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring. \n</pre> <p>Example 3:</p> <pre>\nInput: s = \"0110\", k = 2\nOutput: false\nExplanation: The binary code \"00\" is of length 2 and does not exist in the array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> <li><code>1 &lt;= k &lt;= 20</code></li> </ul>"},{"location":"LeetCode_Problems/1462/","title":"1462. Course Schedule IV","text":"Problem <p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you must take course <code>a<sub>i</sub></code> first if you want to take course <code>b<sub>i</sub></code>.</p> <ul> <li>For example, the pair <code>[0, 1]</code> indicates that you have to take course <code>0</code> before you can take course <code>1</code>.</li> </ul> <p>Prerequisites can also be indirect. If course <code>a</code> is a prerequisite of course <code>b</code>, and course <code>b</code> is a prerequisite of course <code>c</code>, then course <code>a</code> is a prerequisite of course <code>c</code>.</p> <p>You are also given an array <code>queries</code> where <code>queries[j] = [u<sub>j</sub>, v<sub>j</sub>]</code>. For the <code>j<sup>th</sup></code> query, you should answer whether course <code>u<sub>j</sub></code> is a prerequisite of course <code>v<sub>j</sub></code> or not.</p> <p>Return a boolean array <code>answer</code>, where <code>answer[j]</code> is the answer to the <code>j<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]\nOutput: [false,true]\nExplanation: The pair [1, 0] indicates that you have to take course 1 before you can take course 0.\nCourse 0 is not a prerequisite of course 1, but the opposite is true.\n</pre> <p>Example 2:</p> <pre>\nInput: numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]\nOutput: [false,false]\nExplanation: There are no prerequisites, and each course is independent.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]\nOutput: [true,true]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= numCourses &lt;= 100</code></li> <li><code>0 &lt;= prerequisites.length &lt;= (numCourses * (numCourses - 1) / 2)</code></li> <li><code>prerequisites[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>All the pairs <code>[a<sub>i</sub>, b<sub>i</sub>]</code> are unique.</li> <li>The prerequisites graph has no cycles.</li> <li><code>1 &lt;= queries.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> </ul>"},{"location":"LeetCode_Problems/1463/","title":"1463. Cherry Pickup II","text":"Problem <p>You are given a <code>rows x cols</code> matrix <code>grid</code> representing a field of cherries where <code>grid[i][j]</code> represents the number of cherries that you can collect from the <code>(i, j)</code> cell.</p> <p>You have two robots that can collect cherries for you:</p> <ul> <li>Robot #1 is located at the top-left corner <code>(0, 0)</code>, and</li> <li>Robot #2 is located at the top-right corner <code>(0, cols - 1)</code>.</li> </ul> <p>Return the maximum number of cherries collection using both robots by following the rules below:</p> <ul> <li>From a cell <code>(i, j)</code>, robots can move to cell <code>(i + 1, j - 1)</code>, <code>(i + 1, j)</code>, or <code>(i + 1, j + 1)</code>.</li> <li>When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.</li> <li>When both robots stay in the same cell, only one takes the cherries.</li> <li>Both robots cannot move outside of the grid at any moment.</li> <li>Both robots should reach the bottom row in <code>grid</code>.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]\nOutput: 24\nExplanation: Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\nCherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\nTotal of cherries: 12 + 12 = 24.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]\nOutput: 28\nExplanation: Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.\nCherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.\nTotal of cherries: 17 + 11 = 28.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>rows == grid.length</code></li> <li><code>cols == grid[i].length</code></li> <li><code>2 &lt;= rows, cols &lt;= 70</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1464/","title":"1464. Maximum Product of Two Elements in an Array","text":"Problem <p>Given the array of integers <code>nums</code>, you will choose two different indices <code>i</code> and <code>j</code> of that array. Return the maximum value of <code>(nums[i]-1)*(nums[j]-1)</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,4,5,2]\nOutput: 12 \nExplanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,5,4,5]\nOutput: 16\nExplanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,7]\nOutput: 12\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 500</code></li> <li><code>1 &lt;= nums[i] &lt;= 10^3</code></li> </ul>"},{"location":"LeetCode_Problems/1465/","title":"1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts","text":"Problem <p>You are given a rectangular cake of size <code>h x w</code> and two arrays of integers <code>horizontalCuts</code> and <code>verticalCuts</code> where:</p> <ul> <li><code>horizontalCuts[i]</code> is the distance from the top of the rectangular cake to the <code>i<sup>th</sup></code> horizontal cut and similarly, and</li> <li><code>verticalCuts[j]</code> is the distance from the left of the rectangular cake to the <code>j<sup>th</sup></code> vertical cut.</li> </ul> <p>Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays <code>horizontalCuts</code> and <code>verticalCuts</code>. Since the answer can be a large number, return this modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]\nOutput: 4 \nExplanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]\nOutput: 6\nExplanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.\n</pre> <p>Example 3:</p> <pre>\nInput: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]\nOutput: 9\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= h, w &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= horizontalCuts.length &lt;= min(h - 1, 10<sup>5</sup>)</code></li> <li><code>1 &lt;= verticalCuts.length &lt;= min(w - 1, 10<sup>5</sup>)</code></li> <li><code>1 &lt;= horizontalCuts[i] &lt; h</code></li> <li><code>1 &lt;= verticalCuts[i] &lt; w</code></li> <li>All the elements in <code>horizontalCuts</code> are distinct.</li> <li>All the elements in <code>verticalCuts</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1466/","title":"1466. Reorder Routes to Make All Paths Lead to the City Zero","text":"Problem <p>There are <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.</p> <p>Roads are represented by <code>connections</code> where <code>connections[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents a road from city <code>a<sub>i</sub></code> to city <code>b<sub>i</sub></code>.</p> <p>This year, there will be a big event in the capital (city <code>0</code>), and many people want to travel to this city.</p> <p>Your task consists of reorienting some roads such that each city can visit the city <code>0</code>. Return the minimum number of edges changed.</p> <p>It's guaranteed that each city can reach city <code>0</code> after reorder.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]\nOutput: 3\nExplanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]\nOutput: 2\nExplanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).\n</pre> <p>Example 3:</p> <pre>\nInput: n = 3, connections = [[1,0],[2,0]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>connections.length == n - 1</code></li> <li><code>connections[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> </ul>"},{"location":"LeetCode_Problems/1467/","title":"1467. Probability of a Two Boxes Having The Same Number of Distinct Balls","text":"Problem <p>Given <code>2n</code> balls of <code>k</code> distinct colors. You will be given an integer array <code>balls</code> of size <code>k</code> where <code>balls[i]</code> is the number of balls of color <code>i</code>.</p> <p>All the balls will be shuffled uniformly at random, then we will distribute the first <code>n</code> balls to the first box and the remaining <code>n</code> balls to the other box (Please read the explanation of the second example carefully).</p> <p>Please note that the two boxes are considered different. For example, if we have two balls of colors <code>a</code> and <code>b</code>, and two boxes <code>[]</code> and <code>()</code>, then the distribution <code>[a] (b)</code> is considered different than the distribution <code>[b] (a) </code>(Please read the explanation of the first example carefully).</p> <p>Return the probability that the two boxes have the same number of distinct balls. Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted as correct.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: balls = [1,1]\nOutput: 1.00000\nExplanation: Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1\n</pre> <p>Example 2:</p> <pre>\nInput: balls = [2,1,1]\nOutput: 0.66667\nExplanation: We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that, we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667\n</pre> <p>Example 3:</p> <pre>\nInput: balls = [1,2,1,2]\nOutput: 0.60000\nExplanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= balls.length &lt;= 8</code></li> <li><code>1 &lt;= balls[i] &lt;= 6</code></li> <li><code>sum(balls)</code> is even.</li> </ul>"},{"location":"LeetCode_Problems/1468/","title":"1468. Calculate Salaries","text":"Problem"},{"location":"LeetCode_Problems/1469/","title":"1469. Find All The Lonely Nodes","text":"Problem"},{"location":"LeetCode_Problems/1470/","title":"1470. Shuffle the Array","text":"Problem <p>Given the array <code>nums</code> consisting of <code>2n</code> elements in the form <code>[x<sub>1</sub>,x<sub>2</sub>,...,x<sub>n</sub>,y<sub>1</sub>,y<sub>2</sub>,...,y<sub>n</sub>]</code>.</p> <p>Return the array in the form <code>[x<sub>1</sub>,y<sub>1</sub>,x<sub>2</sub>,y<sub>2</sub>,...,x<sub>n</sub>,y<sub>n</sub>]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,5,1,3,4,7], n = 3\nOutput: [2,3,5,4,1,7] \nExplanation: Since x<sub>1</sub>=2, x<sub>2</sub>=5, x<sub>3</sub>=1, y<sub>1</sub>=3, y<sub>2</sub>=4, y<sub>3</sub>=7 then the answer is [2,3,5,4,1,7].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4,4,3,2,1], n = 4\nOutput: [1,4,2,3,3,2,4,1]\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,2,2], n = 2\nOutput: [1,2,1,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>nums.length == 2n</code></li> <li><code>1 &lt;= nums[i] &lt;= 10^3</code></li> </ul>"},{"location":"LeetCode_Problems/1471/","title":"1471. The k Strongest Values in an Array","text":"Problem <p>Given an array of integers <code>arr</code> and an integer <code>k</code>.</p> <p>A value <code>arr[i]</code> is said to be stronger than a value <code>arr[j]</code> if <code>|arr[i] - m| &gt; |arr[j] - m|</code> where <code>m</code> is the median of the array. If <code>|arr[i] - m| == |arr[j] - m|</code>, then <code>arr[i]</code> is said to be stronger than <code>arr[j]</code> if <code>arr[i] &gt; arr[j]</code>.</p> <p>Return a list of the strongest <code>k</code> values in the array. return the answer in any arbitrary order.</p> <p>Median is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position <code>((n - 1) / 2)</code> in the sorted list (0-indexed).</p> <ul> <li>For <code>arr = [6, -3, 7, 2, 11]</code>, <code>n = 5</code> and the median is obtained by sorting the array <code>arr = [-3, 2, 6, 7, 11]</code> and the median is <code>arr[m]</code> where <code>m = ((5 - 1) / 2) = 2</code>. The median is <code>6</code>.</li> <li>For <code>arr = [-7, 22, 17,\u20093]</code>, <code>n = 4</code> and the median is obtained by sorting the array <code>arr = [-7, 3, 17, 22]</code> and the median is <code>arr[m]</code> where <code>m = ((4 - 1) / 2) = 1</code>. The median is <code>3</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,3,4,5], k = 2\nOutput: [5,1]\nExplanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.\nPlease note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 &gt; 1.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,1,3,5,5], k = 2\nOutput: [5,5]\nExplanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [6,7,11,7,6,8], k = 5\nOutput: [11,8,6,6,7]\nExplanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].\nAny permutation of [11,8,6,6,7] is accepted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= arr.length</code></li> </ul>"},{"location":"LeetCode_Problems/1472/","title":"1472. Design Browser History","text":"Problem <p>You have a browser of one tab where you start on the <code>homepage</code> and you can visit another <code>url</code>, get back in the history number of <code>steps</code> or move forward in the history number of <code>steps</code>.</p> <p>Implement the <code>BrowserHistory</code> class:</p> <ul> <li><code>BrowserHistory(string homepage)</code> Initializes the object with the <code>homepage</code>\u00a0of the browser.</li> <li><code>void visit(string url)</code>\u00a0Visits\u00a0<code>url</code> from the current page. It clears up all the forward history.</li> <li><code>string back(int steps)</code>\u00a0Move <code>steps</code> back in history. If you can only return <code>x</code> steps in the history and <code>steps &gt; x</code>, you will\u00a0return only <code>x</code> steps. Return the current <code>url</code>\u00a0after moving back in history at most <code>steps</code>.</li> <li><code>string forward(int steps)</code>\u00a0Move <code>steps</code> forward in history. If you can only forward <code>x</code> steps in the history and <code>steps &gt; x</code>, you will\u00a0forward only\u00a0<code>x</code> steps. Return the current <code>url</code>\u00a0after forwarding in history at most <code>steps</code>.</li> </ul> <p> </p> <p>Example:</p> <pre>\nInput:\n[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]\nOutput:\n[null,null,null,null,\"facebook.com\",\"google.com\",\"facebook.com\",null,\"linkedin.com\",\"google.com\",\"leetcode.com\"]\n\nExplanation:\nBrowserHistory browserHistory = new BrowserHistory(\"leetcode.com\");\nbrowserHistory.visit(\"google.com\");       // You are in \"leetcode.com\". Visit \"google.com\"\nbrowserHistory.visit(\"facebook.com\");     // You are in \"google.com\". Visit \"facebook.com\"\nbrowserHistory.visit(\"youtube.com\");      // You are in \"facebook.com\". Visit \"youtube.com\"\nbrowserHistory.back(1);                   // You are in \"youtube.com\", move back to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.back(1);                   // You are in \"facebook.com\", move back to \"google.com\" return \"google.com\"\nbrowserHistory.forward(1);                // You are in \"google.com\", move forward to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.visit(\"linkedin.com\");     // You are in \"facebook.com\". Visit \"linkedin.com\"\nbrowserHistory.forward(2);                // You are in \"linkedin.com\", you cannot move forward any steps.\nbrowserHistory.back(2);                   // You are in \"linkedin.com\", move back two steps to \"facebook.com\" then to \"google.com\". return \"google.com\"\nbrowserHistory.back(7);                   // You are in \"google.com\", you can move back only one step to \"leetcode.com\". return \"leetcode.com\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= homepage.length &lt;= 20</code></li> <li><code>1 &lt;= url.length &lt;= 20</code></li> <li><code>1 &lt;= steps &lt;= 100</code></li> <li><code>homepage</code> and <code>url</code> consist of\u00a0 '.' or lower case English letters.</li> <li>At most <code>5000</code>\u00a0calls will be made to <code>visit</code>, <code>back</code>, and <code>forward</code>.</li> </ul>"},{"location":"LeetCode_Problems/1473/","title":"1473. Paint House III","text":"Problem <p>There is a row of <code>m</code> houses in a small city, each house must be painted with one of the <code>n</code> colors (labeled from <code>1</code> to <code>n</code>), some houses that have been painted last summer should not be painted again.</p> <p>A neighborhood is a maximal group of continuous houses that are painted with the same color.</p> <ul> <li>For example: <code>houses = [1,2,2,3,3,2,1,1]</code> contains <code>5</code> neighborhoods <code>[{1}, {2,2}, {3,3}, {2}, {1,1}]</code>.</li> </ul> <p>Given an array <code>houses</code>, an <code>m x n</code> matrix <code>cost</code> and an integer <code>target</code> where:</p> <ul> <li><code>houses[i]</code>: is the color of the house <code>i</code>, and <code>0</code> if the house is not painted yet.</li> <li><code>cost[i][j]</code>: is the cost of paint the house <code>i</code> with the color <code>j + 1</code>.</li> </ul> <p>Return the minimum cost of painting all the remaining houses in such a way that there are exactly <code>target</code> neighborhoods. If it is not possible, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\nOutput: 9\nExplanation: Paint houses of this way [1,2,2,1,1]\nThis array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].\nCost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.\n</pre> <p>Example 2:</p> <pre>\nInput: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\nOutput: 11\nExplanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]\nThis array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. \nCost of paint the first and last house (10 + 1) = 11.\n</pre> <p>Example 3:</p> <pre>\nInput: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3\nOutput: -1\nExplanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == houses.length == cost.length</code></li> <li><code>n == cost[i].length</code></li> <li><code>1 &lt;= m &lt;= 100</code></li> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>1 &lt;= target &lt;= m</code></li> <li><code>0 &lt;= houses[i] &lt;= n</code></li> <li><code>1 &lt;= cost[i][j] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1474/","title":"1474. Delete N Nodes After M Nodes of a Linked List","text":"Problem"},{"location":"LeetCode_Problems/1475/","title":"1475. Final Prices With a Special Discount in a Shop","text":"Problem <p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of the <code>i<sup>th</sup></code> item in a shop.</p> <p>There is a special discount for items in the shop. If you buy the <code>i<sup>th</sup></code> item, then you will receive a discount equivalent to <code>prices[j]</code> where <code>j</code> is the minimum index such that <code>j &gt; i</code> and <code>prices[j] &lt;= prices[i]</code>. Otherwise, you will not receive any discount at all.</p> <p>Return an integer array <code>answer</code> where <code>answer[i]</code> is the final price you will pay for the <code>i<sup>th</sup></code> item of the shop, considering the special discount.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: prices = [8,4,6,2,3]\nOutput: [4,2,4,2,3]\nExplanation: \nFor item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.\nFor item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.\nFor item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.\nFor items 3 and 4 you will not receive any discount at all.\n</pre> <p>Example 2:</p> <pre>\nInput: prices = [1,2,3,4,5]\nOutput: [1,2,3,4,5]\nExplanation: In this case, for all items, you will not receive any discount at all.\n</pre> <p>Example 3:</p> <pre>\nInput: prices = [10,1,1,6]\nOutput: [9,0,1,6]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 500</code></li> <li><code>1 &lt;= prices[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1476/","title":"1476. Subrectangle Queries","text":"Problem <p>Implement the class <code>SubrectangleQueries</code>\u00a0which receives a <code>rows x cols</code> rectangle as a matrix of integers in the constructor and supports two methods:</p> <p>1.<code>\u00a0updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)</code></p> <ul> <li>Updates all values with <code>newValue</code> in the subrectangle whose upper left coordinate is <code>(row1,col1)</code> and bottom right coordinate is <code>(row2,col2)</code>.</li> </ul> <p>2.<code>\u00a0getValue(int row, int col)</code></p> <ul> <li>Returns the current value of the coordinate <code>(row,col)</code> from\u00a0the rectangle.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]\nOutput\n[null,1,null,5,5,null,10,5]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5 \nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5   5   5\n// 5   5   5\n// 5   5   5\n// 10  10  10 \nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5\n</pre> <p>Example 2:</p> <pre>\nInput\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]\nOutput\n[null,1,null,100,100,null,20]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>There will be at most <code>500</code>\u00a0operations considering both methods:\u00a0<code>updateSubrectangle</code> and <code>getValue</code>.</li> <li><code>1 &lt;= rows, cols &lt;= 100</code></li> <li><code>rows ==\u00a0rectangle.length</code></li> <li><code>cols == rectangle[i].length</code></li> <li><code>0 &lt;= row1 &lt;= row2 &lt; rows</code></li> <li><code>0 &lt;= col1 &lt;= col2 &lt; cols</code></li> <li><code>1 &lt;= newValue, rectangle[i][j] &lt;= 10^9</code></li> <li><code>0 &lt;= row &lt; rows</code></li> <li><code>0 &lt;= col &lt; cols</code></li> </ul>"},{"location":"LeetCode_Problems/1477/","title":"1477. Find Two Non-overlapping Sub-arrays Each With Target Sum","text":"Problem <p>You are given an array of integers <code>arr</code> and an integer <code>target</code>.</p> <p>You have to find two non-overlapping sub-arrays of <code>arr</code> each with a sum equal <code>target</code>. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.</p> <p>Return the minimum sum of the lengths of the two required sub-arrays, or return <code>-1</code> if you cannot find such two sub-arrays.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [3,2,2,4,3], target = 3\nOutput: 2\nExplanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [7,3,4,7], target = 7\nOutput: 2\nExplanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [4,3,2,6,2,3,4], target = 6\nOutput: -1\nExplanation: We have only one sub-array of sum = 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 1000</code></li> <li><code>1 &lt;= target &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1478/","title":"1478. Allocate Mailboxes","text":"Problem <p>Given the array <code>houses</code> where <code>houses[i]</code> is the location of the <code>i<sup>th</sup></code> house along a street and an integer <code>k</code>, allocate <code>k</code> mailboxes in the street.</p> <p>Return the minimum total distance between each house and its nearest mailbox.</p> <p>The test cases are generated so that the answer fits in a 32-bit integer.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: houses = [1,4,8,10,20], k = 3\nOutput: 5\nExplanation: Allocate mailboxes in position 3, 9 and 20.\nMinimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: houses = [2,3,5,12,18], k = 2\nOutput: 9\nExplanation: Allocate mailboxes in position 3 and 14.\nMinimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= houses.length &lt;= 100</code></li> <li><code>1 &lt;= houses[i] &lt;= 10<sup>4</sup></code></li> <li>All the integers of <code>houses</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/1479/","title":"1479. Sales by Day of the Week","text":"Problem"},{"location":"LeetCode_Problems/1480/","title":"1480. Running Sum of 1d Array","text":"Problem <p>Given an array <code>nums</code>. We define a running sum of an array as\u00a0<code>runningSum[i] = sum(nums[0]\u2026nums[i])</code>.</p> <p>Return the running sum of <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: [1,3,6,10]\nExplanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1,1,1]\nOutput: [1,2,3,4,5]\nExplanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,1,2,10,1]\nOutput: [3,4,6,16,17]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-10^6\u00a0&lt;= nums[i] &lt;=\u00a010^6</code></li> </ul>"},{"location":"LeetCode_Problems/1481/","title":"1481. Least Number of Unique Integers after K Removals","text":"Problem <p>Given an array of integers\u00a0<code>arr</code>\u00a0and an integer <code>k</code>.\u00a0Find the least number of unique integers\u00a0after removing exactly <code>k</code> elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [5,5,4], k = 1\nOutput: 1\nExplanation: Remove the single 4, only 5 is left.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [4,3,1,1,3,3,2], k = 3\nOutput: 2\nExplanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length\u00a0&lt;= 10^5</code></li> <li><code>1 &lt;= arr[i] &lt;= 10^9</code></li> <li><code>0 &lt;= k\u00a0&lt;= arr.length</code></li> </ul>"},{"location":"LeetCode_Problems/1482/","title":"1482. Minimum Number of Days to Make m Bouquets","text":"Problem <p>You are given an integer array <code>bloomDay</code>, an integer <code>m</code> and an integer <code>k</code>.</p> <p>You want to make <code>m</code> bouquets. To make a bouquet, you need to use <code>k</code> adjacent flowers from the garden.</p> <p>The garden consists of <code>n</code> flowers, the <code>i<sup>th</sup></code> flower will bloom in the <code>bloomDay[i]</code> and then can be used in exactly one bouquet.</p> <p>Return the minimum number of days you need to wait to be able to make <code>m</code> bouquets from the garden. If it is impossible to make m bouquets return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: bloomDay = [1,10,3,10,2], m = 3, k = 1\nOutput: 3\nExplanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.\nWe need 3 bouquets each should contain 1 flower.\nAfter day 1: [x, _, _, _, _]   // we can only make one bouquet.\nAfter day 2: [x, _, _, _, x]   // we can only make two bouquets.\nAfter day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: bloomDay = [1,10,3,10,2], m = 3, k = 2\nOutput: -1\nExplanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.\n</pre> <p>Example 3:</p> <pre>\nInput: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3\nOutput: 12\nExplanation: We need 2 bouquets each should have 3 flowers.\nHere is the garden after the 7 and 12 days:\nAfter day 7: [x, x, x, x, _, x, x]\nWe can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\nAfter day 12: [x, x, x, x, x, x, x]\nIt is obvious that we can make two bouquets in different ways.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>bloomDay.length == n</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= bloomDay[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= m &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= k &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/1483/","title":"1483. Kth Ancestor of a Tree Node","text":"Problem <p>You are given a tree with <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> in the form of a parent array <code>parent</code> where <code>parent[i]</code> is the parent of <code>i<sup>th</sup></code> node. The root of the tree is node <code>0</code>. Find the <code>k<sup>th</sup></code> ancestor of a given node.</p> <p>The <code>k<sup>th</sup></code> ancestor of a tree node is the <code>k<sup>th</sup></code> node in the path from that node to the root node.</p> <p>Implement the <code>TreeAncestor</code> class:</p> <ul> <li><code>TreeAncestor(int n, int[] parent)</code> Initializes the object with the number of nodes in the tree and the parent array.</li> <li><code>int getKthAncestor(int node, int k)</code> return the <code>k<sup>th</sup></code> ancestor of the given node <code>node</code>. If there is no such ancestor, return <code>-1</code>.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"TreeAncestor\", \"getKthAncestor\", \"getKthAncestor\", \"getKthAncestor\"]\n[[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]]\nOutput\n[null, 1, 0, -1]\n\nExplanation\nTreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\ntreeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3\ntreeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5\ntreeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>parent.length == n</code></li> <li><code>parent[0] == -1</code></li> <li><code>0 &lt;= parent[i] &lt; n</code> for all <code>0 &lt; i &lt; n</code></li> <li><code>0 &lt;= node &lt; n</code></li> <li>There will be at most <code>5 * 10<sup>4</sup></code> queries.</li> </ul>"},{"location":"LeetCode_Problems/1484/","title":"1484. Group Sold Products By The Date","text":"Problem <p>Table <code>Activities</code>:</p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| sell_date   | date    |\n| product     | varchar |\n+-------------+---------+\nThere is no primary key (column with unique values) for this table. It may contain duplicates.\nEach row of this table contains the product name and the date it was sold in a market.\n</pre> <p> </p> <p>Write a solution to find for each date the number of different products sold and their names.</p> <p>The sold products names for each date should be sorted lexicographically.</p> <p>Return the result table ordered by <code>sell_date</code>.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nActivities table:\n+------------+------------+\n| sell_date  | product     |\n+------------+------------+\n| 2020-05-30 | Headphone  |\n| 2020-06-01 | Pencil     |\n| 2020-06-02 | Mask       |\n| 2020-05-30 | Basketball |\n| 2020-06-01 | Bible      |\n| 2020-06-02 | Mask       |\n| 2020-05-30 | T-Shirt    |\n+------------+------------+\nOutput: \n+------------+----------+------------------------------+\n| sell_date  | num_sold | products                     |\n+------------+----------+------------------------------+\n| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |\n| 2020-06-01 | 2        | Bible,Pencil                 |\n| 2020-06-02 | 1        | Mask                         |\n+------------+----------+------------------------------+\nExplanation: \nFor 2020-05-30, Sold items were (Headphone, Basketball, T-shirt), we sort them lexicographically and separate them by a comma.\nFor 2020-06-01, Sold items were (Pencil, Bible), we sort them lexicographically and separate them by a comma.\nFor 2020-06-02, the Sold item is (Mask), we just return it.\n</pre>"},{"location":"LeetCode_Problems/1485/","title":"1485. Clone Binary Tree With Random Pointer","text":"Problem"},{"location":"LeetCode_Problems/1486/","title":"1486. XOR Operation in an Array","text":"Problem <p>You are given an integer <code>n</code> and an integer <code>start</code>.</p> <p>Define an array <code>nums</code> where <code>nums[i] = start + 2 * i</code> (0-indexed) and <code>n == nums.length</code>.</p> <p>Return the bitwise XOR of all elements of <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5, start = 0\nOutput: 8\nExplanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere \"^\" corresponds to bitwise XOR operator.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4, start = 3\nOutput: 8\nExplanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= start &lt;= 1000</code></li> <li><code>n == nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/1487/","title":"1487. Making File Names Unique","text":"Problem <p>Given an array of strings <code>names</code> of size <code>n</code>. You will create <code>n</code> folders in your file system such that, at the <code>i<sup>th</sup></code> minute, you will create a folder with the name <code>names[i]</code>.</p> <p>Since two files cannot have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of <code>(k)</code>, where, <code>k</code> is the smallest positive integer such that the obtained name remains unique.</p> <p>Return an array of strings of length <code>n</code> where <code>ans[i]</code> is the actual name the system will assign to the <code>i<sup>th</sup></code> folder when you create it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\nOutput: [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\nExplanation: Let's see how the file system creates folder names:\n\"pes\" --&gt; not assigned before, remains \"pes\"\n\"fifa\" --&gt; not assigned before, remains \"fifa\"\n\"gta\" --&gt; not assigned before, remains \"gta\"\n\"pes(2019)\" --&gt; not assigned before, remains \"pes(2019)\"\n</pre> <p>Example 2:</p> <pre>\nInput: names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]\nOutput: [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]\nExplanation: Let's see how the file system creates folder names:\n\"gta\" --&gt; not assigned before, remains \"gta\"\n\"gta(1)\" --&gt; not assigned before, remains \"gta(1)\"\n\"gta\" --&gt; the name is reserved, system adds (k), since \"gta(1)\" is also reserved, systems put k = 2. it becomes \"gta(2)\"\n\"avalon\" --&gt; not assigned before, remains \"avalon\"\n</pre> <p>Example 3:</p> <pre>\nInput: names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]\nOutput: [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]\nExplanation: When the last folder is created, the smallest positive valid k is 4, and it becomes \"onepiece(4)\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= names.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= names[i].length &lt;= 20</code></li> <li><code>names[i]</code> consists of lowercase English letters, digits, and/or round brackets.</li> </ul>"},{"location":"LeetCode_Problems/1488/","title":"1488. Avoid Flood in The City","text":"Problem <p>Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the <code>nth</code> lake, the <code>nth</code> lake becomes full of water. If it rains over a lake that is full of water, there will be a flood. Your goal is to avoid floods in any lake.</p> <p>Given an integer array <code>rains</code> where:</p> <ul> <li><code>rains[i] &gt; 0</code> means there will be rains over the <code>rains[i]</code> lake.</li> <li><code>rains[i] == 0</code> means there are no rains this day and you can choose one lake this day and dry it.</li> </ul> <p>Return an array <code>ans</code> where:</p> <ul> <li><code>ans.length == rains.length</code></li> <li><code>ans[i] == -1</code> if <code>rains[i] &gt; 0</code>.</li> <li><code>ans[i]</code> is the lake you choose to dry in the <code>ith</code> day if <code>rains[i] == 0</code>.</li> </ul> <p>If there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.</p> <p>Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rains = [1,2,3,4]\nOutput: [-1,-1,-1,-1]\nExplanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day full lakes are [1,2,3]\nAfter the fourth day full lakes are [1,2,3,4]\nThere's no day to dry any lake and there is no flood in any lake.\n</pre> <p>Example 2:</p> <pre>\nInput: rains = [1,2,0,0,2,1]\nOutput: [-1,-1,2,1,-1,-1]\nExplanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day, we dry lake 2. Full lakes are [1]\nAfter the fourth day, we dry lake 1. There is no full lakes.\nAfter the fifth day, full lakes are [2].\nAfter the sixth day, full lakes are [1,2].\nIt is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.\n</pre> <p>Example 3:</p> <pre>\nInput: rains = [1,2,0,1,2]\nOutput: []\nExplanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.\nAfter that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rains.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= rains[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1489/","title":"1489. Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree","text":"Problem <p>Given a weighted undirected connected graph with <code>n</code>\u00a0vertices numbered from <code>0</code> to <code>n - 1</code>,\u00a0and an array <code>edges</code>\u00a0where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, weight<sub>i</sub>]</code> represents a bidirectional and weighted edge between nodes\u00a0<code>a<sub>i</sub></code>\u00a0and <code>b<sub>i</sub></code>. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles\u00a0and with the minimum possible total edge weight.</p> <p>Find all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a\u00a0critical edge. On\u00a0the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.</p> <p>Note that you can return the indices of the edges in any order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]\nOutput: [[0,1],[2,3,4,5]]\nExplanation: The figure above describes the graph.\nThe following figure shows all the possible MSTs:\n\nNotice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.\nThe edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]\nOutput: [[],[0,1,2,3]]\nExplanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= edges.length &lt;= min(200, n * (n - 1) / 2)</code></li> <li><code>edges[i].length == 3</code></li> <li><code>0 &lt;= a<sub>i</sub> &lt; b<sub>i</sub> &lt; n</code></li> <li><code>1 &lt;= weight<sub>i</sub>\u00a0&lt;= 1000</code></li> <li>All pairs <code>(a<sub>i</sub>, b<sub>i</sub>)</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1490/","title":"1490. Clone N-ary Tree","text":"Problem"},{"location":"LeetCode_Problems/1491/","title":"1491. Average Salary Excluding the Minimum and Maximum Salary","text":"Problem <p>You are given an array of unique integers <code>salary</code> where <code>salary[i]</code> is the salary of the <code>i<sup>th</sup></code> employee.</p> <p>Return the average salary of employees excluding the minimum and maximum salary. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: salary = [4000,3000,1000,2000]\nOutput: 2500.00000\nExplanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500\n</pre> <p>Example 2:</p> <pre>\nInput: salary = [1000,2000,3000]\nOutput: 2000.00000\nExplanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= salary.length &lt;= 100</code></li> <li><code>1000 &lt;= salary[i] &lt;= 10<sup>6</sup></code></li> <li>All the integers of <code>salary</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/1492/","title":"1492. The kth Factor of n","text":"Problem <p>You are given two positive integers <code>n</code> and <code>k</code>. A factor of an integer <code>n</code> is defined as an integer <code>i</code> where <code>n % i == 0</code>.</p> <p>Consider a list of all factors of <code>n</code> sorted in ascending order, return the <code>k<sup>th</sup></code> factor in this list or return <code>-1</code> if <code>n</code> has less than <code>k</code> factors.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 12, k = 3\nOutput: 3\nExplanation: Factors list is [1, 2, 3, 4, 6, 12], the 3<sup>rd</sup> factor is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 7, k = 2\nOutput: 7\nExplanation: Factors list is [1, 7], the 2<sup>nd</sup> factor is 7.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 4, k = 4\nOutput: -1\nExplanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= n &lt;= 1000</code></li> </ul> <p> </p> <p>Follow up:</p> <p>Could you solve this problem in less than O(n) complexity?</p>"},{"location":"LeetCode_Problems/1493/","title":"1493. Longest Subarray of 1's After Deleting One Element","text":"Problem <p>Given a binary array <code>nums</code>, you should delete one element from it.</p> <p>Return the size of the longest non-empty subarray containing only <code>1</code>'s in the resulting array. Return <code>0</code> if there is no such subarray.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,0,1]\nOutput: 3\nExplanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1,1,1,0,1,1,0,1]\nOutput: 5\nExplanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,1]\nOutput: 2\nExplanation: You must delete one element.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1494/","title":"1494. Parallel Courses II","text":"Problem <p>You are given an integer <code>n</code>, which indicates that there are <code>n</code> courses labeled from <code>1</code> to <code>n</code>. You are also given an array <code>relations</code> where <code>relations[i] = [prevCourse<sub>i</sub>, nextCourse<sub>i</sub>]</code>, representing a prerequisite relationship between course <code>prevCourse<sub>i</sub></code> and course <code>nextCourse<sub>i</sub></code>: course <code>prevCourse<sub>i</sub></code> has to be taken before course <code>nextCourse<sub>i</sub></code>. Also, you are given the integer <code>k</code>.</p> <p>In one semester, you can take at most <code>k</code> courses as long as you have taken all the prerequisites in the previous semesters for the courses you are taking.</p> <p>Return the minimum number of semesters needed to take all courses. The testcases will be generated such that it is possible to take every course.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, relations = [[2,1],[3,1],[1,4]], k = 2\nOutput: 3\nExplanation: The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3.\nIn the second semester, you can take course 1.\nIn the third semester, you can take course 4.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k = 2\nOutput: 4\nExplanation: The figure above represents the given graph.\nIn the first semester, you can only take courses 2 and 3 since you cannot take more than two per semester.\nIn the second semester, you can take course 4.\nIn the third semester, you can take course 1.\nIn the fourth semester, you can take course 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 15</code></li> <li><code>1 &lt;= k &lt;= n</code></li> <li><code>0 &lt;= relations.length &lt;= n * (n-1) / 2</code></li> <li><code>relations[i].length == 2</code></li> <li><code>1 &lt;= prevCourse<sub>i</sub>, nextCourse<sub>i</sub> &lt;= n</code></li> <li><code>prevCourse<sub>i</sub> != nextCourse<sub>i</sub></code></li> <li>All the pairs <code>[prevCourse<sub>i</sub>, nextCourse<sub>i</sub>]</code> are unique.</li> <li>The given graph is a directed acyclic graph.</li> </ul>"},{"location":"LeetCode_Problems/1495/","title":"1495. Friendly Movies Streamed Last Month","text":"Problem"},{"location":"LeetCode_Problems/1496/","title":"1496. Path Crossing","text":"Problem <p>Given a string <code>path</code>, where <code>path[i] = 'N'</code>, <code>'S'</code>, <code>'E'</code> or <code>'W'</code>, each representing moving one unit north, south, east, or west, respectively. You start at the origin <code>(0, 0)</code> on a 2D plane and walk on the path specified by <code>path</code>.</p> <p>Return <code>true</code> if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. Return <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: path = \"NES\"\nOutput: false \nExplanation: Notice that the path doesn't cross any point more than once.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: path = \"NESWW\"\nOutput: true\nExplanation: Notice that the path visits the origin twice.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= path.length &lt;= 10<sup>4</sup></code></li> <li><code>path[i]</code> is either <code>'N'</code>, <code>'S'</code>, <code>'E'</code>, or <code>'W'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1497/","title":"1497. Check If Array Pairs Are Divisible by k","text":"Problem <p>Given an array of integers <code>arr</code> of even length <code>n</code> and an integer <code>k</code>.</p> <p>We want to divide the array into exactly <code>n / 2</code> pairs such that the sum of each pair is divisible by <code>k</code>.</p> <p>Return <code>true</code> If you can find a way to do that or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,3,4,5,10,6,7,8,9], k = 5\nOutput: true\nExplanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2,3,4,5,6], k = 7\nOutput: true\nExplanation: Pairs are (1,6),(2,5) and(3,4).\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [1,2,3,4,5,6], k = 10\nOutput: false\nExplanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>arr.length == n</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>n</code> is even.</li> <li><code>-10<sup>9</sup> &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1498/","title":"1498. Number of Subsequences That Satisfy the Given Sum Condition","text":"Problem <p>You are given an array of integers <code>nums</code> and an integer <code>target</code>.</p> <p>Return the number of non-empty subsequences of <code>nums</code> such that the sum of the minimum and maximum element on it is less or equal to <code>target</code>. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,5,6,7], target = 9\nOutput: 4\nExplanation: There are 4 subsequences that satisfy the condition.\n[3] -&gt; Min value + max value &lt;= target (3 + 3 &lt;= 9)\n[3,5] -&gt; (3 + 5 &lt;= 9)\n[3,5,6] -&gt; (3 + 6 &lt;= 9)\n[3,6] -&gt; (3 + 6 &lt;= 9)\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,3,6,8], target = 10\nOutput: 6\nExplanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,3,3,4,6,7], target = 12\nOutput: 61\nExplanation: There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).\nNumber of valid subsequences (63 - 2 = 61).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= target &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1499/","title":"1499. Max Value of Equation","text":"Problem <p>You are given an array <code>points</code> containing the coordinates of points on a 2D plane, sorted by the x-values, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> such that <code>x<sub>i</sub> &lt; x<sub>j</sub></code> for all <code>1 &lt;= i &lt; j &lt;= points.length</code>. You are also given an integer <code>k</code>.</p> <p>Return the maximum value of the equation <code>y<sub>i</sub> + y<sub>j</sub> + |x<sub>i</sub> - x<sub>j</sub>|</code> where <code>|x<sub>i</sub> - x<sub>j</sub>| &lt;= k</code> and <code>1 &lt;= i &lt; j &lt;= points.length</code>.</p> <p>It is guaranteed that there exists at least one pair of points that satisfy the constraint <code>|x<sub>i</sub> - x<sub>j</sub>| &lt;= k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1\nOutput: 4\nExplanation: The first two points satisfy the condition |x<sub>i</sub> - x<sub>j</sub>| &lt;= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.\nNo other pairs satisfy the condition, so we return the max of 4 and 1.\n</pre> <p>Example 2:</p> <pre>\nInput: points = [[0,0],[3,0],[9,2]], k = 3\nOutput: 3\nExplanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= points.length &lt;= 10<sup>5</sup></code></li> <li><code>points[i].length == 2</code></li> <li><code>-10<sup>8</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>8</sup></code></li> <li><code>0 &lt;= k &lt;= 2 * 10<sup>8</sup></code></li> <li><code>x<sub>i</sub> &lt; x<sub>j</sub></code> for all <code>1 &lt;= i &lt; j &lt;= points.length</code></li> <li><code>x<sub>i</sub></code> form a strictly increasing sequence.</li> </ul>"},{"location":"LeetCode_Problems/1500/","title":"1500. Design a File Sharing System","text":"Problem"},{"location":"LeetCode_Problems/1501/","title":"1501. Countries You Can Safely Invest In","text":"Problem"},{"location":"LeetCode_Problems/1502/","title":"1502. Can Make Arithmetic Progression From Sequence","text":"Problem <p>A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.</p> <p>Given an array of numbers <code>arr</code>, return <code>true</code> if the array can be rearranged to form an arithmetic progression. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [3,5,1]\nOutput: true\nExplanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2,4]\nOutput: false\nExplanation: There is no way to reorder the elements to obtain an arithmetic progression.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= arr.length &lt;= 1000</code></li> <li><code>-10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1503/","title":"1503. Last Moment Before All Ants Fall Out of a Plank","text":"Problem <p>We have a wooden plank of the length <code>n</code> units. Some ants are walking on the plank, each ant moves with a speed of 1 unit per second. Some of the ants move to the left, the other move to the right.</p> <p>When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time.</p> <p>When an ant reaches one end of the plank at a time <code>t</code>, it falls out of the plank immediately.</p> <p>Given an integer <code>n</code> and two integer arrays <code>left</code> and <code>right</code>, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, left = [4,3], right = [0,1]\nOutput: 4\nExplanation: In the image above:\n-The ant at index 0 is named A and going to the right.\n-The ant at index 1 is named B and going to the right.\n-The ant at index 3 is named C and going to the left.\n-The ant at index 4 is named D and going to the left.\nThe last moment when an ant was on the plank is t = 4 seconds. After that, it falls immediately out of the plank. (i.e., We can say that at t = 4.0000000001, there are no ants on the plank).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 7, left = [], right = [0,1,2,3,4,5,6,7]\nOutput: 7\nExplanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 7, left = [0,1,2,3,4,5,6,7], right = []\nOutput: 7\nExplanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= left.length &lt;= n + 1</code></li> <li><code>0 &lt;= left[i] &lt;= n</code></li> <li><code>0 &lt;= right.length &lt;= n + 1</code></li> <li><code>0 &lt;= right[i] &lt;= n</code></li> <li><code>1 &lt;= left.length + right.length &lt;= n + 1</code></li> <li>All values of <code>left</code> and <code>right</code> are unique, and each value can appear only in one of the two arrays.</li> </ul>"},{"location":"LeetCode_Problems/1504/","title":"1504. Count Submatrices With All Ones","text":"Problem <p>Given an <code>m x n</code> binary matrix <code>mat</code>, return the number of submatrices that have all ones.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[1,0,1],[1,1,0],[1,1,0]]\nOutput: 13\nExplanation: \nThere are 6 rectangles of side 1x1.\nThere are 2 rectangles of side 1x2.\nThere are 3 rectangles of side 2x1.\nThere is 1 rectangle of side 2x2. \nThere is 1 rectangle of side 3x1.\nTotal number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]]\nOutput: 24\nExplanation: \nThere are 8 rectangles of side 1x1.\nThere are 5 rectangles of side 1x2.\nThere are 2 rectangles of side 1x3. \nThere are 4 rectangles of side 2x1.\nThere are 2 rectangles of side 2x2. \nThere are 2 rectangles of side 3x1. \nThere is 1 rectangle of side 3x2. \nTotal number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 150</code></li> <li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1505/","title":"1505. Minimum Possible Integer After at Most K Adjacent Swaps On Digits","text":"Problem <p>You are given a string <code>num</code> representing the digits of a very large integer and an integer <code>k</code>. You are allowed to swap any two adjacent digits of the integer at most <code>k</code> times.</p> <p>Return the minimum integer you can obtain also as a string.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: num = \"4321\", k = 4\nOutput: \"1342\"\nExplanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"100\", k = 1\nOutput: \"010\"\nExplanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.\n</pre> <p>Example 3:</p> <pre>\nInput: num = \"36789\", k = 1000\nOutput: \"36789\"\nExplanation: We can keep the number without any swaps.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>num</code> consists of only digits and does not contain leading zeros.</li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1506/","title":"1506. Find Root of N-Ary Tree","text":"Problem"},{"location":"LeetCode_Problems/1507/","title":"1507. Reformat Date","text":"Problem <p>Given a <code>date</code> string in the form\u00a0<code>Day Month Year</code>, where:</p> <ul> <li><code>Day</code>\u00a0is in the set <code>{\"1st\", \"2nd\", \"3rd\", \"4th\", ..., \"30th\", \"31st\"}</code>.</li> <li><code>Month</code>\u00a0is in the set <code>{\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}</code>.</li> <li><code>Year</code>\u00a0is in the range <code>[1900, 2100]</code>.</li> </ul> <p>Convert the date string to the format <code>YYYY-MM-DD</code>, where:</p> <ul> <li><code>YYYY</code> denotes the 4 digit year.</li> <li><code>MM</code> denotes the 2 digit month.</li> <li><code>DD</code> denotes the 2 digit day.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: date = \"20th Oct 2052\"\nOutput: \"2052-10-20\"\n</pre> <p>Example 2:</p> <pre>\nInput: date = \"6th Jun 1933\"\nOutput: \"1933-06-06\"\n</pre> <p>Example 3:</p> <pre>\nInput: date = \"26th May 1960\"\nOutput: \"1960-05-26\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The given dates are guaranteed to be valid, so no error handling is necessary.</li> </ul>"},{"location":"LeetCode_Problems/1508/","title":"1508. Range Sum of Sorted Subarray Sums","text":"Problem <p>You are given the array <code>nums</code> consisting of <code>n</code> positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of <code>n * (n + 1) / 2</code> numbers.</p> <p>Return the sum of the numbers from index <code>left</code> to index <code>right</code> (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4], n = 4, left = 1, right = 5\nOutput: 13 \nExplanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4], n = 4, left = 3, right = 4\nOutput: 6\nExplanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,4], n = 4, left = 1, right = 10\nOutput: 50\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> <li><code>1 &lt;= left &lt;= right &lt;= n * (n + 1) / 2</code></li> </ul>"},{"location":"LeetCode_Problems/1509/","title":"1509. Minimum Difference Between Largest and Smallest Value in Three Moves","text":"Problem <p>You are given an integer array <code>nums</code>.</p> <p>In one move, you can choose one element of <code>nums</code> and change it to any value.</p> <p>Return the minimum difference between the largest and smallest value of <code>nums</code> after performing at most three moves.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,3,2,4]\nOutput: 0\nExplanation: We can make at most 3 moves.\nIn the first move, change 2 to 3. nums becomes [5,3,3,4].\nIn the second move, change 4 to 3. nums becomes [5,3,3,3].\nIn the third move, change 5 to 3. nums becomes [3,3,3,3].\nAfter performing 3 moves, the difference between the minimum and maximum is 3 - 3 = 0.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,5,0,10,14]\nOutput: 1\nExplanation: We can make at most 3 moves.\nIn the first move, change 5 to 0. nums becomes [1,0,0,10,14].\nIn the second move, change 10 to 0. nums becomes [1,0,0,0,14].\nIn the third move, change 14 to 1. nums becomes [1,0,0,0,1].\nAfter performing 3 moves, the difference between the minimum and maximum is 1 - 0 = 1.\nIt can be shown that there is no way to make the difference 0 in 3 moves.</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,100,20]\nOutput: 0\nExplanation: We can make at most 3 moves.\nIn the first move, change 100 to 7. nums becomes [3,7,20].\nIn the second move, change 20 to 7. nums becomes [3,7,7].\nIn the third move, change 3 to 7. nums becomes [7,7,7].\nAfter performing 3 moves, the difference between the minimum and maximum is 7 - 7 = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1510/","title":"1510. Stone Game IV","text":"Problem <p>Alice and Bob take turns playing a game, with Alice starting first.</p> <p>Initially, there are <code>n</code> stones in a pile. On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.</p> <p>Also, if a player cannot make a move, he/she loses the game.</p> <p>Given a positive integer <code>n</code>, return <code>true</code> if and only if Alice wins the game otherwise return <code>false</code>, assuming both players play optimally.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: true\nExplanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: false\nExplanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -&gt; 1 -&gt; 0).\n</pre> <p>Example 3:</p> <pre>\nInput: n = 4\nOutput: true\nExplanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -&gt; 0).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1511/","title":"1511. Customer Order Frequency","text":"Problem"},{"location":"LeetCode_Problems/1512/","title":"1512. Number of Good Pairs","text":"Problem <p>Given an array of integers <code>nums</code>, return the number of good pairs.</p> <p>A pair <code>(i, j)</code> is called good if <code>nums[i] == nums[j]</code> and <code>i</code> &lt; <code>j</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,1,1,3]\nOutput: 4\nExplanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1,1]\nOutput: 6\nExplanation: Each pair in the array are good.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1513/","title":"1513. Number of Substrings With Only 1s","text":"Problem <p>Given a binary string <code>s</code>, return the number of substrings with all characters <code>1</code>'s. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"0110111\"\nOutput: 9\nExplanation: There are 9 substring in total with only 1's characters.\n\"1\" -&gt; 5 times.\n\"11\" -&gt; 3 times.\n\"111\" -&gt; 1 time.</pre> <p>Example 2:</p> <pre>\nInput: s = \"101\"\nOutput: 2\nExplanation: Substring \"1\" is shown 2 times in s.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"111111\"\nOutput: 21\nExplanation: Each substring contains only 1's characters.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1514/","title":"1514. Path with Maximum Probability","text":"Problem <p>You are given an undirected weighted graph of\u00a0<code>n</code>\u00a0nodes (0-indexed), represented by an edge list where\u00a0<code>edges[i] = [a, b]</code>\u00a0is an undirected edge connecting the nodes\u00a0<code>a</code>\u00a0and\u00a0<code>b</code>\u00a0with a probability of success of traversing that edge\u00a0<code>succProb[i]</code>.</p> <p>Given two nodes\u00a0<code>start</code>\u00a0and\u00a0<code>end</code>, find the path with the maximum probability of success to go from\u00a0<code>start</code>\u00a0to\u00a0<code>end</code>\u00a0and return its success probability.</p> <p>If there is no path from\u00a0<code>start</code>\u00a0to\u00a0<code>end</code>, return\u00a00. Your answer will be accepted if it differs from the correct answer by at most 1e-5.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\nOutput: 0.25000\nExplanation:\u00a0There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\nOutput: 0.30000\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\nOutput: 0.00000\nExplanation:\u00a0There is no path between 0 and 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10^4</code></li> <li><code>0 &lt;= start, end &lt; n</code></li> <li><code>start != end</code></li> <li><code>0 &lt;= a, b &lt; n</code></li> <li><code>a != b</code></li> <li><code>0 &lt;= succProb.length == edges.length &lt;= 2*10^4</code></li> <li><code>0 &lt;= succProb[i] &lt;= 1</code></li> <li>There is at most one edge between every two nodes.</li> </ul>"},{"location":"LeetCode_Problems/1515/","title":"1515. Best Position for a Service Centre","text":"Problem <p>A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum.</p> <p>Given an array <code>positions</code> where <code>positions[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> is the position of the <code>ith</code> customer on the map, return the minimum sum of the euclidean distances to all customers.</p> <p>In other words, you need to choose the position of the service center <code>[x<sub>centre</sub>, y<sub>centre</sub>]</code> such that the following formula is minimized:</p> <p></p> <p>Answers within <code>10<sup>-5</sup></code> of the actual value will be accepted.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: positions = [[0,1],[1,0],[1,2],[2,1]]\nOutput: 4.00000\nExplanation: As shown, you can see that choosing [x<sub>centre</sub>, y<sub>centre</sub>] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: positions = [[1,1],[3,3]]\nOutput: 2.82843\nExplanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= positions.length &lt;= 50</code></li> <li><code>positions[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1516/","title":"1516. Move Sub-Tree of N-Ary Tree","text":"Problem"},{"location":"LeetCode_Problems/1517/","title":"1517. Find Users With Valid E-Mails","text":"Problem <p>Table: <code>Users</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| user_id       | int     |\n| name          | varchar |\n| mail          | varchar |\n+---------------+---------+\nuser_id is the primary key (column with unique values) for this table.\nThis table contains information of the users signed up in a website. Some e-mails are invalid.\n</pre> <p> </p> <p>Write a solution to find the users who have valid emails.</p> <p>A valid e-mail has a prefix name and a domain where:</p> <ul> <li>The prefix name is a string that may contain letters (upper or lower case), digits, underscore <code>'_'</code>, period <code>'.'</code>, and/or dash <code>'-'</code>. The prefix name must start with a letter.</li> <li>The domain is <code>'@leetcode.com'</code>.</li> </ul> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nUsers table:\n+---------+-----------+-------------------------+\n| user_id | name      | mail                    |\n+---------+-----------+-------------------------+\n| 1       | Winston   | winston@leetcode.com    |\n| 2       | Jonathan  | jonathanisgreat         |\n| 3       | Annabelle | bella-@leetcode.com     |\n| 4       | Sally     | sally.come@leetcode.com |\n| 5       | Marwan    | quarz#2020@leetcode.com |\n| 6       | David     | david69@gmail.com       |\n| 7       | Shapiro   | .shapo@leetcode.com     |\n+---------+-----------+-------------------------+\nOutput: \n+---------+-----------+-------------------------+\n| user_id | name      | mail                    |\n+---------+-----------+-------------------------+\n| 1       | Winston   | winston@leetcode.com    |\n| 3       | Annabelle | bella-@leetcode.com     |\n| 4       | Sally     | sally.come@leetcode.com |\n+---------+-----------+-------------------------+\nExplanation: \nThe mail of user 2 does not have a domain.\nThe mail of user 5 has the # sign which is not allowed.\nThe mail of user 6 does not have the leetcode domain.\nThe mail of user 7 starts with a period.\n</pre>"},{"location":"LeetCode_Problems/1518/","title":"1518. Water Bottles","text":"Problem <p>There are <code>numBottles</code> water bottles that are initially full of water. You can exchange <code>numExchange</code> empty water bottles from the market with one full water bottle.</p> <p>The operation of drinking a full water bottle turns it into an empty bottle.</p> <p>Given the two integers <code>numBottles</code> and <code>numExchange</code>, return the maximum number of water bottles you can drink.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: numBottles = 9, numExchange = 3\nOutput: 13\nExplanation: You can exchange 3 empty bottles to get 1 full water bottle.\nNumber of water bottles you can drink: 9 + 3 + 1 = 13.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: numBottles = 15, numExchange = 4\nOutput: 19\nExplanation: You can exchange 4 empty bottles to get 1 full water bottle. \nNumber of water bottles you can drink: 15 + 3 + 1 = 19.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= numBottles &lt;= 100</code></li> <li><code>2 &lt;= numExchange &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1519/","title":"1519. Number of Nodes in the Sub-Tree With the Same Label","text":"Problem <p>You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> and exactly <code>n - 1</code> <code>edges</code>. The root of the tree is the node <code>0</code>, and each node of the tree has a label which is a lower-case character given in the string <code>labels</code> (i.e. The node with the number <code>i</code> has the label <code>labels[i]</code>).</p> <p>The <code>edges</code> array is given on the form <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>, which means there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p> <p>Return an array of size <code>n</code> where <code>ans[i]</code> is the number of nodes in the subtree of the <code>i<sup>th</sup></code> node which have the same label as node <code>i</code>.</p> <p>A subtree of a tree <code>T</code> is the tree consisting of a node in <code>T</code> and all of its descendant nodes.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"\nOutput: [2,1,1,1,1,1,1]\nExplanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.\nNode 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"\nOutput: [4,2,1,1]\nExplanation: The sub-tree of node 2 contains only node 2, so the answer is 1.\nThe sub-tree of node 3 contains only node 3, so the answer is 1.\nThe sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.\nThe sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"\nOutput: [3,2,1,1,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>labels.length == n</code></li> <li><code>labels</code> is consisting of only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1520/","title":"1520. Maximum Number of Non-Overlapping Substrings","text":"Problem <p>Given a string <code>s</code> of lowercase letters, you need to find the maximum number of non-empty substrings of <code>s</code> that meet the following conditions:</p> <ol> <li>The substrings do not overlap, that is for any two substrings <code>s[i..j]</code> and <code>s[x..y]</code>, either <code>j &lt; x</code> or <code>i &gt; y</code> is true.</li> <li>A substring that contains a certain character <code>c</code> must also contain all occurrences of <code>c</code>.</li> </ol> <p>Find the maximum number of substrings that meet the above conditions. If there are multiple solutions with the same number of substrings, return the one with minimum total length. It can be shown that there exists a unique solution of minimum total length.</p> <p>Notice that you can return the substrings in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"adefaddaccc\"\nOutput: [\"e\",\"f\",\"ccc\"]\nExplanation:\u00a0The following are all the possible substrings that meet the conditions:\n[\n\u00a0 \"adefaddaccc\"\n\u00a0 \"adefadda\",\n\u00a0 \"ef\",\n\u00a0 \"e\",\n  \"f\",\n\u00a0 \"ccc\",\n]\nIf we choose the first string, we cannot choose anything else and we'd get only 1. If we choose \"adefadda\", we are left with \"ccc\" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose \"ef\" since it can be split into two. Therefore, the optimal way is to choose [\"e\",\"f\",\"ccc\"] which gives us 3 substrings. No other solution of the same number of substrings exist.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abbaccd\"\nOutput: [\"d\",\"bb\",\"cc\"]\nExplanation: Notice that while the set of substrings [\"d\",\"abba\",\"cc\"] also has length 3, it's considered incorrect since it has larger total length.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1521/","title":"1521. Find a Value of a Mysterious Function Closest to Target","text":"Problem <p>Winston was given the above mysterious function <code>func</code>. He has an integer array <code>arr</code> and an integer <code>target</code> and he wants to find the values <code>l</code> and <code>r</code> that make the value <code>|func(arr, l, r) - target|</code> minimum possible.</p> <p>Return the minimum possible value of <code>|func(arr, l, r) - target|</code>.</p> <p>Notice that <code>func</code> should be called with the values <code>l</code> and <code>r</code> where <code>0 &lt;= l, r &lt; arr.length</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [9,12,3,7,15], target = 5\nOutput: 2\nExplanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1000000,1000000,1000000], target = 1\nOutput: 999999\nExplanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [1,2,4,8,16], target = 0\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li> <li><code>0 &lt;= target &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1522/","title":"1522. Diameter of N-Ary Tree","text":"Problem"},{"location":"LeetCode_Problems/1523/","title":"1523. Count Odd Numbers in an Interval Range","text":"Problem <p>Given two non-negative integers <code>low</code> and <code>high</code>. Return the count of odd numbers between <code>low</code> and <code>high</code>\u00a0(inclusive).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: low = 3, high = 7\nOutput: 3\nExplanation: The odd numbers between 3 and 7 are [3,5,7].</pre> <p>Example 2:</p> <pre>\nInput: low = 8, high = 10\nOutput: 1\nExplanation: The odd numbers between 8 and 10 are [9].</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= low &lt;= high\u00a0&lt;= 10^9</code></li> </ul>"},{"location":"LeetCode_Problems/1524/","title":"1524. Number of Sub-arrays With Odd Sum","text":"Problem <p>Given an array of integers <code>arr</code>, return the number of subarrays with an odd sum.</p> <p>Since the answer can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,3,5]\nOutput: 4\nExplanation: All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [2,4,6]\nOutput: 0\nExplanation: All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [1,2,3,4,5,6,7]\nOutput: 16\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1525/","title":"1525. Number of Good Ways to Split a String","text":"Problem <p>You are given a string <code>s</code>.</p> <p>A split is called good if you can split <code>s</code> into two non-empty strings <code>s<sub>left</sub></code> and <code>s<sub>right</sub></code> where their concatenation is equal to <code>s</code> (i.e., <code>s<sub>left</sub> + s<sub>right</sub> = s</code>) and the number of distinct letters in <code>s<sub>left</sub></code> and <code>s<sub>right</sub></code> is the same.</p> <p>Return the number of good splits you can make in <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aacaba\"\nOutput: 2\nExplanation: There are 5 ways to split <code>\"aacaba\"</code> and 2 of them are good. \n(\"a\", \"acaba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aa\", \"caba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aac\", \"aba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aaca\", \"ba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aacab\", \"a\") Left string and right string contains 3 and 1 different letters respectively.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcd\"\nOutput: 1\nExplanation: Split the string as follows (\"ab\", \"cd\").\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1526/","title":"1526. Minimum Number of Increments on Subarrays to Form a Target Array","text":"Problem <p>You are given an integer array <code>target</code>. You have an integer array <code>initial</code> of the same size as <code>target</code> with all elements initially zeros.</p> <p>In one operation you can choose any subarray from <code>initial</code> and increment each value by one.</p> <p>Return the minimum number of operations to form a <code>target</code> array from <code>initial</code>.</p> <p>The test cases are generated so that the answer fits in a 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = [1,2,3,2,1]\nOutput: 3\nExplanation: We need at least 3 operations to form the target array from the initial array.\n[0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).\n[1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).\n[1,2,2,2,1] increment 1 at index 2.\n[1,2,3,2,1] target array is formed.\n</pre> <p>Example 2:</p> <pre>\nInput: target = [3,1,1,2]\nOutput: 4\nExplanation: [0,0,0,0] -&gt; [1,1,1,1] -&gt; [1,1,1,2] -&gt; [2,1,1,2] -&gt; [3,1,1,2]\n</pre> <p>Example 3:</p> <pre>\nInput: target = [3,1,5,4,2]\nOutput: 7\nExplanation: [0,0,0,0,0] -&gt; [1,1,1,1,1] -&gt; [2,1,1,1,1] -&gt; [3,1,1,1,1] -&gt; [3,1,2,2,2] -&gt; [3,1,3,3,2] -&gt; [3,1,4,4,2] -&gt; [3,1,5,4,2].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= target.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= target[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1527/","title":"1527. Patients With a Condition","text":"Problem <p>Table: <code>Patients</code></p> <pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| patient_id   | int     |\n| patient_name | varchar |\n| conditions   | varchar |\n+--------------+---------+\npatient_id is the primary key (column with unique values) for this table.\n'conditions' contains 0 or more code separated by spaces. \nThis table contains information of the patients in the hospital.\n</pre> <p> </p> <p>Write a solution to find the patient_id, patient_name, and conditions of the patients who have Type I Diabetes. Type I Diabetes always starts with <code>DIAB1</code> prefix.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nPatients table:\n+------------+--------------+--------------+\n| patient_id | patient_name | conditions   |\n+------------+--------------+--------------+\n| 1          | Daniel       | YFEV COUGH   |\n| 2          | Alice        |              |\n| 3          | Bob          | DIAB100 MYOP |\n| 4          | George       | ACNE DIAB100 |\n| 5          | Alain        | DIAB201      |\n+------------+--------------+--------------+\nOutput: \n+------------+--------------+--------------+\n| patient_id | patient_name | conditions   |\n+------------+--------------+--------------+\n| 3          | Bob          | DIAB100 MYOP |\n| 4          | George       | ACNE DIAB100 | \n+------------+--------------+--------------+\nExplanation: Bob and George both have a condition that starts with DIAB1.\n</pre>"},{"location":"LeetCode_Problems/1528/","title":"1528. Shuffle String","text":"Problem <p>You are given a string <code>s</code> and an integer array <code>indices</code> of the same length. The string <code>s</code> will be shuffled such that the character at the <code>i<sup>th</sup></code> position moves to <code>indices[i]</code> in the shuffled string.</p> <p>Return the shuffled string.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: s = \"codeleet\", <code>indices</code> = [4,5,6,7,0,2,1,3]\nOutput: \"leetcode\"\nExplanation: As shown, \"codeleet\" becomes \"leetcode\" after shuffling.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abc\", <code>indices</code> = [0,1,2]\nOutput: \"abc\"\nExplanation: After shuffling, each character remains in its position.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>s.length == indices.length == n</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>s</code> consists of only lowercase English letters.</li> <li><code>0 &lt;= indices[i] &lt; n</code></li> <li>All values of <code>indices</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/1529/","title":"1529. Minimum Suffix Flips","text":"Problem <p>You are given a 0-indexed binary string <code>target</code> of length <code>n</code>. You have another binary string <code>s</code> of length <code>n</code> that is initially set to all zeros. You want to make <code>s</code> equal to <code>target</code>.</p> <p>In one operation, you can pick an index <code>i</code> where <code>0 &lt;= i &lt; n</code> and flip all bits in the inclusive range <code>[i, n - 1]</code>. Flip means changing <code>'0'</code> to <code>'1'</code> and <code>'1'</code> to <code>'0'</code>.</p> <p>Return the minimum number of operations needed to make <code>s</code> equal to <code>target</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = \"10111\"\nOutput: 3\nExplanation: Initially, s = \"00000\".\nChoose index i = 2: \"00000\" -&gt; \"00111\"\nChoose index i = 0: \"00111\" -&gt; \"11000\"\nChoose index i = 1: \"11000\" -&gt; \"10111\"\nWe need at least 3 flip operations to form target.\n</pre> <p>Example 2:</p> <pre>\nInput: target = \"101\"\nOutput: 3\nExplanation: Initially, s = \"000\".\nChoose index i = 0: \"000\" -&gt; \"111\"\nChoose index i = 1: \"111\" -&gt; \"100\"\nChoose index i = 2: \"100\" -&gt; \"101\"\nWe need at least 3 flip operations to form target.\n</pre> <p>Example 3:</p> <pre>\nInput: target = \"00000\"\nOutput: 0\nExplanation: We do not need any operations since the initial s already equals target.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == target.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>target[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1530/","title":"1530. Number of Good Leaf Nodes Pairs","text":"Problem <p>You are given the <code>root</code> of a binary tree and an integer <code>distance</code>. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to <code>distance</code>.</p> <p>Return the number of good leaf node pairs in the tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,2,3,null,4], distance = 3\nOutput: 1\nExplanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,6,7], distance = 3\nOutput: 2\nExplanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.\n</pre> <p>Example 3:</p> <pre>\nInput: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3\nOutput: 1\nExplanation: The only good pair is [2,5].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the <code>tree</code> is in the range <code>[1, 2<sup>10</sup>].</code></li> <li><code>1 &lt;= Node.val &lt;= 100</code></li> <li><code>1 &lt;= distance &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/1531/","title":"1531. String Compression II","text":"Problem <p>Run-length encoding is a string compression method that works by\u00a0replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string\u00a0<code>\"aabccc\"</code>\u00a0we replace <code>\"aa\"</code>\u00a0by\u00a0<code>\"a2\"</code>\u00a0and replace <code>\"ccc\"</code>\u00a0by\u00a0<code>\"c3\"</code>. Thus the compressed string becomes <code>\"a2bc3\"</code>.</p> <p>Notice that in this problem, we are not adding\u00a0<code>'1'</code>\u00a0after single characters.</p> <p>Given a\u00a0string <code>s</code>\u00a0and an integer <code>k</code>. You need to delete at most <code>k</code> characters from\u00a0<code>s</code>\u00a0such that the run-length encoded version of <code>s</code>\u00a0has minimum length.</p> <p>Find the minimum length of the run-length encoded\u00a0version of <code>s</code> after deleting at most <code>k</code> characters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aaabcccd\", k = 2\nOutput: 4\nExplanation: Compressing s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be \"a3c3\" of length 4.</pre> <p>Example 2:</p> <pre>\nInput: s = \"aabbaa\", k = 2\nOutput: 2\nExplanation: If we delete both 'b' characters, the resulting compressed string would be \"a4\" of length 2.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"aaaaaaaaaaa\", k = 0\nOutput: 3\nExplanation: Since k is zero, we cannot delete anything. The compressed string is \"a11\" of length 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>0 &lt;= k &lt;= s.length</code></li> <li><code>s</code> contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1532/","title":"1532. The Most Recent Three Orders","text":"Problem"},{"location":"LeetCode_Problems/1533/","title":"1533. Find the Index of the Large Integer","text":"Problem"},{"location":"LeetCode_Problems/1534/","title":"1534. Count Good Triplets","text":"Problem <p>Given an array of integers <code>arr</code>, and three integers\u00a0<code>a</code>,\u00a0<code>b</code>\u00a0and\u00a0<code>c</code>. You need to find the number of good triplets.</p> <p>A triplet <code>(arr[i], arr[j], arr[k])</code>\u00a0is good if the following conditions are true:</p> <ul> <li><code>0 &lt;= i &lt; j &lt; k &lt;\u00a0arr.length</code></li> <li><code>|arr[i] - arr[j]| &lt;= a</code></li> <li><code>|arr[j] - arr[k]| &lt;= b</code></li> <li><code>|arr[i] - arr[k]| &lt;= c</code></li> </ul> <p>Where <code>|x|</code> denotes the absolute value of <code>x</code>.</p> <p>Return the number of good triplets.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3\nOutput: 4\nExplanation:\u00a0There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,1,2,2,3], a = 0, b = 0, c = 1\nOutput: 0\nExplanation: No triplet satisfies all conditions.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= arr.length &lt;= 100</code></li> <li><code>0 &lt;= arr[i] &lt;= 1000</code></li> <li><code>0 &lt;= a, b, c &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1535/","title":"1535. Find the Winner of an Array Game","text":"Problem <p>Given an integer array <code>arr</code> of distinct integers and an integer <code>k</code>.</p> <p>A game will be played between the first two elements of the array (i.e. <code>arr[0]</code> and <code>arr[1]</code>). In each round of the game, we compare <code>arr[0]</code> with <code>arr[1]</code>, the larger integer wins and remains at position <code>0</code>, and the smaller integer moves to the end of the array. The game ends when an integer wins <code>k</code> consecutive rounds.</p> <p>Return the integer which will win the game.</p> <p>It is guaranteed that there will be a winner of the game.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [2,1,3,5,4,6,7], k = 2\nOutput: 5\nExplanation: Let's see the rounds of the game:\nRound |       arr       | winner | win_count\n  1   | [2,1,3,5,4,6,7] | 2      | 1\n  2   | [2,3,5,4,6,7,1] | 3      | 1\n  3   | [3,5,4,6,7,1,2] | 5      | 1\n  4   | [5,4,6,7,1,2,3] | 5      | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [3,2,1], k = 10\nOutput: 3\nExplanation: 3 will win the first 10 rounds consecutively.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>6</sup></code></li> <li><code>arr</code> contains distinct integers.</li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1536/","title":"1536. Minimum Swaps to Arrange a Binary Grid","text":"Problem <p>Given an <code>n x n</code> binary <code>grid</code>, in one step you can choose two adjacent rows of the grid and swap them.</p> <p>A grid is said to be valid if all the cells above the main diagonal are zeros.</p> <p>Return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.</p> <p>The main diagonal of a grid is the diagonal that starts at cell <code>(1, 1)</code> and ends at cell <code>(n, n)</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,0,1],[1,1,0],[1,0,0]]\nOutput: 3\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]\nOutput: -1\nExplanation: All rows are similar, swaps have no effect on the grid.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[1,0,0],[1,1,0],[1,1,1]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length</code> <code>== grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 200</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code></li> </ul>"},{"location":"LeetCode_Problems/1537/","title":"1537. Get the Maximum Score","text":"Problem <p>You are given two sorted arrays of distinct integers <code>nums1</code> and <code>nums2</code>.</p> <p>A valid path is defined as follows:</p> <ul> <li>Choose array <code>nums1</code> or <code>nums2</code> to traverse (from index-0).</li> <li>Traverse the current array from left to right.</li> <li>If you are reading any value that is present in <code>nums1</code> and <code>nums2</code> you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).</li> </ul> <p>The score is defined as the sum of unique values in a valid path.</p> <p>Return the maximum score you can obtain of all possible valid paths. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]\nOutput: 30\nExplanation: Valid paths:\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)\nThe maximum is obtained with the path in green [2,4,6,8,10].\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,3,5,7,9], nums2 = [3,5,100]\nOutput: 109\nExplanation: Maximum sum is obtained with the path [1,3,5,100].\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]\nOutput: 40\nExplanation: There are no common elements between nums1 and nums2.\nMaximum sum is obtained with the path [6,7,8,9,10].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>7</sup></code></li> <li><code>nums1</code> and <code>nums2</code> are strictly increasing.</li> </ul>"},{"location":"LeetCode_Problems/1538/","title":"1538. Guess the Majority in a Hidden Array","text":"Problem"},{"location":"LeetCode_Problems/1539/","title":"1539. Kth Missing Positive Number","text":"Problem <p>Given an array <code>arr</code> of positive integers sorted in a strictly increasing order, and an integer <code>k</code>.</p> <p>Return the <code>k<sup>th</sup></code> positive integer that is missing from this array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [2,3,4,7,11], k = 5\nOutput: 9\nExplanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5<sup>th</sup>\u00a0missing positive integer is 9.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2,3,4], k = 2\nOutput: 6\nExplanation: The missing positive integers are [5,6,7,...]. The 2<sup>nd</sup> missing positive integer is 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 1000</code></li> <li><code>1 &lt;= arr[i] &lt;= 1000</code></li> <li><code>1 &lt;= k &lt;= 1000</code></li> <li><code>arr[i] &lt; arr[j]</code> for <code>1 &lt;= i &lt; j &lt;= arr.length</code></li> </ul> <p> </p> <p>Follow up:</p> <p>Could you solve this problem in less than O(n) complexity?</p>"},{"location":"LeetCode_Problems/1540/","title":"1540. Can Convert String in K Moves","text":"Problem <p>Given two strings\u00a0<code>s</code>\u00a0and\u00a0<code>t</code>, your goal is to convert\u00a0<code>s</code>\u00a0into\u00a0<code>t</code>\u00a0in\u00a0<code>k</code> moves or less.</p> <p>During the\u00a0<code>i<sup>th</sup></code>\u00a0(<code>1 &lt;= i &lt;= k</code>)\u00a0move you can:</p> <ul> <li>Choose any index\u00a0<code>j</code>\u00a0(1-indexed) from\u00a0<code>s</code>, such that\u00a0<code>1 &lt;= j &lt;= s.length</code>\u00a0and <code>j</code>\u00a0has not been chosen in any previous move,\u00a0and shift the character at that index\u00a0<code>i</code>\u00a0times.</li> <li>Do nothing.</li> </ul> <p>Shifting a character means replacing it by the next letter in the alphabet\u00a0(wrapping around so that\u00a0<code>'z'</code>\u00a0becomes\u00a0<code>'a'</code>). Shifting a character by\u00a0<code>i</code>\u00a0means applying the shift operations\u00a0<code>i</code>\u00a0times.</p> <p>Remember that any index\u00a0<code>j</code>\u00a0can be picked at most once.</p> <p>Return\u00a0<code>true</code>\u00a0if it's possible to convert\u00a0<code>s</code>\u00a0into\u00a0<code>t</code>\u00a0in no more than\u00a0<code>k</code>\u00a0moves, otherwise return\u00a0<code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"input\", t = \"ouput\", k = 9\nOutput: true\nExplanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abc\", t = \"bcd\", k = 10\nOutput: false\nExplanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"aab\", t = \"bbb\", k = 27\nOutput: true\nExplanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 10^5</code></li> <li><code>0 &lt;= k &lt;= 10^9</code></li> <li><code>s</code>, <code>t</code> contain\u00a0only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1541/","title":"1541. Minimum Insertions to Balance a Parentheses String","text":"Problem <p>Given a parentheses string <code>s</code> containing only the characters <code>'('</code> and <code>')'</code>. A parentheses string is balanced if:</p> <ul> <li>Any left parenthesis <code>'('</code> must have a corresponding two consecutive right parenthesis <code>'))'</code>.</li> <li>Left parenthesis <code>'('</code> must go before the corresponding two consecutive right parenthesis <code>'))'</code>.</li> </ul> <p>In other words, we treat <code>'('</code> as an opening parenthesis and <code>'))'</code> as a closing parenthesis.</p> <ul> <li>For example, <code>\"())\"</code>, <code>\"())(())))\"</code> and <code>\"(())())))\"</code> are balanced, <code>\")()\"</code>, <code>\"()))\"</code> and <code>\"(()))\"</code> are not balanced.</li> </ul> <p>You can insert the characters <code>'('</code> and <code>')'</code> at any position of the string to balance it if needed.</p> <p>Return the minimum number of insertions needed to make <code>s</code> balanced.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"(()))\"\nOutput: 1\nExplanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to add one more ')' at the end of the string to be \"(())))\" which is balanced.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"())\"\nOutput: 0\nExplanation: The string is already balanced.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"))())(\"\nOutput: 3\nExplanation: Add '(' to match the first '))', Add '))' to match the last '('.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of <code>'('</code> and <code>')'</code> only.</li> </ul>"},{"location":"LeetCode_Problems/1542/","title":"1542. Find Longest Awesome Substring","text":"Problem <p>You are given a string <code>s</code>. An awesome substring is a non-empty substring of <code>s</code> such that we can make any number of swaps in order to make it a palindrome.</p> <p>Return the length of the maximum length awesome substring of <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"3242415\"\nOutput: 5\nExplanation: \"24241\" is the longest awesome substring, we can form the palindrome \"24142\" with some swaps.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"12345678\"\nOutput: 1\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"213123\"\nOutput: 6\nExplanation: \"213123\" is the longest awesome substring, we can form the palindrome \"231132\" with some swaps.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists only of digits.</li> </ul>"},{"location":"LeetCode_Problems/1543/","title":"1543. Fix Product Name Format","text":"Problem"},{"location":"LeetCode_Problems/1544/","title":"1544. Make The String Great","text":"Problem <p>Given a string <code>s</code> of lower and upper case English letters.</p> <p>A good string is a string which doesn't have two adjacent characters <code>s[i]</code> and <code>s[i + 1]</code> where:</p> <ul> <li><code>0 &lt;= i &lt;= s.length - 2</code></li> <li><code>s[i]</code> is a lower-case letter and <code>s[i + 1]</code> is the same letter but in upper-case or vice-versa.</li> </ul> <p>To make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.</p> <p>Return the string after making it good. The answer is guaranteed to be unique under the given constraints.</p> <p>Notice that an empty string is also good.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"leEeetcode\"\nOutput: \"leetcode\"\nExplanation: In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abBAcC\"\nOutput: \"\"\nExplanation: We have many possible scenarios, and all lead to the same answer. For example:\n\"abBAcC\" --&gt; \"aAcC\" --&gt; \"cC\" --&gt; \"\"\n\"abBAcC\" --&gt; \"abBA\" --&gt; \"aA\" --&gt; \"\"\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"s\"\nOutput: \"s\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> contains only lower and upper case English letters.</li> </ul>"},{"location":"LeetCode_Problems/1545/","title":"1545. Find Kth Bit in Nth Binary String","text":"Problem <p>Given two positive integers <code>n</code> and <code>k</code>, the binary string <code>S<sub>n</sub></code> is formed as follows:</p> <ul> <li><code>S<sub>1</sub> = \"0\"</code></li> <li><code>S<sub>i</sub> = S<sub>i - 1</sub> + \"1\" + reverse(invert(S<sub>i - 1</sub>))</code> for <code>i &gt; 1</code></li> </ul> <p>Where <code>+</code> denotes the concatenation operation, <code>reverse(x)</code> returns the reversed string <code>x</code>, and <code>invert(x)</code> inverts all the bits in <code>x</code> (<code>0</code> changes to <code>1</code> and <code>1</code> changes to <code>0</code>).</p> <p>For example, the first four strings in the above sequence are:</p> <ul> <li><code>S<sub>1 </sub>= \"0\"</code></li> <li><code>S<sub>2 </sub>= \"011\"</code></li> <li><code>S<sub>3 </sub>= \"0111001\"</code></li> <li><code>S<sub>4</sub> = \"011100110110001\"</code></li> </ul> <p>Return the <code>k<sup>th</sup></code> bit in <code>S<sub>n</sub></code>. It is guaranteed that <code>k</code> is valid for the given <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, k = 1\nOutput: \"0\"\nExplanation: S<sub>3</sub> is \"0111001\".\nThe 1<sup>st</sup> bit is \"0\".\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4, k = 11\nOutput: \"1\"\nExplanation: S<sub>4</sub> is \"011100110110001\".\nThe 11<sup>th</sup> bit is \"1\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>1 &lt;= k &lt;= 2<sup>n</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/1546/","title":"1546. Maximum Number of Non-Overlapping Subarrays With Sum Equals Target","text":"Problem <p>Given an array <code>nums</code> and an integer <code>target</code>, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to <code>target</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,1,1,1], target = 2\nOutput: 2\nExplanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-1,3,5,1,4,2,-9], target = 6\nOutput: 2\nExplanation: There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= target &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1547/","title":"1547. Minimum Cost to Cut a Stick","text":"Problem <p>Given a wooden stick of length <code>n</code> units. The stick is labelled from <code>0</code> to <code>n</code>. For example, a stick of length 6 is labelled as follows:</p> <p></p> <p>Given an integer array <code>cuts</code> where <code>cuts[i]</code> denotes a position you should perform a cut at.</p> <p>You should perform the cuts in order, you can change the order of the cuts as you wish.</p> <p>The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.</p> <p>Return the minimum total cost of the cuts.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 7, cuts = [1,3,4,5]\nOutput: 16\nExplanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\n\nThe first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.\nRearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).</pre> <p>Example 2:</p> <pre>\nInput: n = 9, cuts = [5,6,1,4,2]\nOutput: 22\nExplanation: If you try the given cuts ordering the cost will be 25.\nThere are much ordering with total cost &lt;= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= cuts.length &lt;= min(n - 1, 100)</code></li> <li><code>1 &lt;= cuts[i] &lt;= n - 1</code></li> <li>All the integers in <code>cuts</code> array are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1548/","title":"1548. The Most Similar Path in a Graph","text":"Problem"},{"location":"LeetCode_Problems/1549/","title":"1549. The Most Recent Orders for Each Product","text":"Problem"},{"location":"LeetCode_Problems/1550/","title":"1550. Three Consecutive Odds","text":"Problem <p>Given an integer array <code>arr</code>, return <code>true</code>\u00a0if there are three consecutive odd numbers in the array. Otherwise, return\u00a0<code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [2,6,4,1]\nOutput: false\nExplanation: There are no three consecutive odds.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2,34,3,4,5,7,23,12]\nOutput: true\nExplanation: [5,7,23] are three consecutive odds.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 1000</code></li> <li><code>1 &lt;= arr[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1551/","title":"1551. Minimum Operations to Make Array Equal","text":"Problem <p>You have an array <code>arr</code> of length <code>n</code> where <code>arr[i] = (2 * i) + 1</code> for all valid values of <code>i</code> (i.e.,\u00a0<code>0 &lt;= i &lt; n</code>).</p> <p>In one operation, you can select two indices <code>x</code> and <code>y</code> where <code>0 &lt;= x, y &lt; n</code> and subtract <code>1</code> from <code>arr[x]</code> and add <code>1</code> to <code>arr[y]</code> (i.e., perform <code>arr[x] -=1 </code>and <code>arr[y] += 1</code>). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.</p> <p>Given an integer <code>n</code>, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3\nOutput: 2\nExplanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].\n</pre> <p>Example 2:</p> <pre>\nInput: n = 6\nOutput: 9\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1552/","title":"1552. Magnetic Force Between Two Balls","text":"Problem <p>In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has <code>n</code> empty baskets, the <code>i<sup>th</sup></code> basket is at <code>position[i]</code>, Morty has <code>m</code> balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.</p> <p>Rick stated that magnetic force between two different balls at positions <code>x</code> and <code>y</code> is <code>|x - y|</code>.</p> <p>Given the integer array <code>position</code> and the integer <code>m</code>. Return the required force.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: position = [1,2,3,4,7], m = 3\nOutput: 3\nExplanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.\n</pre> <p>Example 2:</p> <pre>\nInput: position = [5,4,3,2,1,1000000000], m = 2\nOutput: 999999999\nExplanation: We can use baskets 1 and 1000000000.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == position.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= position[i] &lt;= 10<sup>9</sup></code></li> <li>All integers in <code>position</code> are distinct.</li> <li><code>2 &lt;= m &lt;= position.length</code></li> </ul>"},{"location":"LeetCode_Problems/1553/","title":"1553. Minimum Number of Days to Eat N Oranges","text":"Problem <p>There are <code>n</code> oranges in the kitchen and you decided to eat some of these oranges every day as follows:</p> <ul> <li>Eat one orange.</li> <li>If the number of remaining oranges <code>n</code> is divisible by <code>2</code> then you can eat <code>n / 2</code> oranges.</li> <li>If the number of remaining oranges <code>n</code> is divisible by <code>3</code> then you can eat <code>2 * (n / 3)</code> oranges.</li> </ul> <p>You can only choose one of the actions per day.</p> <p>Given the integer <code>n</code>, return the minimum number of days to eat <code>n</code> oranges.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10\nOutput: 4\nExplanation: You have 10 oranges.\nDay 1: Eat 1 orange,  10 - 1 = 9.  \nDay 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\nDay 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. \nDay 4: Eat the last orange  1 - 1  = 0.\nYou need at least 4 days to eat the 10 oranges.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 6\nOutput: 3\nExplanation: You have 6 oranges.\nDay 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\nDay 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\nDay 3: Eat the last orange  1 - 1  = 0.\nYou need at least 3 days to eat the 6 oranges.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2 * 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1554/","title":"1554. Strings Differ by One Character","text":"Problem"},{"location":"LeetCode_Problems/1555/","title":"1555. Bank Account Summary","text":"Problem"},{"location":"LeetCode_Problems/1556/","title":"1556. Thousand Separator","text":"Problem <p>Given an integer <code>n</code>, add a dot (\".\") as the thousands separator and return it in string format.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 987\nOutput: \"987\"\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1234\nOutput: \"1.234\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/1557/","title":"1557. Minimum Number of Vertices to Reach All Nodes","text":"Problem <p>Given a\u00a0directed acyclic graph,\u00a0with\u00a0<code>n</code>\u00a0vertices numbered from\u00a0<code>0</code>\u00a0to\u00a0<code>n-1</code>,\u00a0and an array\u00a0<code>edges</code>\u00a0where\u00a0<code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>]</code>\u00a0represents a directed edge from node\u00a0<code>from<sub>i</sub></code>\u00a0to node\u00a0<code>to<sub>i</sub></code>.</p> <p>Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.</p> <p>Notice that you can return the vertices in any order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]\nOutput: [0,3]\nExplanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]\nOutput: [0,2,3]\nExplanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10^5</code></li> <li><code>1 &lt;= edges.length &lt;= min(10^5, n * (n - 1) / 2)</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= from<sub>i,</sub>\u00a0to<sub>i</sub> &lt; n</code></li> <li>All pairs <code>(from<sub>i</sub>, to<sub>i</sub>)</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1558/","title":"1558. Minimum Numbers of Function Calls to Make Target Array","text":"Problem <p>You are given an integer array <code>nums</code>. You have an integer array <code>arr</code> of the same length with all values set to <code>0</code> initially. You also have the following <code>modify</code> function:</p> <p></p> <p>You want to use the modify function to convert <code>arr</code> to <code>nums</code> using the minimum number of calls.</p> <p>Return the minimum number of function calls to make <code>nums</code> from <code>arr</code>.</p> <p>The test cases are generated so that the answer fits in a 32-bit signed integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,5]\nOutput: 5\nExplanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).\nDouble all the elements: [0, 1] -&gt; [0, 2] -&gt; [0, 4] (2 operations).\nIncrement by 1 (both elements)  [0, 4] -&gt; [1, 4] -&gt; [1, 5] (2 operations).\nTotal of operations: 1 + 2 + 2 = 5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2]\nOutput: 3\nExplanation: Increment by 1 (both elements) [0, 0] -&gt; [0, 1] -&gt; [1, 1] (2 operations).\nDouble all the elements: [1, 1] -&gt; [2, 2] (1 operation).\nTotal of operations: 2 + 1 = 3.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [4,2,5]\nOutput: 6\nExplanation: (initial)[0,0,0] -&gt; [1,0,0] -&gt; [1,0,1] -&gt; [2,0,2] -&gt; [2,1,2] -&gt; [4,2,4] -&gt; [4,2,5](nums).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1559/","title":"1559. Detect Cycles in 2D Grid","text":"Problem <p>Given a 2D array of characters <code>grid</code> of size <code>m x n</code>, you need to find if there exists any cycle consisting of the same value in <code>grid</code>.</p> <p>A cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.</p> <p>Also, you cannot move to the cell that you visited in your last move. For example, the cycle <code>(1, 1) -&gt; (1, 2) -&gt; (1, 1)</code> is invalid because from <code>(1, 2)</code> we visited <code>(1, 1)</code> which was the last visited cell.</p> <p>Return <code>true</code> if any cycle of the same value exists in <code>grid</code>, otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\nOutput: true\nExplanation: There are two valid cycles shown in different colors in the image below:\n\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\nOutput: true\nExplanation: There is only one valid cycle highlighted in the image below:\n\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 500</code></li> <li><code>grid</code> consists only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1560/","title":"1560. Most Visited Sector in  a Circular Track","text":"Problem <p>Given an integer <code>n</code> and an integer array <code>rounds</code>. We have a circular track which consists of <code>n</code> sectors labeled from <code>1</code> to <code>n</code>. A marathon will be held on this track, the marathon consists of <code>m</code> rounds. The <code>i<sup>th</sup></code> round starts at sector <code>rounds[i - 1]</code> and ends at sector <code>rounds[i]</code>. For example, round 1 starts at sector <code>rounds[0]</code> and ends at sector <code>rounds[1]</code></p> <p>Return an array of the most visited sectors sorted in ascending order.</p> <p>Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, rounds = [1,3,1,2]\nOutput: [1,2]\nExplanation: The marathon starts at sector 1. The order of the visited sectors is as follows:\n1 --&gt; 2 --&gt; 3 (end of round 1) --&gt; 4 --&gt; 1 (end of round 2) --&gt; 2 (end of round 3 and the marathon)\nWe can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.</pre> <p>Example 2:</p> <pre>\nInput: n = 2, rounds = [2,1,2,1,2,1,2,1,2]\nOutput: [2]\n</pre> <p>Example 3:</p> <pre>\nInput: n = 7, rounds = [1,3,5,7]\nOutput: [1,2,3,4,5,6,7]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= m &lt;= 100</code></li> <li><code>rounds.length == m + 1</code></li> <li><code>1 &lt;= rounds[i] &lt;= n</code></li> <li><code>rounds[i] != rounds[i + 1]</code> for <code>0 &lt;= i &lt; m</code></li> </ul>"},{"location":"LeetCode_Problems/1561/","title":"1561. Maximum Number of Coins You Can Get","text":"Problem <p>There are <code>3n</code> piles of coins of varying size, you and your friends will take piles of coins as follows:</p> <ul> <li>In each step, you will choose any <code>3</code> piles of coins (not necessarily consecutive).</li> <li>Of your choice, Alice will pick the pile with the maximum number of coins.</li> <li>You will pick the next pile with the maximum number of coins.</li> <li>Your friend Bob will pick the last pile.</li> <li>Repeat until there are no more piles of coins.</li> </ul> <p>Given an array of integers <code>piles</code> where <code>piles[i]</code> is the number of coins in the <code>i<sup>th</sup></code> pile.</p> <p>Return the maximum number of coins that you can have.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: piles = [2,4,1,2,7,8]\nOutput: 9\nExplanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.\n</pre> <p>Example 2:</p> <pre>\nInput: piles = [2,4,5]\nOutput: 4\n</pre> <p>Example 3:</p> <pre>\nInput: piles = [9,8,7,6,5,1,2,3,4]\nOutput: 18\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= piles.length &lt;= 10<sup>5</sup></code></li> <li><code>piles.length % 3 == 0</code></li> <li><code>1 &lt;= piles[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1562/","title":"1562. Find Latest Group of Size M","text":"Problem <p>Given an array <code>arr</code> that represents a permutation of numbers from <code>1</code> to <code>n</code>.</p> <p>You have a binary string of size <code>n</code> that initially has all its bits set to zero. At each step <code>i</code> (assuming both the binary string and <code>arr</code> are 1-indexed) from <code>1</code> to <code>n</code>, the bit at position <code>arr[i]</code> is set to <code>1</code>.</p> <p>You are also given an integer <code>m</code>. Find the latest step at which there exists a group of ones of length <code>m</code>. A group of ones is a contiguous substring of <code>1</code>'s such that it cannot be extended in either direction.</p> <p>Return the latest step at which there exists a group of ones of length exactly <code>m</code>. If no such group exists, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [3,5,1,2,4], m = 1\nOutput: 4\nExplanation: \nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"00101\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"11101\", groups: [\"111\", \"1\"]\nStep 5: \"11111\", groups: [\"11111\"]\nThe latest step at which there exists a group of size 1 is step 4.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [3,1,5,4,2], m = 2\nOutput: -1\nExplanation: \nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"10100\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"10111\", groups: [\"1\", \"111\"]\nStep 5: \"11111\", groups: [\"11111\"]\nNo group of size 2 exists during any step.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == arr.length</code></li> <li><code>1 &lt;= m &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= n</code></li> <li>All integers in <code>arr</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1563/","title":"1563. Stone Game V","text":"Problem <p>There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array <code>stoneValue</code>.</p> <p>In each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.</p> <p>The game ends when there is only one stone remaining. Alice's is initially zero.</p> <p>Return the maximum score that Alice can obtain.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stoneValue = [6,2,3,4,5,5]\nOutput: 18\nExplanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.\nIn the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).\nThe last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.\n</pre> <p>Example 2:</p> <pre>\nInput: stoneValue = [7,7,7,7,7,7,7]\nOutput: 28\n</pre> <p>Example 3:</p> <pre>\nInput: stoneValue = [4]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= stoneValue.length &lt;= 500</code></li> <li><code>1 &lt;= stoneValue[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1564/","title":"1564. Put Boxes Into the Warehouse I","text":"Problem"},{"location":"LeetCode_Problems/1565/","title":"1565. Unique Orders and Customers Per Month","text":"Problem"},{"location":"LeetCode_Problems/1566/","title":"1566. Detect Pattern of Length M Repeated K or More Times","text":"Problem <p>Given an array of positive integers <code>arr</code>, find a pattern of length <code>m</code> that is repeated <code>k</code> or more times.</p> <p>A pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.</p> <p>Return <code>true</code> if there exists a pattern of length <code>m</code> that is repeated <code>k</code> or more times, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,4,4,4,4], m = 1, k = 3\nOutput: true\nExplanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2\nOutput: true\nExplanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [1,2,1,2,1,3], m = 2, k = 3\nOutput: false\nExplanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= arr.length &lt;= 100</code></li> <li><code>1 &lt;= arr[i] &lt;= 100</code></li> <li><code>1 &lt;= m &lt;= 100</code></li> <li><code>2 &lt;= k &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1567/","title":"1567. Maximum Length of Subarray With Positive Product","text":"Problem <p>Given an array of integers <code>nums</code>, find the maximum length of a subarray where the product of all its elements is positive.</p> <p>A subarray of an array is a consecutive sequence of zero or more values taken out of that array.</p> <p>Return the maximum length of a subarray with positive product.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,-2,-3,4]\nOutput: 4\nExplanation: The array nums already has a positive product of 24.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1,-2,-3,-4]\nOutput: 3\nExplanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.</pre> <p>Example 3:</p> <pre>\nInput: nums = [-1,-2,-3,0,1]\nOutput: 2\nExplanation: The longest subarray with positive product is [-1,-2] or [-2,-3].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1568/","title":"1568. Minimum Number of Days to Disconnect Island","text":"Problem <p>You are given an <code>m x n</code> binary grid <code>grid</code> where <code>1</code> represents land and <code>0</code> represents water. An island is a maximal 4-directionally (horizontal or vertical) connected group of <code>1</code>'s.</p> <p>The grid is said to be connected if we have exactly one island, otherwise is said disconnected.</p> <p>In one day, we are allowed to change any single land cell <code>(1)</code> into a water cell <code>(0)</code>.</p> <p>Return the minimum number of days to disconnect the grid.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]\n\nOutput: 2\nExplanation: We need at least 2 days to get a disconnected grid.\nChange land grid[1][1] and grid[0][2] to water and get 2 disconnected island.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,1]]\nOutput: 2\nExplanation: Grid of full water is also disconnected ([[1,1]] -&gt; [[0,0]]), 0 islands.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 30</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1569/","title":"1569. Number of Ways to Reorder Array to Get Same BST","text":"Problem <p>Given an array <code>nums</code> that represents a permutation of integers from <code>1</code> to <code>n</code>. We are going to construct a binary search tree (BST) by inserting the elements of <code>nums</code> in order into an initially empty BST. Find the number of different ways to reorder <code>nums</code> so that the constructed BST is identical to that formed from the original array <code>nums</code>.</p> <ul> <li>For example, given <code>nums = [2,1,3]</code>, we will have 2 as the root, 1 as a left child, and 3 as a right child. The array <code>[2,3,1]</code> also yields the same BST but <code>[3,2,1]</code> yields a different BST.</li> </ul> <p>Return the number of ways to reorder <code>nums</code> such that the BST formed is identical to the original BST formed from <code>nums</code>.</p> <p>Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [2,1,3]\nOutput: 1\nExplanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: nums = [3,4,5,1,2]\nOutput: 5\nExplanation: The following 5 arrays will yield the same BST: \n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: nums = [1,2,3]\nOutput: 0\nExplanation: There are no other orderings of nums that will yield the same BST.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= nums.length</code></li> <li>All integers in <code>nums</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1570/","title":"1570. Dot Product of Two Sparse Vectors","text":"Problem"},{"location":"LeetCode_Problems/1571/","title":"1571. Warehouse Manager","text":"Problem"},{"location":"LeetCode_Problems/1572/","title":"1572. Matrix Diagonal Sum","text":"Problem <p>Given a\u00a0square\u00a0matrix\u00a0<code>mat</code>, return the sum of the matrix diagonals.</p> <p>Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[1,2,3],\n\u00a0             [4,5,6],\n\u00a0             [7,8,9]]\nOutput: 25\nExplanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat[1][1] = 5 is counted only once.\n</pre> <p>Example 2:</p> <pre>\nInput: mat = [[1,1,1,1],\n\u00a0             [1,1,1,1],\n\u00a0             [1,1,1,1],\n\u00a0             [1,1,1,1]]\nOutput: 8\n</pre> <p>Example 3:</p> <pre>\nInput: mat = [[5]]\nOutput: 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == mat.length == mat[i].length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= mat[i][j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1573/","title":"1573. Number of Ways to Split a String","text":"Problem <p>Given a binary string <code>s</code>, you can split <code>s</code> into 3 non-empty strings <code>s1</code>, <code>s2</code>, and <code>s3</code> where <code>s1 + s2 + s3 = s</code>.</p> <p>Return the number of ways <code>s</code> can be split such that the number of ones is the same in <code>s1</code>, <code>s2</code>, and <code>s3</code>. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"10101\"\nOutput: 4\nExplanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.\n\"1|010|1\"\n\"1|01|01\"\n\"10|10|1\"\n\"10|1|01\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"1001\"\nOutput: 0\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"0000\"\nOutput: 3\nExplanation: There are three ways to split s in 3 parts.\n\"0|0|00\"\n\"0|00|0\"\n\"00|0|0\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1574/","title":"1574. Shortest Subarray to be Removed to Make Array Sorted","text":"Problem <p>Given an integer array <code>arr</code>, remove a subarray (can be empty) from <code>arr</code> such that the remaining elements in <code>arr</code> are non-decreasing.</p> <p>Return the length of the shortest subarray to remove.</p> <p>A subarray is a contiguous subsequence of the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,3,10,4,2,3,5]\nOutput: 3\nExplanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\nAnother correct solution is to remove the subarray [3,10,4].\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [5,4,3,2,1]\nOutput: 4\nExplanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [1,2,3]\nOutput: 0\nExplanation: The array is already non-decreasing. We do not need to remove any elements.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1575/","title":"1575. Count All Possible Routes","text":"Problem <p>You are given an array of distinct positive integers locations where <code>locations[i]</code> represents the position of city <code>i</code>. You are also given integers <code>start</code>, <code>finish</code> and <code>fuel</code> representing the starting city, ending city, and the initial amount of fuel you have, respectively.</p> <p>At each step, if you are at city <code>i</code>, you can pick any city <code>j</code> such that <code>j != i</code> and <code>0 &lt;= j &lt; locations.length</code> and move to city <code>j</code>. Moving from city <code>i</code> to city <code>j</code> reduces the amount of fuel you have by <code>|locations[i] - locations[j]|</code>. Please notice that <code>|x|</code> denotes the absolute value of <code>x</code>.</p> <p>Notice that <code>fuel</code> cannot become negative at any point in time, and that you are allowed to visit any city more than once (including <code>start</code> and <code>finish</code>).</p> <p>Return the count of all possible routes from <code>start</code> to <code>finish</code>. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5\nOutput: 4\nExplanation: The following are all possible routes, each uses 5 units of fuel:\n1 -&gt; 3\n1 -&gt; 2 -&gt; 3\n1 -&gt; 4 -&gt; 3\n1 -&gt; 4 -&gt; 2 -&gt; 3\n</pre> <p>Example 2:</p> <pre>\nInput: locations = [4,3,1], start = 1, finish = 0, fuel = 6\nOutput: 5\nExplanation: The following are all possible routes:\n1 -&gt; 0, used fuel = 1\n1 -&gt; 2 -&gt; 0, used fuel = 5\n1 -&gt; 2 -&gt; 1 -&gt; 0, used fuel = 5\n1 -&gt; 0 -&gt; 1 -&gt; 0, used fuel = 3\n1 -&gt; 0 -&gt; 1 -&gt; 0 -&gt; 1 -&gt; 0, used fuel = 5\n</pre> <p>Example 3:</p> <pre>\nInput: locations = [5,2,1], start = 0, finish = 2, fuel = 3\nOutput: 0\nExplanation: It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= locations.length &lt;= 100</code></li> <li><code>1 &lt;= locations[i] &lt;= 10<sup>9</sup></code></li> <li>All integers in <code>locations</code> are distinct.</li> <li><code>0 &lt;= start, finish &lt; locations.length</code></li> <li><code>1 &lt;= fuel &lt;= 200</code></li> </ul>"},{"location":"LeetCode_Problems/1576/","title":"1576. Replace All ?'s to Avoid Consecutive Repeating Characters","text":"Problem <p>Given a string <code>s</code> containing only lowercase English letters and the <code>'?'</code> character, convert all the <code>'?'</code> characters into lowercase letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non <code>'?'</code> characters.</p> <p>It is guaranteed that there are no consecutive repeating characters in the given string except for <code>'?'</code>.</p> <p>Return the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"?zs\"\nOutput: \"azs\"\nExplanation: There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"ubv?w\"\nOutput: \"ubvaw\"\nExplanation: There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consist of lowercase English letters and <code>'?'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1577/","title":"1577. Number of Ways Where Square of Number Is Equal to Product of Two Numbers","text":"Problem <p>Given two arrays of integers <code>nums1</code> and <code>nums2</code>, return the number of triplets formed (type 1 and type 2) under the following rules:</p> <ul> <li>Type 1: Triplet (i, j, k) if <code>nums1[i]<sup>2</sup> == nums2[j] * nums2[k]</code> where <code>0 &lt;= i &lt; nums1.length</code> and <code>0 &lt;= j &lt; k &lt; nums2.length</code>.</li> <li>Type 2: Triplet (i, j, k) if <code>nums2[i]<sup>2</sup> == nums1[j] * nums1[k]</code> where <code>0 &lt;= i &lt; nums2.length</code> and <code>0 &lt;= j &lt; k &lt; nums1.length</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [7,4], nums2 = [5,2,8,9]\nOutput: 1\nExplanation: Type 1: (1, 1, 2), nums1[1]<sup>2</sup> = nums2[1] * nums2[2]. (4<sup>2</sup> = 2 * 8). \n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,1], nums2 = [1,1,1]\nOutput: 9\nExplanation: All Triplets are valid, because 1<sup>2</sup> = 1 * 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]<sup>2</sup> = nums2[j] * nums2[k].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]<sup>2</sup> = nums1[j] * nums1[k].\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [7,7,8,3], nums2 = [1,2,9,7]\nOutput: 2\nExplanation: There are 2 valid triplets.\nType 1: (3,0,2).  nums1[3]<sup>2</sup> = nums2[0] * nums2[2].\nType 2: (3,0,1).  nums2[3]<sup>2</sup> = nums1[0] * nums1[1].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1578/","title":"1578. Minimum Time to Make Rope Colorful","text":"Problem <p>Alice has <code>n</code> balloons arranged on a rope. You are given a 0-indexed string <code>colors</code> where <code>colors[i]</code> is the color of the <code>i<sup>th</sup></code> balloon.</p> <p>Alice wants the rope to be colorful. She does not want two consecutive balloons to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it colorful. You are given a 0-indexed integer array <code>neededTime</code> where <code>neededTime[i]</code> is the time (in seconds) that Bob needs to remove the <code>i<sup>th</sup></code> balloon from the rope.</p> <p>Return the minimum time Bob needs to make the rope colorful.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: colors = \"abaac\", neededTime = [1,2,3,4,5]\nOutput: 3\nExplanation: In the above image, 'a' is blue, 'b' is red, and 'c' is green.\nBob can remove the blue balloon at index 2. This takes 3 seconds.\nThere are no longer two consecutive balloons of the same color. Total time = 3.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: colors = \"abc\", neededTime = [1,2,3]\nOutput: 0\nExplanation: The rope is already colorful. Bob does not need to remove any balloons from the rope.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: colors = \"aabaa\", neededTime = [1,2,3,4,1]\nOutput: 2\nExplanation: Bob will remove the ballons at indices 0 and 4. Each ballon takes 1 second to remove.\nThere are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == colors.length == neededTime.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= neededTime[i] &lt;= 10<sup>4</sup></code></li> <li><code>colors</code> contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1579/","title":"1579. Remove Max Number of Edges to Keep Graph Fully Traversable","text":"Problem <p>Alice and Bob have an undirected graph of <code>n</code> nodes and three types of edges:</p> <ul> <li>Type 1: Can be traversed by Alice only.</li> <li>Type 2: Can be traversed by Bob only.</li> <li>Type 3: Can be traversed by both Alice and Bob.</li> </ul> <p>Given an array <code>edges</code> where <code>edges[i] = [type<sub>i</sub>, u<sub>i</sub>, v<sub>i</sub>]</code> represents a bidirectional edge of type <code>type<sub>i</sub></code> between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.</p> <p>Return the maximum number of edges you can remove, or return <code>-1</code> if Alice and Bob cannot fully traverse the graph.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]\nOutput: 2\nExplanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]\nOutput: 0\nExplanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]\nOutput: -1\nExplanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.</pre> <p> </p> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= edges.length &lt;= min(10<sup>5</sup>, 3 * n * (n - 1) / 2)</code></li> <li><code>edges[i].length == 3</code></li> <li><code>1 &lt;= type<sub>i</sub> &lt;= 3</code></li> <li><code>1 &lt;= u<sub>i</sub> &lt; v<sub>i</sub> &lt;= n</code></li> <li>All tuples <code>(type<sub>i</sub>, u<sub>i</sub>, v<sub>i</sub>)</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1580/","title":"1580. Put Boxes Into the Warehouse II","text":"Problem"},{"location":"LeetCode_Problems/1581/","title":"1581. Customer Who Visited but Did Not Make Any Transactions","text":"Problem <p>Table: <code>Visits</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| visit_id    | int     |\n| customer_id | int     |\n+-------------+---------+\nvisit_id is the column with unique values for this table.\nThis table contains information about the customers who visited the mall.\n</pre> <p> </p> <p>Table: <code>Transactions</code></p> <pre>\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| transaction_id | int     |\n| visit_id       | int     |\n| amount         | int     |\n+----------------+---------+\ntransaction_id is column with unique values for this table.\nThis table contains information about the transactions made during the visit_id.\n</pre> <p> </p> <p>Write a\u00a0solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.</p> <p>Return the result table sorted in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nVisits\n+----------+-------------+\n| visit_id | customer_id |\n+----------+-------------+\n| 1        | 23          |\n| 2        | 9           |\n| 4        | 30          |\n| 5        | 54          |\n| 6        | 96          |\n| 7        | 54          |\n| 8        | 54          |\n+----------+-------------+\nTransactions\n+----------------+----------+--------+\n| transaction_id | visit_id | amount |\n+----------------+----------+--------+\n| 2              | 5        | 310    |\n| 3              | 5        | 300    |\n| 9              | 5        | 200    |\n| 12             | 1        | 910    |\n| 13             | 2        | 970    |\n+----------------+----------+--------+\nOutput: \n+-------------+----------------+\n| customer_id | count_no_trans |\n+-------------+----------------+\n| 54          | 2              |\n| 30          | 1              |\n| 96          | 1              |\n+-------------+----------------+\nExplanation: \nCustomer with id = 23 visited the mall once and made one transaction during the visit with id = 12.\nCustomer with id = 9 visited the mall once and made one transaction during the visit with id = 13.\nCustomer with id = 30 visited the mall once and did not make any transactions.\nCustomer with id = 54 visited the mall three times. During 2 visits they did not make any transactions, and during one visit they made 3 transactions.\nCustomer with id = 96 visited the mall once and did not make any transactions.\nAs we can see, users with IDs 30 and 96 visited the mall one time without making any transactions. Also, user 54 visited the mall twice and did not make any transactions.\n</pre>"},{"location":"LeetCode_Problems/1582/","title":"1582. Special Positions in a Binary Matrix","text":"Problem <p>Given an <code>m x n</code> binary matrix <code>mat</code>, return the number of special positions in <code>mat</code>.</p> <p>A position <code>(i, j)</code> is called special if <code>mat[i][j] == 1</code> and all other elements in row <code>i</code> and column <code>j</code> are <code>0</code> (rows and columns are 0-indexed).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[1,0,0],[0,0,1],[1,0,0]]\nOutput: 1\nExplanation: (1, 2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: mat = [[1,0,0],[0,1,0],[0,0,1]]\nOutput: 3\nExplanation: (0, 0), (1, 1) and (2, 2) are special positions.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1583/","title":"1583. Count Unhappy Friends","text":"Problem <p>You are given a list of\u00a0<code>preferences</code>\u00a0for\u00a0<code>n</code>\u00a0friends, where <code>n</code> is always even.</p> <p>For each person <code>i</code>,\u00a0<code>preferences[i]</code>\u00a0contains\u00a0a list of friends\u00a0sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list.\u00a0Friends in\u00a0each list are\u00a0denoted by integers from <code>0</code> to <code>n-1</code>.</p> <p>All the friends are divided into pairs.\u00a0The pairings are\u00a0given in a list\u00a0<code>pairs</code>,\u00a0where <code>pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> denotes <code>x<sub>i</sub></code>\u00a0is paired with <code>y<sub>i</sub></code> and <code>y<sub>i</sub></code> is paired with <code>x<sub>i</sub></code>.</p> <p>However, this pairing may cause some of the friends to be unhappy.\u00a0A friend <code>x</code>\u00a0is unhappy if <code>x</code>\u00a0is paired with <code>y</code>\u00a0and there exists a friend <code>u</code>\u00a0who\u00a0is paired with <code>v</code>\u00a0but:</p> <ul> <li><code>x</code>\u00a0prefers <code>u</code>\u00a0over <code>y</code>,\u00a0and</li> <li><code>u</code>\u00a0prefers <code>x</code>\u00a0over <code>v</code>.</li> </ul> <p>Return the number of unhappy friends.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]\nOutput: 2\nExplanation:\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]\nOutput: 0\nExplanation: Both friends 0 and 1 are happy.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 500</code></li> <li><code>n</code>\u00a0is even.</li> <li><code>preferences.length\u00a0== n</code></li> <li><code>preferences[i].length\u00a0== n - 1</code></li> <li><code>0 &lt;= preferences[i][j] &lt;= n - 1</code></li> <li><code>preferences[i]</code>\u00a0does not contain <code>i</code>.</li> <li>All values in\u00a0<code>preferences[i]</code>\u00a0are unique.</li> <li><code>pairs.length\u00a0== n/2</code></li> <li><code>pairs[i].length\u00a0== 2</code></li> <li><code>x<sub>i</sub> != y<sub>i</sub></code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>\u00a0&lt;= n - 1</code></li> <li>Each person is contained in exactly one pair.</li> </ul>"},{"location":"LeetCode_Problems/1584/","title":"1584. Min Cost to Connect All Points","text":"Problem <p>You are given an array <code>points</code> representing integer coordinates of some points on a 2D-plane, where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p> <p>The cost of connecting two points <code>[x<sub>i</sub>, y<sub>i</sub>]</code> and <code>[x<sub>j</sub>, y<sub>j</sub>]</code> is the manhattan distance between them: <code>|x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|</code>, where <code>|val|</code> denotes the absolute value of <code>val</code>.</p> <p>Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]\nOutput: 20\nExplanation: \n\nWe can connect the points as shown above to get the minimum cost of 20.\nNotice that there is a unique path between every pair of points.\n</pre> <p>Example 2:</p> <pre>\nInput: points = [[3,12],[-2,5],[-4,1]]\nOutput: 18\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= points.length &lt;= 1000</code></li> <li><code>-10<sup>6</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>6</sup></code></li> <li>All pairs <code>(x<sub>i</sub>, y<sub>i</sub>)</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1585/","title":"1585. Check If String Is Transformable With Substring Sort Operations","text":"Problem <p>Given two strings <code>s</code> and <code>t</code>, transform string <code>s</code> into string <code>t</code> using the following operation any number of times:</p> <ul> <li>Choose a non-empty substring in <code>s</code> and sort it in place so the characters are in ascending order.      <ul> <li>For example, applying the operation on the underlined substring in <code>\"14234\"</code> results in <code>\"12344\"</code>.</li> </ul> </li> </ul> <p>Return <code>true</code> if it is possible to transform <code>s</code> into <code>t</code>. Otherwise, return <code>false</code>.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"84532\", t = \"34852\"\nOutput: true\nExplanation: You can transform s into t using the following sort operations:\n\"84532\" (from index 2 to 3) -&gt; \"84352\"\n\"84352\" (from index 0 to 2) -&gt; \"34852\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"34521\", t = \"23415\"\nOutput: true\nExplanation: You can transform s into t using the following sort operations:\n\"34521\" -&gt; \"23451\"\n\"23451\" -&gt; \"23415\"\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"12345\", t = \"12435\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>s.length == t.length</code></li> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> and <code>t</code> consist of only digits.</li> </ul>"},{"location":"LeetCode_Problems/1586/","title":"1586. Binary Search Tree Iterator II","text":"Problem"},{"location":"LeetCode_Problems/1587/","title":"1587. Bank Account Summary II","text":"Problem <p>Table: <code>Users</code></p> <pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| account      | int     |\n| name         | varchar |\n+--------------+---------+\naccount is the primary key (column with unique values) for this table.\nEach row of this table contains the account number of each user in the bank.\nThere will be no two users having the same name in the table.\n</pre> <p> </p> <p>Table: <code>Transactions</code></p> <pre>\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| trans_id      | int     |\n| account       | int     |\n| amount        | int     |\n| transacted_on | date    |\n+---------------+---------+\ntrans_id is the primary key (column with unique values) for this table.\nEach row of this table contains all changes made to all accounts.\namount is positive if the user received money and negative if they transferred money.\nAll accounts start with a balance of 0.\n</pre> <p> </p> <p>Write a solution to report the name and balance of users with a balance higher than <code>10000</code>. The balance of an account is equal to the sum of the amounts of all transactions involving that account.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nUsers table:\n+------------+--------------+\n| account    | name         |\n+------------+--------------+\n| 900001     | Alice        |\n| 900002     | Bob          |\n| 900003     | Charlie      |\n+------------+--------------+\nTransactions table:\n+------------+------------+------------+---------------+\n| trans_id   | account    | amount     | transacted_on |\n+------------+------------+------------+---------------+\n| 1          | 900001     | 7000       |  2020-08-01   |\n| 2          | 900001     | 7000       |  2020-09-01   |\n| 3          | 900001     | -3000      |  2020-09-02   |\n| 4          | 900002     | 1000       |  2020-09-12   |\n| 5          | 900003     | 6000       |  2020-08-07   |\n| 6          | 900003     | 6000       |  2020-09-07   |\n| 7          | 900003     | -4000      |  2020-09-11   |\n+------------+------------+------------+---------------+\nOutput: \n+------------+------------+\n| name       | balance    |\n+------------+------------+\n| Alice      | 11000      |\n+------------+------------+\nExplanation: \nAlice's balance is (7000 + 7000 - 3000) = 11000.\nBob's balance is 1000.\nCharlie's balance is (6000 + 6000 - 4000) = 8000.\n</pre>"},{"location":"LeetCode_Problems/1588/","title":"1588. Sum of All Odd Length Subarrays","text":"Problem <p>Given an array of positive integers <code>arr</code>, return the sum of all possible odd-length subarrays of <code>arr</code>.</p> <p>A subarray is a contiguous subsequence of the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.</pre> <p>Example 3:</p> <pre>\nInput: arr = [10,11,12]\nOutput: 66\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 100</code></li> <li><code>1 &lt;= arr[i] &lt;= 1000</code></li> </ul> <p> </p> <p>Follow up:</p> <p>Could you solve this problem in O(n) time complexity?</p>"},{"location":"LeetCode_Problems/1589/","title":"1589. Maximum Sum Obtained of Any Permutation","text":"Problem <p>We have an array of integers, <code>nums</code>, and an array of <code>requests</code> where <code>requests[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>. The <code>i<sup>th</sup></code> request asks for the sum of <code>nums[start<sub>i</sub>] + nums[start<sub>i</sub> + 1] + ... + nums[end<sub>i</sub> - 1] + nums[end<sub>i</sub>]</code>. Both <code>start<sub>i</sub></code> and <code>end<sub>i</sub></code> are 0-indexed.</p> <p>Return the maximum total sum of all requests among all permutations of <code>nums</code>.</p> <p>Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]\nOutput: 19\nExplanation: One permutation of nums is [2,1,3,4,5] with the following result: \nrequests[0] -&gt; nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -&gt; nums[0] + nums[1] = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\nA permutation with a higher total sum is [3,5,4,2,1] with the following result:\nrequests[0] -&gt; nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequests[1] -&gt; nums[0] + nums[1] = 3 + 5  = 8\nTotal sum: 11 + 8 = 19, which is the best that you can do.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4,5,6], requests = [[0,1]]\nOutput: 11\nExplanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]\nOutput: 47\nExplanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i]\u00a0&lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= requests.length &lt;=\u00a010<sup>5</sup></code></li> <li><code>requests[i].length == 2</code></li> <li><code>0 &lt;= start<sub>i</sub>\u00a0&lt;= end<sub>i</sub>\u00a0&lt;\u00a0n</code></li> </ul>"},{"location":"LeetCode_Problems/1590/","title":"1590. Make Sum Divisible by P","text":"Problem <p>Given an array of positive integers <code>nums</code>, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by <code>p</code>. It is not allowed to remove the whole array.</p> <p>Return the length of the smallest subarray that you need to remove, or <code>-1</code> if it's impossible.</p> <p>A subarray is defined as a contiguous block of elements in the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,1,4,2], p = 6\nOutput: 1\nExplanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [6,3,5,2], p = 9\nOutput: 2\nExplanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3], p = 3\nOutput: 0\nExplanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= p &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1591/","title":"1591. Strange Printer II","text":"Problem <p>There is a strange printer with the following two special requirements:</p> <ul> <li>On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.</li> <li>Once the printer has used a color for the above operation, the same color cannot be used again.</li> </ul> <p>You are given a <code>m x n</code> matrix <code>targetGrid</code>, where <code>targetGrid[row][col]</code> is the color in the position <code>(row, col)</code> of the grid.</p> <p>Return <code>true</code> if it is possible to print the matrix <code>targetGrid</code>, otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\nOutput: true\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\nOutput: true\n</pre> <p>Example 3:</p> <pre>\nInput: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]\nOutput: false\nExplanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == targetGrid.length</code></li> <li><code>n == targetGrid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 60</code></li> <li><code>1 &lt;= targetGrid[row][col] &lt;= 60</code></li> </ul>"},{"location":"LeetCode_Problems/1592/","title":"1592. Rearrange Spaces Between Words","text":"Problem <p>You are given a string <code>text</code> of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that <code>text</code> contains at least one word.</p> <p>Rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as <code>text</code>.</p> <p>Return the string after rearranging the spaces.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: text = \"  this   is  a sentence \"\nOutput: \"this   is   a   sentence\"\nExplanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.\n</pre> <p>Example 2:</p> <pre>\nInput: text = \" practice   makes   perfect\"\nOutput: \"practice   makes   perfect \"\nExplanation: There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text.length &lt;= 100</code></li> <li><code>text</code> consists of lowercase English letters and <code>' '</code>.</li> <li><code>text</code> contains at least one word.</li> </ul>"},{"location":"LeetCode_Problems/1593/","title":"1593. Split a String Into the Max Number of Unique Substrings","text":"Problem <p>Given a string\u00a0<code>s</code>,\u00a0return the maximum\u00a0number of unique substrings that the given string can be split into.</p> <p>You can split string\u00a0<code>s</code> into any list of\u00a0non-empty substrings, where the concatenation of the substrings forms the original string.\u00a0However, you must split the substrings such that all of them are unique.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ababccc\"\nOutput: 5\nExplanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aba\"\nOutput: 2\nExplanation: One way to split maximally is ['a', 'ba'].\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"aa\"\nOutput: 1\nExplanation: It is impossible to split the string any further.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li> <p><code>1 &lt;= s.length\u00a0&lt;= 16</code></p> </li> <li> <p><code>s</code> contains\u00a0only lower case English letters.</p> </li> </ul>"},{"location":"LeetCode_Problems/1594/","title":"1594. Maximum Non Negative Product in a Matrix","text":"Problem <p>You are given a <code>m x n</code> matrix <code>grid</code>. Initially, you are located at the top-left corner <code>(0, 0)</code>, and in each step, you can only move right or down in the matrix.</p> <p>Among all possible paths starting from the top-left corner <code>(0, 0)</code> and ending in the bottom-right corner <code>(m - 1, n - 1)</code>, find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.</p> <p>Return the maximum non-negative product modulo <code>10<sup>9</sup> + 7</code>. If the maximum product is negative, return <code>-1</code>.</p> <p>Notice that the modulo is performed after getting the maximum product.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]\nOutput: -1\nExplanation: It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,-2,1],[1,-2,1],[3,-4,1]]\nOutput: 8\nExplanation: Maximum non-negative product is shown (1 * 1 * -2 * -4 * 1 = 8).\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[1,3],[0,-4]]\nOutput: 0\nExplanation: Maximum non-negative product is shown (1 * 0 * -4 = 0).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 15</code></li> <li><code>-4 &lt;= grid[i][j] &lt;= 4</code></li> </ul>"},{"location":"LeetCode_Problems/1595/","title":"1595. Minimum Cost to Connect Two Groups of Points","text":"Problem <p>You are given two groups of points where the first group has <code>size<sub>1</sub></code> points, the second group has <code>size<sub>2</sub></code> points, and <code>size<sub>1</sub> &gt;= size<sub>2</sub></code>.</p> <p>The <code>cost</code> of the connection between any two points are given in an <code>size<sub>1</sub> x size<sub>2</sub></code> matrix where <code>cost[i][j]</code> is the cost of connecting point <code>i</code> of the first group and point <code>j</code> of the second group. The groups are connected if each point in both groups is connected to one or more points in the opposite group. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.</p> <p>Return the minimum cost it takes to connect the two groups.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: cost = [[15, 96], [36, 2]]\nOutput: 17\nExplanation: The optimal way of connecting the groups is:\n1--A\n2--B\nThis results in a total cost of 17.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]\nOutput: 4\nExplanation: The optimal way of connecting the groups is:\n1--A\n2--B\n2--C\n3--A\nThis results in a total cost of 4.\nNote that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost.\n</pre> <p>Example 3:</p> <pre>\nInput: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]\nOutput: 10\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>size<sub>1</sub> == cost.length</code></li> <li><code>size<sub>2</sub> == cost[i].length</code></li> <li><code>1 &lt;= size<sub>1</sub>, size<sub>2</sub> &lt;= 12</code></li> <li><code>size<sub>1</sub> &gt;= size<sub>2</sub></code></li> <li><code>0 &lt;= cost[i][j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1596/","title":"1596. The Most Frequently Ordered Products for Each Customer","text":"Problem"},{"location":"LeetCode_Problems/1597/","title":"1597. Build Binary Expression Tree From Infix Expression","text":"Problem"},{"location":"LeetCode_Problems/1598/","title":"1598. Crawler Log Folder","text":"Problem <p>The Leetcode file system keeps a log each time some user performs a change folder operation.</p> <p>The operations are described below:</p> <ul> <li><code>\"../\"</code> : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).</li> <li><code>\"./\"</code> : Remain in the same folder.</li> <li><code>\"x/\"</code> : Move to the child folder named <code>x</code> (This folder is guaranteed to always exist).</li> </ul> <p>You are given a list of strings <code>logs</code> where <code>logs[i]</code> is the operation performed by the user at the <code>i<sup>th</sup></code> step.</p> <p>The file system starts in the main folder, then the operations in <code>logs</code> are performed.</p> <p>Return the minimum number of operations needed to go back to the main folder after the change folder operations.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]\nOutput: 2\nExplanation: Use this change folder operation \"../\" 2 times and go back to the main folder.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]\nOutput: 3\n</pre> <p>Example 3:</p> <pre>\nInput: logs = [\"d1/\",\"../\",\"../\",\"../\"]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= logs.length &lt;= 10<sup>3</sup></code></li> <li><code>2 &lt;= logs[i].length &lt;= 10</code></li> <li><code>logs[i]</code> contains lowercase English letters, digits, <code>'.'</code>, and <code>'/'</code>.</li> <li><code>logs[i]</code> follows the format described in the statement.</li> <li>Folder names consist of lowercase English letters and digits.</li> </ul>"},{"location":"LeetCode_Problems/1599/","title":"1599. Maximum Profit of Operating a Centennial Wheel","text":"Problem <p>You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you <code>runningCost</code> dollars.</p> <p>You are given an array <code>customers</code> of length <code>n</code> where <code>customers[i]</code> is the number of new customers arriving just before the <code>i<sup>th</sup></code> rotation (0-indexed). This means you must rotate the wheel <code>i</code> times before the <code>customers[i]</code> customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays <code>boardingCost</code> dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.</p> <p>You can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.</p> <p>Return the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: customers = [8,3], boardingCost = 5, runningCost = 6\nOutput: 3\nExplanation: The numbers written on the gondolas are the number of people currently there.\n1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.\n2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.\n3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.\nThe highest profit was $37 after rotating the wheel 3 times.\n</pre> <p>Example 2:</p> <pre>\nInput: customers = [10,9,6], boardingCost = 6, runningCost = 4\nOutput: 7\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.\n2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.\n3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.\n4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.\n5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.\n6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.\n7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.\nThe highest profit was $122 after rotating the wheel 7 times.\n</pre> <p>Example 3:</p> <pre>\nInput: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92\nOutput: -1\nExplanation:\n1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.\n2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.\n3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.\n4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.\n5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.\nThe profit was never positive, so return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == customers.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= customers[i] &lt;= 50</code></li> <li><code>1 &lt;= boardingCost, runningCost &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1600/","title":"1600. Throne Inheritance","text":"Problem <p>A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.</p> <p>The kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function <code>Successor(x, curOrder)</code>, which given a person <code>x</code> and the inheritance order so far, returns who should be the next person after <code>x</code> in the order of inheritance.</p> <pre>\nSuccessor(x, curOrder):\n    if x has no children or all of x's children are in curOrder:\n        if x is the king return null\n        else return Successor(x's parent, curOrder)\n    else return x's oldest child who's not in curOrder\n</pre> <p>For example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.</p> <ol> <li>In the beginning, <code>curOrder</code> will be <code>[\"king\"]</code>.</li> <li>Calling <code>Successor(king, curOrder)</code> will return Alice, so we append to <code>curOrder</code> to get <code>[\"king\", \"Alice\"]</code>.</li> <li>Calling <code>Successor(Alice, curOrder)</code> will return Jack, so we append to <code>curOrder</code> to get <code>[\"king\", \"Alice\", \"Jack\"]</code>.</li> <li>Calling <code>Successor(Jack, curOrder)</code> will return Bob, so we append to <code>curOrder</code> to get <code>[\"king\", \"Alice\", \"Jack\", \"Bob\"]</code>.</li> <li>Calling <code>Successor(Bob, curOrder)</code> will return <code>null</code>. Thus the order of inheritance will be <code>[\"king\", \"Alice\", \"Jack\", \"Bob\"]</code>.</li> </ol> <p>Using the above function, we can always obtain a unique order of inheritance.</p> <p>Implement the <code>ThroneInheritance</code> class:</p> <ul> <li><code>ThroneInheritance(string kingName)</code> Initializes an object of the <code>ThroneInheritance</code> class. The name of the king is given as part of the constructor.</li> <li><code>void birth(string parentName, string childName)</code> Indicates that <code>parentName</code> gave birth to <code>childName</code>.</li> <li><code>void death(string name)</code> Indicates the death of <code>name</code>. The death of the person doesn't affect the <code>Successor</code> function nor the current inheritance order. You can treat it as just marking the person as dead.</li> <li><code>string[] getInheritanceOrder()</code> Returns a list representing the current order of inheritance excluding dead people.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"]\n[[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]]\nOutput\n[null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]]\n\nExplanation\nThroneInheritance t= new ThroneInheritance(\"king\"); // order: king\nt.birth(\"king\", \"andy\"); // order: king &gt; andy\nt.birth(\"king\", \"bob\"); // order: king &gt; andy &gt; bob\nt.birth(\"king\", \"catherine\"); // order: king &gt; andy &gt; bob &gt; catherine\nt.birth(\"andy\", \"matthew\"); // order: king &gt; andy &gt; matthew &gt; bob &gt; catherine\nt.birth(\"bob\", \"alex\"); // order: king &gt; andy &gt; matthew &gt; bob &gt; alex &gt; catherine\nt.birth(\"bob\", \"asha\"); // order: king &gt; andy &gt; matthew &gt; bob &gt; alex &gt; asha &gt; catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"]\nt.death(\"bob\"); // order: king &gt; andy &gt; matthew &gt; bob &gt; alex &gt; asha &gt; catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= kingName.length, parentName.length, childName.length, name.length &lt;= 15</code></li> <li><code>kingName</code>, <code>parentName</code>, <code>childName</code>, and <code>name</code> consist of lowercase English letters only.</li> <li>All arguments <code>childName</code> and <code>kingName</code> are distinct.</li> <li>All <code>name</code> arguments of <code>death</code> will be passed to either the constructor or as <code>childName</code> to <code>birth</code> first.</li> <li>For each call to\u00a0<code>birth(parentName, childName)</code>, it is guaranteed that\u00a0<code>parentName</code> is alive.</li> <li>At most <code>10<sup>5</sup></code> calls will be made to <code>birth</code> and <code>death</code>.</li> <li>At most <code>10</code> calls will be made to <code>getInheritanceOrder</code>.</li> </ul>"},{"location":"LeetCode_Problems/1601/","title":"1601. Maximum Number of Achievable Transfer Requests","text":"Problem <p>We have <code>n</code> buildings numbered from <code>0</code> to <code>n - 1</code>. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.</p> <p>You are given an array <code>requests</code> where <code>requests[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> represents an employee's request to transfer from building <code>from<sub>i</sub></code> to building <code>to<sub>i</sub></code>.</p> <p>All buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if <code>n = 3</code> and two employees are leaving building <code>0</code>, one is leaving building <code>1</code>, and one is leaving building <code>2</code>, there should be two employees moving to building <code>0</code>, one employee moving to building <code>1</code>, and one employee moving to building <code>2</code>.</p> <p>Return the maximum number of achievable requests.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]\nOutput: 5\nExplantion: Let's see the requests:\nFrom building 0 we have employees x and y and both want to move to building 1.\nFrom building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\nFrom building 2 we have employee z and they want to move to building 0.\nFrom building 3 we have employee c and they want to move to building 4.\nFrom building 4 we don't have any requests.\nWe can achieve the requests of users x and b by swapping their places.\nWe can achieve the requests of users y, a and z by swapping the places in the 3 buildings.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 3, requests = [[0,0],[1,2],[2,1]]\nOutput: 3\nExplantion: Let's see the requests:\nFrom building 0 we have employee x and they want to stay in the same building 0.\nFrom building 1 we have employee y and they want to move to building 2.\nFrom building 2 we have employee z and they want to move to building 1.\nWe can achieve all the requests. </pre> <p>Example 3:</p> <pre>\nInput: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 20</code></li> <li><code>1 &lt;= requests.length &lt;= 16</code></li> <li><code>requests[i].length == 2</code></li> <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/1602/","title":"1602. Find Nearest Right Node in Binary Tree","text":"Problem"},{"location":"LeetCode_Problems/1603/","title":"1603. Design Parking System","text":"Problem <p>Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.</p> <p>Implement the <code>ParkingSystem</code> class:</p> <ul> <li><code>ParkingSystem(int big, int medium, int small)</code> Initializes object of the <code>ParkingSystem</code> class. The number of slots for each parking space are given as part of the constructor.</li> <li><code>bool addCar(int carType)</code> Checks whether there is a parking space of <code>carType</code> for the car that wants to get into the parking lot. <code>carType</code> can be of three kinds: big, medium, or small, which are represented by <code>1</code>, <code>2</code>, and <code>3</code> respectively. A car can only park in a parking space of its <code>carType</code>. If there is no space available, return <code>false</code>, else park the car in that size space and return <code>true</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]\n[[1, 1, 0], [1], [2], [3], [1]]\nOutput\n[null, true, true, false, false]\n\nExplanation\nParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // return true because there is 1 available slot for a big car\nparkingSystem.addCar(2); // return true because there is 1 available slot for a medium car\nparkingSystem.addCar(3); // return false because there is no available slot for a small car\nparkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= big, medium, small &lt;= 1000</code></li> <li><code>carType</code> is <code>1</code>, <code>2</code>, or <code>3</code></li> <li>At most <code>1000</code> calls will be made to <code>addCar</code></li> </ul>"},{"location":"LeetCode_Problems/1604/","title":"1604. Alert Using Same Key-Card Three or More Times in a One Hour Period","text":"Problem <p>LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period.</p> <p>You are given a list of strings <code>keyName</code> and <code>keyTime</code> where <code>[keyName[i], keyTime[i]]</code> corresponds to a person's name and the time when their key-card was used in a single day.</p> <p>Access times are given in the 24-hour time format \"HH:MM\", such as <code>\"23:51\"</code> and <code>\"09:49\"</code>.</p> <p>Return a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically.</p> <p>Notice that <code>\"10:00\"</code> - <code>\"11:00\"</code> is considered to be within a one-hour period, while <code>\"22:51\"</code> - <code>\"23:52\"</code> is not considered to be within a one-hour period.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]\nOutput: [\"daniel\"]\nExplanation: \"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\").\n</pre> <p>Example 2:</p> <pre>\nInput: keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]\nOutput: [\"bob\"]\nExplanation: \"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\").\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= keyName.length, keyTime.length &lt;= 10<sup>5</sup></code></li> <li><code>keyName.length == keyTime.length</code></li> <li><code>keyTime[i]</code> is in the format \"HH:MM\".</li> <li><code>[keyName[i], keyTime[i]]</code> is unique.</li> <li><code>1 &lt;= keyName[i].length &lt;= 10</code></li> <li><code>keyName[i] contains only lowercase English letters.</code></li> </ul>"},{"location":"LeetCode_Problems/1605/","title":"1605. Find Valid Matrix Given Row and Column Sums","text":"Problem <p>You are given two arrays <code>rowSum</code> and <code>colSum</code> of non-negative integers where <code>rowSum[i]</code> is the sum of the elements in the <code>i<sup>th</sup></code> row and <code>colSum[j]</code> is the sum of the elements of the <code>j<sup>th</sup></code> column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.</p> <p>Find any matrix of non-negative integers of size <code>rowSum.length x colSum.length</code> that satisfies the <code>rowSum</code> and <code>colSum</code> requirements.</p> <p>Return a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rowSum = [3,8], colSum = [4,7]\nOutput: [[3,0],\n         [1,7]]\nExplanation: \n0<sup>th</sup> row: 3 + 0 = 3 == rowSum[0]\n1<sup>st</sup> row: 1 + 7 = 8 == rowSum[1]\n0<sup>th</sup> column: 3 + 1 = 4 == colSum[0]\n1<sup>st</sup> column: 0 + 7 = 7 == colSum[1]\nThe row and column sums match, and all matrix elements are non-negative.\nAnother possible matrix is: [[1,2],\n                             [3,5]]\n</pre> <p>Example 2:</p> <pre>\nInput: rowSum = [5,7,10], colSum = [8,6,8]\nOutput: [[0,5,0],\n         [6,1,0],\n         [2,0,8]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rowSum.length, colSum.length &lt;= 500</code></li> <li><code>0 &lt;= rowSum[i], colSum[i] &lt;= 10<sup>8</sup></code></li> <li><code>sum(rowSum) == sum(colSum)</code></li> </ul>"},{"location":"LeetCode_Problems/1606/","title":"1606. Find Servers That Handled Most Number of Requests","text":"Problem <p>You have <code>k</code> servers numbered from <code>0</code> to <code>k-1</code> that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:</p> <ul> <li>The <code>i<sup>th</sup></code> (0-indexed) request arrives.</li> <li>If all servers are busy, the request is dropped (not handled at all).</li> <li>If the <code>(i % k)<sup>th</sup></code> server is available, assign the request to that server.</li> <li>Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the <code>i<sup>th</sup></code> server is busy, try to assign the request to the <code>(i+1)<sup>th</sup></code> server, then the <code>(i+2)<sup>th</sup></code> server, and so on.</li> </ul> <p>You are given a strictly increasing array <code>arrival</code> of positive integers, where <code>arrival[i]</code> represents the arrival time of the <code>i<sup>th</sup></code> request, and another array <code>load</code>, where <code>load[i]</code> represents the load of the <code>i<sup>th</sup></code> request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.</p> <p>Return a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] \nOutput: [1] \nExplanation: \nAll of the servers start out available.\nThe first 3 requests are handled by the first 3 servers in order.\nRequest 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.\nRequest 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\nServers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.\n</pre> <p>Example 2:</p> <pre>\nInput: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]\nOutput: [0]\nExplanation: \nThe first 3 requests are handled by first 3 servers.\nRequest 3 comes in. It is handled by server 0 since the server is available.\nServer 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.\n</pre> <p>Example 3:</p> <pre>\nInput: k = 3, arrival = [1,2,3], load = [10,12,11]\nOutput: [0,1,2]\nExplanation: Each server handles a single request, so they are all considered the busiest.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arrival.length, load.length &lt;= 10<sup>5</sup></code></li> <li><code>arrival.length == load.length</code></li> <li><code>1 &lt;= arrival[i], load[i] &lt;= 10<sup>9</sup></code></li> <li><code>arrival</code> is strictly increasing.</li> </ul>"},{"location":"LeetCode_Problems/1607/","title":"1607. Sellers With No Sales","text":"Problem"},{"location":"LeetCode_Problems/1608/","title":"1608. Special Array With X Elements Greater Than or Equal X","text":"Problem <p>You are given an array <code>nums</code> of non-negative integers. <code>nums</code> is considered special if there exists a number <code>x</code> such that there are exactly <code>x</code> numbers in <code>nums</code> that are greater than or equal to <code>x</code>.</p> <p>Notice that <code>x</code> does not have to be an element in <code>nums</code>.</p> <p>Return <code>x</code> if the array is special, otherwise, return <code>-1</code>. It can be proven that if <code>nums</code> is special, the value for <code>x</code> is unique.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,5]\nOutput: 2\nExplanation: There are 2 values (3 and 5) that are greater than or equal to 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,0]\nOutput: -1\nExplanation: No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers &gt;= x, but there are 2.\nIf x = 1, there should be 1 number &gt;= x, but there are 0.\nIf x = 2, there should be 2 numbers &gt;= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [0,4,3,0,4]\nOutput: 3\nExplanation: There are 3 values that are greater than or equal to 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1609/","title":"1609. Even Odd Tree","text":"Problem <p>A binary tree is named Even-Odd if it meets the following conditions:</p> <ul> <li>The root of the binary tree is at level index <code>0</code>, its children are at level index <code>1</code>, their children are at level index <code>2</code>, etc.</li> <li>For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).</li> <li>For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).</li> </ul> <p>Given the <code>root</code> of a binary tree, return <code>true</code> if the binary tree is Even-Odd, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]\nOutput: true\nExplanation: The node values on each level are:\nLevel 0: [1]\nLevel 1: [10,4]\nLevel 2: [3,7,9]\nLevel 3: [12,8,6,2]\nSince levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [5,4,2,3,3,7]\nOutput: false\nExplanation: The node values on each level are:\nLevel 0: [5]\nLevel 1: [4,2]\nLevel 2: [3,3,7]\nNode values in level 2 must be in strictly increasing order, so the tree is not Even-Odd.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [5,9,1,3,5,7]\nOutput: false\nExplanation: Node values in the level 1 should be even integers.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1610/","title":"1610. Maximum Number of Visible Points","text":"Problem <p>You are given an array <code>points</code>, an integer <code>angle</code>, and your <code>location</code>, where <code>location = [pos<sub>x</sub>, pos<sub>y</sub>]</code> and <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> both denote integral coordinates on the X-Y plane.</p> <p>Initially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, <code>pos<sub>x</sub></code> and <code>pos<sub>y</sub></code> cannot be changed. Your field of view in degrees is represented by <code>angle</code>, determining how wide you can see from any given view direction. Let <code>d</code> be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles <code>[d - angle/2, d + angle/2]</code>.</p> <p> Your browser does not support the video tag or this video format. </p> <p>You can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.</p> <p>There can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.</p> <p>Return the maximum number of points you can see.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]\nOutput: 3\nExplanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight.\n</pre> <p>Example 2:</p> <pre>\nInput: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]\nOutput: 4\nExplanation: All points can be made visible in your field of view, including the one at your location.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: points = [[1,0],[2,1]], angle = 13, location = [1,1]\nOutput: 1\nExplanation: You can only see one of the two points, as shown above.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= points.length &lt;= 10<sup>5</sup></code></li> <li><code>points[i].length == 2</code></li> <li><code>location.length == 2</code></li> <li><code>0 &lt;= angle &lt; 360</code></li> <li><code>0 &lt;= pos<sub>x</sub>, pos<sub>y</sub>, x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1611/","title":"1611. Minimum One Bit Operations to Make Integers Zero","text":"Problem <p>Given an integer <code>n</code>, you must transform it into <code>0</code> using the following operations any number of times:</p> <ul> <li>Change the rightmost (<code>0<sup>th</sup></code>) bit in the binary representation of <code>n</code>.</li> <li>Change the <code>i<sup>th</sup></code> bit in the binary representation of <code>n</code> if the <code>(i-1)<sup>th</sup></code> bit is set to <code>1</code> and the <code>(i-2)<sup>th</sup></code> through <code>0<sup>th</sup></code> bits are set to <code>0</code>.</li> </ul> <p>Return the minimum number of operations to transform <code>n</code> into <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3\nOutput: 2\nExplanation: The binary representation of 3 is \"11\".\n\"11\" -&gt; \"01\" with the 2<sup>nd</sup> operation since the 0<sup>th</sup> bit is 1.\n\"01\" -&gt; \"00\" with the 1<sup>st</sup> operation.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 6\nOutput: 4\nExplanation: The binary representation of 6 is \"110\".\n\"110\" -&gt; \"010\" with the 2<sup>nd</sup> operation since the 1<sup>st</sup> bit is 1 and 0<sup>th</sup> through 0<sup>th</sup> bits are 0.\n\"010\" -&gt; \"011\" with the 1<sup>st</sup> operation.\n\"011\" -&gt; \"001\" with the 2<sup>nd</sup> operation since the 0<sup>th</sup> bit is 1.\n\"001\" -&gt; \"000\" with the 1<sup>st</sup> operation.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1612/","title":"1612. Check If Two Expression Trees are Equivalent","text":"Problem"},{"location":"LeetCode_Problems/1613/","title":"1613. Find the Missing IDs","text":"Problem"},{"location":"LeetCode_Problems/1614/","title":"1614. Maximum Nesting Depth of the Parentheses","text":"Problem <p>A string is a valid parentheses string (denoted VPS) if it meets one of the following:</p> <ul> <li>It is an empty string <code>\"\"</code>, or a single character not equal to <code>\"(\"</code> or <code>\")\"</code>,</li> <li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are VPS's, or</li> <li>It can be written as <code>(A)</code>, where <code>A</code> is a VPS.</li> </ul> <p>We can similarly define the nesting depth <code>depth(S)</code> of any VPS <code>S</code> as follows:</p> <ul> <li><code>depth(\"\") = 0</code></li> <li><code>depth(C) = 0</code>, where <code>C</code> is a string with a single character not equal to <code>\"(\"</code> or <code>\")\"</code>.</li> <li><code>depth(A + B) = max(depth(A), depth(B))</code>, where <code>A</code> and <code>B</code> are VPS's.</li> <li><code>depth(\"(\" + A + \")\") = 1 + depth(A)</code>, where <code>A</code> is a VPS.</li> </ul> <p>For example, <code>\"\"</code>, <code>\"()()\"</code>, and <code>\"()(()())\"</code> are VPS's (with nesting depths 0, 1, and 2), and <code>\")(\"</code> and <code>\"(()\"</code> are not VPS's.</p> <p>Given a VPS represented as string <code>s</code>, return the nesting depth of <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"(1+(2*3)+((8)/4))+1\"\nOutput: 3\nExplanation: Digit 8 is inside of 3 nested parentheses in the string.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"(1)+((2))+(((3)))\"\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of digits <code>0-9</code> and characters <code>'+'</code>, <code>'-'</code>, <code>'*'</code>, <code>'/'</code>, <code>'('</code>, and <code>')'</code>.</li> <li>It is guaranteed that parentheses expression <code>s</code> is a VPS.</li> </ul>"},{"location":"LeetCode_Problems/1615/","title":"1615. Maximal Network Rank","text":"Problem <p>There is an infrastructure of <code>n</code> cities with some number of <code>roads</code> connecting these cities. Each <code>roads[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is a bidirectional road between cities <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p> <p>The network rank of two different cities is defined as the total number of\u00a0directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.</p> <p>The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.</p> <p>Given the integer <code>n</code> and the array <code>roads</code>, return the maximal network rank of the entire infrastructure.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]\nOutput: 4\nExplanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]\nOutput: 5\nExplanation: There are 5 roads that are connected to cities 1 or 2.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]\nOutput: 5\nExplanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= roads.length &lt;= n * (n - 1) / 2</code></li> <li><code>roads[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub>\u00a0&lt;= n-1</code></li> <li><code>a<sub>i</sub>\u00a0!=\u00a0b<sub>i</sub></code></li> <li>Each\u00a0pair of cities has at most one road connecting them.</li> </ul>"},{"location":"LeetCode_Problems/1616/","title":"1616. Split Two Strings to Make Palindrome","text":"Problem <p>You are given two strings <code>a</code> and <code>b</code> of the same length. Choose an index and split both strings at the same index, splitting <code>a</code> into two strings: <code>a<sub>prefix</sub></code> and <code>a<sub>suffix</sub></code> where <code>a = a<sub>prefix</sub> + a<sub>suffix</sub></code>, and splitting <code>b</code> into two strings: <code>b<sub>prefix</sub></code> and <code>b<sub>suffix</sub></code> where <code>b = b<sub>prefix</sub> + b<sub>suffix</sub></code>. Check if <code>a<sub>prefix</sub> + b<sub>suffix</sub></code> or <code>b<sub>prefix</sub> + a<sub>suffix</sub></code> forms a palindrome.</p> <p>When you split a string <code>s</code> into <code>s<sub>prefix</sub></code> and <code>s<sub>suffix</sub></code>, either <code>s<sub>suffix</sub></code> or <code>s<sub>prefix</sub></code> is allowed to be empty. For example, if <code>s = \"abc\"</code>, then <code>\"\" + \"abc\"</code>, <code>\"a\" + \"bc\"</code>, <code>\"ab\" + \"c\"</code> , and <code>\"abc\" + \"\"</code> are valid splits.</p> <p>Return <code>true</code> if it is possible to form a palindrome string, otherwise return <code>false</code>.</p> <p>Notice that\u00a0<code>x + y</code> denotes the concatenation of strings <code>x</code> and <code>y</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: a = \"x\", b = \"y\"\nOutput: true\nExplaination: If either a or b are palindromes the answer is true since you can split in the following way:\na<sub>prefix</sub> = \"\", a<sub>suffix</sub> = \"x\"\nb<sub>prefix</sub> = \"\", b<sub>suffix</sub> = \"y\"\nThen, a<sub>prefix</sub> + b<sub>suffix</sub> = \"\" + \"y\" = \"y\", which is a palindrome.\n</pre> <p>Example 2:</p> <pre>\nInput: a = \"xbdef\", b = \"xecab\"\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: a = \"ulacfd\", b = \"jizalu\"\nOutput: true\nExplaination: Split them at index 3:\na<sub>prefix</sub> = \"ula\", a<sub>suffix</sub> = \"cfd\"\nb<sub>prefix</sub> = \"jiz\", b<sub>suffix</sub> = \"alu\"\nThen, a<sub>prefix</sub> + b<sub>suffix</sub> = \"ula\" + \"alu\" = \"ulaalu\", which is a palindrome.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a.length, b.length &lt;= 10<sup>5</sup></code></li> <li><code>a.length == b.length</code></li> <li><code>a</code> and <code>b</code> consist of lowercase English letters</li> </ul>"},{"location":"LeetCode_Problems/1617/","title":"1617. Count Subtrees With Max Distance Between Cities","text":"Problem <p>There are <code>n</code> cities numbered from <code>1</code> to <code>n</code>. You are given an array <code>edges</code> of size <code>n-1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> represents a bidirectional edge between cities <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>. There exists a unique path between each pair of cities. In other words, the cities form a tree.</p> <p>A subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.</p> <p>For each <code>d</code> from <code>1</code> to <code>n-1</code>, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to <code>d</code>.</p> <p>Return an array of size <code>n-1</code> where the <code>d<sup>th</sup></code> element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to <code>d</code>.</p> <p>Notice\u00a0that\u00a0the distance between the two cities is the number of edges in the path between them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, edges = [[1,2],[2,3],[2,4]]\nOutput: [3,4,0]\nExplanation:\nThe subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.\nThe subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.\nNo subtree has two nodes where the max distance between them is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, edges = [[1,2]]\nOutput: [1]\n</pre> <p>Example 3:</p> <pre>\nInput: n = 3, edges = [[1,2],[2,3]]\nOutput: [2,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 15</code></li> <li><code>edges.length == n-1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> <li>All pairs <code>(u<sub>i</sub>, v<sub>i</sub>)</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1618/","title":"1618. Maximum Font to Fit a Sentence in a Screen","text":"Problem"},{"location":"LeetCode_Problems/1619/","title":"1619. Mean of Array After Removing Some Elements","text":"Problem <p>Given an integer array <code>arr</code>, return the mean of the remaining integers after removing the smallest <code>5%</code> and the largest <code>5%</code> of the elements.</p> <p>Answers within <code>10<sup>-5</sup></code> of the actual answer will be considered accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]\nOutput: 2.00000\nExplanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]\nOutput: 4.00000\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]\nOutput: 4.77778\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>20 &lt;= arr.length &lt;= 1000</code></li> <li><code>arr.length</code> is a multiple of <code>20</code>.</li> <li><code>0 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1620/","title":"1620. Coordinate With Maximum Network Quality","text":"Problem <p>You are given an array of network towers <code>towers</code>, where <code>towers[i] = [x<sub>i</sub>, y<sub>i</sub>, q<sub>i</sub>]</code> denotes the <code>i<sup>th</sup></code> network tower with location <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and quality factor <code>q<sub>i</sub></code>. All the coordinates are integral coordinates on the X-Y plane, and the distance between the two coordinates is the Euclidean distance.</p> <p>You are also given an integer <code>radius</code> where a tower is reachable if the distance is less than or equal to <code>radius</code>. Outside that distance, the signal becomes garbled, and the tower is not reachable.</p> <p>The signal quality of the <code>i<sup>th</sup></code> tower at a coordinate <code>(x, y)</code> is calculated with the formula <code>\u230aq<sub>i</sub> / (1 + d)\u230b</code>, where <code>d</code> is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.</p> <p>Return the array <code>[c<sub>x</sub>, c<sub>y</sub>]</code> representing the integral coordinate <code>(c<sub>x</sub>, c<sub>y</sub>)</code> where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum non-negative coordinate.</p> <p>Note:</p> <ul> <li>A coordinate <code>(x1, y1)</code> is lexicographically smaller than <code>(x2, y2)</code> if either:      <ul> <li><code>x1 &lt; x2</code>, or</li> <li><code>x1 == x2</code> and <code>y1 &lt; y2</code>.</li> </ul> </li> <li><code>\u230aval\u230b</code> is the greatest integer less than or equal to <code>val</code> (the floor function).</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2\nOutput: [2,1]\nExplanation: At coordinate (2, 1) the total quality is 13.\n- Quality of 7 from (2, 1) results in \u230a7 / (1 + sqrt(0)\u230b = \u230a7\u230b = 7\n- Quality of 5 from (1, 2) results in \u230a5 / (1 + sqrt(2)\u230b = \u230a2.07\u230b = 2\n- Quality of 9 from (3, 1) results in \u230a9 / (1 + sqrt(1)\u230b = \u230a4.5\u230b = 4\nNo other coordinate has a higher network quality.</pre> <p>Example 2:</p> <pre>\nInput: towers = [[23,11,21]], radius = 9\nOutput: [23,11]\nExplanation: Since there is only one tower, the network quality is highest right at the tower's location.\n</pre> <p>Example 3:</p> <pre>\nInput: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2\nOutput: [1,2]\nExplanation: Coordinate (1, 2) has the highest network quality.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= towers.length &lt;= 50</code></li> <li><code>towers[i].length == 3</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>, q<sub>i</sub> &lt;= 50</code></li> <li><code>1 &lt;= radius &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/1621/","title":"1621. Number of Sets of K Non-Overlapping Line Segments","text":"Problem <p>Given <code>n</code> points on a 1-D plane, where the <code>i<sup>th</sup></code> point (from <code>0</code> to <code>n-1</code>) is at <code>x = i</code>, find the number of ways we can draw exactly <code>k</code> non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The <code>k</code> line segments do not have to cover all <code>n</code> points, and they are allowed to share endpoints.</p> <p>Return the number of ways we can draw <code>k</code> non-overlapping line segments. Since this number can be huge, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, k = 2\nOutput: 5\nExplanation: The two line segments are shown in red and blue.\nThe image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, k = 1\nOutput: 3\nExplanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 30, k = 7\nOutput: 796297179\nExplanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 10<sup>9</sup> + 7 gives us 796297179.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= k &lt;= n-1</code></li> </ul>"},{"location":"LeetCode_Problems/1622/","title":"1622. Fancy Sequence","text":"Problem <p>Write an API that generates fancy sequences using the <code>append</code>, <code>addAll</code>, and <code>multAll</code> operations.</p> <p>Implement the <code>Fancy</code> class:</p> <ul> <li><code>Fancy()</code> Initializes the object with an empty sequence.</li> <li><code>void append(val)</code> Appends an integer <code>val</code> to the end of the sequence.</li> <li><code>void addAll(inc)</code> Increments all existing values in the sequence by an integer <code>inc</code>.</li> <li><code>void multAll(m)</code> Multiplies all existing values in the sequence by an integer <code>m</code>.</li> <li><code>int getIndex(idx)</code> Gets the current value at index <code>idx</code> (0-indexed) of the sequence modulo <code>10<sup>9</sup> + 7</code>. If the index is greater or equal than the length of the sequence, return <code>-1</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]\n[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]\nOutput\n[null, null, null, null, null, 10, null, null, null, 26, 34, 20]\n\nExplanation\nFancy fancy = new Fancy();\nfancy.append(2);   // fancy sequence: [2]\nfancy.addAll(3);   // fancy sequence: [2+3] -&gt; [5]\nfancy.append(7);   // fancy sequence: [5, 7]\nfancy.multAll(2);  // fancy sequence: [5*2, 7*2] -&gt; [10, 14]\nfancy.getIndex(0); // return 10\nfancy.addAll(3);   // fancy sequence: [10+3, 14+3] -&gt; [13, 17]\nfancy.append(10);  // fancy sequence: [13, 17, 10]\nfancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -&gt; [26, 34, 20]\nfancy.getIndex(0); // return 26\nfancy.getIndex(1); // return 34\nfancy.getIndex(2); // return 20\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= val, inc, m &lt;= 100</code></li> <li><code>0 &lt;= idx &lt;= 10<sup>5</sup></code></li> <li>At most <code>10<sup>5</sup></code> calls total will be made to <code>append</code>, <code>addAll</code>, <code>multAll</code>, and <code>getIndex</code>.</li> </ul>"},{"location":"LeetCode_Problems/1623/","title":"1623. All Valid Triplets That Can Represent a Country","text":"Problem"},{"location":"LeetCode_Problems/1624/","title":"1624. Largest Substring Between Two Equal Characters","text":"Problem <p>Given a string <code>s</code>, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return <code>-1</code>.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aa\"\nOutput: 0\nExplanation: The optimal substring here is an empty substring between the two <code>'a's</code>.</pre> <p>Example 2:</p> <pre>\nInput: s = \"abca\"\nOutput: 2\nExplanation: The optimal substring here is \"bc\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"cbzxy\"\nOutput: -1\nExplanation: There are no characters that appear twice in s.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 300</code></li> <li><code>s</code> contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1625/","title":"1625. Lexicographically Smallest String After Applying Operations","text":"Problem <p>You are given a string <code>s</code> of even length consisting of digits from <code>0</code> to <code>9</code>, and two integers <code>a</code> and <code>b</code>.</p> <p>You can apply either of the following two operations any number of times and in any order on <code>s</code>:</p> <ul> <li>Add <code>a</code> to all odd indices of <code>s</code> (0-indexed). Digits post <code>9</code> are cycled back to <code>0</code>. For example, if <code>s = \"3456\"</code> and <code>a = 5</code>, <code>s</code> becomes <code>\"3951\"</code>.</li> <li>Rotate <code>s</code> to the right by <code>b</code> positions. For example, if <code>s = \"3456\"</code> and <code>b = 1</code>, <code>s</code> becomes <code>\"6345\"</code>.</li> </ul> <p>Return the lexicographically smallest string you can obtain by applying the above operations any number of times on <code>s</code>.</p> <p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>. For example, <code>\"0158\"</code> is lexicographically smaller than <code>\"0190\"</code> because the first position they differ is at the third letter, and <code>'5'</code> comes before <code>'9'</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"5525\", a = 9, b = 2\nOutput: \"2050\"\nExplanation: We can apply the following operations:\nStart:  \"5525\"\nRotate: \"2555\"\nAdd:    \"2454\"\nAdd:    \"2353\"\nRotate: \"5323\"\nAdd:    \"5222\"\nAdd:    \"5121\"\nRotate: \"2151\"\nAdd:    \"2050\"\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than \"2050\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"74\", a = 5, b = 1\nOutput: \"24\"\nExplanation: We can apply the following operations:\nStart:  \"74\"\nRotate: \"47\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd:    \"42\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bRotate: \"24\"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller than \"24\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"0011\", a = 4, b = 2\nOutput: \"0011\"\nExplanation: There are no sequence of operations that will give us a lexicographically smaller string than \"0011\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 100</code></li> <li><code>s.length</code> is even.</li> <li><code>s</code> consists of digits from <code>0</code> to <code>9</code> only.</li> <li><code>1 &lt;= a &lt;= 9</code></li> <li><code>1 &lt;= b &lt;= s.length - 1</code></li> </ul>"},{"location":"LeetCode_Problems/1626/","title":"1626. Best Team With No Conflicts","text":"Problem <p>You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.</p> <p>However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.</p> <p>Given two lists, <code>scores</code> and <code>ages</code>, where each <code>scores[i]</code> and <code>ages[i]</code> represents the score and age of the <code>i<sup>th</sup></code> player, respectively, return the highest overall score of all possible basketball teams.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: scores = [1,3,5,10,15], ages = [1,2,3,4,5]\nOutput: 34\nExplanation:\u00a0You can choose all the players.\n</pre> <p>Example 2:</p> <pre>\nInput: scores = [4,5,6,5], ages = [2,1,2,1]\nOutput: 16\nExplanation:\u00a0It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.\n</pre> <p>Example 3:</p> <pre>\nInput: scores = [1,2,3,5], ages = [8,9,10,1]\nOutput: 6\nExplanation:\u00a0It is best to choose the first 3 players. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= scores.length, ages.length &lt;= 1000</code></li> <li><code>scores.length == ages.length</code></li> <li><code>1 &lt;= scores[i] &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= ages[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1627/","title":"1627. Graph Connectivity With Threshold","text":"Problem <p>We have <code>n</code> cities labeled from <code>1</code> to <code>n</code>. Two different cities with labels <code>x</code> and <code>y</code> are directly connected by a bidirectional road if and only if <code>x</code> and <code>y</code> share a common divisor strictly greater than some <code>threshold</code>. More formally, cities with labels <code>x</code> and <code>y</code> have a road between them if there exists an integer <code>z</code> such that all of the following are true:</p> <ul> <li><code>x % z == 0</code>,</li> <li><code>y % z == 0</code>, and</li> <li><code>z &gt; threshold</code>.</li> </ul> <p>Given the two integers, <code>n</code> and <code>threshold</code>, and an array of <code>queries</code>, you must determine for each <code>queries[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> if cities <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> are connected directly or indirectly.\u00a0(i.e. there is some path between them).</p> <p>Return an array <code>answer</code>, where <code>answer.length == queries.length</code> and <code>answer[i]</code> is <code>true</code> if for the <code>i<sup>th</sup></code> query, there is a path between <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>, or <code>answer[i]</code> is <code>false</code> if there is no path.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]\nOutput: [false,false,true]\nExplanation: The divisors for each number:\n1:   1\n2:   1, 2\n3:   1, 3\n4:   1, 2, 4\n5:   1, 5\n6:   1, 2, 3, 6\nUsing the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\nonly ones directly connected. The result of each query:\n[1,4]   1 is not connected to 4\n[2,5]   2 is not connected to 5\n[3,6]   3 is connected to 6 through path 3--6\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]\nOutput: [true,true,true,true,true]\nExplanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]\nOutput: [false,false,false,false,false]\nExplanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\nPlease notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= threshold &lt;= n</code></li> <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> <li><code>queries[i].length == 2</code></li> <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= cities</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> </ul>"},{"location":"LeetCode_Problems/1628/","title":"1628. Design an Expression Tree With Evaluate Function","text":"Problem"},{"location":"LeetCode_Problems/1629/","title":"1629. Slowest Key","text":"Problem <p>A newly designed keypad was tested, where a tester pressed a sequence of <code>n</code> keys, one at a time.</p> <p>You are given a string <code>keysPressed</code> of length <code>n</code>, where <code>keysPressed[i]</code> was the <code>i<sup>th</sup></code> key pressed in the testing sequence, and a sorted list <code>releaseTimes</code>, where <code>releaseTimes[i]</code> was the time the <code>i<sup>th</sup></code> key was released. Both arrays are 0-indexed. The <code>0<sup>th</sup></code> key was pressed at the time <code>0</code>,\u00a0and every subsequent key was pressed at the exact time the previous key was released.</p> <p>The tester wants to know the key of the keypress that had the longest duration. The <code>i<sup>th</sup></code><sup> </sup>keypress had a duration of <code>releaseTimes[i] - releaseTimes[i - 1]</code>, and the <code>0<sup>th</sup></code> keypress had a duration of <code>releaseTimes[0]</code>.</p> <p>Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.</p> <p>Return the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"\nOutput: \"c\"\nExplanation: The keypresses were as follows:\nKeypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).\nKeypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).\nKeypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).\nKeypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).\nThe longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.\n'c' is lexicographically larger than 'b', so the answer is 'c'.\n</pre> <p>Example 2:</p> <pre>\nInput: releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"\nOutput: \"a\"\nExplanation: The keypresses were as follows:\nKeypress for 's' had a duration of 12.\nKeypress for 'p' had a duration of 23 - 12 = 11.\nKeypress for 'u' had a duration of 36 - 23 = 13.\nKeypress for 'd' had a duration of 46 - 36 = 10.\nKeypress for 'a' had a duration of 62 - 46 = 16.\nThe longest of these was the keypress for 'a' with duration 16.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>releaseTimes.length == n</code></li> <li><code>keysPressed.length == n</code></li> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= releaseTimes[i] &lt;= 10<sup>9</sup></code></li> <li><code>releaseTimes[i] &lt; releaseTimes[i+1]</code></li> <li><code>keysPressed</code> contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1630/","title":"1630. Arithmetic Subarrays","text":"Problem <p>A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence <code>s</code> is arithmetic if and only if <code>s[i+1] - s[i] == s[1] - s[0] </code>for all valid <code>i</code>.</p> <p>For example, these are arithmetic sequences:</p> <pre>\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre> <p>The following sequence is not arithmetic:</p> <pre>\n1, 1, 2, 5, 7</pre> <p>You are given an array of <code>n</code> integers, <code>nums</code>, and two arrays of <code>m</code> integers each, <code>l</code> and <code>r</code>, representing the <code>m</code> range queries, where the <code>i<sup>th</sup></code> query is the range <code>[l[i], r[i]]</code>. All the arrays are 0-indexed.</p> <p>Return a list of <code>boolean</code> elements <code>answer</code>, where <code>answer[i]</code> is <code>true</code> if the subarray <code>nums[l[i]], nums[l[i]+1], ... , nums[r[i]]</code> can be rearranged to form an arithmetic sequence, and <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = <code>[4,6,5,9,3,7]</code>, l = <code>[0,0,2]</code>, r = <code>[2,3,5]</code>\nOutput: <code>[true,false,true]</code>\nExplanation:\nIn the 0<sup>th</sup> query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.\nIn the 1<sup>st</sup> query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.\nIn the 2<sup>nd</sup> query, the subarray is <code>[5,9,3,7]. This</code> can be rearranged as <code>[3,5,7,9]</code>, which is an arithmetic sequence.</pre> <p>Example 2:</p> <pre>\nInput: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]\nOutput: [false,true,false,false,true,true]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>m == l.length</code></li> <li><code>m == r.length</code></li> <li><code>2 &lt;= n &lt;= 500</code></li> <li><code>1 &lt;= m &lt;= 500</code></li> <li><code>0 &lt;= l[i] &lt; r[i] &lt; n</code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1631/","title":"1631. Path With Minimum Effort","text":"Problem <p>You are a hiker preparing for an upcoming hike. You are given <code>heights</code>, a 2D array of size <code>rows x columns</code>, where <code>heights[row][col]</code> represents the height of cell <code>(row, col)</code>. You are situated in the top-left cell, <code>(0, 0)</code>, and you hope to travel to the bottom-right cell, <code>(rows-1, columns-1)</code> (i.e.,\u00a00-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.</p> <p>A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.</p> <p>Return the minimum effort required to travel from the top-left cell to the bottom-right cell.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: heights = [[1,2,2],[3,8,2],[5,3,5]]\nOutput: 2\nExplanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.\nThis is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: heights = [[1,2,3],[3,8,4],[5,3,5]]\nOutput: 1\nExplanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]\nOutput: 0\nExplanation: This route does not require any effort.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>rows == heights.length</code></li> <li><code>columns == heights[i].length</code></li> <li><code>1 &lt;= rows, columns &lt;= 100</code></li> <li><code>1 &lt;= heights[i][j] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1632/","title":"1632. Rank Transform of a Matrix","text":"Problem <p>Given an <code>m x n</code> <code>matrix</code>, return a new matrix <code>answer</code> where <code>answer[row][col]</code> is the rank of <code>matrix[row][col]</code>.</p> <p>The rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:</p> <ul> <li>The rank is an integer starting from <code>1</code>.</li> <li>If two elements <code>p</code> and <code>q</code> are in the same row or column, then:     <ul> <li>If <code>p &lt; q</code> then <code>rank(p) &lt; rank(q)</code></li> <li>If <code>p == q</code> then <code>rank(p) == rank(q)</code></li> <li>If <code>p &gt; q</code> then <code>rank(p) &gt; rank(q)</code></li> </ul> </li> <li>The rank should be as small as possible.</li> </ul> <p>The test cases are generated so that <code>answer</code> is unique under the given rules.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[1,2],[3,4]]\nOutput: [[1,2],[2,3]]\nExplanation:\nThe rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.\nThe rank of matrix[0][1] is 2 because matrix[0][1] &gt; matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][0] is 2 because matrix[1][0] &gt; matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][1] is 3 because matrix[1][1] &gt; matrix[0][1], matrix[1][1] &gt; matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[7,7],[7,7]]\nOutput: [[1,1],[1,1]]\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]\nOutput: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 500</code></li> <li><code>-10<sup>9</sup> &lt;= matrix[row][col] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1633/","title":"1633. Percentage of Users Attended a Contest","text":"Problem <p>Table: <code>Users</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| user_id     | int     |\n| user_name   | varchar |\n+-------------+---------+\nuser_id is the primary key (column with unique values) for this table.\nEach row of this table contains the name and the id of a user.\n</pre> <p> </p> <p>Table: <code>Register</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| contest_id  | int     |\n| user_id     | int     |\n+-------------+---------+\n(contest_id, user_id) is the primary key (combination of columns with unique values) for this table.\nEach row of this table contains the id of a user and the contest they registered into.\n</pre> <p> </p> <p>Write a solution to find the percentage of the users registered in each contest rounded to two decimals.</p> <p>Return the result table ordered by <code>percentage</code> in descending order. In case of a tie, order it by <code>contest_id</code> in ascending order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nUsers table:\n+---------+-----------+\n| user_id | user_name |\n+---------+-----------+\n| 6       | Alice     |\n| 2       | Bob       |\n| 7       | Alex      |\n+---------+-----------+\nRegister table:\n+------------+---------+\n| contest_id | user_id |\n+------------+---------+\n| 215        | 6       |\n| 209        | 2       |\n| 208        | 2       |\n| 210        | 6       |\n| 208        | 6       |\n| 209        | 7       |\n| 209        | 6       |\n| 215        | 7       |\n| 208        | 7       |\n| 210        | 2       |\n| 207        | 2       |\n| 210        | 7       |\n+------------+---------+\nOutput: \n+------------+------------+\n| contest_id | percentage |\n+------------+------------+\n| 208        | 100.0      |\n| 209        | 100.0      |\n| 210        | 100.0      |\n| 215        | 66.67      |\n| 207        | 33.33      |\n+------------+------------+\nExplanation: \nAll the users registered in contests 208, 209, and 210. The percentage is 100% and we sort them in the answer table by contest_id in ascending order.\nAlice and Alex registered in contest 215 and the percentage is ((2/3) * 100) = 66.67%\nBob registered in contest 207 and the percentage is ((1/3) * 100) = 33.33%\n</pre>"},{"location":"LeetCode_Problems/1634/","title":"1634. Add Two Polynomials Represented as Linked Lists","text":"Problem"},{"location":"LeetCode_Problems/1635/","title":"1635. Hopper Company Queries I","text":"Problem"},{"location":"LeetCode_Problems/1636/","title":"1636. Sort Array by Increasing Frequency","text":"Problem <p>Given an array of integers <code>nums</code>, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.</p> <p>Return the sorted array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,2,2,2,3]\nOutput: [3,1,1,2,2,2]\nExplanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,1,3,2]\nOutput: [1,3,3,2,2]\nExplanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [-1,1,-6,4,5,-6,1,4,1]\nOutput: [5,-1,4,4,-6,-6,1,1,1]</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1637/","title":"1637. Widest Vertical Area Between Two Points Containing No Points","text":"Problem <p>Given <code>n</code> <code>points</code> on a 2D plane where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>, Return\u00a0the widest vertical area between two points such that no points are inside the area.</p> <p>A vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.</p> <p>Note that points on the edge of a vertical area are not considered included in the area.</p> <p> </p> <p>Example 1:</p> <p>\u200b</p> <pre>\nInput: points = [[8,7],[9,9],[7,4],[9,7]]\nOutput: 1\nExplanation: Both the red and the blue area are optimal.\n</pre> <p>Example 2:</p> <pre>\nInput: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == points.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>points[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>\u00a0&lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1638/","title":"1638. Count Substrings That Differ by One Character","text":"Problem <p>Given two strings <code>s</code> and <code>t</code>, find the number of ways you can choose a non-empty substring of <code>s</code> and replace a single character by a different character such that the resulting substring is a substring of <code>t</code>. In other words, find the number of substrings in <code>s</code> that differ from some substring in <code>t</code> by exactly one character.</p> <p>For example, the underlined substrings in <code>\"computer\"</code> and <code>\"computation\"</code> only differ by the <code>'e'</code>/<code>'a'</code>, so this is a valid way.</p> <p>Return the number of substrings that satisfy the condition above.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aba\", t = \"baba\"\nOutput: 6\nExplanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\nThe underlined portions are the substrings that are chosen from s and t.\n</pre> <p>\u200b\u200bExample 2:</p> <pre>\nInput: s = \"ab\", t = \"bb\"\nOutput: 3\nExplanation: The following are the pairs of substrings from s and t that differ by 1 character:\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n\u200b\u200b\u200b\u200bThe underlined portions are the substrings that are chosen from s and t.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 100</code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/1639/","title":"1639. Number of Ways to Form a Target String Given a Dictionary","text":"Problem <p>You are given a list of strings of the same length <code>words</code> and a string <code>target</code>.</p> <p>Your task is to form <code>target</code> using the given <code>words</code> under the following rules:</p> <ul> <li><code>target</code> should be formed from left to right.</li> <li>To form the <code>i<sup>th</sup></code> character (0-indexed) of <code>target</code>, you can choose the <code>k<sup>th</sup></code> character of the <code>j<sup>th</sup></code> string in <code>words</code> if <code>target[i] = words[j][k]</code>.</li> <li>Once you use the <code>k<sup>th</sup></code> character of the <code>j<sup>th</sup></code> string of <code>words</code>, you can no longer use the <code>x<sup>th</sup></code> character of any string in <code>words</code> where <code>x &lt;= k</code>. In other words, all characters to the left of or at index <code>k</code> become unusuable for every string.</li> <li>Repeat the process until you form the string <code>target</code>.</li> </ul> <p>Notice that you can use multiple characters from the same string in <code>words</code> provided the conditions above are met.</p> <p>Return the number of ways to form <code>target</code> from <code>words</code>. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"\nOutput: 6\nExplanation: There are 6 ways to form target.\n\"aba\" -&gt; index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -&gt; index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -&gt; index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -&gt; index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -&gt; index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -&gt; index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"caca\")\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"abba\",\"baab\"], target = \"bab\"\nOutput: 4\nExplanation: There are 4 ways to form target.\n\"bab\" -&gt; index 0 (\"baab\"), index 1 (\"baab\"), index 2 (\"abba\")\n\"bab\" -&gt; index 0 (\"baab\"), index 1 (\"baab\"), index 3 (\"baab\")\n\"bab\" -&gt; index 0 (\"baab\"), index 2 (\"baab\"), index 3 (\"baab\")\n\"bab\" -&gt; index 1 (\"abba\"), index 2 (\"baab\"), index 3 (\"baab\")\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 1000</code></li> <li>All strings in <code>words</code> have the same length.</li> <li><code>1 &lt;= target.length &lt;= 1000</code></li> <li><code>words[i]</code> and <code>target</code> contain only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1640/","title":"1640. Check Array Formation Through Concatenation","text":"Problem <p>You are given an array of distinct integers <code>arr</code> and an array of integer arrays <code>pieces</code>, where the integers in <code>pieces</code> are distinct. Your goal is to form <code>arr</code> by concatenating the arrays in <code>pieces</code> in any order. However, you are not allowed to reorder the integers in each array <code>pieces[i]</code>.</p> <p>Return <code>true</code> if it is possible to form the array <code>arr</code> from <code>pieces</code>. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [15,88], pieces = [[88],[15]]\nOutput: true\nExplanation: Concatenate [15] then [88]\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [49,18,16], pieces = [[16,18,49]]\nOutput: false\nExplanation: Even though the numbers match, we cannot reorder pieces[0].\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]\nOutput: true\nExplanation: Concatenate [91] then [4,64] then [78]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= pieces.length &lt;= arr.length &lt;= 100</code></li> <li><code>sum(pieces[i].length) == arr.length</code></li> <li><code>1 &lt;= pieces[i].length &lt;= arr.length</code></li> <li><code>1 &lt;= arr[i], pieces[i][j] &lt;= 100</code></li> <li>The integers in <code>arr</code> are distinct.</li> <li>The integers in <code>pieces</code> are distinct (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).</li> </ul>"},{"location":"LeetCode_Problems/1641/","title":"1641. Count Sorted Vowel Strings","text":"Problem <p>Given an integer <code>n</code>, return the number of strings of length <code>n</code> that consist only of vowels (<code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code>) and are lexicographically sorted.</p> <p>A string <code>s</code> is lexicographically sorted if for all valid <code>i</code>, <code>s[i]</code> is the same as or comes before <code>s[i+1]</code> in the alphabet.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: 5\nExplanation: The 5 sorted strings that consist of vowels only are <code>[\"a\",\"e\",\"i\",\"o\",\"u\"].</code>\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: 15\nExplanation: The 15 sorted strings that consist of vowels only are\n[\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"].\nNote that \"ea\" is not a valid string since 'e' comes after 'a' in the alphabet.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 33\nOutput: 66045\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 50</code> </li> </ul>"},{"location":"LeetCode_Problems/1642/","title":"1642. Furthest Building You Can Reach","text":"Problem <p>You are given an integer array <code>heights</code> representing the heights of buildings, some <code>bricks</code>, and some <code>ladders</code>.</p> <p>You start your journey from building <code>0</code> and move to the next building by possibly using bricks or ladders.</p> <p>While moving from building <code>i</code> to building <code>i+1</code> (0-indexed),</p> <ul> <li>If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.</li> <li>If the current building's height is less than the next building's height, you can either use one ladder or <code>(h[i+1] - h[i])</code> bricks.</li> </ul> <p>Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1\nOutput: 4\nExplanation: Starting at building 0, you can follow these steps:\n- Go to building 1 without using ladders nor bricks since 4 &gt;= 2.\n- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 &lt; 7.\n- Go to building 3 without using ladders nor bricks since 7 &gt;= 6.\n- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 &lt; 9.\nIt is impossible to go beyond building 4 because you do not have any more bricks or ladders.\n</pre> <p>Example 2:</p> <pre>\nInput: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2\nOutput: 7\n</pre> <p>Example 3:</p> <pre>\nInput: heights = [14,3,19,3], bricks = 17, ladders = 0\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= heights[i] &lt;= 10<sup>6</sup></code></li> <li><code>0 &lt;= bricks &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= ladders &lt;= heights.length</code></li> </ul>"},{"location":"LeetCode_Problems/1643/","title":"1643. Kth Smallest Instructions","text":"Problem <p>Bob is standing at cell <code>(0, 0)</code>, and he wants to reach <code>destination</code>: <code>(row, column)</code>. He can only travel right and down. You are going to help Bob by providing instructions for him to reach <code>destination</code>.</p> <p>The instructions are represented as a string, where each character is either:</p> <ul> <li><code>'H'</code>, meaning move horizontally (go right), or</li> <li><code>'V'</code>, meaning move vertically (go down).</li> </ul> <p>Multiple instructions will lead Bob to <code>destination</code>. For example, if <code>destination</code> is <code>(2, 3)</code>, both <code>\"HHHVV\"</code> and <code>\"HVHVH\"</code> are valid instructions.</p> <p>However, Bob is very picky. Bob has a lucky number <code>k</code>, and he wants the <code>k<sup>th</sup></code> lexicographically smallest instructions that will lead him to <code>destination</code>. <code>k</code> is 1-indexed.</p> <p>Given an integer array <code>destination</code> and an integer <code>k</code>, return the <code>k<sup>th</sup></code> lexicographically smallest instructions that will take Bob to <code>destination</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: destination = [2,3], k = 1\nOutput: \"HHHVV\"\nExplanation: All the instructions that reach (2, 3) in lexicographic order are as follows:\n[\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"].\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: destination = [2,3], k = 2\nOutput: \"HHVHV\"\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: destination = [2,3], k = 3\nOutput: \"HHVVH\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>destination.length == 2</code></li> <li><code>1 &lt;= row, column &lt;= 15</code></li> <li><code>1 &lt;= k &lt;= nCr(row + column, row)</code>, where <code>nCr(a, b)</code> denotes <code>a</code> choose <code>b</code>\u200b\u200b\u200b\u200b\u200b.</li> </ul>"},{"location":"LeetCode_Problems/1644/","title":"1644. Lowest Common Ancestor of a Binary Tree II","text":"Problem"},{"location":"LeetCode_Problems/1645/","title":"1645. Hopper Company Queries II","text":"Problem"},{"location":"LeetCode_Problems/1646/","title":"1646. Get Maximum in Generated Array","text":"Problem <p>You are given an integer <code>n</code>. A 0-indexed integer array <code>nums</code> of length <code>n + 1</code> is generated in the following way:</p> <ul> <li><code>nums[0] = 0</code></li> <li><code>nums[1] = 1</code></li> <li><code>nums[2 * i] = nums[i]</code> when <code>2 &lt;= 2 * i &lt;= n</code></li> <li><code>nums[2 * i + 1] = nums[i] + nums[i + 1]</code> when <code>2 &lt;= 2 * i + 1 &lt;= n</code></li> </ul> <p>Return the maximum integer in the array <code>nums</code>\u200b\u200b\u200b.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 7\nOutput: 3\nExplanation: According to the given rules:\n  nums[0] = 0\n  nums[1] = 1\n  nums[(1 * 2) = 2] = nums[1] = 1\n  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2\n  nums[(2 * 2) = 4] = nums[2] = 1\n  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3\n  nums[(3 * 2) = 6] = nums[3] = 2\n  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3\nHence, nums = [0,1,1,2,1,3,2,3], and the maximum is max(0,1,1,2,1,3,2,3) = 3.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: 1\nExplanation: According to the given rules, nums = [0,1,1]. The maximum is max(0,1,1) = 1.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 3\nOutput: 2\nExplanation: According to the given rules, nums = [0,1,1,2]. The maximum is max(0,1,1,2) = 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1647/","title":"1647. Minimum Deletions to Make Character Frequencies Unique","text":"Problem <p>A string <code>s</code> is called good if there are no two different characters in <code>s</code> that have the same frequency.</p> <p>Given a string <code>s</code>, return the minimum number of characters you need to delete to make <code>s</code> good.</p> <p>The frequency of a character in a string is the number of times it appears in the string. For example, in the string <code>\"aab\"</code>, the frequency of <code>'a'</code> is <code>2</code>, while the frequency of <code>'b'</code> is <code>1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aab\"\nOutput: 0\nExplanation: <code>s</code> is already good.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aaabbbcc\"\nOutput: 2\nExplanation: You can delete two 'b's resulting in the good string \"aaabcc\".\nAnother way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\".</pre> <p>Example 3:</p> <pre>\nInput: s = \"ceabaacb\"\nOutput: 2\nExplanation: You can delete both 'c's resulting in the good string \"eabaab\".\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code>\u00a0contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1648/","title":"1648. Sell Diminishing-Valued Colored Balls","text":"Problem <p>You have an <code>inventory</code> of different colored balls, and there is a customer that wants <code>orders</code> balls of any color.</p> <p>The customer weirdly values the colored balls. Each colored ball's value is the number of balls of that color\u00a0you currently have in your <code>inventory</code>. For example, if you own <code>6</code> yellow balls, the customer would pay <code>6</code> for the first yellow ball. After the transaction, there are only <code>5</code> yellow balls left, so the next yellow ball is then valued at <code>5</code> (i.e., the value of the balls decreases as you sell more to the customer).</p> <p>You are given an integer array, <code>inventory</code>, where <code>inventory[i]</code> represents the number of balls of the <code>i<sup>th</sup></code> color that you initially own. You are also given an integer <code>orders</code>, which represents the total number of balls that the customer wants. You can sell the balls in any order.</p> <p>Return the maximum total value that you can attain after selling <code>orders</code> colored balls. As the answer may be too large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: inventory = [2,5], orders = 4\nOutput: 14\nExplanation: Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).\nThe maximum total value is 2 + 5 + 4 + 3 = 14.\n</pre> <p>Example 2:</p> <pre>\nInput: inventory = [3,5], orders = 6\nOutput: 19\nExplanation: Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).\nThe maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= inventory.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= inventory[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= orders &lt;= min(sum(inventory[i]), 10<sup>9</sup>)</code></li> </ul>"},{"location":"LeetCode_Problems/1649/","title":"1649. Create Sorted Array through Instructions","text":"Problem <p>Given an integer array <code>instructions</code>, you are asked to create a sorted array from the elements in <code>instructions</code>. You start with an empty container <code>nums</code>. For each element from left to right in <code>instructions</code>, insert it into <code>nums</code>. The cost of each insertion is the minimum of the following:</p> <ul> <li>The number of elements currently in <code>nums</code> that are strictly less than <code>instructions[i]</code>.</li> <li>The number of elements currently in <code>nums</code> that are strictly greater than <code>instructions[i]</code>.</li> </ul> <p>For example, if inserting element <code>3</code> into <code>nums = [1,2,3,5]</code>, the cost of insertion is <code>min(2, 1)</code> (elements <code>1</code> and <code>2</code> are less than <code>3</code>, element <code>5</code> is greater than <code>3</code>) and <code>nums</code> will become <code>[1,2,3,3,5]</code>.</p> <p>Return the total cost to insert all elements from <code>instructions</code> into <code>nums</code>. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code></p> <p> </p> <p>Example 1:</p> <pre>\nInput: instructions = [1,5,6,2]\nOutput: 1\nExplanation: Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 5 with cost min(1, 0) = 0, now nums = [1,5].\nInsert 6 with cost min(2, 0) = 0, now nums = [1,5,6].\nInsert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].\nThe total cost is 0 + 0 + 0 + 1 = 1.</pre> <p>Example 2:</p> <pre>\nInput: instructions = [1,2,3,6,5,4]\nOutput: 3\nExplanation: Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 2 with cost min(1, 0) = 0, now nums = [1,2].\nInsert 3 with cost min(2, 0) = 0, now nums = [1,2,3].\nInsert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].\nInsert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].\nInsert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].\nThe total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.\n</pre> <p>Example 3:</p> <pre>\nInput: instructions = [1,3,3,3,2,4,2,1,2]\nOutput: 4\nExplanation: Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].\nInsert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].\nInsert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].\nThe total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= instructions.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= instructions[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1650/","title":"1650. Lowest Common Ancestor of a Binary Tree III","text":"Problem"},{"location":"LeetCode_Problems/1651/","title":"1651. Hopper Company Queries III","text":"Problem"},{"location":"LeetCode_Problems/1652/","title":"1652. Defuse the Bomb","text":"Problem <p>You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array <code>code</code>\u00a0of length of <code>n</code>\u00a0and a key <code>k</code>.</p> <p>To decrypt the code, you must replace every number. All the numbers are replaced simultaneously.</p> <ul> <li>If <code>k &gt; 0</code>, replace the <code>i<sup>th</sup></code> number with the sum of the next <code>k</code> numbers.</li> <li>If <code>k &lt; 0</code>, replace the <code>i<sup>th</sup></code> number with the sum of the previous <code>k</code> numbers.</li> <li>If <code>k == 0</code>, replace the <code>i<sup>th</sup></code> number with <code>0</code>.</li> </ul> <p>As <code>code</code> is circular, the next element of <code>code[n-1]</code> is <code>code[0]</code>, and the previous element of <code>code[0]</code> is <code>code[n-1]</code>.</p> <p>Given the circular array <code>code</code> and an integer key <code>k</code>, return the decrypted code to defuse the bomb!</p> <p> </p> <p>Example 1:</p> <pre>\nInput: code = [5,7,1,4], k = 3\nOutput: [12,10,16,13]\nExplanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.\n</pre> <p>Example 2:</p> <pre>\nInput: code = [1,2,3,4], k = 0\nOutput: [0,0,0,0]\nExplanation: When k is zero, the numbers are replaced by 0. \n</pre> <p>Example 3:</p> <pre>\nInput: code = [2,4,9,3], k = -2\nOutput: [12,5,6,13]\nExplanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == code.length</code></li> <li><code>1 &lt;= n\u00a0&lt;= 100</code></li> <li><code>1 &lt;= code[i] &lt;= 100</code></li> <li><code>-(n - 1) &lt;= k &lt;= n - 1</code></li> </ul>"},{"location":"LeetCode_Problems/1653/","title":"1653. Minimum Deletions to Make String Balanced","text":"Problem <p>You are given a string <code>s</code> consisting only of characters <code>'a'</code> and <code>'b'</code>\u200b\u200b\u200b\u200b.</p> <p>You can delete any number of characters in <code>s</code> to make <code>s</code> balanced. <code>s</code> is balanced if there is no pair of indices <code>(i,j)</code> such that <code>i &lt; j</code> and <code>s[i] = 'b'</code> and <code>s[j]= 'a'</code>.</p> <p>Return the minimum number of deletions needed to make <code>s</code> balanced.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aababbab\"\nOutput: 2\nExplanation: You can either:\nDelete the characters at 0-indexed positions 2 and 6 (\"aababbab\" -&gt; \"aaabbb\"), or\nDelete the characters at 0-indexed positions 3 and 6 (\"aababbab\" -&gt; \"aabbbb\").\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"bbaaaaabb\"\nOutput: 2\nExplanation: The only solution is to delete the first two characters.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is\u00a0<code>'a'</code> or <code>'b'</code>\u200b\u200b.</li> </ul>"},{"location":"LeetCode_Problems/1654/","title":"1654. Minimum Jumps to Reach Home","text":"Problem <p>A certain bug's home is on the x-axis at position <code>x</code>. Help them get there from position <code>0</code>.</p> <p>The bug jumps according to the following rules:</p> <ul> <li>It can jump exactly <code>a</code> positions forward (to the right).</li> <li>It can jump exactly <code>b</code> positions backward (to the left).</li> <li>It cannot jump backward twice in a row.</li> <li>It cannot jump to any <code>forbidden</code> positions.</li> </ul> <p>The bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.</p> <p>Given an array of integers <code>forbidden</code>, where <code>forbidden[i]</code> means that the bug cannot jump to the position <code>forbidden[i]</code>, and integers <code>a</code>, <code>b</code>, and <code>x</code>, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position <code>x</code>, return <code>-1.</code></p> <p> </p> <p>Example 1:</p> <pre>\nInput: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9\nOutput: 3\nExplanation: 3 jumps forward (0 -&gt; 3 -&gt; 6 -&gt; 9) will get the bug home.\n</pre> <p>Example 2:</p> <pre>\nInput: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11\nOutput: -1\n</pre> <p>Example 3:</p> <pre>\nInput: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7\nOutput: 2\nExplanation: One jump forward (0 -&gt; 16) then one jump backward (16 -&gt; 7) will get the bug home.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= forbidden.length &lt;= 1000</code></li> <li><code>1 &lt;= a, b, forbidden[i] &lt;= 2000</code></li> <li><code>0 &lt;= x &lt;= 2000</code></li> <li>All the elements in <code>forbidden</code> are distinct.</li> <li>Position <code>x</code> is not forbidden.</li> </ul>"},{"location":"LeetCode_Problems/1655/","title":"1655. Distribute Repeating Integers","text":"Problem <p>You are given an array of <code>n</code> integers, <code>nums</code>, where there are at most <code>50</code> unique values in the array. You are also given an array of <code>m</code> customer order quantities, <code>quantity</code>, where <code>quantity[i]</code> is the amount of integers the <code>i<sup>th</sup></code> customer ordered. Determine if it is possible to distribute <code>nums</code> such that:</p> <ul> <li>The <code>i<sup>th</sup></code> customer gets exactly <code>quantity[i]</code> integers,</li> <li>The integers the <code>i<sup>th</sup></code> customer gets are all equal, and</li> <li>Every customer is satisfied.</li> </ul> <p>Return <code>true</code> if it is possible to distribute <code>nums</code> according to the above conditions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4], quantity = [2]\nOutput: false\nExplanation: The 0<sup>th</sup> customer cannot be given two different integers.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,3], quantity = [2]\nOutput: true\nExplanation: The 0<sup>th</sup> customer is given [3,3]. The integers [1,2] are not used.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,2,2], quantity = [2,2]\nOutput: true\nExplanation: The 0<sup>th</sup> customer is given [1,1], and the 1st customer is given [2,2].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li><code>m == quantity.length</code></li> <li><code>1 &lt;= m &lt;= 10</code></li> <li><code>1 &lt;= quantity[i] &lt;= 10<sup>5</sup></code></li> <li>There are at most <code>50</code> unique values in <code>nums</code>.</li> </ul>"},{"location":"LeetCode_Problems/1656/","title":"1656. Design an Ordered Stream","text":"Problem <p>There is a stream of <code>n</code> <code>(idKey, value)</code> pairs arriving in an arbitrary order, where <code>idKey</code> is an integer between <code>1</code> and <code>n</code> and <code>value</code> is a string. No two pairs have the same <code>id</code>.</p> <p>Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.</p> <p>Implement the <code>OrderedStream</code> class:</p> <ul> <li><code>OrderedStream(int n)</code> Constructs the stream to take <code>n</code> values.</li> <li><code>String[] insert(int idKey, String value)</code> Inserts the pair <code>(idKey, value)</code> into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.</li> </ul> <p> </p> <p>Example:</p> <p></p> <pre>\nInput\n[\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]\n[[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]]\nOutput\n[null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]\n\nExplanation\n// Note that the values ordered by ID is [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"].\nOrderedStream os = new OrderedStream(5);\nos.insert(3, \"ccccc\"); // Inserts (3, \"ccccc\"), returns [].\nos.insert(1, \"aaaaa\"); // Inserts (1, \"aaaaa\"), returns [\"aaaaa\"].\nos.insert(2, \"bbbbb\"); // Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"].\nos.insert(5, \"eeeee\"); // Inserts (5, \"eeeee\"), returns [].\nos.insert(4, \"ddddd\"); // Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"].\n// Concatentating all the chunks returned:\n// [] + [\"aaaaa\"] + [\"bbbbb\", \"ccccc\"] + [] + [\"ddddd\", \"eeeee\"] = [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"]\n// The resulting order is the same as the order above.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= id &lt;= n</code></li> <li><code>value.length == 5</code></li> <li><code>value</code>\u00a0consists only of lowercase letters.</li> <li>Each call to <code>insert</code>\u00a0will have a unique <code>id.</code></li> <li>Exactly <code>n</code> calls will be made to <code>insert</code>.</li> </ul>"},{"location":"LeetCode_Problems/1657/","title":"1657. Determine if Two Strings Are Close","text":"Problem <p>Two strings are considered close if you can attain one from the other using the following operations:</p> <ul> <li>Operation 1: Swap any two existing characters.      <ul> <li>For example, <code>abcde -&gt; aecdb</code></li> </ul> </li> <li>Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.     <ul> <li>For example, <code>aacabb -&gt; bbcbaa</code> (all <code>a</code>'s turn into <code>b</code>'s, and all <code>b</code>'s turn into <code>a</code>'s)</li> </ul> </li> </ul> <p>You can use the operations on either string as many times as necessary.</p> <p>Given two strings, <code>word1</code> and <code>word2</code>, return <code>true</code> if <code>word1</code> and <code>word2</code> are close, and <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word1 = \"abc\", word2 = \"bca\"\nOutput: true\nExplanation: You can attain word2 from word1 in 2 operations.\nApply Operation 1: \"abc\" -&gt; \"acb\"\nApply Operation 1: \"acb\" -&gt; \"bca\"\n</pre> <p>Example 2:</p> <pre>\nInput: word1 = \"a\", word2 = \"aa\"\nOutput: false\nExplanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.\n</pre> <p>Example 3:</p> <pre>\nInput: word1 = \"cabbba\", word2 = \"abbccc\"\nOutput: true\nExplanation: You can attain word2 from word1 in 3 operations.\nApply Operation 1: \"cabbba\" -&gt; \"caabbb\"\n<code>Apply Operation 2: \"</code>caabbb\" -&gt; \"baaccc\"\nApply Operation 2: \"baaccc\" -&gt; \"abbccc\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>5</sup></code></li> <li><code>word1</code> and <code>word2</code> contain only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1658/","title":"1658. Minimum Operations to Reduce X to Zero","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>x</code>. In one operation, you can either remove the leftmost or the rightmost element from the array <code>nums</code> and subtract its value from <code>x</code>. Note that this modifies the array for future operations.</p> <p>Return the minimum number of operations to reduce <code>x</code> to exactly <code>0</code> if it is possible, otherwise, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,4,2,3], x = 5\nOutput: 2\nExplanation: The optimal solution is to remove the last two elements to reduce x to zero.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,6,7,8,9], x = 4\nOutput: -1\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,2,20,1,1,3], x = 10\nOutput: 5\nExplanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= x &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1659/","title":"1659. Maximize Grid Happiness","text":"Problem <p>You are given four integers, <code>m</code>, <code>n</code>, <code>introvertsCount</code>, and <code>extrovertsCount</code>. You have an <code>m x n</code> grid, and there are two types of people: introverts and extroverts. There are <code>introvertsCount</code> introverts and <code>extrovertsCount</code> extroverts.</p> <p>You should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you do not have to have all the people living in the grid.</p> <p>The happiness of each person is calculated as follows:</p> <ul> <li>Introverts start with <code>120</code> happiness and lose <code>30</code> happiness for each neighbor (introvert or extrovert).</li> <li>Extroverts start with <code>40</code> happiness and gain <code>20</code> happiness for each neighbor (introvert or extrovert).</li> </ul> <p>Neighbors live in the directly adjacent cells north, east, south, and west of a person's cell.</p> <p>The grid happiness is the sum of each person's happiness. Return the maximum possible grid happiness.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2\nOutput: 240\nExplanation: Assume the grid is 1-indexed with coordinates (row, column).\nWe can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120\n- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\n- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\nThe grid happiness is 120 + 60 + 60 = 240.\nThe above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.\n</pre> <p>Example 2:</p> <pre>\nInput: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1\nOutput: 260\nExplanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\n- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80\n- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\nThe grid happiness is 90 + 80 + 90 = 260.\n</pre> <p>Example 3:</p> <pre>\nInput: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0\nOutput: 240\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 5</code></li> <li><code>0 &lt;= introvertsCount, extrovertsCount &lt;= min(m * n, 6)</code></li> </ul>"},{"location":"LeetCode_Problems/1660/","title":"1660. Correct a Binary Tree","text":"Problem"},{"location":"LeetCode_Problems/1661/","title":"1661. Average Time of Process per Machine","text":"Problem <p>Table: <code>Activity</code></p> <pre>\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| machine_id     | int     |\n| process_id     | int     |\n| activity_type  | enum    |\n| timestamp      | float   |\n+----------------+---------+\nThe table shows the user activities for a factory website.\n(machine_id, process_id, activity_type) is the primary key (combination of columns with unique values) of this table.\nmachine_id is the ID of a machine.\nprocess_id is the ID of a process running on the machine with ID machine_id.\nactivity_type is an ENUM (category) of type ('start', 'end').\ntimestamp is a float representing the current time in seconds.\n'start' means the machine starts the process at the given timestamp and 'end' means the machine ends the process at the given timestamp.\nThe 'start' timestamp will always be before the 'end' timestamp for every (machine_id, process_id) pair.</pre> <p> </p> <p>There is a factory website that has several machines each running the same number of processes. Write a solution\u00a0to find the average time each machine takes to complete a process.</p> <p>The time to complete a process is the <code>'end' timestamp</code> minus the <code>'start' timestamp</code>. The average time is calculated by the total time to complete every process on the machine divided by the number of processes that were run.</p> <p>The resulting table should have the <code>machine_id</code> along with the average time as <code>processing_time</code>, which should be rounded to 3 decimal places.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nActivity table:\n+------------+------------+---------------+-----------+\n| machine_id | process_id | activity_type | timestamp |\n+------------+------------+---------------+-----------+\n| 0          | 0          | start         | 0.712     |\n| 0          | 0          | end           | 1.520     |\n| 0          | 1          | start         | 3.140     |\n| 0          | 1          | end           | 4.120     |\n| 1          | 0          | start         | 0.550     |\n| 1          | 0          | end           | 1.550     |\n| 1          | 1          | start         | 0.430     |\n| 1          | 1          | end           | 1.420     |\n| 2          | 0          | start         | 4.100     |\n| 2          | 0          | end           | 4.512     |\n| 2          | 1          | start         | 2.500     |\n| 2          | 1          | end           | 5.000     |\n+------------+------------+---------------+-----------+\nOutput: \n+------------+-----------------+\n| machine_id | processing_time |\n+------------+-----------------+\n| 0          | 0.894           |\n| 1          | 0.995           |\n| 2          | 1.456           |\n+------------+-----------------+\nExplanation: \nThere are 3 machines running 2 processes each.\nMachine 0's average time is ((1.520 - 0.712) + (4.120 - 3.140)) / 2 = 0.894\nMachine 1's average time is ((1.550 - 0.550) + (1.420 - 0.430)) / 2 = 0.995\nMachine 2's average time is ((4.512 - 4.100) + (5.000 - 2.500)) / 2 = 1.456\n</pre>"},{"location":"LeetCode_Problems/1662/","title":"1662. Check If Two String Arrays are Equivalent","text":"Problem <p>Given two string arrays <code>word1</code> and <code>word2</code>, return <code>true</code> if the two arrays represent the same string, and <code>false</code> otherwise.</p> <p>A string is represented by an array if the array elements concatenated in order forms the string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]\nOutput: true\nExplanation:\nword1 represents string \"ab\" + \"c\" -&gt; \"abc\"\nword2 represents string \"a\" + \"bc\" -&gt; \"abc\"\nThe strings are the same, so return true.</pre> <p>Example 2:</p> <pre>\nInput: word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]\nOutput: false\n</pre> <p>Example 3:</p> <pre>\nInput: word1  = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]\nOutput: true\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>3</sup></code></li> <li><code>1 &lt;= word1[i].length, word2[i].length &lt;= 10<sup>3</sup></code></li> <li><code>1 &lt;= sum(word1[i].length), sum(word2[i].length) &lt;= 10<sup>3</sup></code></li> <li><code>word1[i]</code> and <code>word2[i]</code> consist of lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/1663/","title":"1663. Smallest String With A Given Numeric Value","text":"Problem <p>The numeric value of a lowercase character is defined as its position <code>(1-indexed)</code> in the alphabet, so the numeric value of <code>a</code> is <code>1</code>, the numeric value of <code>b</code> is <code>2</code>, the numeric value of <code>c</code> is <code>3</code>, and so on.</p> <p>The numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string <code>\"abe\"</code> is equal to <code>1 + 2 + 5 = 8</code>.</p> <p>You are given two integers <code>n</code> and <code>k</code>. Return the lexicographically smallest string with length equal to <code>n</code> and numeric value equal to <code>k</code>.</p> <p>Note that a string <code>x</code> is lexicographically smaller than string <code>y</code> if <code>x</code> comes before <code>y</code> in dictionary order, that is, either <code>x</code> is a prefix of <code>y</code>, or if <code>i</code> is the first position such that <code>x[i] != y[i]</code>, then <code>x[i]</code> comes before <code>y[i]</code> in alphabetic order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, k = 27\nOutput: \"aay\"\nExplanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5, k = 73\nOutput: \"aaszz\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>n &lt;= k &lt;= 26 * n</code></li> </ul>"},{"location":"LeetCode_Problems/1664/","title":"1664. Ways to Make a Fair Array","text":"Problem <p>You are given an integer array\u00a0<code>nums</code>. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.</p> <p>For example, if <code>nums = [6,1,7,4,1]</code>:</p> <ul> <li>Choosing to remove index <code>1</code> results in <code>nums = [6,7,4,1]</code>.</li> <li>Choosing to remove index <code>2</code> results in <code>nums = [6,1,4,1]</code>.</li> <li>Choosing to remove index <code>4</code> results in <code>nums = [6,1,7,4]</code>.</li> </ul> <p>An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.</p> <p>Return the number of indices that you could choose such that after the removal, <code>nums</code> is fair. </p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,6,4]\nOutput: 1\nExplanation:\nRemove index 0: [1,6,4] -&gt; Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.\nRemove index 1: [2,6,4] -&gt; Even sum: 2 + 4 = 6. Odd sum: 6. Fair.\nRemove index 2: [2,1,4] -&gt; Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.\nRemove index 3: [2,1,6] -&gt; Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.\nThere is 1 index that you can remove to make nums fair.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1]\nOutput: 3\nExplanation:\u00a0You can remove any index and the remaining array is fair.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 0\nExplanation:\u00a0You cannot make a fair array after removing any index.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1665/","title":"1665. Minimum Initial Energy to Finish Tasks","text":"Problem <p>You are given an array <code>tasks</code> where <code>tasks[i] = [actual<sub>i</sub>, minimum<sub>i</sub>]</code>:</p> <ul> <li><code>actual<sub>i</sub></code> is the actual amount of energy you spend to finish the <code>i<sup>th</sup></code> task.</li> <li><code>minimum<sub>i</sub></code> is the minimum amount of energy you require to begin the <code>i<sup>th</sup></code> task.</li> </ul> <p>For example, if the task is <code>[10, 12]</code> and your current energy is <code>11</code>, you cannot start this task. However, if your current energy is <code>13</code>, you can complete this task, and your energy will be <code>3</code> after finishing it.</p> <p>You can finish the tasks in any order you like.</p> <p>Return the minimum initial amount of energy you will need to finish all the tasks.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tasks = [[1,2],[2,4],[4,8]]\nOutput: 8\nExplanation:\nStarting with 8 energy, we finish the tasks in the following order:\n    - 3rd task. Now energy = 8 - 4 = 4.\n    - 2nd task. Now energy = 4 - 2 = 2.\n    - 1st task. Now energy = 2 - 1 = 1.\nNotice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.</pre> <p>Example 2:</p> <pre>\nInput: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]\nOutput: 32\nExplanation:\nStarting with 32 energy, we finish the tasks in the following order:\n    - 1st task. Now energy = 32 - 1 = 31.\n    - 2nd task. Now energy = 31 - 2 = 29.\n    - 3rd task. Now energy = 29 - 10 = 19.\n    - 4th task. Now energy = 19 - 10 = 9.\n    - 5th task. Now energy = 9 - 8 = 1.</pre> <p>Example 3:</p> <pre>\nInput: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]\nOutput: 27\nExplanation:\nStarting with 27 energy, we finish the tasks in the following order:\n    - 5th task. Now energy = 27 - 5 = 22.\n    - 2nd task. Now energy = 22 - 2 = 20.\n    - 3rd task. Now energy = 20 - 3 = 17.\n    - 1st task. Now energy = 17 - 1 = 16.\n    - 4th task. Now energy = 16 - 4 = 12.\n    - 6th task. Now energy = 12 - 6 = 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= actual<sub>\u200bi</sub>\u00a0&lt;= minimum<sub>i</sub>\u00a0&lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1666/","title":"1666. Change the Root of a Binary Tree","text":"Problem"},{"location":"LeetCode_Problems/1667/","title":"1667. Fix Names in a Table","text":"Problem <p>Table: <code>Users</code></p> <pre>\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| user_id        | int     |\n| name           | varchar |\n+----------------+---------+\nuser_id is the primary key (column with unique values) for this table.\nThis table contains the ID and the name of the user. The name consists of only lowercase and uppercase characters.\n</pre> <p> </p> <p>Write a solution to fix the names so that only the first character is uppercase and the rest are lowercase.</p> <p>Return the result table ordered by <code>user_id</code>.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nUsers table:\n+---------+-------+\n| user_id | name  |\n+---------+-------+\n| 1       | aLice |\n| 2       | bOB   |\n+---------+-------+\nOutput: \n+---------+-------+\n| user_id | name  |\n+---------+-------+\n| 1       | Alice |\n| 2       | Bob   |\n+---------+-------+\n</pre>"},{"location":"LeetCode_Problems/1668/","title":"1668. Maximum Repeating Substring","text":"Problem <p>For a string <code>sequence</code>, a string <code>word</code> is <code>k</code>-repeating if <code>word</code> concatenated <code>k</code> times is a substring of <code>sequence</code>. The <code>word</code>'s maximum <code>k</code>-repeating value is the highest value <code>k</code> where <code>word</code> is <code>k</code>-repeating in <code>sequence</code>. If <code>word</code> is not a substring of <code>sequence</code>, <code>word</code>'s maximum <code>k</code>-repeating value is <code>0</code>.</p> <p>Given strings <code>sequence</code> and <code>word</code>, return the maximum <code>k</code>-repeating value of <code>word</code> in <code>sequence</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: sequence = \"ababc\", word = \"ab\"\nOutput: 2\nExplanation: \"abab\" is a substring in \"ababc\".\n</pre> <p>Example 2:</p> <pre>\nInput: sequence = \"ababc\", word = \"ba\"\nOutput: 1\nExplanation: \"ba\" is a substring in \"ababc\". \"baba\" is not a substring in \"ababc\".\n</pre> <p>Example 3:</p> <pre>\nInput: sequence = \"ababc\", word = \"ac\"\nOutput: 0\nExplanation: \"ac\" is not a substring in \"ababc\". \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sequence.length &lt;= 100</code></li> <li><code>1 &lt;= word.length &lt;= 100</code></li> <li><code>sequence</code> and <code>word</code>\u00a0contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1669/","title":"1669. Merge In Between Linked Lists","text":"Problem <p>You are given two linked lists: <code>list1</code> and <code>list2</code> of sizes <code>n</code> and <code>m</code> respectively.</p> <p>Remove <code>list1</code>'s nodes from the <code>a<sup>th</sup></code> node to the <code>b<sup>th</sup></code> node, and put <code>list2</code> in their place.</p> <p>The blue edges and nodes in the following figure indicate the result:</p> <p></p> <p>Build the result list and return its head.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]\nOutput: [0,1,2,1000000,1000001,1000002,5]\nExplanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]\nOutput: [0,1,1000000,1000001,1000002,1000003,1000004,6]\nExplanation: The blue edges and nodes in the above figure indicate the result.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= list1.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= a &lt;= b &lt; list1.length - 1</code></li> <li><code>1 &lt;= list2.length &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1670/","title":"1670. Design Front Middle Back Queue","text":"Problem <p>Design a queue that supports <code>push</code> and <code>pop</code> operations in the front, middle, and back.</p> <p>Implement the <code>FrontMiddleBack</code> class:</p> <ul> <li><code>FrontMiddleBack()</code> Initializes the queue.</li> <li><code>void pushFront(int val)</code> Adds <code>val</code> to the front of the queue.</li> <li><code>void pushMiddle(int val)</code> Adds <code>val</code> to the middle of the queue.</li> <li><code>void pushBack(int val)</code> Adds <code>val</code> to the back of the queue.</li> <li><code>int popFront()</code> Removes the front element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li> <li><code>int popMiddle()</code> Removes the middle element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li> <li><code>int popBack()</code> Removes the back element of the queue and returns it. If the queue is empty, return <code>-1</code>.</li> </ul> <p>Notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:</p> <ul> <li>Pushing <code>6</code> into the middle of <code>[1, 2, 3, 4, 5]</code> results in <code>[1, 2, 6, 3, 4, 5]</code>.</li> <li>Popping the middle from <code>[1, 2, 3, 4, 5, 6]</code> returns <code>3</code> and results in <code>[1, 2, 4, 5, 6]</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput:\n[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n[[], [1], [2], [3], [4], [], [], [], [], []]\nOutput:\n[null, null, null, null, null, 1, 3, 4, 2, -1]\n\nExplanation:\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1);   // [1]\nq.pushBack(2);    // [1, 2]\nq.pushMiddle(3);  // [1, 3, 2]\nq.pushMiddle(4);  // [1, 4, 3, 2]\nq.popFront();     // return 1 -&gt; [4, 3, 2]\nq.popMiddle();    // return 3 -&gt; [4, 2]\nq.popMiddle();    // return 4 -&gt; [2]\nq.popBack();      // return 2 -&gt; []\nq.popFront();     // return -1 -&gt; [] (The queue is empty)\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= val &lt;= 10<sup>9</sup></code></li> <li>At most\u00a0<code>1000</code>\u00a0calls will be made to\u00a0<code>pushFront</code>,\u00a0<code>pushMiddle</code>,\u00a0<code>pushBack</code>, <code>popFront</code>, <code>popMiddle</code>, and <code>popBack</code>.</li> </ul>"},{"location":"LeetCode_Problems/1671/","title":"1671. Minimum Number of Removals to Make Mountain Array","text":"Problem <p>You may recall that an array <code>arr</code> is a mountain array if and only if:</p> <ul> <li><code>arr.length &gt;= 3</code></li> <li>There exists some index <code>i</code> (0-indexed) with <code>0 &lt; i &lt; arr.length - 1</code> such that:     <ul> <li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li> <li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li> </ul> </li> </ul> <p>Given an integer array <code>nums</code>\u200b\u200b\u200b, return the minimum number of elements to remove to make <code>nums\u200b\u200b\u200b</code> a mountain array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,1]\nOutput: 0\nExplanation: The array itself is a mountain array so we do not need to remove any elements.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,1,1,5,6,2,3,1]\nOutput: 3\nExplanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li>It is guaranteed that you can make a mountain array out of <code>nums</code>.</li> </ul>"},{"location":"LeetCode_Problems/1672/","title":"1672. Richest Customer Wealth","text":"Problem <p>You are given an <code>m x n</code> integer grid <code>accounts</code> where <code>accounts[i][j]</code> is the amount of money the <code>i\u200b\u200b\u200b\u200b\u200b<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup>\u200b\u200b\u200b\u200b</code> customer has in the <code>j\u200b\u200b\u200b\u200b\u200b<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code>\u200b\u200b\u200b\u200b bank. Return the wealth that the richest customer has.</p> <p>A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: accounts = [[1,2,3],[3,2,1]]\nOutput: 6\nExplanation:\n<code>1st customer has wealth = 1 + 2 + 3 = 6\n</code><code>2nd customer has wealth = 3 + 2 + 1 = 6\n</code>Both customers are considered the richest with a wealth of 6 each, so return 6.\n</pre> <p>Example 2:</p> <pre>\nInput: accounts = [[1,5],[7,3],[3,5]]\nOutput: 10\nExplanation: \n1st customer has wealth = 6\n2nd customer has wealth = 10 \n3rd customer has wealth = 8\nThe 2nd customer is the richest with a wealth of 10.</pre> <p>Example 3:</p> <pre>\nInput: accounts = [[2,8,7],[7,1,3],[1,9,5]]\nOutput: 17\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m ==\u00a0accounts.length</code></li> <li><code>n ==\u00a0accounts[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>1 &lt;= accounts[i][j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1673/","title":"1673. Find the Most Competitive Subsequence","text":"Problem <p>Given an integer array <code>nums</code> and a positive integer <code>k</code>, return the most competitive subsequence of <code>nums</code> of size <code>k</code>.</p> <p>An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.</p> <p>We define that a subsequence <code>a</code> is more competitive than a subsequence <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, subsequence <code>a</code> has a number less than the corresponding number in <code>b</code>. For example, <code>[1,3,4]</code> is more competitive than <code>[1,3,5]</code> because the first position they differ is at the final number, and <code>4</code> is less than <code>5</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,5,2,6], k = 2\nOutput: [2,6]\nExplanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,4,3,3,5,4,9,6], k = 4\nOutput: [2,3,3,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/1674/","title":"1674. Minimum Moves to Make Array Complementary","text":"Problem <p>You are given an integer array <code>nums</code> of even length <code>n</code> and an integer <code>limit</code>. In one move, you can replace any integer from <code>nums</code> with another integer between <code>1</code> and <code>limit</code>, inclusive.</p> <p>The array <code>nums</code> is complementary if for all indices <code>i</code> (0-indexed), <code>nums[i] + nums[n - 1 - i]</code> equals the same number. For example, the array <code>[1,2,3,4]</code> is complementary because for all indices <code>i</code>, <code>nums[i] + nums[n - 1 - i] = 5</code>.</p> <p>Return the minimum number of moves required to make <code>nums</code> complementary.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,4,3], limit = 4\nOutput: 1\nExplanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).\nnums[0] + nums[3] = 1 + 3 = 4.\nnums[1] + nums[2] = 2 + 2 = 4.\nnums[2] + nums[1] = 2 + 2 = 4.\nnums[3] + nums[0] = 3 + 1 = 4.\nTherefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,2,1], limit = 2\nOutput: 2\nExplanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 &gt; limit.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,1,2], limit = 2\nOutput: 0\nExplanation: nums is already complementary.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>2 &lt;= n\u00a0&lt;=\u00a010<sup>5</sup></code></li> <li><code>1 &lt;= nums[i]\u00a0&lt;= limit &lt;=\u00a010<sup>5</sup></code></li> <li><code>n</code> is even.</li> </ul>"},{"location":"LeetCode_Problems/1675/","title":"1675. Minimize Deviation in Array","text":"Problem <p>You are given an array <code>nums</code> of <code>n</code> positive integers.</p> <p>You can perform two types of operations on any element of the array any number of times:</p> <ul> <li>If the element is even, divide it by <code>2</code>.      <ul> <li>For example, if the array is <code>[1,2,3,4]</code>, then you can do this operation on the last element, and the array will be <code>[1,2,3,2].</code></li> </ul> </li> <li>If the element is odd, multiply it by <code>2</code>.     <ul> <li>For example, if the array is <code>[1,2,3,4]</code>, then you can do this operation on the first element, and the array will be <code>[2,2,3,4].</code></li> </ul> </li> </ul> <p>The deviation of the array is the maximum difference between any two elements in the array.</p> <p>Return the minimum deviation the array can have after performing some number of operations.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: 1\nExplanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,1,5,20,3]\nOutput: 3\nExplanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,10,8]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>2 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1676/","title":"1676. Lowest Common Ancestor of a Binary Tree IV","text":"Problem"},{"location":"LeetCode_Problems/1677/","title":"1677. Product's Worth Over Invoices","text":"Problem"},{"location":"LeetCode_Problems/1678/","title":"1678. Goal Parser Interpretation","text":"Problem <p>You own a Goal Parser that can interpret a string <code>command</code>. The <code>command</code> consists of an alphabet of <code>\"G\"</code>, <code>\"()\"</code> and/or <code>\"(al)\"</code> in some order. The Goal Parser will interpret <code>\"G\"</code> as the string <code>\"G\"</code>, <code>\"()\"</code> as the string <code>\"o\"</code>, and <code>\"(al)\"</code> as the string <code>\"al\"</code>. The interpreted strings are then concatenated in the original order.</p> <p>Given the string <code>command</code>, return the Goal Parser's interpretation of <code>command</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: command = \"G()(al)\"\nOutput: \"Goal\"\nExplanation:\u00a0The Goal Parser interprets the command as follows:\nG -&gt; G\n() -&gt; o\n(al) -&gt; al\nThe final concatenated result is \"Goal\".\n</pre> <p>Example 2:</p> <pre>\nInput: command = \"G()()()()(al)\"\nOutput: \"Gooooal\"\n</pre> <p>Example 3:</p> <pre>\nInput: command = \"(al)G(al)()()G\"\nOutput: \"alGalooG\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= command.length &lt;= 100</code></li> <li><code>command</code> consists of <code>\"G\"</code>, <code>\"()\"</code>, and/or <code>\"(al)\"</code> in some order.</li> </ul>"},{"location":"LeetCode_Problems/1679/","title":"1679. Max Number of K-Sum Pairs","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p> <p>In one operation, you can pick two numbers from the array whose sum equals <code>k</code> and remove them from the array.</p> <p>Return the maximum number of operations you can perform on the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4], k = 5\nOutput: 2\nExplanation: Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations.</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,1,3,4,3], k = 6\nOutput: 1\nExplanation: Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3's, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1680/","title":"1680. Concatenation of Consecutive Binary Numbers","text":"Problem <p>Given an integer <code>n</code>, return the decimal value of the binary string formed by concatenating the binary representations of <code>1</code> to <code>n</code> in order, modulo <code>10<sup>9 </sup>+ 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: 1\nExplanation: \"1\" in binary corresponds to the decimal value 1. \n</pre> <p>Example 2:</p> <pre>\nInput: n = 3\nOutput: 27\nExplanation: In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\".\nAfter concatenating them, we have \"11011\", which corresponds to the decimal value 27.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 12\nOutput: 505379714\nExplanation: The concatenation results in \"1101110010111011110001001101010111100\".\nThe decimal value of that is 118505380540.\nAfter modulo 10<sup>9</sup> + 7, the result is 505379714.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1681/","title":"1681. Minimum Incompatibility","text":"Problem <p>You are given an integer array <code>nums</code>\u200b\u200b\u200b and an integer <code>k</code>. You are asked to distribute this array into <code>k</code> subsets of equal size such that there are no two equal elements in the same subset.</p> <p>A subset's incompatibility is the difference between the maximum and minimum elements in that array.</p> <p>Return the minimum possible sum of incompatibilities of the <code>k</code> subsets after distributing the array optimally, or return <code>-1</code> if it is not possible.</p> <p>A subset is a group integers that appear in the array with no particular order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,1,4], k = 2\nOutput: 4\nExplanation: The optimal distribution of subsets is [1,2] and [1,4].\nThe incompatibility is (2-1) + (4-1) = 4.\nNote that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements.</pre> <p>Example 2:</p> <pre>\nInput: nums = [6,3,8,1,3,1,2,2], k = 4\nOutput: 6\nExplanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].\nThe incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [5,3,3,6,3,3], k = 3\nOutput: -1\nExplanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 16</code></li> <li><code>nums.length</code> is divisible by <code>k</code></li> <li><code>1 &lt;= nums[i] &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/1682/","title":"1682. Longest Palindromic Subsequence II","text":"Problem"},{"location":"LeetCode_Problems/1683/","title":"1683. Invalid Tweets","text":"Problem <p>Table: <code>Tweets</code></p> <pre>\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| tweet_id       | int     |\n| content        | varchar |\n+----------------+---------+\ntweet_id is the primary key (column with unique values) for this table.\nThis table contains all the tweets in a social media app.\n</pre> <p> </p> <p>Write a solution to find the IDs of the invalid tweets. The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than <code>15</code>.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nTweets table:\n+----------+----------------------------------+\n| tweet_id | content                          |\n+----------+----------------------------------+\n| 1        | Vote for Biden                   |\n| 2        | Let us make America great again! |\n+----------+----------------------------------+\nOutput: \n+----------+\n| tweet_id |\n+----------+\n| 2        |\n+----------+\nExplanation: \nTweet 1 has length = 14. It is a valid tweet.\nTweet 2 has length = 32. It is an invalid tweet.\n</pre>"},{"location":"LeetCode_Problems/1684/","title":"1684. Count the Number of Consistent Strings","text":"Problem <p>You are given a string <code>allowed</code> consisting of distinct characters and an array of strings <code>words</code>. A string is consistent if all characters in the string appear in the string <code>allowed</code>.</p> <p>Return the number of consistent strings in the array <code>words</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]\nOutput: 2\nExplanation: Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'.\n</pre> <p>Example 2:</p> <pre>\nInput: allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]\nOutput: 7\nExplanation: All strings are consistent.\n</pre> <p>Example 3:</p> <pre>\nInput: allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]\nOutput: 4\nExplanation: Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= allowed.length &lt;=<sup> </sup>26</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li>The characters in <code>allowed</code> are distinct.</li> <li><code>words[i]</code> and <code>allowed</code> contain only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1685/","title":"1685. Sum of Absolute Differences in a Sorted Array","text":"Problem <p>You are given an integer array <code>nums</code> sorted in non-decreasing order.</p> <p>Build and return an integer array <code>result</code> with the same length as <code>nums</code> such that <code>result[i]</code> is equal to the summation of absolute differences between <code>nums[i]</code> and all the other elements in the array.</p> <p>In other words, <code>result[i]</code> is equal to <code>sum(|nums[i]-nums[j]|)</code> where <code>0 &lt;= j &lt; nums.length</code> and <code>j != i</code> (0-indexed).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,5]\nOutput: [4,3,5]\nExplanation: Assuming the arrays are 0-indexed, then\nresult[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,\nresult[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,\nresult[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,4,6,8,10]\nOutput: [24,15,13,15,21]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= nums[i + 1] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1686/","title":"1686. Stone Game VI","text":"Problem <p>Alice and Bob take turns playing a game, with Alice starting first.</p> <p>There are <code>n</code> stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.</p> <p>You are given two integer arrays of length <code>n</code>, <code>aliceValues</code> and <code>bobValues</code>. Each <code>aliceValues[i]</code> and <code>bobValues[i]</code> represents how Alice and Bob, respectively, value the <code>i<sup>th</sup></code> stone.</p> <p>The winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally.\u00a0Both players know the other's values.</p> <p>Determine the result of the game, and:</p> <ul> <li>If Alice wins, return <code>1</code>.</li> <li>If Bob wins, return <code>-1</code>.</li> <li>If the game results in a draw, return <code>0</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: aliceValues = [1,3], bobValues = [2,1]\nOutput: 1\nExplanation:\nIf Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\nBob can only choose stone 0, and will only receive 2 points.\nAlice wins.\n</pre> <p>Example 2:</p> <pre>\nInput: aliceValues = [1,2], bobValues = [3,1]\nOutput: 0\nExplanation:\nIf Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\nDraw.\n</pre> <p>Example 3:</p> <pre>\nInput: aliceValues = [2,4,3], bobValues = [1,6,7]\nOutput: -1\nExplanation:\nRegardless of how Alice plays, Bob will be able to have more points than Alice.\nFor example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\nBob wins.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == aliceValues.length == bobValues.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= aliceValues[i], bobValues[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1687/","title":"1687. Delivering Boxes from Storage to Ports","text":"Problem <p>You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry.</p> <p>You are given an array <code>boxes</code>, where <code>boxes[i] = [ports<sub>\u200b\u200bi</sub>\u200b, weight<sub>i</sub>]</code>, and three integers <code>portsCount</code>, <code>maxBoxes</code>, and <code>maxWeight</code>.</p> <ul> <li><code>ports<sub>\u200b\u200bi</sub></code> is the port where you need to deliver the <code>i<sup>th</sup></code> box and <code>weights<sub>i</sub></code> is the weight of the <code>i<sup>th</sup></code> box.</li> <li><code>portsCount</code> is the number of ports.</li> <li><code>maxBoxes</code> and <code>maxWeight</code> are the respective box and weight limits of the ship.</li> </ul> <p>The boxes need to be delivered in the order they are given. The ship will follow these steps:</p> <ul> <li>The ship will take some number of boxes from the <code>boxes</code> queue, not violating the <code>maxBoxes</code> and <code>maxWeight</code> constraints.</li> <li>For each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no trip is needed, and the box can immediately be delivered.</li> <li>The ship then makes a return trip to storage to take more boxes from the queue.</li> </ul> <p>The ship must end at storage after all the boxes have been delivered.</p> <p>Return the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3\nOutput: 4\nExplanation: The optimal strategy is as follows: \n- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.\nSo the total number of trips is 4.\nNote that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).\n</pre> <p>Example 2:</p> <pre>\nInput: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6\nOutput: 6\nExplanation: The optimal strategy is as follows: \n- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.\n- The ship takes the fifth box, goes to port 2, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6.\n</pre> <p>Example 3:</p> <pre>\nInput: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7\nOutput: 6\nExplanation: The optimal strategy is as follows:\n- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.\n- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= boxes.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= portsCount, maxBoxes, maxWeight &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= ports<sub>\u200b\u200bi</sub> &lt;= portsCount</code></li> <li><code>1 &lt;= weights<sub>i</sub> &lt;= maxWeight</code></li> </ul>"},{"location":"LeetCode_Problems/1688/","title":"1688. Count of Matches in Tournament","text":"Problem <p>You are given an integer <code>n</code>, the number of teams in a tournament that has strange rules:</p> <ul> <li>If the current number of teams is even, each team gets paired with another team. A total of <code>n / 2</code> matches are played, and <code>n / 2</code> teams advance to the next round.</li> <li>If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of <code>(n - 1) / 2</code> matches are played, and <code>(n - 1) / 2 + 1</code> teams advance to the next round.</li> </ul> <p>Return the number of matches played in the tournament until a winner is decided.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 7\nOutput: 6\nExplanation: Details of the tournament: \n- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 3 + 2 + 1 = 6.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 14\nOutput: 13\nExplanation: Details of the tournament:\n- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.\n- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 7 + 3 + 2 + 1 = 13.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 200</code></li> </ul>"},{"location":"LeetCode_Problems/1689/","title":"1689. Partitioning Into Minimum Number Of Deci-Binary Numbers","text":"Problem <p>A decimal number is called deci-binary if each of its digits is either <code>0</code> or <code>1</code> without any leading zeros. For example, <code>101</code> and <code>1100</code> are deci-binary, while <code>112</code> and <code>3001</code> are not.</p> <p>Given a string <code>n</code> that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = \"32\"\nOutput: 3\nExplanation: 10 + 11 + 11 = 32\n</pre> <p>Example 2:</p> <pre>\nInput: n = \"82734\"\nOutput: 8\n</pre> <p>Example 3:</p> <pre>\nInput: n = \"27346209830709182346\"\nOutput: 9\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n.length &lt;= 10<sup>5</sup></code></li> <li><code>n</code> consists of only digits.</li> <li><code>n</code> does not contain any leading zeros and represents a positive integer.</li> </ul>"},{"location":"LeetCode_Problems/1690/","title":"1690. Stone Game VII","text":"Problem <p>Alice and Bob take turns playing a game, with Alice starting first.</p> <p>There are <code>n</code> stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.</p> <p>Bob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.</p> <p>Given an array of integers <code>stones</code> where <code>stones[i]</code> represents the value of the <code>i<sup>th</sup></code> stone from the left, return the difference in Alice and Bob's score if they both play optimally.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stones = [5,3,1,4,2]\nOutput: 6\nExplanation: \n- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].\n- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].\n- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].\n- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].\n- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].\nThe score difference is 18 - 12 = 6.\n</pre> <p>Example 2:</p> <pre>\nInput: stones = [7,90,5,1,100,10,10,2]\nOutput: 122</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == stones.length</code></li> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= stones[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1691/","title":"1691. Maximum Height by Stacking Cuboids","text":"Problem <p>Given <code>n</code> <code>cuboids</code> where the dimensions of the <code>i<sup>th</sup></code> cuboid is <code>cuboids[i] = [width<sub>i</sub>, length<sub>i</sub>, height<sub>i</sub>]</code> (0-indexed). Choose a subset of <code>cuboids</code> and place them on each other.</p> <p>You can place cuboid <code>i</code> on cuboid <code>j</code> if <code>width<sub>i</sub> &lt;= width<sub>j</sub></code> and <code>length<sub>i</sub> &lt;= length<sub>j</sub></code> and <code>height<sub>i</sub> &lt;= height<sub>j</sub></code>. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.</p> <p>Return the maximum height of the stacked <code>cuboids</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: cuboids = [[50,45,20],[95,37,53],[45,23,12]]\nOutput: 190\nExplanation:\nCuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.\nCuboid 0 is placed next with the 45x20 side facing down with height 50.\nCuboid 2 is placed next with the 23x12 side facing down with height 45.\nThe total height is 95 + 50 + 45 = 190.\n</pre> <p>Example 2:</p> <pre>\nInput: cuboids = [[38,25,45],[76,35,3]]\nOutput: 76\nExplanation:\nYou can't place any of the cuboids on the other.\nWe choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.\n</pre> <p>Example 3:</p> <pre>\nInput: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]\nOutput: 102\nExplanation:\nAfter rearranging the cuboids, you can see that all cuboids have the same dimension.\nYou can place the 11x7 side down on all cuboids so their heights are 17.\nThe maximum height of stacked cuboids is 6 * 17 = 102.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == cuboids.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= width<sub>i</sub>, length<sub>i</sub>, height<sub>i</sub> &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1692/","title":"1692. Count Ways to Distribute Candies","text":"Problem"},{"location":"LeetCode_Problems/1693/","title":"1693. Daily Leads and Partners","text":"Problem <p>Table: <code>DailySales</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| date_id     | date    |\n| make_name   | varchar |\n| lead_id     | int     |\n| partner_id  | int     |\n+-------------+---------+\nThere is no primary key (column with unique values) for this table. It may contain duplicates.\nThis table contains the date and the name of the product sold and the IDs of the lead and partner it was sold to.\nThe name consists of only lowercase English letters.\n</pre> <p> </p> <p>For each <code>date_id</code> and <code>make_name</code>, find the number of distinct <code>lead_id</code>'s and distinct <code>partner_id</code>'s.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nDailySales table:\n+-----------+-----------+---------+------------+\n| date_id   | make_name | lead_id | partner_id |\n+-----------+-----------+---------+------------+\n| 2020-12-8 | toyota    | 0       | 1          |\n| 2020-12-8 | toyota    | 1       | 0          |\n| 2020-12-8 | toyota    | 1       | 2          |\n| 2020-12-7 | toyota    | 0       | 2          |\n| 2020-12-7 | toyota    | 0       | 1          |\n| 2020-12-8 | honda     | 1       | 2          |\n| 2020-12-8 | honda     | 2       | 1          |\n| 2020-12-7 | honda     | 0       | 1          |\n| 2020-12-7 | honda     | 1       | 2          |\n| 2020-12-7 | honda     | 2       | 1          |\n+-----------+-----------+---------+------------+\nOutput: \n+-----------+-----------+--------------+-----------------+\n| date_id   | make_name | unique_leads | unique_partners |\n+-----------+-----------+--------------+-----------------+\n| 2020-12-8 | toyota    | 2            | 3               |\n| 2020-12-7 | toyota    | 1            | 2               |\n| 2020-12-8 | honda     | 2            | 2               |\n| 2020-12-7 | honda     | 3            | 2               |\n+-----------+-----------+--------------+-----------------+\nExplanation: \nFor 2020-12-8, toyota gets leads = [0, 1] and partners = [0, 1, 2] while honda gets leads = [1, 2] and partners = [1, 2].\nFor 2020-12-7, toyota gets leads = [0] and partners = [1, 2] while honda gets leads = [0, 1, 2] and partners = [1, 2].\n</pre>"},{"location":"LeetCode_Problems/1694/","title":"1694. Reformat Phone Number","text":"Problem <p>You are given a phone number as a string <code>number</code>. <code>number</code> consists of digits, spaces <code>' '</code>, and/or dashes <code>'-'</code>.</p> <p>You would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:</p> <ul> <li>2 digits: A single block of length 2.</li> <li>3 digits: A single block of length 3.</li> <li>4 digits: Two blocks of length 2 each.</li> </ul> <p>The blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.</p> <p>Return the phone number after formatting.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: number = \"1-23-45 6\"\nOutput: \"123-456\"\nExplanation: The digits are \"123456\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is \"456\".\nJoining the blocks gives \"123-456\".\n</pre> <p>Example 2:</p> <pre>\nInput: number = \"123 4-567\"\nOutput: \"123-45-67\"\nExplanation: The digits are \"1234567\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are \"45\" and \"67\".\nJoining the blocks gives \"123-45-67\".\n</pre> <p>Example 3:</p> <pre>\nInput: number = \"123 4-5678\"\nOutput: \"123-456-78\"\nExplanation: The digits are \"12345678\".\nStep 1: The 1st block is \"123\".\nStep 2: The 2nd block is \"456\".\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is \"78\".\nJoining the blocks gives \"123-456-78\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= number.length &lt;= 100</code></li> <li><code>number</code> consists of digits and the characters <code>'-'</code> and <code>' '</code>.</li> <li>There are at least two digits in <code>number</code>.</li> </ul>"},{"location":"LeetCode_Problems/1695/","title":"1695. Maximum Erasure Value","text":"Problem <p>You are given an array of positive integers <code>nums</code> and want to erase a subarray containing\u00a0unique elements. The score you get by erasing the subarray is equal to the sum of its elements.</p> <p>Return the maximum score you can get by erasing exactly one subarray.</p> <p>An array <code>b</code> is called to be a subarray of <code>a</code> if it forms a contiguous subsequence of <code>a</code>, that is, if it is equal to <code>a[l],a[l+1],...,a[r]</code> for some <code>(l,r)</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,2,4,5,6]\nOutput: 17\nExplanation: The optimal subarray here is [2,4,5,6].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,2,1,2,5,2,1,2,5]\nOutput: 8\nExplanation: The optimal subarray here is [5,2,1] or [1,2,5].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1696/","title":"1696. Jump Game VI","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and an integer <code>k</code>.</p> <p>You are initially standing at index <code>0</code>. In one move, you can jump at most <code>k</code> steps forward without going outside the boundaries of the array. That is, you can jump from index <code>i</code> to any index in the range <code>[i + 1, min(n - 1, i + k)]</code> inclusive.</p> <p>You want to reach the last index of the array (index <code>n - 1</code>). Your score is the sum of all <code>nums[j]</code> for each index <code>j</code> you visited in the array.</p> <p>Return the maximum score you can get.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,-1,-2,4,-7,3], k = 2\nOutput: 7\nExplanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [10,-5,-2,4,0,3], k = 3\nOutput: 17\nExplanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length, k &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1697/","title":"1697. Checking Existence of Edge Length Limited Paths","text":"Problem <p>An undirected graph of <code>n</code> nodes is defined by <code>edgeList</code>, where <code>edgeList[i] = [u<sub>i</sub>, v<sub>i</sub>, dis<sub>i</sub>]</code> denotes an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> with distance <code>dis<sub>i</sub></code>. Note that there may be multiple edges between two nodes.</p> <p>Given an array <code>queries</code>, where <code>queries[j] = [p<sub>j</sub>, q<sub>j</sub>, limit<sub>j</sub>]</code>, your task is to determine for each <code>queries[j]</code> whether there is a path between <code>p<sub>j</sub></code> and <code>q<sub>j</sub></code><sub> </sub>such that each edge on the path has a distance strictly less than <code>limit<sub>j</sub></code> .</p> <p>Return a boolean array <code>answer</code>, where <code>answer.length == queries.length</code> and the <code>j<sup>th</sup></code> value of <code>answer</code> is <code>true</code> if there is a path for <code>queries[j]</code> is <code>true</code>, and <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]\nOutput: [false,true]\nExplanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\nFor the second query, there is a path (0 -&gt; 1 -&gt; 2) of two edges with distances less than 5, thus we return true for this query.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]\nOutput: [true,false]\nExplanation: The above figure shows the given graph.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= edgeList.length, queries.length &lt;= 10<sup>5</sup></code></li> <li><code>edgeList[i].length == 3</code></li> <li><code>queries[j].length == 3</code></li> <li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub>, p<sub>j</sub>, q<sub>j</sub> &lt;= n - 1</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li><code>p<sub>j</sub> != q<sub>j</sub></code></li> <li><code>1 &lt;= dis<sub>i</sub>, limit<sub>j</sub> &lt;= 10<sup>9</sup></code></li> <li>There may be multiple edges between two nodes.</li> </ul>"},{"location":"LeetCode_Problems/1698/","title":"1698. Number of Distinct Substrings in a String","text":"Problem"},{"location":"LeetCode_Problems/1699/","title":"1699. Number of Calls Between Two Persons","text":"Problem"},{"location":"LeetCode_Problems/1700/","title":"1700. Number of Students Unable to Eat Lunch","text":"Problem <p>The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers <code>0</code> and <code>1</code> respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.</p> <p>The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:</p> <ul> <li>If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.</li> <li>Otherwise, they will leave it and go to the queue's end.</li> </ul> <p>This continues until none of the queue students want to take the top sandwich and are thus unable to eat.</p> <p>You are given two integer arrays <code>students</code> and <code>sandwiches</code> where <code>sandwiches[i]</code> is the type of the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code> sandwich in the stack (<code>i = 0</code> is the top of the stack) and <code>students[j]</code> is the preference of the <code>j<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code> student in the initial queue (<code>j = 0</code> is the front of the queue). Return the number of students that are unable to eat.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: students = [1,1,0,0], sandwiches = [0,1,0,1]\nOutput: 0 \nExplanation:\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].\n- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].\nHence all students are able to eat.\n</pre> <p>Example 2:</p> <pre>\nInput: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= students.length, sandwiches.length &lt;= 100</code></li> <li><code>students.length == sandwiches.length</code></li> <li><code>sandwiches[i]</code> is <code>0</code> or <code>1</code>.</li> <li><code>students[i]</code> is <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1701/","title":"1701. Average Waiting Time","text":"Problem <p>There is a restaurant with a single chef. You are given an array <code>customers</code>, where <code>customers[i] = [arrival<sub>i</sub>, time<sub>i</sub>]:</code></p> <ul> <li><code>arrival<sub>i</sub></code> is the arrival time of the <code>i<sup>th</sup></code> customer. The arrival times are sorted in non-decreasing order.</li> <li><code>time<sub>i</sub></code> is the time needed to prepare the order of the <code>i<sup>th</sup></code> customer.</li> </ul> <p>When a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input.</p> <p>Return the average waiting time of all customers. Solutions within <code>10<sup>-5</sup></code> from the actual answer are considered accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: customers = [[1,2],[2,5],[4,3]]\nOutput: 5.00000\nExplanation:\n1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.\n2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.\n3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.\nSo the average waiting time = (2 + 6 + 7) / 3 = 5.\n</pre> <p>Example 2:</p> <pre>\nInput: customers = [[5,2],[5,4],[10,3],[20,1]]\nOutput: 3.25000\nExplanation:\n1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.\n2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.\n3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.\n4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.\nSo the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= customers.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arrival<sub>i</sub>, time<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li><code>arrival<sub>i\u00a0</sub>&lt;= arrival<sub>i+1</sub></code></li> </ul>"},{"location":"LeetCode_Problems/1702/","title":"1702. Maximum Binary String After Change","text":"Problem <p>You are given a binary string <code>binary</code> consisting of only <code>0</code>'s or <code>1</code>'s. You can apply each of the following operations any number of times:</p> <ul> <li>Operation 1: If the number contains the substring <code>\"00\"</code>, you can replace it with <code>\"10\"</code>.      <ul> <li>For example, <code>\"00010\" -&gt; \"10010</code>\"</li> </ul> </li> <li>Operation 2: If the number contains the substring <code>\"10\"</code>, you can replace it with <code>\"01\"</code>.     <ul> <li>For example, <code>\"00010\" -&gt; \"00001\"</code></li> </ul> </li> </ul> <p>Return the maximum binary string you can obtain after any number of operations. Binary string <code>x</code> is greater than binary string <code>y</code> if <code>x</code>'s decimal representation is greater than <code>y</code>'s decimal representation.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: binary = \"000110\"\nOutput: \"111011\"\nExplanation: A valid transformation sequence can be:\n\"000110\" -&gt; \"000101\" \n\"000101\" -&gt; \"100101\" \n\"100101\" -&gt; \"110101\" \n\"110101\" -&gt; \"110011\" \n\"110011\" -&gt; \"111011\"\n</pre> <p>Example 2:</p> <pre>\nInput: binary = \"01\"\nOutput: \"01\"\nExplanation:\u00a0\"01\" cannot be transformed any further.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= binary.length &lt;= 10<sup>5</sup></code></li> <li><code>binary</code> consist of <code>'0'</code> and <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1703/","title":"1703. Minimum Adjacent Swaps for K Consecutive Ones","text":"Problem <p>You are given an integer array, <code>nums</code>, and an integer <code>k</code>. <code>nums</code> comprises of only <code>0</code>'s and <code>1</code>'s. In one move, you can choose two adjacent indices and swap their values.</p> <p>Return the minimum number of moves required so that <code>nums</code> has <code>k</code> consecutive <code>1</code>'s.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,0,0,1,0,1], k = 2\nOutput: 1\nExplanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,0,0,0,0,0,1,1], k = 3\nOutput: 5\nExplanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,0,1], k = 2\nOutput: 0\nExplanation: nums already has 2 consecutive 1's.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is <code>0</code> or <code>1</code>.</li> <li><code>1 &lt;= k &lt;= sum(nums)</code></li> </ul>"},{"location":"LeetCode_Problems/1704/","title":"1704. Determine if String Halves Are Alike","text":"Problem <p>You are given a string <code>s</code> of even length. Split this string into two halves of equal lengths, and let <code>a</code> be the first half and <code>b</code> be the second half.</p> <p>Two strings are alike if they have the same number of vowels (<code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, <code>'u'</code>, <code>'A'</code>, <code>'E'</code>, <code>'I'</code>, <code>'O'</code>, <code>'U'</code>). Notice that <code>s</code> contains uppercase and lowercase letters.</p> <p>Return <code>true</code> if <code>a</code> and <code>b</code> are alike. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"book\"\nOutput: true\nExplanation: a = \"bo\" and b = \"ok\". a has 1 vowel and b has 1 vowel. Therefore, they are alike.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"textbook\"\nOutput: false\nExplanation: a = \"text\" and b = \"book\". a has 1 vowel whereas b has 2. Therefore, they are not alike.\nNotice that the vowel o is counted twice.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 1000</code></li> <li><code>s.length</code> is even.</li> <li><code>s</code> consists of uppercase and lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/1705/","title":"1705. Maximum Number of Eaten Apples","text":"Problem <p>There is a special kind of apple tree that grows apples every day for <code>n</code> days. On the <code>i<sup>th</sup></code> day, the tree grows <code>apples[i]</code> apples that will rot after <code>days[i]</code> days, that is on day <code>i + days[i]</code> the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by <code>apples[i] == 0</code> and <code>days[i] == 0</code>.</p> <p>You decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first <code>n</code> days.</p> <p>Given two integer arrays <code>days</code> and <code>apples</code> of length <code>n</code>, return the maximum number of apples you can eat.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: apples = [1,2,3,5,2], days = [3,2,1,4,2]\nOutput: 7\nExplanation: You can eat 7 apples:\n- On the first day, you eat an apple that grew on the first day.\n- On the second day, you eat an apple that grew on the second day.\n- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n- On the fourth to the seventh days, you eat apples that grew on the fourth day.\n</pre> <p>Example 2:</p> <pre>\nInput: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]\nOutput: 5\nExplanation: You can eat 5 apples:\n- On the first to the third day you eat apples that grew on the first day.\n- Do nothing on the fouth and fifth days.\n- On the sixth and seventh days you eat apples that grew on the sixth day.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == apples.length == days.length</code></li> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= apples[i], days[i] &lt;= 2 * 10<sup>4</sup></code></li> <li><code>days[i] = 0</code> if and only if <code>apples[i] = 0</code>.</li> </ul>"},{"location":"LeetCode_Problems/1706/","title":"1706. Where Will the Ball Fall","text":"Problem <p>You have a 2-D <code>grid</code> of size <code>m x n</code> representing a box, and you have <code>n</code> balls. The box is open on the top and bottom sides.</p> <p>Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.</p> <ul> <li>A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as <code>1</code>.</li> <li>A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as <code>-1</code>.</li> </ul> <p>We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V\" shaped pattern between two boards or if a board redirects the ball into either wall of the box.</p> <p>Return an array <code>answer</code> of size <code>n</code> where <code>answer[i]</code> is the column that the ball falls out of at the bottom after dropping the ball from the <code>i<sup>th</sup></code> column at the top, or <code>-1</code> if the ball gets stuck in the box.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]\nOutput: [1,-1,-1,-1,-1]\nExplanation: This example is shown in the photo.\nBall b0 is dropped at column 0 and falls out of the box at column 1.\nBall b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.\nBall b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.\nBall b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.\nBall b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[-1]]\nOutput: [-1]\nExplanation: The ball gets stuck against the left wall.\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]\nOutput: [0,1,2,3,4,-1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>grid[i][j]</code> is <code>1</code> or <code>-1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1707/","title":"1707. Maximum XOR With an Element From Array","text":"Problem <p>You are given an array <code>nums</code> consisting of non-negative integers. You are also given a <code>queries</code> array, where <code>queries[i] = [x<sub>i</sub>, m<sub>i</sub>]</code>.</p> <p>The answer to the <code>i<sup>th</sup></code> query is the maximum bitwise <code>XOR</code> value of <code>x<sub>i</sub></code> and any element of <code>nums</code> that does not exceed <code>m<sub>i</sub></code>. In other words, the answer is <code>max(nums[j] XOR x<sub>i</sub>)</code> for all <code>j</code> such that <code>nums[j] &lt;= m<sub>i</sub></code>. If all elements in <code>nums</code> are larger than <code>m<sub>i</sub></code>, then the answer is <code>-1</code>.</p> <p>Return an integer array <code>answer</code> where <code>answer.length == queries.length</code> and <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]\nOutput: [3,3,7]\nExplanation:\n1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.\n2) 1 XOR 2 = 3.\n3) 5 XOR 2 = 7.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]\nOutput: [15,-1,5]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length, queries.length &lt;= 10<sup>5</sup></code></li> <li><code>queries[i].length == 2</code></li> <li><code>0 &lt;= nums[j], x<sub>i</sub>, m<sub>i</sub> &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1708/","title":"1708. Largest Subarray Length K","text":"Problem"},{"location":"LeetCode_Problems/1709/","title":"1709. Biggest Window Between Visits","text":"Problem"},{"location":"LeetCode_Problems/1710/","title":"1710. Maximum Units on a Truck","text":"Problem <p>You are assigned to put some amount of boxes onto one truck. You are given a 2D array <code>boxTypes</code>, where <code>boxTypes[i] = [numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox<sub>i</sub>]</code>:</p> <ul> <li><code>numberOfBoxes<sub>i</sub></code> is the number of boxes of type <code>i</code>.</li> <li><code>numberOfUnitsPerBox<sub>i</sub></code><sub> </sub>is the number of units in each box of the type <code>i</code>.</li> </ul> <p>You are also given an integer <code>truckSize</code>, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number\u00a0of boxes does not exceed <code>truckSize</code>.</p> <p>Return the maximum total number of units that can be put on the truck.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4\nOutput: 8\nExplanation: There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.\n</pre> <p>Example 2:</p> <pre>\nInput: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10\nOutput: 91\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= boxTypes.length &lt;= 1000</code></li> <li><code>1 &lt;= numberOfBoxes<sub>i</sub>, numberOfUnitsPerBox<sub>i</sub> &lt;= 1000</code></li> <li><code>1 &lt;= truckSize &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1711/","title":"1711. Count Good Meals","text":"Problem <p>A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.</p> <p>You can pick any two different foods to make a good meal.</p> <p>Given an array of integers <code>deliciousness</code> where <code>deliciousness[i]</code> is the deliciousness of the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup>\u200b\u200b\u200b\u200b</code>\u200b\u200b\u200b\u200b item of food, return the number of different good meals you can make from this list modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Note that items with different indices are considered different even if they have the same deliciousness value.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: deliciousness = [1,3,5,7,9]\nOutput: 4\nExplanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).\nTheir respective sums are 4, 8, 8, and 16, all of which are powers of 2.\n</pre> <p>Example 2:</p> <pre>\nInput: deliciousness = [1,1,1,3,3,3,7]\nOutput: 15\nExplanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= deliciousness.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= deliciousness[i] &lt;= 2<sup>20</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1712/","title":"1712. Ways to Split Array Into Three Subarrays","text":"Problem <p>A split of an integer array is good if:</p> <ul> <li>The array is split into three non-empty contiguous subarrays - named <code>left</code>, <code>mid</code>, <code>right</code> respectively from left to right.</li> <li>The sum of the elements in <code>left</code> is less than or equal to the sum of the elements in <code>mid</code>, and the sum of the elements in <code>mid</code> is less than or equal to the sum of the elements in <code>right</code>.</li> </ul> <p>Given <code>nums</code>, an array of non-negative integers, return the number of good ways to split <code>nums</code>. As the number may be too large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,1]\nOutput: 1\nExplanation: The only good way to split nums is [1] [1] [1].</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,2,2,5,0]\nOutput: 3\nExplanation: There are three good ways of splitting nums:\n[1] [2] [2,2,5,0]\n[1] [2,2] [2,5,0]\n[1,2] [2,2] [5,0]\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,2,1]\nOutput: 0\nExplanation: There is no good way to split nums.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1713/","title":"1713. Minimum Operations to Make a Subsequence","text":"Problem <p>You are given an array <code>target</code> that consists of distinct integers and another integer array <code>arr</code> that can have duplicates.</p> <p>In one operation, you can insert any integer at any position in <code>arr</code>. For example, if <code>arr = [1,4,1,2]</code>, you can add <code>3</code> in the middle and make it <code>[1,4,3,1,2]</code>. Note that you can insert the integer at the very beginning or end of the array.</p> <p>Return the minimum number of operations needed to make <code>target</code> a subsequence of <code>arr</code>.</p> <p>A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, <code>[2,7,4]</code> is a subsequence of <code>[4,2,3,7,2,1,4]</code> (the underlined elements), while <code>[2,4,2]</code> is not.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = [5,1,3], <code>arr</code> = [9,4,2,3,4]\nOutput: 2\nExplanation: You can add 5 and 1 in such a way that makes <code>arr</code> = [5,9,4,1,2,3,4], then target will be a subsequence of <code>arr</code>.\n</pre> <p>Example 2:</p> <pre>\nInput: target = [6,4,8,1,3,2], <code>arr</code> = [4,7,6,2,3,8,6,1]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= target.length, arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= target[i], arr[i] &lt;= 10<sup>9</sup></code></li> <li><code>target</code> contains no duplicates.</li> </ul>"},{"location":"LeetCode_Problems/1714/","title":"1714. Sum Of Special Evenly-Spaced Elements In Array","text":"Problem"},{"location":"LeetCode_Problems/1715/","title":"1715. Count Apples and Oranges","text":"Problem"},{"location":"LeetCode_Problems/1716/","title":"1716. Calculate Money in Leetcode Bank","text":"Problem <p>Hercy wants to save money for his first car. He puts money in the Leetcode\u00a0bank every day.</p> <p>He starts by putting in <code>$1</code> on Monday, the first day. Every day from Tuesday to Sunday, he will put in <code>$1</code> more than the day before. On every subsequent Monday, he will put in <code>$1</code> more than the previous Monday. </p> <p>Given <code>n</code>, return the total amount of money he will have in the Leetcode bank at the end of the <code>n<sup>th</sup></code> day.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4\nOutput: 10\nExplanation:\u00a0After the 4<sup>th</sup> day, the total is 1 + 2 + 3 + 4 = 10.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 10\nOutput: 37\nExplanation:\u00a0After the 10<sup>th</sup> day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2<sup>nd</sup> Monday, Hercy only puts in $2.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 20\nOutput: 96\nExplanation:\u00a0After the 20<sup>th</sup> day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1717/","title":"1717. Maximum Score From Removing Substrings","text":"Problem <p>You are given a string <code>s</code> and two integers <code>x</code> and <code>y</code>. You can perform two types of operations any number of times.</p> <ul> <li>Remove substring <code>\"ab\"</code> and gain <code>x</code> points.      <ul> <li>For example, when removing <code>\"ab\"</code> from <code>\"cabxbae\"</code> it becomes <code>\"cxbae\"</code>.</li> </ul> </li> <li>Remove substring <code>\"ba\"</code> and gain <code>y</code> points.     <ul> <li>For example, when removing <code>\"ba\"</code> from <code>\"cabxbae\"</code> it becomes <code>\"cabxe\"</code>.</li> </ul> </li> </ul> <p>Return the maximum points you can gain after applying the above operations on <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"cdbcbbaaabab\", x = 4, y = 5\nOutput: 19\nExplanation:\n- Remove the \"ba\" underlined in \"cdbcbbaaabab\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score.\n- Remove the \"ab\" underlined in \"cdbcbbaaab\". Now, s = \"cdbcbbaa\" and 4 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcbbaa\". Now, s = \"cdbcba\" and 5 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcba\". Now, s = \"cdbc\" and 5 points are added to the score.\nTotal score = 5 + 4 + 5 + 5 = 19.</pre> <p>Example 2:</p> <pre>\nInput: s = \"aabbaaxybbaabb\", x = 5, y = 4\nOutput: 20\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= x, y &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1718/","title":"1718. Construct the Lexicographically Largest Valid Sequence","text":"Problem <p>Given an integer <code>n</code>, find a sequence that satisfies all of the following:</p> <ul> <li>The integer <code>1</code> occurs once in the sequence.</li> <li>Each integer between <code>2</code> and <code>n</code> occurs twice in the sequence.</li> <li>For every integer <code>i</code> between <code>2</code> and <code>n</code>, the distance between the two occurrences of <code>i</code> is exactly <code>i</code>.</li> </ul> <p>The distance between two numbers on the sequence, <code>a[i]</code> and <code>a[j]</code>, is the absolute difference of their indices, <code>|j - i|</code>.</p> <p>Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution. </p> <p>A sequence <code>a</code> is lexicographically larger than a sequence <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, sequence <code>a</code> has a number greater than the corresponding number in <code>b</code>. For example, <code>[0,1,9,0]</code> is lexicographically larger than <code>[0,1,5,6]</code> because the first position they differ is at the third number, and <code>9</code> is greater than <code>5</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3\nOutput: [3,1,2,3,2]\nExplanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5\nOutput: [5,3,1,4,3,5,2,4,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 20</code></li> </ul>"},{"location":"LeetCode_Problems/1719/","title":"1719. Number Of Ways To Reconstruct A Tree","text":"Problem <p>You are given an array <code>pairs</code>, where <code>pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>, and:</p> <ul> <li>There are no duplicates.</li> <li><code>x<sub>i</sub> &lt; y<sub>i</sub></code></li> </ul> <p>Let <code>ways</code> be the number of rooted trees that satisfy the following conditions:</p> <ul> <li>The tree consists of nodes whose values appeared in <code>pairs</code>.</li> <li>A pair <code>[x<sub>i</sub>, y<sub>i</sub>]</code> exists in <code>pairs</code> if and only if <code>x<sub>i</sub></code> is an ancestor of <code>y<sub>i</sub></code> or <code>y<sub>i</sub></code> is an ancestor of <code>x<sub>i</sub></code>.</li> <li>Note: the tree does not have to be a binary tree.</li> </ul> <p>Two ways are considered to be different if there is at least one node that has different parents in both ways.</p> <p>Return:</p> <ul> <li><code>0</code> if <code>ways == 0</code></li> <li><code>1</code> if <code>ways == 1</code></li> <li><code>2</code> if <code>ways &gt; 1</code></li> </ul> <p>A rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.</p> <p>An ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: pairs = [[1,2],[2,3]]\nOutput: 1\nExplanation: There is exactly one valid rooted tree, which is shown in the above figure.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: pairs = [[1,2],[2,3],[1,3]]\nOutput: 2\nExplanation: There are multiple valid rooted trees. Three of them are shown in the above figures.\n</pre> <p>Example 3:</p> <pre>\nInput: pairs = [[1,2],[2,3],[2,4],[1,5]]\nOutput: 0\nExplanation: There are no valid rooted trees.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= pairs.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= x<sub>i </sub>&lt; y<sub>i</sub> &lt;= 500</code></li> <li>The elements in <code>pairs</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/1720/","title":"1720. Decode XORed Array","text":"Problem <p>There is a hidden integer array <code>arr</code> that consists of <code>n</code> non-negative integers.</p> <p>It was encoded into another integer array <code>encoded</code> of length <code>n - 1</code>, such that <code>encoded[i] = arr[i] XOR arr[i + 1]</code>. For example, if <code>arr = [1,0,2,1]</code>, then <code>encoded = [1,2,3]</code>.</p> <p>You are given the <code>encoded</code> array. You are also given an integer <code>first</code>, that is the first element of <code>arr</code>, i.e. <code>arr[0]</code>.</p> <p>Return the original array <code>arr</code>. It can be proved that the answer exists and is unique.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: encoded = [1,2,3], first = 1\nOutput: [1,0,2,1]\nExplanation: If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]\n</pre> <p>Example 2:</p> <pre>\nInput: encoded = [6,2,7,3], first = 4\nOutput: [4,2,0,7,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>encoded.length == n - 1</code></li> <li><code>0 &lt;= encoded[i] &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= first &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1721/","title":"1721. Swapping Nodes in a Linked List","text":"Problem <p>You are given the <code>head</code> of a linked list, and an integer <code>k</code>.</p> <p>Return the head of the linked list after swapping the values of the <code>k<sup>th</sup></code> node from the beginning and the <code>k<sup>th</sup></code> node from the end (the list is 1-indexed).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,2,3,4,5], k = 2\nOutput: [1,4,3,2,5]\n</pre> <p>Example 2:</p> <pre>\nInput: head = [7,9,6,6,7,8,3,0,9,5], k = 5\nOutput: [7,9,6,6,8,7,3,0,9,5]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is <code>n</code>.</li> <li><code>1 &lt;= k &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1722/","title":"1722. Minimize Hamming Distance After Swap Operations","text":"Problem <p>You are given two integer arrays, <code>source</code> and <code>target</code>, both of length <code>n</code>. You are also given an array <code>allowedSwaps</code> where each <code>allowedSwaps[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you are allowed to swap the elements at index <code>a<sub>i</sub></code> and index <code>b<sub>i</sub></code> (0-indexed) of array <code>source</code>. Note that you can swap elements at a specific pair of indices multiple times and in any order.</p> <p>The Hamming distance of two arrays of the same length, <code>source</code> and <code>target</code>, is the number of positions where the elements are different. Formally, it is the number of indices <code>i</code> for <code>0 &lt;= i &lt;= n-1</code> where <code>source[i] != target[i]</code> (0-indexed).</p> <p>Return the minimum Hamming distance of <code>source</code> and <code>target</code> after performing any amount of swap operations on array <code>source</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]\nOutput: 1\nExplanation: source can be transformed the following way:\n- Swap indices 0 and 1: source = [2,1,3,4]\n- Swap indices 2 and 3: source = [2,1,4,3]\nThe Hamming distance of source and target is 1 as they differ in 1 position: index 3.\n</pre> <p>Example 2:</p> <pre>\nInput: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []\nOutput: 2\nExplanation: There are no allowed swaps.\nThe Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.\n</pre> <p>Example 3:</p> <pre>\nInput: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == source.length == target.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= source[i], target[i] &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= allowedSwaps.length &lt;= 10<sup>5</sup></code></li> <li><code>allowedSwaps[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> </ul>"},{"location":"LeetCode_Problems/1723/","title":"1723. Find Minimum Time to Finish All Jobs","text":"Problem <p>You are given an integer array <code>jobs</code>, where <code>jobs[i]</code> is the amount of time it takes to complete the <code>i<sup>th</sup></code> job.</p> <p>There are <code>k</code> workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.</p> <p>Return the minimum possible maximum working time of any assignment. </p> <p> </p> <p>Example 1:</p> <pre>\nInput: jobs = [3,2,3], k = 3\nOutput: 3\nExplanation: By assigning each person one job, the maximum time is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: jobs = [1,2,4,7,8], k = 2\nOutput: 11\nExplanation: Assign the jobs the following way:\nWorker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)\nWorker 2: 4, 7 (working time = 4 + 7 = 11)\nThe maximum working time is 11.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= jobs.length &lt;= 12</code></li> <li><code>1 &lt;= jobs[i] &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1724/","title":"1724. Checking Existence of Edge Length Limited Paths II","text":"Problem"},{"location":"LeetCode_Problems/1725/","title":"1725. Number Of Rectangles That Can Form The Largest Square","text":"Problem <p>You are given an array <code>rectangles</code> where <code>rectangles[i] = [l<sub>i</sub>, w<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> rectangle of length <code>l<sub>i</sub></code> and width <code>w<sub>i</sub></code>.</p> <p>You can cut the <code>i<sup>th</sup></code> rectangle to form a square with a side length of <code>k</code> if both <code>k &lt;= l<sub>i</sub></code> and <code>k &lt;= w<sub>i</sub></code>. For example, if you have a rectangle <code>[4,6]</code>, you can cut it to get a square with a side length of at most <code>4</code>.</p> <p>Let <code>maxLen</code> be the side length of the largest square you can obtain from any of the given rectangles.</p> <p>Return the number of rectangles that can make a square with a side length of <code>maxLen</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rectangles = [[5,8],[3,9],[5,12],[16,5]]\nOutput: 3\nExplanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5].\nThe largest possible square is of length 5, and you can get it out of 3 rectangles.\n</pre> <p>Example 2:</p> <pre>\nInput: rectangles = [[2,3],[3,7],[4,3],[3,7]]\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rectangles.length &lt;= 1000</code></li> <li><code>rectangles[i].length == 2</code></li> <li><code>1 &lt;= l<sub>i</sub>, w<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>l<sub>i</sub> != w<sub>i</sub></code></li> </ul>"},{"location":"LeetCode_Problems/1726/","title":"1726. Tuple with Same Product","text":"Problem <p>Given an array <code>nums</code> of distinct positive integers, return the number of tuples <code>(a, b, c, d)</code> such that <code>a * b = c * d</code> where <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are elements of <code>nums</code>, and <code>a != b != c != d</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,4,6]\nOutput: 8\nExplanation: There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,4,5,10]\nOutput: 16\nExplanation: There are 16 valid tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li>All elements in <code>nums</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1727/","title":"1727. Largest Submatrix With Rearrangements","text":"Problem <p>You are given a binary matrix <code>matrix</code> of size <code>m x n</code>, and you are allowed to rearrange the columns of the <code>matrix</code> in any order.</p> <p>Return the area of the largest submatrix within <code>matrix</code> where every element of the submatrix is <code>1</code> after reordering the columns optimally.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[0,0,1],[1,1,1],[1,0,1]]\nOutput: 4\nExplanation: You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 4.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[1,0,1,0,1]]\nOutput: 3\nExplanation: You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 3.\n</pre> <p>Example 3:</p> <pre>\nInput: matrix = [[1,1,0],[1,0,1]]\nOutput: 2\nExplanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>matrix[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1728/","title":"1728. Cat and Mouse II","text":"Problem <p>A game is played by a cat and a mouse named Cat and Mouse.</p> <p>The environment is represented by a <code>grid</code> of size <code>rows x cols</code>, where each element is a wall, floor, player (Cat, Mouse), or food.</p> <ul> <li>Players are represented by the characters <code>'C'</code>(Cat)<code>,'M'</code>(Mouse).</li> <li>Floors are represented by the character <code>'.'</code> and can be walked on.</li> <li>Walls are represented by the character <code>'#'</code> and cannot be walked on.</li> <li>Food is represented by the character <code>'F'</code> and can be walked on.</li> <li>There is only one of each character <code>'C'</code>, <code>'M'</code>, and <code>'F'</code> in <code>grid</code>.</li> </ul> <p>Mouse and Cat play according to the following rules:</p> <ul> <li>Mouse moves first, then they take turns to move.</li> <li>During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the <code>grid</code>.</li> <li><code>catJump, mouseJump</code> are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.</li> <li>Staying in the same position is allowed.</li> <li>Mouse can jump over Cat.</li> </ul> <p>The game can end in 4 ways:</p> <ul> <li>If Cat occupies the same position as Mouse, Cat wins.</li> <li>If Cat reaches the food first, Cat wins.</li> <li>If Mouse reaches the food first, Mouse wins.</li> <li>If Mouse cannot get to the food within 1000 turns, Cat wins.</li> </ul> <p>Given a <code>rows x cols</code> matrix <code>grid</code> and two integers <code>catJump</code> and <code>mouseJump</code>, return <code>true</code> if Mouse can win the game if both Cat and Mouse play optimally, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2\nOutput: true\nExplanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [\"M.C...F\"], catJump = 1, mouseJump = 4\nOutput: true\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [\"M.C...F\"], catJump = 1, mouseJump = 3\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>rows == grid.length</code></li> <li><code>cols = grid[i].length</code></li> <li><code>1 &lt;= rows, cols &lt;= 8</code></li> <li><code>grid[i][j]</code> consist only of characters <code>'C'</code>, <code>'M'</code>, <code>'F'</code>, <code>'.'</code>, and <code>'#'</code>.</li> <li>There is only one of each character <code>'C'</code>, <code>'M'</code>, and <code>'F'</code> in <code>grid</code>.</li> <li><code>1 &lt;= catJump, mouseJump &lt;= 8</code></li> </ul>"},{"location":"LeetCode_Problems/1729/","title":"1729. Find Followers Count","text":"Problem <p>Table: <code>Followers</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| user_id     | int  |\n| follower_id | int  |\n+-------------+------+\n(user_id, follower_id) is the primary key (combination of columns with unique values) for this table.\nThis table contains the IDs of a user and a follower in a social media app where the follower follows the user.</pre> <p> </p> <p>Write a solution that will, for each user, return the number of followers.</p> <p>Return the result table ordered by <code>user_id</code> in ascending order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nFollowers table:\n+---------+-------------+\n| user_id | follower_id |\n+---------+-------------+\n| 0       | 1           |\n| 1       | 0           |\n| 2       | 0           |\n| 2       | 1           |\n+---------+-------------+\nOutput: \n+---------+----------------+\n| user_id | followers_count|\n+---------+----------------+\n| 0       | 1              |\n| 1       | 1              |\n| 2       | 2              |\n+---------+----------------+\nExplanation: \nThe followers of 0 are {1}\nThe followers of 1 are {0}\nThe followers of 2 are {0,1}\n</pre>"},{"location":"LeetCode_Problems/1730/","title":"1730. Shortest Path to Get Food","text":"Problem"},{"location":"LeetCode_Problems/1731/","title":"1731. The Number of Employees Which Report to Each Employee","text":"Problem <p>Table: <code>Employees</code></p> <pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| employee_id | int      |\n| name        | varchar  |\n| reports_to  | int      |\n| age         | int      |\n+-------------+----------+\nemployee_id is the column with unique values for this table.\nThis table contains information about the employees and the id of the manager they report to. Some employees do not report to anyone (reports_to is null). \n</pre> <p> </p> <p>For this problem, we will consider a manager an employee who has at least 1 other employee reporting to them.</p> <p>Write a solution to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.</p> <p>Return the result table ordered by <code>employee_id</code>.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployees table:\n+-------------+---------+------------+-----+\n| employee_id | name    | reports_to | age |\n+-------------+---------+------------+-----+\n| 9           | Hercy   | null       | 43  |\n| 6           | Alice   | 9          | 41  |\n| 4           | Bob     | 9          | 36  |\n| 2           | Winston | null       | 37  |\n+-------------+---------+------------+-----+\nOutput: \n+-------------+-------+---------------+-------------+\n| employee_id | name  | reports_count | average_age |\n+-------------+-------+---------------+-------------+\n| 9           | Hercy | 2             | 39          |\n+-------------+-------+---------------+-------------+\nExplanation: Hercy has 2 people report directly to him, Alice and Bob. Their average age is (41+36)/2 = 38.5, which is 39 after rounding it to the nearest integer.\n</pre>"},{"location":"LeetCode_Problems/1732/","title":"1732. Find the Highest Altitude","text":"Problem <p>There is a biker going on a road trip. The road trip consists of <code>n + 1</code> points at different altitudes. The biker starts his trip on point <code>0</code> with altitude equal <code>0</code>.</p> <p>You are given an integer array <code>gain</code> of length <code>n</code> where <code>gain[i]</code> is the net gain in altitude between points <code>i</code>\u200b\u200b\u200b\u200b\u200b\u200b and <code>i + 1</code> for all (<code>0 &lt;= i &lt; n)</code>. Return the highest altitude of a point.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: gain = [-5,1,5,0,-7]\nOutput: 1\nExplanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.\n</pre> <p>Example 2:</p> <pre>\nInput: gain = [-4,-3,-2,-1,4,3,2]\nOutput: 0\nExplanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == gain.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>-100 &lt;= gain[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1733/","title":"1733. Minimum Number of People to Teach","text":"Problem <p>On a social network consisting of <code>m</code> users and some friendships between users, two users can communicate with each other if they know a common language.</p> <p>You are given an integer <code>n</code>, an array <code>languages</code>, and an array <code>friendships</code> where:</p> <ul> <li>There are <code>n</code> languages numbered <code>1</code> through <code>n</code>,</li> <li><code>languages[i]</code> is the set of languages the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code>\u200b\u200b\u200b\u200b user knows, and</li> <li><code>friendships[i] = [u<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>\u200b\u200b\u200b, v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>]</code> denotes a friendship between the users <code>u<sup>\u200b\u200b\u200b\u200b\u200b</sup><sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub></code>\u200b\u200b\u200b\u200b\u200b and <code>v<sub>i</sub></code>.</li> </ul> <p>You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.</p> <p>Note that friendships are not transitive, meaning if <code>x</code> is a friend of <code>y</code> and <code>y</code> is a friend of <code>z</code>, this doesn't guarantee that <code>x</code> is a friend of <code>z</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]\nOutput: 1\nExplanation: You can either teach user 1 the second language or user 2 the first language.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]\nOutput: 2\nExplanation: Teach the third language to users 1 and 3, yielding two users to teach.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 500</code></li> <li><code>languages.length == m</code></li> <li><code>1 &lt;= m &lt;= 500</code></li> <li><code>1 &lt;= languages[i].length &lt;= n</code></li> <li><code>1 &lt;= languages[i][j] &lt;= n</code></li> <li><code>1 &lt;= u<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub> &lt; v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub> &lt;= languages.length</code></li> <li><code>1 &lt;= friendships.length &lt;= 500</code></li> <li>All tuples <code>(u<sub>\u200b\u200b\u200b\u200b\u200bi, </sub>v<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>)</code> are unique</li> <li><code>languages[i]</code> contains only unique values</li> </ul>"},{"location":"LeetCode_Problems/1734/","title":"1734. Decode XORed Permutation","text":"Problem <p>There is an integer array <code>perm</code> that is a permutation of the first <code>n</code> positive integers, where <code>n</code> is always odd.</p> <p>It was encoded into another integer array <code>encoded</code> of length <code>n - 1</code>, such that <code>encoded[i] = perm[i] XOR perm[i + 1]</code>. For example, if <code>perm = [1,3,2]</code>, then <code>encoded = [2,1]</code>.</p> <p>Given the <code>encoded</code> array, return the original array <code>perm</code>. It is guaranteed that the answer exists and is unique.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: encoded = [3,1]\nOutput: [1,2,3]\nExplanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]\n</pre> <p>Example 2:</p> <pre>\nInput: encoded = [6,5,4,6]\nOutput: [2,4,1,5,3]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= n &lt;\u00a010<sup>5</sup></code></li> <li><code>n</code>\u00a0is odd.</li> <li><code>encoded.length == n - 1</code></li> </ul>"},{"location":"LeetCode_Problems/1735/","title":"1735. Count Ways to Make Array With Product","text":"Problem <p>You are given a 2D integer array, <code>queries</code>. For each <code>queries[i]</code>, where <code>queries[i] = [n<sub>i</sub>, k<sub>i</sub>]</code>, find the number of different ways you can place positive integers into an array of size <code>n<sub>i</sub></code> such that the product of the integers is <code>k<sub>i</sub></code>. As the number of ways may be too large, the answer to the <code>i<sup>th</sup></code> query is the number of ways modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Return an integer array <code>answer</code> where <code>answer.length == queries.length</code>, and <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: queries = [[2,6],[5,1],[73,660]]\nOutput: [4,1,50734910]\nExplanation:\u00a0Each query is independent.\n[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].\n[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].\n[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 10<sup>9</sup> + 7 = 50734910.\n</pre> <p>Example 2:</p> <pre>\nInput: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]\nOutput: [1,2,3,10,5]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= queries.length &lt;= 10<sup>4</sup> </code></li> <li><code>1 &lt;= n<sub>i</sub>, k<sub>i</sub> &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1736/","title":"1736. Latest Time by Replacing Hidden Digits","text":"Problem <p>You are given a string <code>time</code> in the form of <code> hh:mm</code>, where some of the digits in the string are hidden (represented by <code>?</code>).</p> <p>The valid times are those inclusively between <code>00:00</code> and <code>23:59</code>.</p> <p>Return the latest valid time you can get from <code>time</code> by replacing the hidden digits.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: time = \"2?:?0\"\nOutput: \"23:50\"\nExplanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.\n</pre> <p>Example 2:</p> <pre>\nInput: time = \"0?:3?\"\nOutput: \"09:39\"\n</pre> <p>Example 3:</p> <pre>\nInput: time = \"1?:22\"\nOutput: \"19:22\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>time</code> is in the format <code>hh:mm</code>.</li> <li>It is guaranteed that you can produce a valid time from the given string.</li> </ul>"},{"location":"LeetCode_Problems/1737/","title":"1737. Change Minimum Characters to Satisfy One of Three Conditions","text":"Problem <p>You are given two strings <code>a</code> and <code>b</code> that consist of lowercase letters. In one operation, you can change any character in <code>a</code> or <code>b</code> to any lowercase letter.</p> <p>Your goal is to satisfy one of the following three conditions:</p> <ul> <li>Every letter in <code>a</code> is strictly less than every letter in <code>b</code> in the alphabet.</li> <li>Every letter in <code>b</code> is strictly less than every letter in <code>a</code> in the alphabet.</li> <li>Both <code>a</code> and <code>b</code> consist of only one distinct letter.</li> </ul> <p>Return the minimum number of operations needed to achieve your goal.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: a = \"aba\", b = \"caa\"\nOutput: 2\nExplanation: Consider the best way to make each condition true:\n1) Change b to \"ccc\" in 2 operations, then every letter in a is less than every letter in b.\n2) Change a to \"bbb\" and b to \"aaa\" in 3 operations, then every letter in b is less than every letter in a.\n3) Change a to \"aaa\" and b to \"aaa\" in 2 operations, then a and b consist of one distinct letter.\nThe best way was done in 2 operations (either condition 1 or condition 3).\n</pre> <p>Example 2:</p> <pre>\nInput: a = \"dabadd\", b = \"cda\"\nOutput: 3\nExplanation: The best way is to make condition 1 true by changing b to \"eee\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a.length, b.length &lt;= 10<sup>5</sup></code></li> <li><code>a</code> and <code>b</code> consist only of lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/1738/","title":"1738. Find Kth Largest XOR Coordinate Value","text":"Problem <p>You are given a 2D <code>matrix</code> of size <code>m x n</code>, consisting of non-negative integers. You are also given an integer <code>k</code>.</p> <p>The value of coordinate <code>(a, b)</code> of the matrix is the XOR of all <code>matrix[i][j]</code> where <code>0 &lt;= i &lt;= a &lt; m</code> and <code>0 &lt;= j &lt;= b &lt; n</code> (0-indexed).</p> <p>Find the <code>k<sup>th</sup></code> largest value (1-indexed) of all the coordinates of <code>matrix</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: matrix = [[5,2],[1,6]], k = 1\nOutput: 7\nExplanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.\n</pre> <p>Example 2:</p> <pre>\nInput: matrix = [[5,2],[1,6]], k = 2\nOutput: 5\nExplanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.\n</pre> <p>Example 3:</p> <pre>\nInput: matrix = [[5,2],[1,6]], k = 3\nOutput: 4\nExplanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 1000</code></li> <li><code>0 &lt;= matrix[i][j] &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= k &lt;= m * n</code></li> </ul>"},{"location":"LeetCode_Problems/1739/","title":"1739. Building Boxes","text":"Problem <p>You have a cubic storeroom where the width, length, and height of the room are all equal to <code>n</code> units. You are asked to place <code>n</code> boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:</p> <ul> <li>You can place the boxes anywhere on the floor.</li> <li>If box <code>x</code> is placed on top of the box <code>y</code>, then each side of the four vertical sides of the box <code>y</code> must either be adjacent to another box or to a wall.</li> </ul> <p>Given an integer <code>n</code>, return the minimum possible number of boxes touching the floor.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3\nOutput: 3\nExplanation: The figure above is for the placement of the three boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 4\nOutput: 3\nExplanation: The figure above is for the placement of the four boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 10\nOutput: 6\nExplanation: The figure above is for the placement of the ten boxes.\nThese boxes are placed in the corner of the room, where the corner is on the back side.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1740/","title":"1740. Find Distance in a Binary Tree","text":"Problem"},{"location":"LeetCode_Problems/1741/","title":"1741. Find Total Time Spent by Each Employee","text":"Problem <p>Table: <code>Employees</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| emp_id      | int  |\n| event_day   | date |\n| in_time     | int  |\n| out_time    | int  |\n+-------------+------+\n(emp_id, event_day, in_time) is the primary key (combinations of columns with unique values) of this table.\nThe table shows the employees' entries and exits in an office.\nevent_day is the day at which this event happened, in_time is the minute at which the employee entered the office, and out_time is the minute at which they left the office.\nin_time and out_time are between 1 and 1440.\nIt is guaranteed that no two events on the same day intersect in time, and in_time &lt; out_time.\n</pre> <p> </p> <p>Write a solution to calculate the total time in minutes spent by each employee on each day at the office. Note that within one day, an employee can enter and leave more than once. The time spent in the office for a single entry is <code>out_time - in_time</code>.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployees table:\n+--------+------------+---------+----------+\n| emp_id | event_day  | in_time | out_time |\n+--------+------------+---------+----------+\n| 1      | 2020-11-28 | 4       | 32       |\n| 1      | 2020-11-28 | 55      | 200      |\n| 1      | 2020-12-03 | 1       | 42       |\n| 2      | 2020-11-28 | 3       | 33       |\n| 2      | 2020-12-09 | 47      | 74       |\n+--------+------------+---------+----------+\nOutput: \n+------------+--------+------------+\n| day        | emp_id | total_time |\n+------------+--------+------------+\n| 2020-11-28 | 1      | 173        |\n| 2020-11-28 | 2      | 30         |\n| 2020-12-03 | 1      | 41         |\n| 2020-12-09 | 2      | 27         |\n+------------+--------+------------+\nExplanation: \nEmployee 1 has three events: two on day 2020-11-28 with a total of (32 - 4) + (200 - 55) = 173, and one on day 2020-12-03 with a total of (42 - 1) = 41.\nEmployee 2 has two events: one on day 2020-11-28 with a total of (33 - 3) = 30, and one on day 2020-12-09 with a total of (74 - 47) = 27.\n</pre>"},{"location":"LeetCode_Problems/1742/","title":"1742. Maximum Number of Balls in a Box","text":"Problem <p>You are working in a ball factory where you have <code>n</code> balls numbered from <code>lowLimit</code> up to <code>highLimit</code> inclusive (i.e., <code>n == highLimit - lowLimit + 1</code>), and an infinite number of boxes numbered from <code>1</code> to <code>infinity</code>.</p> <p>Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number <code>321</code> will be put in the box number <code>3 + 2 + 1 = 6</code> and the ball number <code>10</code> will be put in the box number <code>1 + 0 = 1</code>.</p> <p>Given two integers <code>lowLimit</code> and <code>highLimit</code>, return the number of balls in the box with the most balls.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: lowLimit = 1, highLimit = 10\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  2 1 1 1 1 1 1 1 1 0  0  ...\nBox 1 has the most number of balls with 2 balls.</pre> <p>Example 2:</p> <pre>\nInput: lowLimit = 5, highLimit = 15\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  1 1 1 1 2 2 1 1 1 0  0  ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each.\n</pre> <p>Example 3:</p> <pre>\nInput: lowLimit = 19, highLimit = 28\nOutput: 2\nExplanation:\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\nBox 10 has the most number of balls with 2 balls.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= lowLimit &lt;= highLimit &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1743/","title":"1743. Restore the Array From Adjacent Pairs","text":"Problem <p>There is an integer array <code>nums</code> that consists of <code>n</code> unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in <code>nums</code>.</p> <p>You are given a 2D integer array <code>adjacentPairs</code> of size <code>n - 1</code> where each <code>adjacentPairs[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that the elements <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> are adjacent in <code>nums</code>.</p> <p>It is guaranteed that every adjacent pair of elements <code>nums[i]</code> and <code>nums[i+1]</code> will exist in <code>adjacentPairs</code>, either as <code>[nums[i], nums[i+1]]</code> or <code>[nums[i+1], nums[i]]</code>. The pairs can appear in any order.</p> <p>Return the original array <code>nums</code>. If there are multiple solutions, return any of them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: adjacentPairs = [[2,1],[3,4],[3,2]]\nOutput: [1,2,3,4]\nExplanation: This array has all its adjacent pairs in adjacentPairs.\nNotice that adjacentPairs[i] may not be in left-to-right order.\n</pre> <p>Example 2:</p> <pre>\nInput: adjacentPairs = [[4,-2],[1,4],[-3,1]]\nOutput: [-2,4,1,-3]\nExplanation: There can be negative numbers.\nAnother solution is [-3,1,4,-2], which would also be accepted.\n</pre> <p>Example 3:</p> <pre>\nInput: adjacentPairs = [[100000,-100000]]\nOutput: [100000,-100000]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums.length == n</code></li> <li><code>adjacentPairs.length == n - 1</code></li> <li><code>adjacentPairs[i].length == 2</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i], u<sub>i</sub>, v<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li>There exists some <code>nums</code> that has <code>adjacentPairs</code> as its pairs.</li> </ul>"},{"location":"LeetCode_Problems/1744/","title":"1744. Can You Eat Your Favorite Candy on Your Favorite Day?","text":"Problem <p>You are given a (0-indexed) array of positive integers <code>candiesCount</code> where <code>candiesCount[i]</code> represents the number of candies of the\u00a0<code>i<sup>th</sup></code>\u00a0type you have. You are also given a 2D array <code>queries</code> where <code>queries[i] = [favoriteType<sub>i</sub>, favoriteDay<sub>i</sub>, dailyCap<sub>i</sub>]</code>.</p> <p>You play a game with the following rules:</p> <ul> <li>You start eating candies on day <code>0</code>.</li> <li>You cannot eat any candy of type <code>i</code> unless you have eaten all candies of type <code>i - 1</code>.</li> <li>You must eat at least one candy per day until you have eaten all the candies.</li> </ul> <p>Construct a boolean array <code>answer</code> such that <code>answer.length == queries.length</code> and <code>answer[i]</code> is <code>true</code> if you can eat a candy of type <code>favoriteType<sub>i</sub></code> on day <code>favoriteDay<sub>i</sub></code> without eating more than <code>dailyCap<sub>i</sub></code> candies on any day, and <code>false</code> otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.</p> <p>Return the constructed array <code>answer</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]\nOutput: [true,false,true]\nExplanation:\n1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.\n2- You can eat at most 4 candies each day.\n   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.\n   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.\n3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.\n</pre> <p>Example 2:</p> <pre>\nInput: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]\nOutput: [false,true,true,false,false]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= candiesCount.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= candiesCount[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> <li><code>queries[i].length == 3</code></li> <li><code>0 &lt;= favoriteType<sub>i</sub> &lt; candiesCount.length</code></li> <li><code>0 &lt;= favoriteDay<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= dailyCap<sub>i</sub> &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1745/","title":"1745. Palindrome Partitioning IV","text":"Problem <p>Given a string <code>s</code>, return <code>true</code> if it is possible to split the string <code>s</code> into three non-empty palindromic substrings. Otherwise, return <code>false</code>.\u200b\u200b\u200b\u200b\u200b</p> <p>A string is said to be palindrome if it the same string when reversed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcbdd\"\nOutput: true\nExplanation: \"abcbdd\" = \"a\" + \"bcb\" + \"dd\", and all three substrings are palindromes.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"bcbddxy\"\nOutput: false\nExplanation: s cannot be split into 3 palindromes.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= s.length &lt;= 2000</code></li> <li><code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1746/","title":"1746. Maximum Subarray Sum After One Operation","text":"Problem"},{"location":"LeetCode_Problems/1747/","title":"1747. Leetflex Banned Accounts","text":"Problem"},{"location":"LeetCode_Problems/1748/","title":"1748. Sum of Unique Elements","text":"Problem <p>You are given an integer array <code>nums</code>. The unique elements of an array are the elements that appear exactly once in the array.</p> <p>Return the sum of all the unique elements of <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,2]\nOutput: 4\nExplanation: The unique elements are [1,3], and the sum is 4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1,1,1]\nOutput: 0\nExplanation: There are no unique elements, and the sum is 0.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,4,5]\nOutput: 15\nExplanation: The unique elements are [1,2,3,4,5], and the sum is 15.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1749/","title":"1749. Maximum Absolute Sum of Any Subarray","text":"Problem <p>You are given an integer array <code>nums</code>. The absolute sum of a subarray <code>[nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums<sub>r</sub>]</code> is <code>abs(nums<sub>l</sub> + nums<sub>l+1</sub> + ... + nums<sub>r-1</sub> + nums<sub>r</sub>)</code>.</p> <p>Return the maximum absolute sum of any (possibly empty) subarray of <code>nums</code>.</p> <p>Note that <code>abs(x)</code> is defined as follows:</p> <ul> <li>If <code>x</code> is a negative integer, then <code>abs(x) = -x</code>.</li> <li>If <code>x</code> is a non-negative integer, then <code>abs(x) = x</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,-3,2,3,-4]\nOutput: 5\nExplanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,-5,1,-4,3,-2]\nOutput: 8\nExplanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1750/","title":"1750. Minimum Length of String After Deleting Similar Ends","text":"Problem <p>Given a string <code>s</code> consisting only of characters <code>'a'</code>, <code>'b'</code>, and <code>'c'</code>. You are asked to apply the following algorithm on the string any number of times:</p> <ol> <li>Pick a non-empty prefix from the string <code>s</code> where all the characters in the prefix are equal.</li> <li>Pick a non-empty suffix from the string <code>s</code> where all the characters in this suffix are equal.</li> <li>The prefix and the suffix should not intersect at any index.</li> <li>The characters from the prefix and suffix must be the same.</li> <li>Delete both the prefix and the suffix.</li> </ol> <p>Return the minimum length of <code>s</code> after performing the above operation any number of times (possibly zero times).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ca\"\nOutput: 2\nExplanation: You can't remove any characters, so the string stays as is.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"cabaabac\"\nOutput: 0\nExplanation: An optimal sequence of operations is:\n- Take prefix = \"c\" and suffix = \"c\" and remove them, s = \"abaaba\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"baab\".\n- Take prefix = \"b\" and suffix = \"b\" and remove them, s = \"aa\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"\".</pre> <p>Example 3:</p> <pre>\nInput: s = \"aabccabba\"\nOutput: 3\nExplanation: An optimal sequence of operations is:\n- Take prefix = \"aa\" and suffix = \"a\" and remove them, s = \"bccabb\".\n- Take prefix = \"b\" and suffix = \"bb\" and remove them, s = \"cca\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> only consists of characters <code>'a'</code>, <code>'b'</code>, and <code>'c'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1751/","title":"1751. Maximum Number of Events That Can Be Attended II","text":"Problem <p>You are given an array of <code>events</code> where <code>events[i] = [startDay<sub>i</sub>, endDay<sub>i</sub>, value<sub>i</sub>]</code>. The <code>i<sup>th</sup></code> event starts at <code>startDay<sub>i</sub></code><sub> </sub>and ends at <code>endDay<sub>i</sub></code>, and if you attend this event, you will receive a value of <code>value<sub>i</sub></code>. You are also given an integer <code>k</code> which represents the maximum number of events you can attend.</p> <p>You can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.</p> <p>Return the maximum sum of values that you can receive by attending events.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2\nOutput: 7\nExplanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2\nOutput: 10\nExplanation: Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do not have to attend k events.</pre> <p>Example 3:</p> <p></p> <pre>\nInput: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3\nOutput: 9\nExplanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= events.length</code></li> <li><code>1 &lt;= k * events.length &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= startDay<sub>i</sub> &lt;= endDay<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= value<sub>i</sub> &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1752/","title":"1752. Check if Array Is Sorted and Rotated","text":"Problem <p>Given an array <code>nums</code>, return <code>true</code> if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return <code>false</code>.</p> <p>There may be duplicates in the original array.</p> <p>Note: An array <code>A</code> rotated by <code>x</code> positions results in an array <code>B</code> of the same length such that <code>A[i] == B[(i+x) % A.length]</code>, where <code>%</code> is the modulo operation.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,4,5,1,2]\nOutput: true\nExplanation: [1,2,3,4,5] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,1,3,4]\nOutput: false\nExplanation: There is no sorted array once rotated that can make nums.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3]\nOutput: true\nExplanation: [1,2,3] is the original sorted array.\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1753/","title":"1753. Maximum Score From Removing Stones","text":"Problem <p>You are playing a solitaire game with three piles of stones of sizes <code>a</code>\u200b\u200b\u200b\u200b\u200b\u200b, <code>b</code>,\u200b\u200b\u200b\u200b\u200b\u200b and <code>c</code>\u200b\u200b\u200b\u200b\u200b\u200b respectively. Each turn you choose two different non-empty piles, take one stone from each, and add <code>1</code> point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).</p> <p>Given three integers <code>a</code>\u200b\u200b\u200b\u200b\u200b, <code>b</code>,\u200b\u200b\u200b\u200b\u200b and <code>c</code>\u200b\u200b\u200b\u200b\u200b, return the maximum score you can get.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: a = 2, b = 4, c = 6\nOutput: 6\nExplanation: The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points.\n</pre> <p>Example 2:</p> <pre>\nInput: a = 4, b = 4, c = 6\nOutput: 7\nExplanation: The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points.\n</pre> <p>Example 3:</p> <pre>\nInput: a = 1, b = 8, c = 8\nOutput: 8\nExplanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\nAfter that, there are fewer than two non-empty piles, so the game ends.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a, b, c &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1754/","title":"1754. Largest Merge Of Two Strings","text":"Problem <p>You are given two strings <code>word1</code> and <code>word2</code>. You want to construct a string <code>merge</code> in the following way: while either <code>word1</code> or <code>word2</code> are non-empty, choose one of the following options:</p> <ul> <li>If <code>word1</code> is non-empty, append the first character in <code>word1</code> to <code>merge</code> and delete it from <code>word1</code>.      <ul> <li>For example, if <code>word1 = \"abc\" </code>and <code>merge = \"dv\"</code>, then after choosing this operation, <code>word1 = \"bc\"</code> and <code>merge = \"dva\"</code>.</li> </ul> </li> <li>If <code>word2</code> is non-empty, append the first character in <code>word2</code> to <code>merge</code> and delete it from <code>word2</code>.     <ul> <li>For example, if <code>word2 = \"abc\" </code>and <code>merge = \"\"</code>, then after choosing this operation, <code>word2 = \"bc\"</code> and <code>merge = \"a\"</code>.</li> </ul> </li> </ul> <p>Return the lexicographically largest <code>merge</code> you can construct.</p> <p>A string <code>a</code> is lexicographically larger than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, <code>a</code> has a character strictly larger than the corresponding character in <code>b</code>. For example, <code>\"abcd\"</code> is lexicographically larger than <code>\"abcc\"</code> because the first position they differ is at the fourth character, and <code>d</code> is greater than <code>c</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word1 = \"cabaa\", word2 = \"bcaaa\"\nOutput: \"cbcabaaaaa\"\nExplanation: One way to get the lexicographically largest merge is:\n- Take from word1: merge = \"c\", word1 = \"abaa\", word2 = \"bcaaa\"\n- Take from word2: merge = \"cb\", word1 = \"abaa\", word2 = \"caaa\"\n- Take from word2: merge = \"cbc\", word1 = \"abaa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbca\", word1 = \"baa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbcab\", word1 = \"aa\", word2 = \"aaa\"\n- Append the remaining 5 a's from word1 and word2 at the end of merge.\n</pre> <p>Example 2:</p> <pre>\nInput: word1 = \"abcabc\", word2 = \"abdcaba\"\nOutput: \"abdcabcabcaba\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word1.length, word2.length &lt;= 3000</code></li> <li><code>word1</code> and <code>word2</code> consist only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1755/","title":"1755. Closest Subsequence Sum","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>goal</code>.</p> <p>You want to choose a subsequence of <code>nums</code> such that the sum of its elements is the closest possible to <code>goal</code>. That is, if the sum of the subsequence's elements is <code>sum</code>, then you want to minimize the absolute difference <code>abs(sum - goal)</code>.</p> <p>Return the minimum possible value of <code>abs(sum - goal)</code>.</p> <p>Note that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,-7,3,5], goal = 6\nOutput: 0\nExplanation: Choose the whole array as a subsequence, with a sum of 6.\nThis is equal to the goal, so the absolute difference is 0.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [7,-9,15,-2], goal = -5\nOutput: 1\nExplanation: Choose the subsequence [7,-9,-2], with a sum of -4.\nThe absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3], goal = -7\nOutput: 7\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 40</code></li> <li><code>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></code></li> <li><code>-10<sup>9</sup> &lt;= goal &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1756/","title":"1756. Design Most Recently Used Queue","text":"Problem"},{"location":"LeetCode_Problems/1757/","title":"1757. Recyclable and Low Fat Products","text":"Problem <p>Table: <code>Products</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_id  | int     |\n| low_fats    | enum    |\n| recyclable  | enum    |\n+-------------+---------+\nproduct_id is the primary key (column with unique values) for this table.\nlow_fats is an ENUM (category) of type ('Y', 'N') where 'Y' means this product is low fat and 'N' means it is not.\nrecyclable is an ENUM (category) of types ('Y', 'N') where 'Y' means this product is recyclable and 'N' means it is not.</pre> <p> </p> <p>Write a solution to find the ids of products that are both low fat and recyclable.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nProducts table:\n+-------------+----------+------------+\n| product_id  | low_fats | recyclable |\n+-------------+----------+------------+\n| 0           | Y        | N          |\n| 1           | Y        | Y          |\n| 2           | N        | Y          |\n| 3           | Y        | Y          |\n| 4           | N        | N          |\n+-------------+----------+------------+\nOutput: \n+-------------+\n| product_id  |\n+-------------+\n| 1           |\n| 3           |\n+-------------+\nExplanation: Only products 1 and 3 are both low fat and recyclable.\n</pre>"},{"location":"LeetCode_Problems/1758/","title":"1758. Minimum Changes To Make Alternating Binary String","text":"Problem <p>You are given a string <code>s</code> consisting only of the characters <code>'0'</code> and <code>'1'</code>. In one operation, you can change any <code>'0'</code> to <code>'1'</code> or vice versa.</p> <p>The string is called alternating if no two adjacent characters are equal. For example, the string <code>\"010\"</code> is alternating, while the string <code>\"0100\"</code> is not.</p> <p>Return the minimum number of operations needed to make <code>s</code> alternating.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"0100\"\nOutput: 1\nExplanation: If you change the last character to '1', s will be \"0101\", which is alternating.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"10\"\nOutput: 0\nExplanation: s is already alternating.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"1111\"\nOutput: 2\nExplanation: You need two operations to reach \"0101\" or \"1010\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1759/","title":"1759. Count Number of Homogenous Substrings","text":"Problem <p>Given a string <code>s</code>, return the number of homogenous substrings of <code>s</code>. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A string is homogenous if all the characters of the string are the same.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abbcccaa\"\nOutput: 13\nExplanation: The homogenous substrings are listed as below:\n\"a\"   appears 3 times.\n\"aa\"  appears 1 time.\n\"b\"   appears 2 times.\n\"bb\"  appears 1 time.\n\"c\"   appears 3 times.\n\"cc\"  appears 2 times.\n\"ccc\" appears 1 time.\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.</pre> <p>Example 2:</p> <pre>\nInput: s = \"xy\"\nOutput: 2\nExplanation: The homogenous substrings are \"x\" and \"y\".</pre> <p>Example 3:</p> <pre>\nInput: s = \"zzzzz\"\nOutput: 15\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/1760/","title":"1760. Minimum Limit of Balls in a Bag","text":"Problem <p>You are given an integer array <code>nums</code> where the <code>i<sup>th</sup></code> bag contains <code>nums[i]</code> balls. You are also given an integer <code>maxOperations</code>.</p> <p>You can perform the following operation at most <code>maxOperations</code> times:</p> <ul> <li>Take any bag of balls and divide it into two new bags with a positive number of balls.      <ul> <li>For example, a bag of <code>5</code> balls can become two new bags of <code>1</code> and <code>4</code> balls, or two new bags of <code>2</code> and <code>3</code> balls.</li> </ul> </li> </ul> <p>Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.</p> <p>Return the minimum possible penalty after performing the operations.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [9], maxOperations = 2\nOutput: 3\nExplanation: \n- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -&gt; [6,3].\n- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -&gt; [3,3,3].\nThe bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,4,8,2], maxOperations = 4\nOutput: 2\nExplanation:\n- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -&gt; [2,4,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -&gt; [2,2,2,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -&gt; [2,2,2,2,2,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -&gt; [2,2,2,2,2,2,2,2].\nThe bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= maxOperations, nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1761/","title":"1761. Minimum Degree of a Connected Trio in a Graph","text":"Problem <p>You are given an undirected graph. You are given an integer <code>n</code> which is the number of nodes in the graph and an array <code>edges</code>, where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an undirected edge between <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>.</p> <p>A connected trio is a set of three nodes where there is an edge between every pair of them.</p> <p>The degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.</p> <p>Return the minimum degree of a connected trio in the graph, or <code>-1</code> if the graph has no connected trios.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]\nOutput: 3\nExplanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]\nOutput: 0\nExplanation: There are exactly three trios:\n1) [1,4,3] with degree 0.\n2) [2,5,6] with degree 2.\n3) [5,6,7] with degree 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 400</code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= edges.length &lt;= n * (n-1) / 2</code></li> <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> <li><code>u<sub>i </sub>!= v<sub>i</sub></code></li> <li>There are no repeated edges.</li> </ul>"},{"location":"LeetCode_Problems/1762/","title":"1762. Buildings With an Ocean View","text":"Problem"},{"location":"LeetCode_Problems/1763/","title":"1763. Longest Nice Substring","text":"Problem <p>A string <code>s</code> is nice if, for every letter of the alphabet that <code>s</code> contains, it appears both in uppercase and lowercase. For example, <code>\"abABB\"</code> is nice because <code>'A'</code> and <code>'a'</code> appear, and <code>'B'</code> and <code>'b'</code> appear. However, <code>\"abA\"</code> is not because <code>'b'</code> appears, but <code>'B'</code> does not.</p> <p>Given a string <code>s</code>, return the longest substring of <code>s</code> that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"YazaAay\"\nOutput: \"aAa\"\nExplanation: \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.\n\"aAa\" is the longest nice substring.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"Bb\"\nOutput: \"Bb\"\nExplanation: \"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"c\"\nOutput: \"\"\nExplanation: There are no nice substrings.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of uppercase and lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1764/","title":"1764. Form Array by Concatenating Subarrays of Another Array","text":"Problem <p>You are given a 2D integer array <code>groups</code> of length <code>n</code>. You are also given an integer array <code>nums</code>.</p> <p>You are asked if you can choose <code>n</code> disjoint subarrays from the array <code>nums</code> such that the <code>i<sup>th</sup></code> subarray is equal to <code>groups[i]</code> (0-indexed), and if <code>i &gt; 0</code>, the <code>(i-1)<sup>th</sup></code> subarray appears before the <code>i<sup>th</sup></code> subarray in <code>nums</code> (i.e. the subarrays must be in the same order as <code>groups</code>).</p> <p>Return <code>true</code> if you can do this task, and <code>false</code> otherwise.</p> <p>Note that the subarrays are disjoint if and only if there is no index <code>k</code> such that <code>nums[k]</code> belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]\nOutput: true\nExplanation: You can choose the 0<sup>th</sup> subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1<sup>st</sup> one as [1,-1,0,1,-1,-1,3,-2,0].\nThese subarrays are disjoint as they share no common nums[k] element.\n</pre> <p>Example 2:</p> <pre>\nInput: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]\nOutput: false\nExplanation: Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups.\n[10,-2] must come before [1,2,3,4].\n</pre> <p>Example 3:</p> <pre>\nInput: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]\nOutput: false\nExplanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint.\nThey share a common elements nums[4] (0-indexed).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>groups.length == n</code></li> <li><code>1 &lt;= n &lt;= 10<sup>3</sup></code></li> <li><code>1 &lt;= groups[i].length, sum(groups[i].length) &lt;= 10<sup>3</sup></code></li> <li><code>1 &lt;= nums.length &lt;= 10<sup>3</sup></code></li> <li><code>-10<sup>7</sup> &lt;= groups[i][j], nums[k] &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1765/","title":"1765. Map of Highest Peak","text":"Problem <p>You are given an integer matrix <code>isWater</code> of size <code>m x n</code> that represents a map of land and water cells.</p> <ul> <li>If <code>isWater[i][j] == 0</code>, cell <code>(i, j)</code> is a land cell.</li> <li>If <code>isWater[i][j] == 1</code>, cell <code>(i, j)</code> is a water cell.</li> </ul> <p>You must assign each cell a height in a way that follows these rules:</p> <ul> <li>The height of each cell must be non-negative.</li> <li>If the cell is a water cell, its height must be <code>0</code>.</li> <li>Any two adjacent cells must have an absolute height difference of at most <code>1</code>. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).</li> </ul> <p>Find an assignment of heights such that the maximum height in the matrix is maximized.</p> <p>Return an integer matrix <code>height</code> of size <code>m x n</code> where <code>height[i][j]</code> is cell <code>(i, j)</code>'s height. If there are multiple solutions, return any of them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: isWater = [[0,1],[0,0]]\nOutput: [[1,0],[2,1]]\nExplanation: The image shows the assigned heights of each cell.\nThe blue cell is the water cell, and the green cells are the land cells.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: isWater = [[0,0,1],[1,0,0],[0,0,0]]\nOutput: [[1,1,0],[0,1,1],[1,2,2]]\nExplanation: A height of 2 is the maximum possible height of any assignment.\nAny height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == isWater.length</code></li> <li><code>n == isWater[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 1000</code></li> <li><code>isWater[i][j]</code> is <code>0</code> or <code>1</code>.</li> <li>There is at least one water cell.</li> </ul>"},{"location":"LeetCode_Problems/1766/","title":"1766. Tree of Coprimes","text":"Problem <p>There is a tree (i.e.,\u00a0a connected, undirected graph that has no cycles) consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> and exactly <code>n - 1</code> edges. Each node has a value associated with it, and the root of the tree is node <code>0</code>.</p> <p>To represent this tree, you are given an integer array <code>nums</code> and a 2D array <code>edges</code>. Each <code>nums[i]</code> represents the <code>i<sup>th</sup></code> node's value, and each <code>edges[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> represents an edge between nodes <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> in the tree.</p> <p>Two values <code>x</code> and <code>y</code> are coprime if <code>gcd(x, y) == 1</code> where <code>gcd(x, y)</code> is the greatest common divisor of <code>x</code> and <code>y</code>.</p> <p>An ancestor of a node <code>i</code> is any other node on the shortest path from node <code>i</code> to the root. A node is not considered an ancestor of itself.</p> <p>Return an array <code>ans</code> of size <code>n</code>, where <code>ans[i]</code> is the closest ancestor to node <code>i</code> such that <code>nums[i]</code> and <code>nums[ans[i]]</code> are coprime, or <code>-1</code> if there is no such ancestor.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]\nOutput: [-1,0,0,1]\nExplanation: In the above figure, each node's value is in parentheses.\n- Node 0 has no coprime ancestors.\n- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).\n- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's\n  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.\n- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its\n  closest valid ancestor.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\nOutput: [-1,0,-1,0,0,0,-1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums.length == n</code></li> <li><code>1 &lt;= nums[i] &lt;= 50</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[j].length == 2</code></li> <li><code>0 &lt;= u<sub>j</sub>, v<sub>j</sub> &lt; n</code></li> <li><code>u<sub>j</sub> != v<sub>j</sub></code></li> </ul>"},{"location":"LeetCode_Problems/1767/","title":"1767. Find the Subtasks That Did Not Execute","text":"Problem"},{"location":"LeetCode_Problems/1768/","title":"1768. Merge Strings Alternately","text":"Problem <p>You are given two strings <code>word1</code> and <code>word2</code>. Merge the strings by adding letters in alternating order, starting with <code>word1</code>. If a string is longer than the other, append the additional letters onto the end of the merged string.</p> <p>Return the merged string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word1 = \"abc\", word2 = \"pqr\"\nOutput: \"apbqcr\"\nExplanation:\u00a0The merged string will be merged as so:\nword1:  a   b   c\nword2:    p   q   r\nmerged: a p b q c r\n</pre> <p>Example 2:</p> <pre>\nInput: word1 = \"ab\", word2 = \"pqrs\"\nOutput: \"apbqrs\"\nExplanation:\u00a0Notice that as word2 is longer, \"rs\" is appended to the end.\nword1:  a   b \nword2:    p   q   r   s\nmerged: a p b q   r   s\n</pre> <p>Example 3:</p> <pre>\nInput: word1 = \"abcd\", word2 = \"pq\"\nOutput: \"apbqcd\"\nExplanation:\u00a0Notice that as word1 is longer, \"cd\" is appended to the end.\nword1:  a   b   c   d\nword2:    p   q \nmerged: a p b q c   d\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word1.length, word2.length &lt;= 100</code></li> <li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1769/","title":"1769. Minimum Number of Operations to Move All Balls to Each Box","text":"Problem <p>You have <code>n</code> boxes. You are given a binary string <code>boxes</code> of length <code>n</code>, where <code>boxes[i]</code> is <code>'0'</code> if the <code>i<sup>th</sup></code> box is empty, and <code>'1'</code> if it contains one ball.</p> <p>In one operation, you can move one ball from a box to an adjacent box. Box <code>i</code> is adjacent to box <code>j</code> if <code>abs(i - j) == 1</code>. Note that after doing so, there may be more than one ball in some boxes.</p> <p>Return an array <code>answer</code> of size <code>n</code>, where <code>answer[i]</code> is the minimum number of operations needed to move all the balls to the <code>i<sup>th</sup></code> box.</p> <p>Each <code>answer[i]</code> is calculated considering the initial state of the boxes.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: boxes = \"110\"\nOutput: [1,1,3]\nExplanation: The answer for each box is as follows:\n1) First box: you will have to move one ball from the second box to the first box in one operation.\n2) Second box: you will have to move one ball from the first box to the second box in one operation.\n3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.\n</pre> <p>Example 2:</p> <pre>\nInput: boxes = \"001011\"\nOutput: [11,8,5,4,3,4]</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == boxes.length</code></li> <li><code>1 &lt;= n &lt;= 2000</code></li> <li><code>boxes[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1770/","title":"1770. Maximum Score from Performing Multiplication Operations","text":"Problem <p>You are given two 0-indexed integer arrays <code>nums</code> and <code>multipliers</code> of size <code>n</code> and <code>m</code> respectively, where <code>n &gt;= m</code>.</p> <p>You begin with a score of <code>0</code>. You want to perform exactly <code>m</code> operations. On the <code>i<sup>th</sup></code> operation (0-indexed) you will:</p> <ul> <li>Choose one integer <code>x</code> from either the start or the end of the array <code>nums</code>.</li> <li>Add <code>multipliers[i] * x</code> to your score.     <ul> <li>Note that <code>multipliers[0]</code> corresponds to the first operation, <code>multipliers[1]</code> to the second operation, and so on.</li> </ul> </li> <li>Remove <code>x</code> from <code>nums</code>.</li> </ul> <p>Return the maximum score after performing <code>m</code> operations.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3], multipliers = [3,2,1]\nOutput: 14\nExplanation:\u00a0An optimal solution is as follows:\n- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.\n- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.\n- Choose from the end, [1], adding 1 * 1 = 1 to the score.\nThe total score is 9 + 4 + 1 = 14.</pre> <p>Example 2:</p> <pre>\nInput: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]\nOutput: 102\nExplanation: An optimal solution is as follows:\n- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.\n- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.\n- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.\n- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.\n- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. \nThe total score is 50 + 15 - 9 + 4 + 42 = 102.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>m == multipliers.length</code></li> <li><code>1 &lt;= m &lt;= 300</code></li> <li><code>m &lt;= n &lt;= 10<sup>5</sup></code><code> </code></li> <li><code>-1000 &lt;= nums[i], multipliers[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1771/","title":"1771. Maximize Palindrome Length From Subsequences","text":"Problem <p>You are given two strings, <code>word1</code> and <code>word2</code>. You want to construct a string in the following manner:</p> <ul> <li>Choose some non-empty subsequence <code>subsequence1</code> from <code>word1</code>.</li> <li>Choose some non-empty subsequence <code>subsequence2</code> from <code>word2</code>.</li> <li>Concatenate the subsequences: <code>subsequence1 + subsequence2</code>, to make the string.</li> </ul> <p>Return the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return <code>0</code>.</p> <p>A subsequence of a string <code>s</code> is a string that can be made by deleting some (possibly none) characters from <code>s</code> without changing the order of the remaining characters.</p> <p>A palindrome is a string that reads the same forward\u00a0as well as backward.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word1 = \"cacb\", word2 = \"cbba\"\nOutput: 5\nExplanation: Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome.</pre> <p>Example 2:</p> <pre>\nInput: word1 = \"ab\", word2 = \"ab\"\nOutput: 3\nExplanation: Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome.</pre> <p>Example 3:</p> <pre>\nInput: word1 = \"aa\", word2 = \"bb\"\nOutput: 0\nExplanation: You cannot construct a palindrome from the described method, so return 0.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word1.length, word2.length &lt;= 1000</code></li> <li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1772/","title":"1772. Sort Features by Popularity","text":"Problem"},{"location":"LeetCode_Problems/1773/","title":"1773. Count Items Matching a Rule","text":"Problem <p>You are given an array <code>items</code>, where each <code>items[i] = [type<sub>i</sub>, color<sub>i</sub>, name<sub>i</sub>]</code> describes the type, color, and name of the <code>i<sup>th</sup></code> item. You are also given a rule represented by two strings, <code>ruleKey</code> and <code>ruleValue</code>.</p> <p>The <code>i<sup>th</sup></code> item is said to match the rule if one of the following is true:</p> <ul> <li><code>ruleKey == \"type\"</code> and <code>ruleValue == type<sub>i</sub></code>.</li> <li><code>ruleKey == \"color\"</code> and <code>ruleValue == color<sub>i</sub></code>.</li> <li><code>ruleKey == \"name\"</code> and <code>ruleValue == name<sub>i</sub></code>.</li> </ul> <p>Return the number of items that match the given rule.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"\nOutput: 1\nExplanation: There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"].\n</pre> <p>Example 2:</p> <pre>\nInput: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"\nOutput: 2\nExplanation: There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= items.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= type<sub>i</sub>.length, color<sub>i</sub>.length, name<sub>i</sub>.length, ruleValue.length &lt;= 10</code></li> <li><code>ruleKey</code> is equal to either <code>\"type\"</code>, <code>\"color\"</code>, or <code>\"name\"</code>.</li> <li>All strings consist only of lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/1774/","title":"1774. Closest Dessert Cost","text":"Problem <p>You would like to make dessert and are preparing to buy the ingredients. You have <code>n</code> ice cream base flavors and <code>m</code> types of toppings to choose from. You must follow these rules when making your dessert:</p> <ul> <li>There must be exactly one ice cream base.</li> <li>You can add one or more types of topping or have no toppings at all.</li> <li>There are at most two of each type of topping.</li> </ul> <p>You are given three inputs:</p> <ul> <li><code>baseCosts</code>, an integer array of length <code>n</code>, where each <code>baseCosts[i]</code> represents the price of the <code>i<sup>th</sup></code> ice cream base flavor.</li> <li><code>toppingCosts</code>, an integer array of length <code>m</code>, where each <code>toppingCosts[i]</code> is the price of one of the <code>i<sup>th</sup></code> topping.</li> <li><code>target</code>, an integer representing your target price for dessert.</li> </ul> <p>You want to make a dessert with a total cost as close to <code>target</code> as possible.</p> <p>Return the closest possible cost of the dessert to <code>target</code>. If there are multiple, return the lower one.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: baseCosts = [1,7], toppingCosts = [3,4], target = 10\nOutput: 10\nExplanation: Consider the following combination (all 0-indexed):\n- Choose base 1: cost 7\n- Take 1 of topping 0: cost 1 x 3 = 3\n- Take 0 of topping 1: cost 0 x 4 = 0\nTotal: 7 + 3 + 0 = 10.\n</pre> <p>Example 2:</p> <pre>\nInput: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18\nOutput: 17\nExplanation: Consider the following combination (all 0-indexed):\n- Choose base 1: cost 3\n- Take 1 of topping 0: cost 1 x 4 = 4\n- Take 2 of topping 1: cost 2 x 5 = 10\n- Take 0 of topping 2: cost 0 x 100 = 0\nTotal: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.\n</pre> <p>Example 3:</p> <pre>\nInput: baseCosts = [3,10], toppingCosts = [2,5], target = 9\nOutput: 8\nExplanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == baseCosts.length</code></li> <li><code>m == toppingCosts.length</code></li> <li><code>1 &lt;= n, m &lt;= 10</code></li> <li><code>1 &lt;= baseCosts[i], toppingCosts[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= target &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1775/","title":"1775. Equal Sum Arrays With Minimum Number of Operations","text":"Problem <p>You are given two arrays of integers <code>nums1</code> and <code>nums2</code>, possibly of different lengths. The values in the arrays are between <code>1</code> and <code>6</code>, inclusive.</p> <p>In one operation, you can change any integer's value in any of the arrays to any value between <code>1</code> and <code>6</code>, inclusive.</p> <p>Return the minimum number of operations required to make the sum of values in <code>nums1</code> equal to the sum of values in <code>nums2</code>. Return <code>-1</code>\u200b\u200b\u200b\u200b\u200b if it is not possible to make the sum of the two arrays equal.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]\nOutput: 3\nExplanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].\n- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].\n- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,1,1,1,1,1,1], nums2 = [6]\nOutput: -1\nExplanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [6,6], nums2 = [1]\nOutput: 3\nExplanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. \n- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].\n- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].\n- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 6</code></li> </ul>"},{"location":"LeetCode_Problems/1776/","title":"1776. Car Fleet II","text":"Problem <p>There are <code>n</code> cars traveling at different speeds in the same direction along a one-lane road. You are given an array <code>cars</code> of length <code>n</code>, where <code>cars[i] = [position<sub>i</sub>, speed<sub>i</sub>]</code> represents:</p> <ul> <li><code>position<sub>i</sub></code> is the distance between the <code>i<sup>th</sup></code> car and the beginning of the road in meters. It is guaranteed that <code>position<sub>i</sub> &lt; position<sub>i+1</sub></code>.</li> <li><code>speed<sub>i</sub></code> is the initial speed of the <code>i<sup>th</sup></code> car in meters per second.</li> </ul> <p>For simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.</p> <p>Return an array <code>answer</code>, where <code>answer[i]</code> is the time, in seconds, at which the <code>i<sup>th</sup></code> car collides with the next car, or <code>-1</code> if the car does not collide with the next car. Answers within <code>10<sup>-5</sup></code> of the actual answers are accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: cars = [[1,2],[2,1],[4,3],[7,2]]\nOutput: [1.00000,-1.00000,3.00000,-1.00000]\nExplanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s.\n</pre> <p>Example 2:</p> <pre>\nInput: cars = [[3,4],[5,4],[6,3],[9,1]]\nOutput: [2.00000,1.00000,1.50000,-1.00000]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= cars.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= position<sub>i</sub>, speed<sub>i</sub> &lt;= 10<sup>6</sup></code></li> <li><code>position<sub>i</sub> &lt; position<sub>i+1</sub></code></li> </ul>"},{"location":"LeetCode_Problems/1777/","title":"1777. Product's Price for Each Store","text":"Problem"},{"location":"LeetCode_Problems/1778/","title":"1778. Shortest Path in a Hidden Grid","text":"Problem"},{"location":"LeetCode_Problems/1779/","title":"1779. Find Nearest Point That Has the Same X or Y Coordinate","text":"Problem <p>You are given two integers, <code>x</code> and <code>y</code>, which represent your current location on a Cartesian grid: <code>(x, y)</code>. You are also given an array <code>points</code> where each <code>points[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> represents that a point exists at <code>(a<sub>i</sub>, b<sub>i</sub>)</code>. A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.</p> <p>Return the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return <code>-1</code>.</p> <p>The Manhattan distance between two points <code>(x<sub>1</sub>, y<sub>1</sub>)</code> and <code>(x<sub>2</sub>, y<sub>2</sub>)</code> is <code>abs(x<sub>1</sub> - x<sub>2</sub>) + abs(y<sub>1</sub> - y<sub>2</sub>)</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\nOutput: 2\nExplanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.</pre> <p>Example 2:</p> <pre>\nInput: x = 3, y = 4, points = [[3,4]]\nOutput: 0\nExplanation: The answer is allowed to be on the same location as your current location.</pre> <p>Example 3:</p> <pre>\nInput: x = 3, y = 4, points = [[2,3]]\nOutput: -1\nExplanation: There are no valid points.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= points.length &lt;= 10<sup>4</sup></code></li> <li><code>points[i].length == 2</code></li> <li><code>1 &lt;= x, y, a<sub>i</sub>, b<sub>i</sub> &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1780/","title":"1780. Check if Number is a Sum of Powers of Three","text":"Problem <p>Given an integer <code>n</code>, return <code>true</code> if it is possible to represent <code>n</code> as the sum of distinct powers of three. Otherwise, return <code>false</code>.</p> <p>An integer <code>y</code> is a power of three if there exists an integer <code>x</code> such that <code>y == 3<sup>x</sup></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 12\nOutput: true\nExplanation: 12 = 3<sup>1</sup> + 3<sup>2</sup>\n</pre> <p>Example 2:</p> <pre>\nInput: n = 91\nOutput: true\nExplanation: 91 = 3<sup>0</sup> + 3<sup>2</sup> + 3<sup>4</sup>\n</pre> <p>Example 3:</p> <pre>\nInput: n = 21\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1781/","title":"1781. Sum of Beauty of All Substrings","text":"Problem <p>The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.</p> <ul> <li>For example, the beauty of <code>\"abaacc\"</code> is <code>3 - 1 = 2</code>.</li> </ul> <p>Given a string <code>s</code>, return the sum of beauty of all of its substrings.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aabcb\"\nOutput: 5\nExplanation: The substrings with non-zero beauty are [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1.</pre> <p>Example 2:</p> <pre>\nInput: s = \"aabcbaa\"\nOutput: 17\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;=500</code></li> <li><code>s</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1782/","title":"1782. Count Pairs Of Nodes","text":"Problem <p>You are given an undirected graph defined by an integer <code>n</code>, the number of nodes, and a 2D integer array <code>edges</code>, the edges in the graph, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an undirected edge between <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>. You are also given an integer array <code>queries</code>.</p> <p>Let <code>incident(a, b)</code> be defined as the number of edges that are connected to either node <code>a</code> or <code>b</code>.</p> <p>The answer to the <code>j<sup>th</sup></code> query is the number of pairs of nodes <code>(a, b)</code> that satisfy both of the following conditions:</p> <ul> <li><code>a &lt; b</code></li> <li><code>incident(a, b) &gt; queries[j]</code></li> </ul> <p>Return an array <code>answers</code> such that <code>answers.length == queries.length</code> and <code>answers[j]</code> is the answer of the <code>j<sup>th</sup></code> query.</p> <p>Note that there can be multiple edges between the same two nodes.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]\nOutput: [6,5]\nExplanation: The calculations for incident(a, b) are shown in the table above.\nThe answers for each of the queries are as follows:\n- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.\n- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]\nOutput: [10,10,9,8,6]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= edges.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> <li><code>u<sub>i </sub>!= v<sub>i</sub></code></li> <li><code>1 &lt;= queries.length &lt;= 20</code></li> <li><code>0 &lt;= queries[j] &lt; edges.length</code></li> </ul>"},{"location":"LeetCode_Problems/1783/","title":"1783. Grand Slam Titles","text":"Problem"},{"location":"LeetCode_Problems/1784/","title":"1784. Check if Binary String Has at Most One Segment of Ones","text":"Problem <p>Given a binary string <code>s</code> \u200b\u200b\u200b\u200b\u200bwithout leading zeros, return <code>true</code>\u200b\u200b\u200b if <code>s</code> contains at most one contiguous segment of ones. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"1001\"\nOutput: false\nExplanation: The ones do not form a contiguous segment.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"110\"\nOutput: true</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s[i]</code>\u200b\u200b\u200b\u200b is either <code>'0'</code> or <code>'1'</code>.</li> <li><code>s[0]</code> is\u00a0<code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1785/","title":"1785. Minimum Elements to Add to Form a Given Sum","text":"Problem <p>You are given an integer array <code>nums</code> and two integers <code>limit</code> and <code>goal</code>. The array <code>nums</code> has an interesting property that <code>abs(nums[i]) &lt;= limit</code>.</p> <p>Return the minimum number of elements you need to add to make the sum of the array equal to <code>goal</code>. The array must maintain its property that <code>abs(nums[i]) &lt;= limit</code>.</p> <p>Note that <code>abs(x)</code> equals <code>x</code> if <code>x &gt;= 0</code>, and <code>-x</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,-1,1], limit = 3, goal = -4\nOutput: 2\nExplanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,-10,9,1], limit = 100, goal = 0\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= limit &lt;= 10<sup>6</sup></code></li> <li><code>-limit &lt;= nums[i] &lt;= limit</code></li> <li><code>-10<sup>9</sup> &lt;= goal &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1786/","title":"1786. Number of Restricted Paths From First to Last Node","text":"Problem <p>There is an undirected weighted connected graph. You are given a positive integer <code>n</code> which denotes that the graph has <code>n</code> nodes labeled from <code>1</code> to <code>n</code>, and an array <code>edges</code> where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, weight<sub>i</sub>]</code> denotes that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> with weight equal to <code>weight<sub>i</sub></code>.</p> <p>A path from node <code>start</code> to node <code>end</code> is a sequence of nodes <code>[z<sub>0</sub>, z<sub>1</sub>,<sub> </sub>z<sub>2</sub>, ..., z<sub>k</sub>]</code> such that <code>z<sub>0 </sub>= start</code> and <code>z<sub>k</sub> = end</code> and there is an edge between <code>z<sub>i</sub></code> and <code>z<sub>i+1</sub></code> where <code>0 &lt;= i &lt;= k-1</code>.</p> <p>The distance of a path is the sum of the weights on the edges of the path. Let <code>distanceToLastNode(x)</code> denote the shortest distance of a path between node <code>n</code> and node <code>x</code>. A restricted path is a path that also satisfies that <code>distanceToLastNode(z<sub>i</sub>) &gt; distanceToLastNode(z<sub>i+1</sub>)</code> where <code>0 &lt;= i &lt;= k-1</code>.</p> <p>Return the number of restricted paths from node <code>1</code> to node <code>n</code>. Since that number may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]\nOutput: 3\nExplanation: Each circle contains the node number in black and its <code>distanceToLastNode value in blue. </code>The three restricted paths are:\n1) 1 --&gt; 2 --&gt; 5\n2) 1 --&gt; 2 --&gt; 3 --&gt; 5\n3) 1 --&gt; 3 --&gt; 5\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]\nOutput: 1\nExplanation: Each circle contains the node number in black and its <code>distanceToLastNode value in blue. </code>The only restricted path is 1 --&gt; 3 --&gt; 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>n - 1 &lt;= edges.length &lt;= 4 * 10<sup>4</sup></code></li> <li><code>edges[i].length == 3</code></li> <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> <li><code>u<sub>i </sub>!= v<sub>i</sub></code></li> <li><code>1 &lt;= weight<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li>There is at most one edge between any two nodes.</li> <li>There is at least one path between any two nodes.</li> </ul>"},{"location":"LeetCode_Problems/1787/","title":"1787. Make the XOR of All Segments Equal to Zero","text":"Problem <p>You are given an array <code>nums</code>\u200b\u200b\u200b and an integer <code>k</code>\u200b\u200b\u200b\u200b\u200b. The XOR of a segment <code>[left, right]</code> where <code>left &lt;= right</code> is the <code>XOR</code> of all the elements with indices between <code>left</code> and <code>right</code>, inclusive: <code>nums[left] XOR nums[left+1] XOR ... XOR nums[right]</code>.</p> <p>Return the minimum number of elements to change in the array such that the <code>XOR</code> of all segments of size <code>k</code>\u200b\u200b\u200b\u200b\u200b\u200b is equal to zero.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,0,3,0], k = 1\nOutput: 3\nExplanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,4,5,2,1,7,3,4,7], k = 3\nOutput: 3\nExplanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,4,1,2,5,1,2,6], k = 3\nOutput: 3\nExplanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 2000</code></li> <li><code>\u200b\u200b\u200b\u200b\u200b\u200b0 &lt;= nums[i] &lt; 2<sup>10</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1788/","title":"1788. Maximize the Beauty of the Garden","text":"Problem"},{"location":"LeetCode_Problems/1789/","title":"1789. Primary Department for Each Employee","text":"Problem <p>Table: <code>Employee</code></p> <pre>\n+---------------+---------+\n| Column Name   |  Type   |\n+---------------+---------+\n| employee_id   | int     |\n| department_id | int     |\n| primary_flag  | varchar |\n+---------------+---------+\n(employee_id, department_id) is the primary key (combination of columns with unique values) for this table.\nemployee_id is the id of the employee.\ndepartment_id is the id of the department to which the employee belongs.\nprimary_flag is an ENUM (category) of type ('Y', 'N'). If the flag is 'Y', the department is the primary department for the employee. If the flag is 'N', the department is not the primary.\n</pre> <p> </p> <p>Employees can belong to multiple departments. When the employee joins other departments, they need to decide which department is their primary department. Note that when an employee belongs to only one department, their primary column is <code>'N'</code>.</p> <p>Write a solution to report all the employees with their primary department. For employees who belong to one department, report their only department.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployee table:\n+-------------+---------------+--------------+\n| employee_id | department_id | primary_flag |\n+-------------+---------------+--------------+\n| 1           | 1             | N            |\n| 2           | 1             | Y            |\n| 2           | 2             | N            |\n| 3           | 3             | N            |\n| 4           | 2             | N            |\n| 4           | 3             | Y            |\n| 4           | 4             | N            |\n+-------------+---------------+--------------+\nOutput: \n+-------------+---------------+\n| employee_id | department_id |\n+-------------+---------------+\n| 1           | 1             |\n| 2           | 1             |\n| 3           | 3             |\n| 4           | 3             |\n+-------------+---------------+\nExplanation: \n- The Primary department for employee 1 is 1.\n- The Primary department for employee 2 is 1.\n- The Primary department for employee 3 is 3.\n- The Primary department for employee 4 is 3.\n</pre>"},{"location":"LeetCode_Problems/1790/","title":"1790. Check if One String Swap Can Make Strings Equal","text":"Problem <p>You are given two strings <code>s1</code> and <code>s2</code> of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.</p> <p>Return <code>true</code> if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"bank\", s2 = \"kanb\"\nOutput: true\nExplanation: For example, swap the first character with the last character of s2 to make \"bank\".\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"attack\", s2 = \"defend\"\nOutput: false\nExplanation: It is impossible to make them equal with one string swap.\n</pre> <p>Example 3:</p> <pre>\nInput: s1 = \"kelb\", s2 = \"kelb\"\nOutput: true\nExplanation: The two strings are already equal, so no string swap operation is required.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length &lt;= 100</code></li> <li><code>s1.length == s2.length</code></li> <li><code>s1</code> and <code>s2</code> consist of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1791/","title":"1791. Find Center of Star Graph","text":"Problem <p>There is an undirected star graph consisting of <code>n</code> nodes labeled from <code>1</code> to <code>n</code>. A star graph is a graph where there is one center node and exactly <code>n - 1</code> edges that connect the center node with every other node.</p> <p>You are given a 2D integer array <code>edges</code> where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between the nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>. Return the center of the given star graph.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: edges = [[1,2],[2,3],[4,2]]\nOutput: 2\nExplanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.\n</pre> <p>Example 2:</p> <pre>\nInput: edges = [[1,2],[5,1],[1,3],[1,4]]\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= u<sub>i,</sub> v<sub>i</sub> &lt;= n</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li>The given <code>edges</code> represent a valid star graph.</li> </ul>"},{"location":"LeetCode_Problems/1792/","title":"1792. Maximum Average Pass Ratio","text":"Problem <p>There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array <code>classes</code>, where <code>classes[i] = [pass<sub>i</sub>, total<sub>i</sub>]</code>. You know beforehand that in the <code>i<sup>th</sup></code> class, there are <code>total<sub>i</sub></code> total students, but only <code>pass<sub>i</sub></code> number of students will pass the exam.</p> <p>You are also given an integer <code>extraStudents</code>. There are another <code>extraStudents</code> brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the <code>extraStudents</code> students to a class in a way that maximizes the average pass ratio across all the classes.</p> <p>The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.</p> <p>Return the maximum possible average pass ratio after assigning the <code>extraStudents</code> students. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: classes = [[1,2],[3,5],[2,2]], <code>extraStudents</code> = 2\nOutput: 0.78333\nExplanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.\n</pre> <p>Example 2:</p> <pre>\nInput: classes = [[2,4],[3,9],[4,5],[2,10]], <code>extraStudents</code> = 4\nOutput: 0.53485\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= classes.length &lt;= 10<sup>5</sup></code></li> <li><code>classes[i].length == 2</code></li> <li><code>1 &lt;= pass<sub>i</sub> &lt;= total<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= extraStudents &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1793/","title":"1793. Maximum Score of a Good Subarray","text":"Problem <p>You are given an array of integers <code>nums</code> (0-indexed) and an integer <code>k</code>.</p> <p>The score of a subarray <code>(i, j)</code> is defined as <code>min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)</code>. A good subarray is a subarray where <code>i &lt;= k &lt;= j</code>.</p> <p>Return the maximum possible score of a good subarray.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,4,3,7,4,5], k = 3\nOutput: 15\nExplanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,5,4,5,4,1,1,1], k = 0\nOutput: 20\nExplanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= k &lt; nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/1794/","title":"1794. Count Pairs of Equal Substrings With Minimum Difference","text":"Problem"},{"location":"LeetCode_Problems/1795/","title":"1795. Rearrange Products Table","text":"Problem <p>Table: <code>Products</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_id  | int     |\n| store1      | int     |\n| store2      | int     |\n| store3      | int     |\n+-------------+---------+\nproduct_id is the primary key (column with unique values) for this table.\nEach row in this table indicates the product's price in 3 different stores: store1, store2, and store3.\nIf the product is not available in a store, the price will be null in that store's column.\n</pre> <p> </p> <p>Write a solution to rearrange the <code>Products</code> table so that each row has <code>(product_id, store, price)</code>. If a product is not available in a store, do not include a row with that <code>product_id</code> and <code>store</code> combination in the result table.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nProducts table:\n+------------+--------+--------+--------+\n| product_id | store1 | store2 | store3 |\n+------------+--------+--------+--------+\n| 0          | 95     | 100    | 105    |\n| 1          | 70     | null   | 80     |\n+------------+--------+--------+--------+\nOutput: \n+------------+--------+-------+\n| product_id | store  | price |\n+------------+--------+-------+\n| 0          | store1 | 95    |\n| 0          | store2 | 100   |\n| 0          | store3 | 105   |\n| 1          | store1 | 70    |\n| 1          | store3 | 80    |\n+------------+--------+-------+\nExplanation: \nProduct 0 is available in all three stores with prices 95, 100, and 105 respectively.\nProduct 1 is available in store1 with price 70 and store3 with price 80. The product is not available in store2.\n</pre>"},{"location":"LeetCode_Problems/1796/","title":"1796. Second Largest Digit in a String","text":"Problem <p>Given an alphanumeric string <code>s</code>, return the second largest numerical digit that appears in <code>s</code>, or <code>-1</code> if it does not exist.</p> <p>An alphanumeric string is a string consisting of lowercase English letters and digits.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"dfa12321afd\"\nOutput: 2\nExplanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abc1111\"\nOutput: -1\nExplanation: The digits that appear in s are [1]. There is no second largest digit. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>s</code> consists of only lowercase English letters and/or digits.</li> </ul>"},{"location":"LeetCode_Problems/1797/","title":"1797. Design Authentication Manager","text":"Problem <p>There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire <code>timeToLive</code> seconds after the <code>currentTime</code>. If the token is renewed, the expiry time will be extended to expire <code>timeToLive</code> seconds after the (potentially different) <code>currentTime</code>.</p> <p>Implement the <code>AuthenticationManager</code> class:</p> <ul> <li><code>AuthenticationManager(int timeToLive)</code> constructs the <code>AuthenticationManager</code> and sets the <code>timeToLive</code>.</li> <li><code>generate(string tokenId, int currentTime)</code> generates a new token with the given <code>tokenId</code> at the given <code>currentTime</code> in seconds.</li> <li><code>renew(string tokenId, int currentTime)</code> renews the unexpired token with the given <code>tokenId</code> at the given <code>currentTime</code> in seconds. If there are no unexpired tokens with the given <code>tokenId</code>, the request is ignored, and nothing happens.</li> <li><code>countUnexpiredTokens(int currentTime)</code> returns the number of unexpired tokens at the given currentTime.</li> </ul> <p>Note that if a token expires at time <code>t</code>, and another action happens on time <code>t</code> (<code>renew</code> or <code>countUnexpiredTokens</code>), the expiration takes place before the other actions.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"AuthenticationManager\", \"<code>renew</code>\", \"generate\", \"<code>countUnexpiredTokens</code>\", \"generate\", \"<code>renew</code>\", \"<code>renew</code>\", \"<code>countUnexpiredTokens</code>\"]\n[[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]\nOutput\n[null, null, null, 1, null, null, null, 0]\n\nExplanation\nAuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with <code>timeToLive</code> = 5 seconds.\nauthenticationManager.<code>renew</code>(\"aaa\", 1); // No token exists with tokenId \"aaa\" at time 1, so nothing happens.\nauthenticationManager.generate(\"aaa\", 2); // Generates a new token with tokenId \"aaa\" at time 2.\nauthenticationManager.<code>countUnexpiredTokens</code>(6); // The token with tokenId \"aaa\" is the only unexpired one at time 6, so return 1.\nauthenticationManager.generate(\"bbb\", 7); // Generates a new token with tokenId \"bbb\" at time 7.\nauthenticationManager.<code>renew</code>(\"aaa\", 8); // The token with tokenId \"aaa\" expired at time 7, and 8 &gt;= 7, so at time 8 the <code>renew</code> request is ignored, and nothing happens.\nauthenticationManager.<code>renew</code>(\"bbb\", 10); // The token with tokenId \"bbb\" is unexpired at time 10, so the <code>renew</code> request is fulfilled and now the token will expire at time 15.\nauthenticationManager.<code>countUnexpiredTokens</code>(15); // The token with tokenId \"bbb\" expires at time 15, and the token with tokenId \"aaa\" expired at time 7, so currently no token is unexpired, so return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= timeToLive &lt;= 10<sup>8</sup></code></li> <li><code>1 &lt;= currentTime &lt;= 10<sup>8</sup></code></li> <li><code>1 &lt;= tokenId.length &lt;= 5</code></li> <li><code>tokenId</code> consists only of lowercase letters.</li> <li>All calls to <code>generate</code> will contain unique values of <code>tokenId</code>.</li> <li>The values of <code>currentTime</code> across all the function calls will be strictly increasing.</li> <li>At most <code>2000</code> calls will be made to all functions combined.</li> </ul>"},{"location":"LeetCode_Problems/1798/","title":"1798. Maximum Number of Consecutive Values You Can Make","text":"Problem <p>You are given an integer array <code>coins</code> of length <code>n</code> which represents the <code>n</code> coins that you own. The value of the <code>i<sup>th</sup></code> coin is <code>coins[i]</code>. You can make some value <code>x</code> if you can choose some of your <code>n</code> coins such that their values sum up to <code>x</code>.</p> <p>Return the maximum number of consecutive integer values that you can make with your coins starting from and including <code>0</code>.</p> <p>Note that you may have multiple coins of the same value.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: coins = [1,3]\nOutput: 2\nExplanation: You can make the following values:\n- 0: take []\n- 1: take [1]\nYou can make 2 consecutive integer values starting from 0.</pre> <p>Example 2:</p> <pre>\nInput: coins = [1,1,1,4]\nOutput: 8\nExplanation: You can make the following values:\n- 0: take []\n- 1: take [1]\n- 2: take [1,1]\n- 3: take [1,1,1]\n- 4: take [4]\n- 5: take [4,1]\n- 6: take [4,1,1]\n- 7: take [4,1,1,1]\nYou can make 8 consecutive integer values starting from 0.</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,4,10,3,1]\nOutput: 20</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>coins.length == n</code></li> <li><code>1 &lt;= n &lt;= 4 * 10<sup>4</sup></code></li> <li><code>1 &lt;= coins[i] &lt;= 4 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1799/","title":"1799. Maximize Score After N Operations","text":"Problem <p>You are given <code>nums</code>, an array of positive integers of size <code>2 * n</code>. You must perform <code>n</code> operations on this array.</p> <p>In the <code>i<sup>th</sup></code> operation (1-indexed), you will:</p> <ul> <li>Choose two elements, <code>x</code> and <code>y</code>.</li> <li>Receive a score of <code>i * gcd(x, y)</code>.</li> <li>Remove <code>x</code> and <code>y</code> from <code>nums</code>.</li> </ul> <p>Return the maximum score you can receive after performing <code>n</code> operations.</p> <p>The function <code>gcd(x, y)</code> is the greatest common divisor of <code>x</code> and <code>y</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2]\nOutput: 1\nExplanation:\u00a0The optimal choice of operations is:\n(1 * gcd(1, 2)) = 1\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,4,6,8]\nOutput: 11\nExplanation:\u00a0The optimal choice of operations is:\n(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,4,5,6]\nOutput: 14\nExplanation:\u00a0The optimal choice of operations is:\n(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 7</code></li> <li><code>nums.length == 2 * n</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1800/","title":"1800. Maximum Ascending Subarray Sum","text":"Problem <p>Given an array of positive integers <code>nums</code>, return the maximum possible sum of an ascending subarray in <code>nums</code>.</p> <p>A subarray is defined as a contiguous sequence of numbers in an array.</p> <p>A subarray <code>[nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums<sub>r</sub>]</code> is ascending if for all <code>i</code> where <code>l &lt;= i &lt; r</code>, <code>nums<sub>i </sub> &lt; nums<sub>i+1</sub></code>. Note that a subarray of size <code>1</code> is ascending.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [10,20,30,5,10,50]\nOutput: 65\nExplanation: [5,10,50] is the ascending subarray with the maximum sum of 65.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [10,20,30,40,50]\nOutput: 150\nExplanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [12,17,15,13,10,11,12]\nOutput: 33\nExplanation: [10,11,12] is the ascending subarray with the maximum sum of 33.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1801/","title":"1801. Number of Orders in the Backlog","text":"Problem <p>You are given a 2D integer array <code>orders</code>, where each <code>orders[i] = [price<sub>i</sub>, amount<sub>i</sub>, orderType<sub>i</sub>]</code> denotes that <code>amount<sub>i</sub></code><sub> </sub>orders have been placed of type <code>orderType<sub>i</sub></code> at the price <code>price<sub>i</sub></code>. The <code>orderType<sub>i</sub></code> is:</p> <ul> <li><code>0</code> if it is a batch of <code>buy</code> orders, or</li> <li><code>1</code> if it is a batch of <code>sell</code> orders.</li> </ul> <p>Note that <code>orders[i]</code> represents a batch of <code>amount<sub>i</sub></code> independent orders with the same price and order type. All orders represented by <code>orders[i]</code> will be placed before all orders represented by <code>orders[i+1]</code> for all valid <code>i</code>.</p> <p>There is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:</p> <ul> <li>If the order is a <code>buy</code> order, you look at the <code>sell</code> order with the smallest price in the backlog. If that <code>sell</code> order's price is smaller than or equal to the current <code>buy</code> order's price, they will match and be executed, and that <code>sell</code> order will be removed from the backlog. Else, the <code>buy</code> order is added to the backlog.</li> <li>Vice versa, if the order is a <code>sell</code> order, you look at the <code>buy</code> order with the largest price in the backlog. If that <code>buy</code> order's price is larger than or equal to the current <code>sell</code> order's price, they will match and be executed, and that <code>buy</code> order will be removed from the backlog. Else, the <code>sell</code> order is added to the backlog.</li> </ul> <p>Return the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]\nOutput: 6\nExplanation: Here is what happens with the orders:\n- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\n- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\n- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\n- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3<sup>rd</sup> order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4<sup>th</sup> order is added to the backlog.\nFinally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]\nOutput: 999999984\nExplanation: Here is what happens with the orders:\n- 10<sup>9</sup> orders of type sell with price 7 are placed. There are no buy orders, so the 10<sup>9</sup> orders are added to the backlog.\n- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.\n- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.\n- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.\nFinally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (10<sup>9</sup> + 7).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= orders.length &lt;= 10<sup>5</sup></code></li> <li><code>orders[i].length == 3</code></li> <li><code>1 &lt;= price<sub>i</sub>, amount<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>orderType<sub>i</sub></code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1802/","title":"1802. Maximum Value at a Given Index in a Bounded Array","text":"Problem <p>You are given three positive integers:\u00a0<code>n</code>, <code>index</code>, and <code>maxSum</code>. You want to construct an array <code>nums</code> (0-indexed) that satisfies the following conditions:</p> <ul> <li><code>nums.length == n</code></li> <li><code>nums[i]</code> is a positive integer where <code>0 &lt;= i &lt; n</code>.</li> <li><code>abs(nums[i] - nums[i+1]) &lt;= 1</code> where <code>0 &lt;= i &lt; n-1</code>.</li> <li>The sum of all the elements of <code>nums</code> does not exceed <code>maxSum</code>.</li> <li><code>nums[index]</code> is maximized.</li> </ul> <p>Return <code>nums[index]</code> of the constructed array.</p> <p>Note that <code>abs(x)</code> equals <code>x</code> if <code>x &gt;= 0</code>, and <code>-x</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4, index = 2,  maxSum = 6\nOutput: 2\nExplanation: nums = [1,2,2,1] is one array that satisfies all the conditions.\nThere are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].\n</pre> <p>Example 2:</p> <pre>\nInput: n = 6, index = 1,  maxSum = 10\nOutput: 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= maxSum &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= index &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/1803/","title":"1803. Count Pairs With XOR in a Range","text":"Problem <p>Given a (0-indexed) integer array <code>nums</code> and two integers <code>low</code> and <code>high</code>, return the number of nice pairs.</p> <p>A nice pair is a pair <code>(i, j)</code> where <code>0 &lt;= i &lt; j &lt; nums.length</code> and <code>low &lt;= (nums[i] XOR nums[j]) &lt;= high</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,4,2,7], low = 2, high = 6\nOutput: 6\nExplanation: All nice pairs (i, j) are as follows:\n    - (0, 1): nums[0] XOR nums[1] = 5 \n    - (0, 2): nums[0] XOR nums[2] = 3\n    - (0, 3): nums[0] XOR nums[3] = 6\n    - (1, 2): nums[1] XOR nums[2] = 6\n    - (1, 3): nums[1] XOR nums[3] = 3\n    - (2, 3): nums[2] XOR nums[3] = 5\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [9,8,4,2,1], low = 5, high = 14\nOutput: 8\nExplanation: All nice pairs (i, j) are as follows:\n\u200b\u200b\u200b\u200b\u200b    - (0, 2): nums[0] XOR nums[2] = 13\n\u00a0   - (0, 3): nums[0] XOR nums[3] = 11\n\u00a0   - (0, 4): nums[0] XOR nums[4] = 8\n\u00a0   - (1, 2): nums[1] XOR nums[2] = 12\n\u00a0   - (1, 3): nums[1] XOR nums[3] = 10\n\u00a0   - (1, 4): nums[1] XOR nums[4] = 9\n\u00a0   - (2, 3): nums[2] XOR nums[3] = 6\n\u00a0   - (2, 4): nums[2] XOR nums[4] = 5</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= low &lt;= high &lt;= 2 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1804/","title":"1804. Implement Trie II (Prefix Tree)","text":"Problem"},{"location":"LeetCode_Problems/1805/","title":"1805. Number of Different Integers in a String","text":"Problem <p>You are given a string <code>word</code> that consists of digits and lowercase English letters.</p> <p>You will replace every non-digit character with a space. For example, <code>\"a123bc34d8ef34\"</code> will become <code>\" 123\u00a0 34 8\u00a0 34\"</code>. Notice that you are left with some integers that are separated by at least one space: <code>\"123\"</code>, <code>\"34\"</code>, <code>\"8\"</code>, and <code>\"34\"</code>.</p> <p>Return the number of different integers after performing the replacement operations on <code>word</code>.</p> <p>Two integers are considered different if their decimal representations without any leading zeros are different.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"a123bc34d8ef34\"\nOutput: 3\nExplanation: The three different integers are \"123\", \"34\", and \"8\". Notice that \"34\" is only counted once.\n</pre> <p>Example 2:</p> <pre>\nInput: word = \"leet1234code234\"\nOutput: 2\n</pre> <p>Example 3:</p> <pre>\nInput: word = \"a1b01c001\"\nOutput: 1\nExplanation: The three integers \"1\", \"01\", and \"001\" all represent the same integer because\nthe leading zeros are ignored when comparing their decimal values.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 1000</code></li> <li><code>word</code> consists of digits and lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1806/","title":"1806. Minimum Number of Operations to Reinitialize a Permutation","text":"Problem <p>You are given an even integer <code>n</code>\u200b\u200b\u200b\u200b\u200b\u200b. You initially have a permutation <code>perm</code> of size <code>n</code>\u200b\u200b where <code>perm[i] == i</code>\u200b (0-indexed)\u200b\u200b\u200b\u200b.</p> <p>In one operation, you will create a new array <code>arr</code>, and for each <code>i</code>:</p> <ul> <li>If <code>i % 2 == 0</code>, then <code>arr[i] = perm[i / 2]</code>.</li> <li>If <code>i % 2 == 1</code>, then <code>arr[i] = perm[n / 2 + (i - 1) / 2]</code>.</li> </ul> <p>You will then assign <code>arr</code>\u200b\u200b\u200b\u200b to <code>perm</code>.</p> <p>Return the minimum non-zero number of operations you need to perform on <code>perm</code> to return the permutation to its initial value.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: 1\nExplanation: perm = [0,1] initially.\nAfter the 1<sup>st</sup> operation, perm = [0,1]\nSo it takes only 1 operation.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4\nOutput: 2\nExplanation: perm = [0,1,2,3] initially.\nAfter the 1<sup>st</sup> operation, perm = [0,2,1,3]\nAfter the 2<sup>nd</sup> operation, perm = [0,1,2,3]\nSo it takes only 2 operations.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 6\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>n</code>\u200b\u200b\u200b\u200b\u200b\u200b is even.</li> </ul>"},{"location":"LeetCode_Problems/1807/","title":"1807. Evaluate the Bracket Pairs of a String","text":"Problem <p>You are given a string <code>s</code> that contains some bracket pairs, with each pair containing a non-empty key.</p> <ul> <li>For example, in the string <code>\"(name)is(age)yearsold\"</code>, there are two bracket pairs that contain the keys <code>\"name\"</code> and <code>\"age\"</code>.</li> </ul> <p>You know the values of a wide range of keys. This is represented by a 2D string array <code>knowledge</code> where each <code>knowledge[i] = [key<sub>i</sub>, value<sub>i</sub>]</code> indicates that key <code>key<sub>i</sub></code> has a value of <code>value<sub>i</sub></code>.</p> <p>You are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key <code>key<sub>i</sub></code>, you will:</p> <ul> <li>Replace <code>key<sub>i</sub></code> and the bracket pair with the key's corresponding <code>value<sub>i</sub></code>.</li> <li>If you do not know the value of the key, you will replace <code>key<sub>i</sub></code> and the bracket pair with a question mark <code>\"?\"</code> (without the quotation marks).</li> </ul> <p>Each key will appear at most once in your <code>knowledge</code>. There will not be any nested brackets in <code>s</code>.</p> <p>Return the resulting string after evaluating all of the bracket pairs.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]\nOutput: \"bobistwoyearsold\"\nExplanation:\nThe key \"name\" has a value of \"bob\", so replace \"(name)\" with \"bob\".\nThe key \"age\" has a value of \"two\", so replace \"(age)\" with \"two\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]\nOutput: \"hi?\"\nExplanation: As you do not know the value of the key \"name\", replace \"(name)\" with \"?\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]\nOutput: \"yesyesyesaaa\"\nExplanation: The same key can appear multiple times.\nThe key \"a\" has a value of \"yes\", so replace all occurrences of \"(a)\" with \"yes\".\nNotice that the \"a\"s not in a bracket pair are not evaluated.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= knowledge.length &lt;= 10<sup>5</sup></code></li> <li><code>knowledge[i].length == 2</code></li> <li><code>1 &lt;= key<sub>i</sub>.length, value<sub>i</sub>.length &lt;= 10</code></li> <li><code>s</code> consists of lowercase English letters and round brackets <code>'('</code> and <code>')'</code>.</li> <li>Every open bracket <code>'('</code> in <code>s</code> will have a corresponding close bracket <code>')'</code>.</li> <li>The key in each bracket pair of <code>s</code> will be non-empty.</li> <li>There will not be any nested bracket pairs in <code>s</code>.</li> <li><code>key<sub>i</sub></code> and <code>value<sub>i</sub></code> consist of lowercase English letters.</li> <li>Each <code>key<sub>i</sub></code> in <code>knowledge</code> is unique.</li> </ul>"},{"location":"LeetCode_Problems/1808/","title":"1808. Maximize Number of Nice Divisors","text":"Problem <p>You are given a positive integer <code>primeFactors</code>. You are asked to construct a positive integer <code>n</code> that satisfies the following conditions:</p> <ul> <li>The number of prime factors of <code>n</code> (not necessarily distinct) is at most <code>primeFactors</code>.</li> <li>The number of nice divisors of <code>n</code> is maximized. Note that a divisor of <code>n</code> is nice if it is divisible by every prime factor of <code>n</code>. For example, if <code>n = 12</code>, then its prime factors are <code>[2,2,3]</code>, then <code>6</code> and <code>12</code> are nice divisors, while <code>3</code> and <code>4</code> are not.</li> </ul> <p>Return the number of nice divisors of <code>n</code>. Since that number can be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Note that a prime number is a natural number greater than <code>1</code> that is not a product of two smaller natural numbers. The prime factors of a number <code>n</code> is a list of prime numbers such that their product equals <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: primeFactors = 5\nOutput: 6\nExplanation: 200 is a valid value of n.\nIt has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\nThere is not other value of n that has at most 5 prime factors and more nice divisors.\n</pre> <p>Example 2:</p> <pre>\nInput: primeFactors = 8\nOutput: 18\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= primeFactors &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1809/","title":"1809. Ad-Free Sessions","text":"Problem"},{"location":"LeetCode_Problems/1810/","title":"1810. Minimum Path Cost in a Hidden Grid","text":"Problem"},{"location":"LeetCode_Problems/1811/","title":"1811. Find Interview Candidates","text":"Problem"},{"location":"LeetCode_Problems/1812/","title":"1812. Determine Color of a Chessboard Square","text":"Problem <p>You are given <code>coordinates</code>, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.</p> <p></p> <p>Return <code>true</code> if the square is white, and <code>false</code> if the square is black.</p> <p>The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: coordinates = \"a1\"\nOutput: false\nExplanation: From the chessboard above, the square with coordinates \"a1\" is black, so return false.\n</pre> <p>Example 2:</p> <pre>\nInput: coordinates = \"h3\"\nOutput: true\nExplanation: From the chessboard above, the square with coordinates \"h3\" is white, so return true.\n</pre> <p>Example 3:</p> <pre>\nInput: coordinates = \"c7\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>coordinates.length == 2</code></li> <li><code>'a' &lt;= coordinates[0] &lt;= 'h'</code></li> <li><code>'1' &lt;= coordinates[1] &lt;= '8'</code></li> </ul>"},{"location":"LeetCode_Problems/1813/","title":"1813. Sentence Similarity III","text":"Problem <p>A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, <code>\"Hello World\"</code>, <code>\"HELLO\"</code>, <code>\"hello world hello world\"</code> are all sentences. Words consist of only uppercase and lowercase English letters.</p> <p>Two sentences <code>sentence1</code> and <code>sentence2</code> are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. For example, <code>sentence1 = \"Hello my name is Jane\"</code> and <code>sentence2 = \"Hello Jane\"</code> can be made equal by inserting <code>\"my name is\"</code> between <code>\"Hello\"</code> and <code>\"Jane\"</code> in <code>sentence2</code>.</p> <p>Given two sentences <code>sentence1</code> and <code>sentence2</code>, return <code>true</code> if <code>sentence1</code> and <code>sentence2</code> are similar. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"\nOutput: true\nExplanation: sentence2 can be turned to sentence1 by inserting \"name is\" between \"My\" and \"Haley\".\n</pre> <p>Example 2:</p> <pre>\nInput: sentence1 = \"of\", sentence2 = \"A lot of words\"\nOutput: false\nExplanation: No single sentence can be inserted inside one of the sentences to make it equal to the other.\n</pre> <p>Example 3:</p> <pre>\nInput: sentence1 = \"Eating right now\", sentence2 = \"Eating\"\nOutput: true\nExplanation: sentence2 can be turned to sentence1 by inserting \"right now\" at the end of the sentence.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sentence1.length, sentence2.length &lt;= 100</code></li> <li><code>sentence1</code> and <code>sentence2</code> consist of lowercase and uppercase English letters and spaces.</li> <li>The words in <code>sentence1</code> and <code>sentence2</code> are separated by a single space.</li> </ul>"},{"location":"LeetCode_Problems/1814/","title":"1814. Count Nice Pairs in an Array","text":"Problem <p>You are given an array <code>nums</code> that consists of non-negative integers. Let us define <code>rev(x)</code> as the reverse of the non-negative integer <code>x</code>. For example, <code>rev(123) = 321</code>, and <code>rev(120) = 21</code>. A pair of indices <code>(i, j)</code> is nice if it satisfies all of the following conditions:</p> <ul> <li><code>0 &lt;= i &lt; j &lt; nums.length</code></li> <li><code>nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])</code></li> </ul> <p>Return the number of nice pairs of indices. Since that number can be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [42,11,1,97]\nOutput: 2\nExplanation: The two pairs are:\n - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [13,10,35,24,76]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1815/","title":"1815. Maximum Number of Groups Getting Fresh Donuts","text":"Problem <p>There is a donuts shop that bakes donuts in batches of <code>batchSize</code>. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer <code>batchSize</code> and an integer array <code>groups</code>, where <code>groups[i]</code> denotes that there is a group of <code>groups[i]</code> customers that will visit the shop. Each customer will get exactly one donut.</p> <p>When a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.</p> <p>You can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: batchSize = 3, groups = [1,2,3,4,5,6]\nOutput: 4\nExplanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1<sup>st</sup>, 2<sup>nd</sup>, 4<sup>th</sup>, and 6<sup>th</sup> groups will be happy.\n</pre> <p>Example 2:</p> <pre>\nInput: batchSize = 4, groups = [1,3,2,5,2,2,1,6]\nOutput: 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= batchSize &lt;= 9</code></li> <li><code>1 &lt;= groups.length &lt;= 30</code></li> <li><code>1 &lt;= groups[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1816/","title":"1816. Truncate Sentence","text":"Problem <p>A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).</p> <ul> <li>For example, <code>\"Hello World\"</code>, <code>\"HELLO\"</code>, and <code>\"hello world hello world\"</code> are all sentences.</li> </ul> <p>You are given a sentence <code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b and an integer <code>k</code>\u200b\u200b\u200b\u200b\u200b\u200b. You want to truncate <code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b such that it contains only the first <code>k</code>\u200b\u200b\u200b\u200b\u200b\u200b words. Return <code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b after truncating it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"Hello how are you Contestant\", k = 4\nOutput: \"Hello how are you\"\nExplanation:\nThe words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"].\nThe first 4 words are [\"Hello\", \"how\", \"are\", \"you\"].\nHence, you should return \"Hello how are you\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"What is the solution to this problem\", k = 4\nOutput: \"What is the solution\"\nExplanation:\nThe words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"].\nThe first 4 words are [\"What\", \"is\", \"the\", \"solution\"].\nHence, you should return \"What is the solution\".</pre> <p>Example 3:</p> <pre>\nInput: s = \"chopper is not a tanuki\", k = 5\nOutput: \"chopper is not a tanuki\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 500</code></li> <li><code>k</code> is in the range <code>[1, the number of words in s]</code>.</li> <li><code>s</code> consist of only lowercase and uppercase English letters and spaces.</li> <li>The words in <code>s</code> are separated by a single space.</li> <li>There are no leading or trailing spaces.</li> </ul>"},{"location":"LeetCode_Problems/1817/","title":"1817. Finding the Users Active Minutes","text":"Problem <p>You are given the logs for users' actions on LeetCode, and an integer <code>k</code>. The logs are represented by a 2D integer array <code>logs</code> where each <code>logs[i] = [ID<sub>i</sub>, time<sub>i</sub>]</code> indicates that the user with <code>ID<sub>i</sub></code> performed an action at the minute <code>time<sub>i</sub></code>.</p> <p>Multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.</p> <p>The user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.</p> <p>You are to calculate a 1-indexed array <code>answer</code> of size <code>k</code> such that, for each <code>j</code> (<code>1 &lt;= j &lt;= k</code>), <code>answer[j]</code> is the number of users whose UAM equals <code>j</code>.</p> <p>Return the array <code>answer</code> as described above.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5\nOutput: [0,2,0,0,0]\nExplanation:\nThe user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).\nThe user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nSince both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0.\n</pre> <p>Example 2:</p> <pre>\nInput: logs = [[1,1],[2,2],[2,3]], k = 4\nOutput: [1,1,0,0]\nExplanation:\nThe user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.\nThe user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nThere is one user with a UAM of 1 and one with a UAM of 2.\nHence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= logs.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= ID<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= time<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li><code>k</code> is in the range <code>[The maximum UAM for a user, 10<sup>5</sup>]</code>.</li> </ul>"},{"location":"LeetCode_Problems/1818/","title":"1818. Minimum Absolute Sum Difference","text":"Problem <p>You are given two positive integer arrays <code>nums1</code> and <code>nums2</code>, both of length <code>n</code>.</p> <p>The absolute sum difference of arrays <code>nums1</code> and <code>nums2</code> is defined as the sum of <code>|nums1[i] - nums2[i]|</code> for each <code>0 &lt;= i &lt; n</code> (0-indexed).</p> <p>You can replace at most one element of <code>nums1</code> with any other element in <code>nums1</code> to minimize the absolute sum difference.</p> <p>Return the minimum absolute sum difference after replacing at most one element in the array <code>nums1</code>. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p><code>|x|</code> is defined as:</p> <ul> <li><code>x</code> if <code>x &gt;= 0</code>, or</li> <li><code>-x</code> if <code>x &lt; 0</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,7,5], nums2 = [2,3,5]\nOutput: 3\nExplanation: There are two possible optimal solutions:\n- Replace the second element with the first: [1,7,5] =&gt; [1,1,5], or\n- Replace the second element with the third: [1,7,5] =&gt; [1,5,5].\nBoth will yield an absolute sum difference of <code>|1-2| + (|1-3| or |5-3|) + |5-5| = </code>3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]\nOutput: 0\nExplanation: nums1 is equal to nums2 so no replacement is needed. This will result in an \nabsolute sum difference of 0.\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]\nOutput: 20\nExplanation: Replace the first element with the second: [1,10,4,4,2,7] =&gt; [10,10,4,4,2,7].\nThis yields an absolute sum difference of <code>|10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20</code>\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums1.length</code></li> <li><code>n == nums2.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1819/","title":"1819. Number of Different Subsequences GCDs","text":"Problem <p>You are given an array <code>nums</code> that consists of positive integers.</p> <p>The GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.</p> <ul> <li>For example, the GCD of the sequence <code>[4,6,16]</code> is <code>2</code>.</li> </ul> <p>A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.</p> <ul> <li>For example, <code>[2,5,10]</code> is a subsequence of <code>[1,2,1,2,4,1,5,10]</code>.</li> </ul> <p>Return the number of different GCDs among all non-empty subsequences of <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [6,10,3]\nOutput: 5\nExplanation: The figure shows all the non-empty subsequences and their GCDs.\nThe different GCDs are 6, 10, 3, 2, and 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,15,40,5,6]\nOutput: 7\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1820/","title":"1820. Maximum Number of Accepted Invitations","text":"Problem"},{"location":"LeetCode_Problems/1821/","title":"1821. Find Customers With Positive Revenue this Year","text":"Problem"},{"location":"LeetCode_Problems/1822/","title":"1822. Sign of the Product of an Array","text":"Problem <p>There is a function <code>signFunc(x)</code> that returns:</p> <ul> <li><code>1</code> if <code>x</code> is positive.</li> <li><code>-1</code> if <code>x</code> is negative.</li> <li><code>0</code> if <code>x</code> is equal to <code>0</code>.</li> </ul> <p>You are given an integer array <code>nums</code>. Let <code>product</code> be the product of all values in the array <code>nums</code>.</p> <p>Return <code>signFunc(product)</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-1,-2,-3,-4,3,2,1]\nOutput: 1\nExplanation: The product of all values in the array is 144, and signFunc(144) = 1\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,5,0,2,-3]\nOutput: 0\nExplanation: The product of all values in the array is 0, and signFunc(0) = 0\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [-1,1,-1,1,-1]\nOutput: -1\nExplanation: The product of all values in the array is -1, and signFunc(-1) = -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-100 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1823/","title":"1823. Find the Winner of the Circular Game","text":"Problem <p>There are <code>n</code> friends that are playing a game. The friends are sitting in a circle and are numbered from <code>1</code> to <code>n</code> in clockwise order. More formally, moving clockwise from the <code>i<sup>th</sup></code> friend brings you to the <code>(i+1)<sup>th</sup></code> friend for <code>1 &lt;= i &lt; n</code>, and moving clockwise from the <code>n<sup>th</sup></code> friend brings you to the <code>1<sup>st</sup></code> friend.</p> <p>The rules of the game are as follows:</p> <ol> <li>Start at the <code>1<sup>st</sup></code> friend.</li> <li>Count the next <code>k</code> friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.</li> <li>The last friend you counted leaves the circle and loses the game.</li> <li>If there is still more than one friend in the circle, go back to step <code>2</code> starting from the friend immediately clockwise of the friend who just lost and repeat.</li> <li>Else, the last friend in the circle wins the game.</li> </ol> <p>Given the number of friends, <code>n</code>, and an integer <code>k</code>, return the winner of the game.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, k = 2\nOutput: 3\nExplanation: Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.</pre> <p>Example 2:</p> <pre>\nInput: n = 6, k = 5\nOutput: 1\nExplanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= n &lt;= 500</code></li> </ul> <p> </p> <p>Follow up:</p> <p>Could you solve this problem in linear time with constant space?</p>"},{"location":"LeetCode_Problems/1824/","title":"1824. Minimum Sideway Jumps","text":"Problem <p>There is a 3 lane road of length <code>n</code> that consists of <code>n + 1</code> points labeled from <code>0</code> to <code>n</code>. A frog starts at point <code>0</code> in the second lane and wants to jump to point <code>n</code>. However, there could be obstacles along the way.</p> <p>You are given an array <code>obstacles</code> of length <code>n + 1</code> where each <code>obstacles[i]</code> (ranging from 0 to 3) describes an obstacle on the lane <code>obstacles[i]</code> at point <code>i</code>. If <code>obstacles[i] == 0</code>, there are no obstacles at point <code>i</code>. There will be at most one obstacle in the 3 lanes at each point.</p> <ul> <li>For example, if <code>obstacles[2] == 1</code>, then there is an obstacle on lane 1 at point 2.</li> </ul> <p>The frog can only travel from point <code>i</code> to point <code>i + 1</code> on the same lane if there is not an obstacle on the lane at point <code>i + 1</code>. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.</p> <ul> <li>For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.</li> </ul> <p>Return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane <code>2</code> at point 0.</p> <p>Note: There will be no obstacles on points <code>0</code> and <code>n</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: obstacles = [0,1,2,3,0]\nOutput: 2 \nExplanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\nNote that the frog can jump over obstacles only when making side jumps (as shown at point 2).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: obstacles = [0,1,1,3,3,0]\nOutput: 0\nExplanation: There are no obstacles on lane 2. No side jumps are required.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: obstacles = [0,2,1,0,3,0]\nOutput: 2\nExplanation: The optimal solution is shown by the arrows above. There are 2 side jumps.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>obstacles.length == n + 1</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>5</sup></code></li> <li><code>0 &lt;= obstacles[i] &lt;= 3</code></li> <li><code>obstacles[0] == obstacles[n] == 0</code></li> </ul>"},{"location":"LeetCode_Problems/1825/","title":"1825. Finding MK Average","text":"Problem <p>You are given two integers, <code>m</code> and <code>k</code>, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.</p> <p>The MKAverage can be calculated using these steps:</p> <ol> <li>If the number of the elements in the stream is less than <code>m</code> you should consider the MKAverage to be <code>-1</code>. Otherwise, copy the last <code>m</code> elements of the stream to a separate container.</li> <li>Remove the smallest <code>k</code> elements and the largest <code>k</code> elements from the container.</li> <li>Calculate the average value for the rest of the elements rounded down to the nearest integer.</li> </ol> <p>Implement the <code>MKAverage</code> class:</p> <ul> <li><code>MKAverage(int m, int k)</code> Initializes the MKAverage object with an empty stream and the two integers <code>m</code> and <code>k</code>.</li> <li><code>void addElement(int num)</code> Inserts a new element <code>num</code> into the stream.</li> <li><code>int calculateMKAverage()</code> Calculates and returns the MKAverage for the current stream rounded down to the nearest integer.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]\nOutput\n[null, null, null, -1, null, 3, null, null, null, 5]\n\nExplanation\n<code>MKAverage obj = new MKAverage(3, 1); \nobj.addElement(3);        // current elements are [3]\nobj.addElement(1);        // current elements are [3,1]\nobj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.\nobj.addElement(10);       // current elements are [3,1,10]\nobj.calculateMKAverage(); // The last 3 elements are [3,1,10].\n                          // After removing smallest and largest 1 element the container will be [3].\n                          // The average of [3] equals 3/1 = 3, return 3\nobj.addElement(5);        // current elements are [3,1,10,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5]\nobj.addElement(5);        // current elements are [3,1,10,5,5,5]\nobj.calculateMKAverage(); // The last 3 elements are [5,5,5].\n                          // After removing smallest and largest 1 element the container will be [5].\n                          // The average of [5] equals 5/1 = 5, return 5\n</code></pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= m &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k*2 &lt; m</code></li> <li><code>1 &lt;= num &lt;= 10<sup>5</sup></code></li> <li>At most <code>10<sup>5</sup></code> calls will be made to <code>addElement</code> and <code>calculateMKAverage</code>.</li> </ul>"},{"location":"LeetCode_Problems/1826/","title":"1826. Faulty Sensor","text":"Problem"},{"location":"LeetCode_Problems/1827/","title":"1827. Minimum Operations to Make the Array Increasing","text":"Problem <p>You are given an integer array <code>nums</code> (0-indexed). In one operation, you can choose an element of the array and increment it by <code>1</code>.</p> <ul> <li>For example, if <code>nums = [1,2,3]</code>, you can choose to increment <code>nums[1]</code> to make <code>nums = [1,3,3]</code>.</li> </ul> <p>Return the minimum number of operations needed to make <code>nums</code> strictly increasing.</p> <p>An array <code>nums</code> is strictly increasing if <code>nums[i] &lt; nums[i+1]</code> for all <code>0 &lt;= i &lt; nums.length - 1</code>. An array of length <code>1</code> is trivially strictly increasing.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,1]\nOutput: 3\nExplanation: You can do the following operations:\n1) Increment nums[2], so nums becomes [1,1,2].\n2) Increment nums[1], so nums becomes [1,2,2].\n3) Increment nums[2], so nums becomes [1,2,3].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,5,2,4,1]\nOutput: 14\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [8]\nOutput: 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1828/","title":"1828. Queries on Number of Points Inside a Circle","text":"Problem <p>You are given an array <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> is the coordinates of the <code>i<sup>th</sup></code> point on a 2D plane. Multiple points can have the same coordinates.</p> <p>You are also given an array <code>queries</code> where <code>queries[j] = [x<sub>j</sub>, y<sub>j</sub>, r<sub>j</sub>]</code> describes a circle centered at <code>(x<sub>j</sub>, y<sub>j</sub>)</code> with a radius of <code>r<sub>j</sub></code>.</p> <p>For each query <code>queries[j]</code>, compute the number of points inside the <code>j<sup>th</sup></code> circle. Points on the border of the circle are considered inside.</p> <p>Return an array <code>answer</code>, where <code>answer[j]</code> is the answer to the <code>j<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]\nOutput: [3,2,2]\nExplanation: The points and circles are shown above.\nqueries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]\nOutput: [2,3,2,4]\nExplanation: The points and circles are shown above.\nqueries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= points.length &lt;= 500</code></li> <li><code>points[i].length == 2</code></li> <li><code>0 &lt;= x<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub>, y<sub>\u200b\u200b\u200b\u200b\u200b\u200bi</sub> &lt;= 500</code></li> <li><code>1 &lt;= queries.length &lt;= 500</code></li> <li><code>queries[j].length == 3</code></li> <li><code>0 &lt;= x<sub>j</sub>, y<sub>j</sub> &lt;= 500</code></li> <li><code>1 &lt;= r<sub>j</sub> &lt;= 500</code></li> <li>All coordinates are integers.</li> </ul> <p> </p> <p>Follow up: Could you find the answer for each query in better complexity than <code>O(n)</code>?</p>"},{"location":"LeetCode_Problems/1829/","title":"1829. Maximum XOR for Each Query","text":"Problem <p>You are given a sorted array <code>nums</code> of <code>n</code> non-negative integers and an integer <code>maximumBit</code>. You want to perform the following query <code>n</code> times:</p> <ol> <li>Find a non-negative integer <code>k &lt; 2<sup>maximumBit</sup></code> such that <code>nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k</code> is maximized. <code>k</code> is the answer to the <code>i<sup>th</sup></code> query.</li> <li>Remove the last element from the current array <code>nums</code>.</li> </ol> <p>Return an array <code>answer</code>, where <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,1,3], maximumBit = 2\nOutput: [0,3,2,3]\nExplanation: The queries are answered as follows:\n1<sup>st</sup> query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.\n2<sup>nd</sup> query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.\n3<sup>rd</sup> query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.\n4<sup>th</sup> query: nums = [0], k = 3 since 0 XOR 3 = 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,4,7], maximumBit = 3\nOutput: [5,2,6,5]\nExplanation: The queries are answered as follows:\n1<sup>st</sup> query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.\n2<sup>nd</sup> query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.\n3<sup>rd</sup> query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7.\n4<sup>th</sup> query: nums = [2], k = 5 since 2 XOR 5 = 7.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [0,1,2,2,5,7], maximumBit = 3\nOutput: [4,3,6,4,6,7]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums.length == n</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= maximumBit &lt;= 20</code></li> <li><code>0 &lt;= nums[i] &lt; 2<sup>maximumBit</sup></code></li> <li><code>nums</code>\u200b\u200b\u200b is sorted in ascending order.</li> </ul>"},{"location":"LeetCode_Problems/1830/","title":"1830. Minimum Number of Operations to Make String Sorted","text":"Problem <p>You are given a string <code>s</code> (0-indexed)\u200b\u200b\u200b\u200b\u200b\u200b. You are asked to perform the following operation on <code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b until you get a sorted string:</p> <ol> <li>Find the largest index <code>i</code> such that <code>1 &lt;= i &lt; s.length</code> and <code>s[i] &lt; s[i - 1]</code>.</li> <li>Find the largest index <code>j</code> such that <code>i &lt;= j &lt; s.length</code> and <code>s[k] &lt; s[i - 1]</code> for all the possible values of <code>k</code> in the range <code>[i, j]</code> inclusive.</li> <li>Swap the two characters at indices <code>i - 1</code>\u200b\u200b\u200b\u200b and <code>j</code>\u200b\u200b\u200b\u200b\u200b.</li> <li>Reverse the suffix starting at index <code>i</code>\u200b\u200b\u200b\u200b\u200b\u200b.</li> </ol> <p>Return the number of operations needed to make the string sorted. Since the answer can be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"cba\"\nOutput: 5\nExplanation: The simulation goes as follows:\nOperation 1: i=2, j=2. Swap s[1] and s[2] to get s=\"cab\", then reverse the suffix starting at 2. Now, s=\"cab\".\nOperation 2: i=1, j=2. Swap s[0] and s[2] to get s=\"bac\", then reverse the suffix starting at 1. Now, s=\"bca\".\nOperation 3: i=2, j=2. Swap s[1] and s[2] to get s=\"bac\", then reverse the suffix starting at 2. Now, s=\"bac\".\nOperation 4: i=1, j=1. Swap s[0] and s[1] to get s=\"abc\", then reverse the suffix starting at 1. Now, s=\"acb\".\nOperation 5: i=2, j=2. Swap s[1] and s[2] to get s=\"abc\", then reverse the suffix starting at 2. Now, s=\"abc\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aabaa\"\nOutput: 2\nExplanation: The simulation goes as follows:\nOperation 1: i=3, j=4. Swap s[2] and s[4] to get s=\"aaaab\", then reverse the substring starting at 3. Now, s=\"aaaba\".\nOperation 2: i=4, j=4. Swap s[3] and s[4] to get s=\"aaaab\", then reverse the substring starting at 4. Now, s=\"aaaab\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 3000</code></li> <li><code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1831/","title":"1831. Maximum Transaction Each Day","text":"Problem"},{"location":"LeetCode_Problems/1832/","title":"1832. Check if the Sentence Is Pangram","text":"Problem <p>A pangram is a sentence where every letter of the English alphabet appears at least once.</p> <p>Given a string <code>sentence</code> containing only lowercase English letters, return <code>true</code> if <code>sentence</code> is a pangram, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: sentence = \"thequickbrownfoxjumpsoverthelazydog\"\nOutput: true\nExplanation: sentence contains at least one of every letter of the English alphabet.\n</pre> <p>Example 2:</p> <pre>\nInput: sentence = \"leetcode\"\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sentence.length &lt;= 1000</code></li> <li><code>sentence</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1833/","title":"1833. Maximum Ice Cream Bars","text":"Problem <p>It is a sweltering summer day, and a boy wants to buy some ice cream bars.</p> <p>At the store, there are <code>n</code> ice cream bars. You are given an array <code>costs</code> of length <code>n</code>, where <code>costs[i]</code> is the price of the <code>i<sup>th</sup></code> ice cream bar in coins. The boy initially has <code>coins</code> coins to spend, and he wants to buy as many ice cream bars as possible.\u00a0</p> <p>Note: The boy can buy the ice cream bars in any order.</p> <p>Return the maximum number of ice cream bars the boy can buy with <code>coins</code> coins.</p> <p>You must solve the problem by counting sort.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: costs = [1,3,2,4,1], coins = 7\nOutput: 4\nExplanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.\n</pre> <p>Example 2:</p> <pre>\nInput: costs = [10,6,8,7,7,8], coins = 5\nOutput: 0\nExplanation: The boy cannot afford any of the ice cream bars.\n</pre> <p>Example 3:</p> <pre>\nInput: costs = [1,6,3,1,2,5], coins = 20\nOutput: 6\nExplanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>costs.length == n</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= costs[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= coins &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1834/","title":"1834. Single-Threaded CPU","text":"Problem <p>You are given <code>n</code>\u200b\u200b\u200b\u200b\u200b\u200b tasks labeled from <code>0</code> to <code>n - 1</code> represented by a 2D integer array <code>tasks</code>, where <code>tasks[i] = [enqueueTime<sub>i</sub>, processingTime<sub>i</sub>]</code> means that the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code>\u200b\u200b\u200b\u200b task will be available to process at <code>enqueueTime<sub>i</sub></code> and will take <code>processingTime<sub>i</sub></code><sub> </sub>to finish processing.</p> <p>You have a single-threaded CPU that can process at most one task at a time and will act in the following way:</p> <ul> <li>If the CPU is idle and there are no available tasks to process, the CPU remains idle.</li> <li>If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.</li> <li>Once a task is started, the CPU will process the entire task without stopping.</li> <li>The CPU can finish a task then start a new one instantly.</li> </ul> <p>Return the order in which the CPU will process the tasks.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tasks = [[1,2],[2,4],[3,2],[4,1]]\nOutput: [0,2,3,1]\nExplanation: The events go as follows: \n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle.\n</pre> <p>Example 2:</p> <pre>\nInput: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]\nOutput: [4,3,2,0,1]\nExplanation: The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>tasks.length == n</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= enqueueTime<sub>i</sub>, processingTime<sub>i</sub> &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1835/","title":"1835. Find XOR Sum of All Pairs Bitwise AND","text":"Problem <p>The XOR sum of a list is the bitwise <code>XOR</code> of all its elements. If the list only contains one element, then its XOR sum will be equal to this element.</p> <ul> <li>For example, the XOR sum of <code>[1,2,3,4]</code> is equal to <code>1 XOR 2 XOR 3 XOR 4 = 4</code>, and the XOR sum of <code>[3]</code> is equal to <code>3</code>.</li> </ul> <p>You are given two 0-indexed arrays <code>arr1</code> and <code>arr2</code> that consist only of non-negative integers.</p> <p>Consider the list containing the result of <code>arr1[i] AND arr2[j]</code> (bitwise <code>AND</code>) for every <code>(i, j)</code> pair where <code>0 &lt;= i &lt; arr1.length</code> and <code>0 &lt;= j &lt; arr2.length</code>.</p> <p>Return the XOR sum of the aforementioned list.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr1 = [1,2,3], arr2 = [6,5]\nOutput: 0\nExplanation: The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].\nThe XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.\n</pre> <p>Example 2:</p> <pre>\nInput: arr1 = [12], arr2 = [4]\nOutput: 4\nExplanation: The list = [12 AND 4] = [4]. The XOR sum = 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr1.length, arr2.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= arr1[i], arr2[j] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1836/","title":"1836. Remove Duplicates From an Unsorted Linked List","text":"Problem"},{"location":"LeetCode_Problems/1837/","title":"1837. Sum of Digits in Base K","text":"Problem <p>Given an integer <code>n</code> (in base <code>10</code>) and a base <code>k</code>, return the sum of the digits of <code>n</code> after converting <code>n</code> from base <code>10</code> to base <code>k</code>.</p> <p>After converting, each digit should be interpreted as a base <code>10</code> number, and the sum should be returned in base <code>10</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 34, k = 6\nOutput: 9\nExplanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 10, k = 10\nOutput: 1\nExplanation: n is already in base 10. 1 + 0 = 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>2 &lt;= k &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/1838/","title":"1838. Frequency of the Most Frequent Element","text":"Problem <p>The frequency of an element is the number of times it occurs in an array.</p> <p>You are given an integer array <code>nums</code> and an integer <code>k</code>. In one operation, you can choose an index of <code>nums</code> and increment the element at that index by <code>1</code>.</p> <p>Return the maximum possible frequency of an element after performing at most <code>k</code> operations.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,4], k = 5\nOutput: 3\nExplanation: Increment the first element three times and the second element two times to make nums = [4,4,4].\n4 has a frequency of 3.</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,4,8,13], k = 5\nOutput: 2\nExplanation: There are multiple optimal solutions:\n- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.\n- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.\n- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,9,6], k = 2\nOutput: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1839/","title":"1839. Longest Substring Of All Vowels in Order","text":"Problem <p>A string is considered beautiful if it satisfies the following conditions:</p> <ul> <li>Each of the 5 English vowels (<code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, <code>'u'</code>) must appear at least once in it.</li> <li>The letters must be sorted in alphabetical order (i.e. all <code>'a'</code>s before <code>'e'</code>s, all <code>'e'</code>s before <code>'i'</code>s, etc.).</li> </ul> <p>For example, strings <code>\"aeiou\"</code> and <code>\"aaaaaaeiiiioou\"</code> are considered beautiful, but <code>\"uaeio\"</code>, <code>\"aeoiu\"</code>, and <code>\"aaaeeeooo\"</code> are not beautiful.</p> <p>Given a string <code>word</code> consisting of English vowels, return the length of the longest beautiful substring of <code>word</code>. If no such substring exists, return <code>0</code>.</p> <p>A substring is a contiguous sequence of characters in a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\"\nOutput: 13\nExplanation: The longest beautiful substring in word is \"aaaaeiiiiouuu\" of length 13.</pre> <p>Example 2:</p> <pre>\nInput: word = \"aeeeiiiioooauuuaeiou\"\nOutput: 5\nExplanation: The longest beautiful substring in word is \"aeiou\" of length 5.\n</pre> <p>Example 3:</p> <pre>\nInput: word = \"a\"\nOutput: 0\nExplanation: There is no beautiful substring, so return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 5 * 10<sup>5</sup></code></li> <li><code>word</code> consists of characters <code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1840/","title":"1840. Maximum Building Height","text":"Problem <p>You want to build <code>n</code> new buildings in a city. The new buildings will be built in a line and are labeled from <code>1</code> to <code>n</code>.</p> <p>However, there are city restrictions on the heights of the new buildings:</p> <ul> <li>The height of each building must be a non-negative integer.</li> <li>The height of the first building must be <code>0</code>.</li> <li>The height difference between any two adjacent buildings cannot exceed <code>1</code>.</li> </ul> <p>Additionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array <code>restrictions</code> where <code>restrictions[i] = [id<sub>i</sub>, maxHeight<sub>i</sub>]</code> indicates that building <code>id<sub>i</sub></code> must have a height less than or equal to <code>maxHeight<sub>i</sub></code>.</p> <p>It is guaranteed that each building will appear at most once in <code>restrictions</code>, and building <code>1</code> will not be in <code>restrictions</code>.</p> <p>Return the maximum possible height of the tallest building.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, restrictions = [[2,1],[4,1]]\nOutput: 2\nExplanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 6, restrictions = []\nOutput: 5\nExplanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]\nOutput: 5\nExplanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= restrictions.length &lt;= min(n - 1, 10<sup>5</sup>)</code></li> <li><code>2 &lt;= id<sub>i</sub> &lt;= n</code></li> <li><code>id<sub>i</sub></code>\u00a0is unique.</li> <li><code>0 &lt;= maxHeight<sub>i</sub> &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1841/","title":"1841. League Statistics","text":"Problem"},{"location":"LeetCode_Problems/1842/","title":"1842. Next Palindrome Using Same Digits","text":"Problem"},{"location":"LeetCode_Problems/1843/","title":"1843. Suspicious Bank Accounts","text":"Problem"},{"location":"LeetCode_Problems/1844/","title":"1844. Replace All Digits with Characters","text":"Problem <p>You are given a 0-indexed string <code>s</code> that has lowercase English letters in its even indices and digits in its odd indices.</p> <p>There is a function <code>shift(c, x)</code>, where <code>c</code> is a character and <code>x</code> is a digit, that returns the <code>x<sup>th</sup></code> character after <code>c</code>.</p> <ul> <li>For example, <code>shift('a', 5) = 'f'</code> and <code>shift('x', 0) = 'x'</code>.</li> </ul> <p>For every odd\u00a0index <code>i</code>, you want to replace the digit <code>s[i]</code> with <code>shift(s[i-1], s[i])</code>.</p> <p>Return <code>s</code> after replacing all digits. It is guaranteed that <code>shift(s[i-1], s[i])</code> will never exceed <code>'z'</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"a1c1e1\"\nOutput: \"abcdef\"\nExplanation: The digits are replaced as follows:\n- s[1] -&gt; shift('a',1) = 'b'\n- s[3] -&gt; shift('c',1) = 'd'\n- s[5] -&gt; shift('e',1) = 'f'</pre> <p>Example 2:</p> <pre>\nInput: s = \"a1b2c3d4e\"\nOutput: \"abbdcfdhe\"\nExplanation: The digits are replaced as follows:\n- s[1] -&gt; shift('a',1) = 'b'\n- s[3] -&gt; shift('b',2) = 'd'\n- s[5] -&gt; shift('c',3) = 'f'\n- s[7] -&gt; shift('d',4) = 'h'</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists only of lowercase English letters and digits.</li> <li><code>shift(s[i-1], s[i]) &lt;= 'z'</code> for all odd indices <code>i</code>.</li> </ul>"},{"location":"LeetCode_Problems/1845/","title":"1845. Seat Reservation Manager","text":"Problem <p>Design a system that manages the reservation state of <code>n</code> seats that are numbered from <code>1</code> to <code>n</code>.</p> <p>Implement the <code>SeatManager</code> class:</p> <ul> <li><code>SeatManager(int n)</code> Initializes a <code>SeatManager</code> object that will manage <code>n</code> seats numbered from <code>1</code> to <code>n</code>. All seats are initially available.</li> <li><code>int reserve()</code> Fetches the smallest-numbered unreserved seat, reserves it, and returns its number.</li> <li><code>void unreserve(int seatNumber)</code> Unreserves the seat with the given <code>seatNumber</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"SeatManager\", \"reserve\", \"reserve\", \"unreserve\", \"reserve\", \"reserve\", \"reserve\", \"reserve\", \"unreserve\"]\n[[5], [], [], [2], [], [], [], [], [5]]\nOutput\n[null, 1, 2, null, 2, 3, 4, 5, null]\n\nExplanation\nSeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.\nseatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.\nseatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.\nseatManager.reserve();    // The only available seat is seat 5, so return 5.\nseatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= seatNumber &lt;= n</code></li> <li>For each call to <code>reserve</code>, it is guaranteed that there will be at least one unreserved seat.</li> <li>For each call to <code>unreserve</code>, it is guaranteed that <code>seatNumber</code> will be reserved.</li> <li>At most <code>10<sup>5</sup></code> calls in total will be made to <code>reserve</code> and <code>unreserve</code>.</li> </ul>"},{"location":"LeetCode_Problems/1846/","title":"1846. Maximum Element After Decreasing and Rearranging","text":"Problem <p>You are given an array of positive integers <code>arr</code>. Perform some operations (possibly none) on <code>arr</code> so that it satisfies these conditions:</p> <ul> <li>The value of the first element in <code>arr</code> must be <code>1</code>.</li> <li>The absolute difference between any 2 adjacent elements must be less than or equal to <code>1</code>. In other words, <code>abs(arr[i] - arr[i - 1]) &lt;= 1</code> for each <code>i</code> where <code>1 &lt;= i &lt; arr.length</code> (0-indexed). <code>abs(x)</code> is the absolute value of <code>x</code>.</li> </ul> <p>There are 2 types of operations that you can perform any number of times:</p> <ul> <li>Decrease the value of any element of <code>arr</code> to a smaller positive integer.</li> <li>Rearrange the elements of <code>arr</code> to be in any order.</li> </ul> <p>Return the maximum possible value of an element in <code>arr</code> after performing the operations to satisfy the conditions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [2,2,1,2,1]\nOutput: 2\nExplanation: \nWe can satisfy the conditions by rearranging <code>arr</code> so it becomes <code>[1,2,2,2,1]</code>.\nThe largest element in <code>arr</code> is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [100,1,1000]\nOutput: 3\nExplanation: \nOne possible way to satisfy the conditions is by doing the following:\n1. Rearrange <code>arr</code> so it becomes <code>[1,100,1000]</code>.\n2. Decrease the value of the second element to 2.\n3. Decrease the value of the third element to 3.\nNow <code>arr = [1,2,3], which </code>satisfies the conditions.\nThe largest element in <code>arr is 3.</code>\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [1,2,3,4,5]\nOutput: 5\nExplanation: The array already satisfies the conditions, and the largest element is 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1847/","title":"1847. Closest Room","text":"Problem <p>There is a hotel with <code>n</code> rooms. The rooms are represented by a 2D integer array <code>rooms</code> where <code>rooms[i] = [roomId<sub>i</sub>, size<sub>i</sub>]</code> denotes that there is a room with room number <code>roomId<sub>i</sub></code> and size equal to <code>size<sub>i</sub></code>. Each <code>roomId<sub>i</sub></code> is guaranteed to be unique.</p> <p>You are also given <code>k</code> queries in a 2D array <code>queries</code> where <code>queries[j] = [preferred<sub>j</sub>, minSize<sub>j</sub>]</code>. The answer to the <code>j<sup>th</sup></code> query is the room number <code>id</code> of a room such that:</p> <ul> <li>The room has a size of at least <code>minSize<sub>j</sub></code>, and</li> <li><code>abs(id - preferred<sub>j</sub>)</code> is minimized, where <code>abs(x)</code> is the absolute value of <code>x</code>.</li> </ul> <p>If there is a tie in the absolute difference, then use the room with the smallest such <code>id</code>. If there is no such room, the answer is <code>-1</code>.</p> <p>Return an array <code>answer</code> of length <code>k</code> where <code>answer[j]</code> contains the answer to the <code>j<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]\nOutput: [3,-1,3]\nExplanation: The answers to the queries are as follows:\nQuery = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.\nQuery = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.\nQuery = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.</pre> <p>Example 2:</p> <pre>\nInput: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]\nOutput: [2,1,3]\nExplanation: The answers to the queries are as follows:\nQuery = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.\nQuery = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.\nQuery = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == rooms.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>k == queries.length</code></li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= roomId<sub>i</sub>, preferred<sub>j</sub> &lt;= 10<sup>7</sup></code></li> <li><code>1 &lt;= size<sub>i</sub>, minSize<sub>j</sub> &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1848/","title":"1848. Minimum Distance to the Target Element","text":"Problem <p>Given an integer array <code>nums</code> (0-indexed) and two integers <code>target</code> and <code>start</code>, find an index <code>i</code> such that <code>nums[i] == target</code> and <code>abs(i - start)</code> is minimized. Note that\u00a0<code>abs(x)</code>\u00a0is the absolute value of <code>x</code>.</p> <p>Return <code>abs(i - start)</code>.</p> <p>It is guaranteed that <code>target</code> exists in <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4,5], target = 5, start = 3\nOutput: 1\nExplanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1], target = 1, start = 0\nOutput: 0\nExplanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0\nOutput: 0\nExplanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= start &lt; nums.length</code></li> <li><code>target</code> is in <code>nums</code>.</li> </ul>"},{"location":"LeetCode_Problems/1849/","title":"1849. Splitting a String Into Descending Consecutive Values","text":"Problem <p>You are given a string <code>s</code> that consists of only digits.</p> <p>Check if we can split <code>s</code> into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to <code>1</code>.</p> <ul> <li>For example, the string <code>s = \"0090089\"</code> can be split into <code>[\"0090\", \"089\"]</code> with numerical values <code>[90,89]</code>. The values are in descending order and adjacent values differ by <code>1</code>, so this way is valid.</li> <li>Another example, the string <code>s = \"001\"</code> can be split into <code>[\"0\", \"01\"]</code>, <code>[\"00\", \"1\"]</code>, or <code>[\"0\", \"0\", \"1\"]</code>. However all the ways are invalid because they have numerical values <code>[0,1]</code>, <code>[0,1]</code>, and <code>[0,0,1]</code> respectively, all of which are not in descending order.</li> </ul> <p>Return <code>true</code> if it is possible to split <code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b as described above, or <code>false</code> otherwise.</p> <p>A substring is a contiguous sequence of characters in a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"1234\"\nOutput: false\nExplanation: There is no valid way to split s.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"050043\"\nOutput: true\nExplanation: s can be split into [\"05\", \"004\", \"3\"] with numerical values [5,4,3].\nThe values are in descending order with adjacent values differing by 1.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"9080701\"\nOutput: false\nExplanation: There is no valid way to split s.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 20</code></li> <li><code>s</code> only consists of digits.</li> </ul>"},{"location":"LeetCode_Problems/1850/","title":"1850. Minimum Adjacent Swaps to Reach the Kth Smallest Number","text":"Problem <p>You are given a string <code>num</code>, representing a large integer, and an integer <code>k</code>.</p> <p>We call some integer wonderful if it is a permutation of the digits in <code>num</code> and is greater in value than <code>num</code>. There can be many wonderful integers. However, we only care about the smallest-valued ones.</p> <ul> <li>For example, when <code>num = \"5489355142\"</code>:      <ul> <li>The 1<sup>st</sup> smallest wonderful integer is <code>\"5489355214\"</code>.</li> <li>The 2<sup>nd</sup> smallest wonderful integer is <code>\"5489355241\"</code>.</li> <li>The 3<sup>rd</sup> smallest wonderful integer is <code>\"5489355412\"</code>.</li> <li>The 4<sup>th</sup> smallest wonderful integer is <code>\"5489355421\"</code>.</li> </ul> </li> </ul> <p>Return the minimum number of adjacent digit swaps that needs to be applied to <code>num</code> to reach the <code>k<sup>th</sup></code> smallest wonderful integer.</p> <p>The tests are generated in such a way that <code>k<sup>th</sup></code>\u00a0smallest wonderful integer exists.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"5489355142\", k = 4\nOutput: 2\nExplanation: The 4<sup>th</sup> smallest wonderful number is \"5489355421\". To get this number:\n- Swap index 7 with index 8: \"5489355142\" -&gt; \"5489355412\"\n- Swap index 8 with index 9: \"5489355412\" -&gt; \"5489355421\"\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"11112\", k = 4\nOutput: 4\nExplanation: The 4<sup>th</sup> smallest wonderful number is \"21111\". To get this number:\n- Swap index 3 with index 4: \"11112\" -&gt; \"11121\"\n- Swap index 2 with index 3: \"11121\" -&gt; \"11211\"\n- Swap index 1 with index 2: \"11211\" -&gt; \"12111\"\n- Swap index 0 with index 1: \"12111\" -&gt; \"21111\"\n</pre> <p>Example 3:</p> <pre>\nInput: num = \"00123\", k = 1\nOutput: 1\nExplanation: The 1<sup>st</sup> smallest wonderful number is \"00132\". To get this number:\n- Swap index 3 with index 4: \"00123\" -&gt; \"00132\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= num.length &lt;= 1000</code></li> <li><code>1 &lt;= k &lt;= 1000</code></li> <li><code>num</code> only consists of digits.</li> </ul>"},{"location":"LeetCode_Problems/1851/","title":"1851. Minimum Interval to Include Each Query","text":"Problem <p>You are given a 2D integer array <code>intervals</code>, where <code>intervals[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> describes the <code>i<sup>th</sup></code> interval starting at <code>left<sub>i</sub></code> and ending at <code>right<sub>i</sub></code> (inclusive). The size of an interval is defined as the number of integers it contains, or more formally <code>right<sub>i</sub> - left<sub>i</sub> + 1</code>.</p> <p>You are also given an integer array <code>queries</code>. The answer to the <code>j<sup>th</sup></code> query is the size of the smallest interval <code>i</code> such that <code>left<sub>i</sub> &lt;= queries[j] &lt;= right<sub>i</sub></code>. If no such interval exists, the answer is <code>-1</code>.</p> <p>Return an array containing the answers to the queries.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]\nOutput: [3,3,1,4]\nExplanation: The queries are processed as follows:\n- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.\n</pre> <p>Example 2:</p> <pre>\nInput: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]\nOutput: [2,-1,4,6]\nExplanation: The queries are processed as follows:\n- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> <li><code>intervals[i].length == 2</code></li> <li><code>1 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt;= 10<sup>7</sup></code></li> <li><code>1 &lt;= queries[j] &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1852/","title":"1852. Distinct Numbers in Each Subarray","text":"Problem"},{"location":"LeetCode_Problems/1853/","title":"1853. Convert Date Format","text":"Problem"},{"location":"LeetCode_Problems/1854/","title":"1854. Maximum Population Year","text":"Problem <p>You are given a 2D integer array <code>logs</code> where each <code>logs[i] = [birth<sub>i</sub>, death<sub>i</sub>]</code> indicates the birth and death years of the <code>i<sup>th</sup></code> person.</p> <p>The population of some year <code>x</code> is the number of people alive during that year. The <code>i<sup>th</sup></code> person is counted in year <code>x</code>'s population if <code>x</code> is in the inclusive range <code>[birth<sub>i</sub>, death<sub>i</sub> - 1]</code>. Note that the person is not counted in the year that they die.</p> <p>Return the earliest year with the maximum population.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: logs = [[1993,1999],[2000,2010]]\nOutput: 1993\nExplanation: The maximum population is 1, and 1993 is the earliest year with this population.\n</pre> <p>Example 2:</p> <pre>\nInput: logs = [[1950,1961],[1960,1971],[1970,1981]]\nOutput: 1960\nExplanation: \nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= logs.length &lt;= 100</code></li> <li><code>1950 &lt;= birth<sub>i</sub> &lt; death<sub>i</sub> &lt;= 2050</code></li> </ul>"},{"location":"LeetCode_Problems/1855/","title":"1855. Maximum Distance Between a Pair of Values","text":"Problem <p>You are given two non-increasing 0-indexed integer arrays <code>nums1</code>\u200b\u200b\u200b\u200b\u200b\u200b and <code>nums2</code>\u200b\u200b\u200b\u200b\u200b\u200b.</p> <p>A pair of indices <code>(i, j)</code>, where <code>0 &lt;= i &lt; nums1.length</code> and <code>0 &lt;= j &lt; nums2.length</code>, is valid if both <code>i &lt;= j</code> and <code>nums1[i] &lt;= nums2[j]</code>. The distance of the pair is <code>j - i</code>\u200b\u200b\u200b\u200b.</p> <p>Return the maximum distance of any valid pair <code>(i, j)</code>. If there are no valid pairs, return <code>0</code>.</p> <p>An array <code>arr</code> is non-increasing if <code>arr[i-1] &gt;= arr[i]</code> for every <code>1 &lt;= i &lt; arr.length</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]\nOutput: 2\nExplanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).\nThe maximum distance is 2 with pair (2,4).\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [2,2,2], nums2 = [10,10,1]\nOutput: 1\nExplanation: The valid pairs are (0,0), (0,1), and (1,1).\nThe maximum distance is 1 with pair (0,1).\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]\nOutput: 2\nExplanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).\nThe maximum distance is 2 with pair (2,4).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums1[i], nums2[j] &lt;= 10<sup>5</sup></code></li> <li>Both <code>nums1</code> and <code>nums2</code> are non-increasing.</li> </ul>"},{"location":"LeetCode_Problems/1856/","title":"1856. Maximum Subarray Min-Product","text":"Problem <p>The min-product of an array is equal to the minimum value in the array multiplied by the array's sum.</p> <ul> <li>For example, the array <code>[3,2,5]</code> (minimum value is <code>2</code>) has a min-product of <code>2 * (3+2+5) = 2 * 10 = 20</code>.</li> </ul> <p>Given an array of integers <code>nums</code>, return the maximum min-product of any non-empty subarray of <code>nums</code>. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Note that the min-product should be maximized before performing the modulo operation. Testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer.</p> <p>A subarray is a contiguous part of an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,2]\nOutput: 14\nExplanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).\n2 * (2+3+2) = 2 * 7 = 14.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,3,1,2]\nOutput: 18\nExplanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).\n3 * (3+3) = 3 * 6 = 18.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,1,5,6,4,2]\nOutput: 60\nExplanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).\n4 * (5+6+4) = 4 * 15 = 60.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1857/","title":"1857. Largest Color Value in a Directed Graph","text":"Problem <p>There is a directed graph of <code>n</code> colored nodes and <code>m</code> edges. The nodes are numbered from <code>0</code> to <code>n - 1</code>.</p> <p>You are given a string <code>colors</code> where <code>colors[i]</code> is a lowercase English letter representing the color of the <code>i<sup>th</sup></code> node in this graph (0-indexed). You are also given a 2D array <code>edges</code> where <code>edges[j] = [a<sub>j</sub>, b<sub>j</sub>]</code> indicates that there is a directed edge from node <code>a<sub>j</sub></code> to node <code>b<sub>j</sub></code>.</p> <p>A valid path in the graph is a sequence of nodes <code>x<sub>1</sub> -&gt; x<sub>2</sub> -&gt; x<sub>3</sub> -&gt; ... -&gt; x<sub>k</sub></code> such that there is a directed edge from <code>x<sub>i</sub></code> to <code>x<sub>i+1</sub></code> for every <code>1 &lt;= i &lt; k</code>. The color value of the path is the number of nodes that are colored the most frequently occurring color along that path.</p> <p>Return the largest color value of any valid path in the given graph, or <code>-1</code> if the graph contains a cycle.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]\nOutput: 3\nExplanation: The path 0 -&gt; 2 -&gt; 3 -&gt; 4 contains 3 nodes that are colored <code>\"a\" (red in the above image)</code>.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: colors = \"a\", edges = [[0,0]]\nOutput: -1\nExplanation: There is a cycle from 0 to 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == colors.length</code></li> <li><code>m == edges.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= m &lt;= 10<sup>5</sup></code></li> <li><code>colors</code> consists of lowercase English letters.</li> <li><code>0 &lt;= a<sub>j</sub>, b<sub>j</sub>\u00a0&lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/1858/","title":"1858. Longest Word With All Prefixes","text":"Problem"},{"location":"LeetCode_Problems/1859/","title":"1859. Sorting the Sentence","text":"Problem <p>A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.</p> <p>A sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.</p> <ul> <li>For example, the sentence <code>\"This is a sentence\"</code> can be shuffled as <code>\"sentence4 a3 is2 This1\"</code> or <code>\"is2 sentence4 This1 a3\"</code>.</li> </ul> <p>Given a shuffled sentence <code>s</code> containing no more than <code>9</code> words, reconstruct and return the original sentence.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"is2 sentence4 This1 a3\"\nOutput: \"This is a sentence\"\nExplanation: Sort the words in s to their original positions \"This1 is2 a3 sentence4\", then remove the numbers.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"Myself2 Me1 I4 and3\"\nOutput: \"Me Myself and I\"\nExplanation: Sort the words in s to their original positions \"Me1 Myself2 and3 I4\", then remove the numbers.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 200</code></li> <li><code>s</code> consists of lowercase and uppercase English letters, spaces, and digits from <code>1</code> to <code>9</code>.</li> <li>The number of words in <code>s</code> is between <code>1</code> and <code>9</code>.</li> <li>The words in <code>s</code> are separated by a single space.</li> <li><code>s</code> contains no leading or trailing spaces.</li> </ul>"},{"location":"LeetCode_Problems/1860/","title":"1860. Incremental Memory Leak","text":"Problem <p>You are given two integers <code>memory1</code> and <code>memory2</code> representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.</p> <p>At the <code>i<sup>th</sup></code> second (starting from 1), <code>i</code> bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). If neither stick has at least <code>i</code> bits of available memory, the program crashes.</p> <p>Return an array containing <code>[crashTime, memory1<sub>crash</sub>, memory2<sub>crash</sub>]</code>, where <code>crashTime</code> is the time (in seconds) when the program crashed and <code>memory1<sub>crash</sub></code> and <code>memory2<sub>crash</sub></code> are the available bits of memory in the first and second sticks respectively.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: memory1 = 2, memory2 = 2\nOutput: [3,1,0]\nExplanation: The memory is allocated as follows:\n- At the 1<sup>st</sup> second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.\n- At the 2<sup>nd</sup> second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.\n- At the 3<sup>rd</sup> second, the program crashes. The sticks have 1 and 0 bits available respectively.\n</pre> <p>Example 2:</p> <pre>\nInput: memory1 = 8, memory2 = 11\nOutput: [6,0,4]\nExplanation: The memory is allocated as follows:\n- At the 1<sup>st</sup> second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.\n- At the 2<sup>nd</sup> second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.\n- At the 3<sup>rd</sup> second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.\n- At the 4<sup>th</sup> second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.\n- At the 5<sup>th</sup> second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.\n- At the 6<sup>th</sup> second, the program crashes. The sticks have 0 and 4 bits available respectively.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= memory1, memory2 &lt;= 2<sup>31</sup> - 1</code></li> </ul>"},{"location":"LeetCode_Problems/1861/","title":"1861. Rotating the Box","text":"Problem <p>You are given an <code>m x n</code> matrix of characters <code>box</code> representing a side-view of a box. Each cell of the box is one of the following:</p> <ul> <li>A stone <code>'#'</code></li> <li>A stationary obstacle <code>'*'</code></li> <li>Empty <code>'.'</code></li> </ul> <p>The box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions.</p> <p>It is guaranteed that each stone in <code>box</code> rests on an obstacle, another stone, or the bottom of the box.</p> <p>Return an <code>n x m</code> matrix representing the box after the rotation described above.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: box = [[\"#\",\".\",\"#\"]]\nOutput: [[\".\"],\n\u00a0        [\"#\"],\n\u00a0        [\"#\"]]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: box = [[\"#\",\".\",\"*\",\".\"],\n\u00a0             [\"#\",\"#\",\"*\",\".\"]]\nOutput: [[\"#\",\".\"],\n\u00a0        [\"#\",\"#\"],\n\u00a0        [\"*\",\"*\"],\n\u00a0        [\".\",\".\"]]\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\n\u00a0             [\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\n\u00a0             [\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]\nOutput: [[\".\",\"#\",\"#\"],\n\u00a0        [\".\",\"#\",\"#\"],\n\u00a0        [\"#\",\"#\",\"*\"],\n\u00a0        [\"#\",\"*\",\".\"],\n\u00a0        [\"#\",\".\",\"*\"],\n\u00a0        [\"#\",\".\",\".\"]]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == box.length</code></li> <li><code>n == box[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 500</code></li> <li><code>box[i][j]</code> is either <code>'#'</code>, <code>'*'</code>, or <code>'.'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1862/","title":"1862. Sum of Floored Pairs","text":"Problem <p>Given an integer array <code>nums</code>, return the sum of <code>floor(nums[i] / nums[j])</code> for all pairs of indices <code>0 &lt;= i, j &lt; nums.length</code> in the array. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>The <code>floor()</code> function returns the integer part of the division.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,5,9]\nOutput: 10\nExplanation:\nfloor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [7,7,7,7,7,7,7]\nOutput: 49\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1863/","title":"1863. Sum of All Subset XOR Totals","text":"Problem <p>The XOR total of an array is defined as the bitwise <code>XOR</code> of all its elements, or <code>0</code> if the array is empty.</p> <ul> <li>For example, the XOR total of the array <code>[2,5,6]</code> is <code>2 XOR 5 XOR 6 = 1</code>.</li> </ul> <p>Given an array <code>nums</code>, return the sum of all XOR totals for every subset of <code>nums</code>.\u00a0</p> <p>Note: Subsets with the same elements should be counted multiple times.</p> <p>An array <code>a</code> is a subset of an array <code>b</code> if <code>a</code> can be obtained from <code>b</code> by deleting some (possibly zero) elements of <code>b</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3]\nOutput: 6\nExplanation: The 4 subsets of [1,3] are:\n- The empty subset has an XOR total of 0.\n- [1] has an XOR total of 1.\n- [3] has an XOR total of 3.\n- [1,3] has an XOR total of 1 XOR 3 = 2.\n0 + 1 + 3 + 2 = 6\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,1,6]\nOutput: 28\nExplanation: The 8 subsets of [5,1,6] are:\n- The empty subset has an XOR total of 0.\n- [5] has an XOR total of 5.\n- [1] has an XOR total of 1.\n- [6] has an XOR total of 6.\n- [5,1] has an XOR total of 5 XOR 1 = 4.\n- [5,6] has an XOR total of 5 XOR 6 = 3.\n- [1,6] has an XOR total of 1 XOR 6 = 7.\n- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.\n0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,4,5,6,7,8]\nOutput: 480\nExplanation: The sum of all XOR totals for every subset is 480.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 12</code></li> <li><code>1 &lt;= nums[i] &lt;= 20</code></li> </ul>"},{"location":"LeetCode_Problems/1864/","title":"1864. Minimum Number of Swaps to Make the Binary String Alternating","text":"Problem <p>Given a binary string <code>s</code>, return the minimum number of character swaps to make it alternating, or <code>-1</code> if it is impossible.</p> <p>The string is called alternating if no two adjacent characters are equal. For example, the strings <code>\"010\"</code> and <code>\"1010\"</code> are alternating, while the string <code>\"0100\"</code> is not.</p> <p>Any two characters may be swapped, even if they are\u00a0not adjacent.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"111000\"\nOutput: 1\nExplanation: Swap positions 1 and 4: \"111000\" -&gt; \"101010\"\nThe string is now alternating.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"010\"\nOutput: 0\nExplanation: The string is already alternating, no swaps are needed.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"1110\"\nOutput: -1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1865/","title":"1865. Finding Pairs With a Certain Sum","text":"Problem <p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>. You are tasked to implement a data structure that supports queries of two types:</p> <ol> <li>Add a positive integer to an element of a given index in the array <code>nums2</code>.</li> <li>Count the number of pairs <code>(i, j)</code> such that <code>nums1[i] + nums2[j]</code> equals a given value (<code>0 &lt;= i &lt; nums1.length</code> and <code>0 &lt;= j &lt; nums2.length</code>).</li> </ol> <p>Implement the <code>FindSumPairs</code> class:</p> <ul> <li><code>FindSumPairs(int[] nums1, int[] nums2)</code> Initializes the <code>FindSumPairs</code> object with two integer arrays <code>nums1</code> and <code>nums2</code>.</li> <li><code>void add(int index, int val)</code> Adds <code>val</code> to <code>nums2[index]</code>, i.e., apply <code>nums2[index] += val</code>.</li> <li><code>int count(int tot)</code> Returns the number of pairs <code>(i, j)</code> such that <code>nums1[i] + nums2[j] == tot</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"]\n[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]\nOutput\n[null, 8, null, 2, 1, null, null, 11]\n\nExplanation\nFindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);\nfindSumPairs.count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4\nfindSumPairs.add(3, 2); // now nums2 = [1,4,5,4<code>,5,4</code>]\nfindSumPairs.count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5\nfindSumPairs.count(4);  // return 1; pair (5,0) makes 3 + 1\nfindSumPairs.add(0, 1); // now nums2 = [<code>2</code>,4,5,4<code>,5,4</code>]\nfindSumPairs.add(1, 1); // now nums2 = [<code>2</code>,5,5,4<code>,5,4</code>]\nfindSumPairs.count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length &lt;= 1000</code></li> <li><code>1 &lt;= nums2.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums1[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= nums2[i] &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= index &lt; nums2.length</code></li> <li><code>1 &lt;= val &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= tot &lt;= 10<sup>9</sup></code></li> <li>At most <code>1000</code> calls are made to <code>add</code> and <code>count</code> each.</li> </ul>"},{"location":"LeetCode_Problems/1866/","title":"1866. Number of Ways to Rearrange Sticks With K Sticks Visible","text":"Problem <p>There are <code>n</code> uniquely-sized sticks whose lengths are integers from <code>1</code> to <code>n</code>. You want to arrange the sticks such that exactly <code>k</code>\u00a0sticks are visible from the left. A stick\u00a0is visible from the left if there are no longer\u00a0sticks to the left of it.</p> <ul> <li>For example, if the sticks are arranged <code>[1,3,2,5,4]</code>, then the sticks with lengths <code>1</code>, <code>3</code>, and <code>5</code> are visible from the left.</li> </ul> <p>Given <code>n</code> and <code>k</code>, return the number of such arrangements. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, k = 2\nOutput: 3\nExplanation: [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible.\nThe visible sticks are underlined.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5, k = 5\nOutput: 1\nExplanation: [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible.\nThe visible sticks are underlined.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 20, k = 11\nOutput: 647427950\nExplanation: There are 647427950 (mod 10<sup>9 </sup>+ 7) ways to rearrange the sticks such that exactly 11 sticks are visible.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= k &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/1867/","title":"1867. Orders With Maximum Quantity Above Average","text":"Problem"},{"location":"LeetCode_Problems/1868/","title":"1868. Product of Two Run-Length Encoded Arrays","text":"Problem"},{"location":"LeetCode_Problems/1869/","title":"1869. Longer Contiguous Segments of Ones than Zeros","text":"Problem <p>Given a binary string <code>s</code>, return <code>true</code> if the longest contiguous segment of <code>1</code>'s is strictly longer than the longest contiguous segment of <code>0</code>'s in <code>s</code>, or return <code>false</code> otherwise.</p> <ul> <li>For example, in <code>s = \"110100010\"</code> the longest continuous segment of <code>1</code>s has length <code>2</code>, and the longest continuous segment of <code>0</code>s has length <code>3</code>.</li> </ul> <p>Note that if there are no <code>0</code>'s, then the longest continuous segment of <code>0</code>'s is considered to have a length <code>0</code>. The same applies if there is no <code>1</code>'s.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"1101\"\nOutput: true\nExplanation:\nThe longest contiguous segment of 1s has length 2: \"1101\"\nThe longest contiguous segment of 0s has length 1: \"1101\"\nThe segment of 1s is longer, so return true.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"111000\"\nOutput: false\nExplanation:\nThe longest contiguous segment of 1s has length 3: \"111000\"\nThe longest contiguous segment of 0s has length 3: \"111000\"\nThe segment of 1s is not longer, so return false.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"110100010\"\nOutput: false\nExplanation:\nThe longest contiguous segment of 1s has length 2: \"110100010\"\nThe longest contiguous segment of 0s has length 3: \"110100010\"\nThe segment of 1s is not longer, so return false.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1870/","title":"1870. Minimum Speed to Arrive on Time","text":"Problem <p>You are given a floating-point number <code>hour</code>, representing the amount of time you have to reach the office. To commute to the office, you must take <code>n</code> trains in sequential order. You are also given an integer array <code>dist</code> of length <code>n</code>, where <code>dist[i]</code> describes the distance (in kilometers) of the <code>i<sup>th</sup></code> train ride.</p> <p>Each train can only depart at an integer hour, so you may need to wait in between each train ride.</p> <ul> <li>For example, if the <code>1<sup>st</sup></code> train ride takes <code>1.5</code> hours, you must wait for an additional <code>0.5</code> hours before you can depart on the <code>2<sup>nd</sup></code> train ride at the 2 hour mark.</li> </ul> <p>Return the minimum positive integer speed (in kilometers per hour) that all the trains must travel at for you to reach the office on time, or <code>-1</code> if it is impossible to be on time.</p> <p>Tests are generated such that the answer will not exceed <code>10<sup>7</sup></code> and <code>hour</code> will have at most two digits after the decimal point.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: dist = [1,3,2], hour = 6\nOutput: 1\nExplanation: At speed 1:\n- The first train ride takes 1/1 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.\n- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.\n- You will arrive at exactly the 6 hour mark.\n</pre> <p>Example 2:</p> <pre>\nInput: dist = [1,3,2], hour = 2.7\nOutput: 3\nExplanation: At speed 3:\n- The first train ride takes 1/3 = 0.33333 hours.\n- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.\n- You will arrive at the 2.66667 hour mark.\n</pre> <p>Example 3:</p> <pre>\nInput: dist = [1,3,2], hour = 1.9\nOutput: -1\nExplanation: It is impossible because the earliest the third train can depart is at the 2 hour mark.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == dist.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= dist[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= hour &lt;= 10<sup>9</sup></code></li> <li>There will be at most two digits after the decimal point in <code>hour</code>.</li> </ul>"},{"location":"LeetCode_Problems/1871/","title":"1871. Jump Game VII","text":"Problem <p>You are given a 0-indexed binary string <code>s</code> and two integers <code>minJump</code> and <code>maxJump</code>. In the beginning, you are standing at index <code>0</code>, which is equal to <code>'0'</code>. You can move from index <code>i</code> to index <code>j</code> if the following conditions are fulfilled:</p> <ul> <li><code>i + minJump &lt;= j &lt;= min(i + maxJump, s.length - 1)</code>, and</li> <li><code>s[j] == '0'</code>.</li> </ul> <p>Return <code>true</code> if you can reach index <code>s.length - 1</code> in <code>s</code>, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"011010\", minJump = 2, maxJump = 3\nOutput: true\nExplanation:\nIn the first step, move from index 0 to index 3. \nIn the second step, move from index 3 to index 5.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"01101110\", minJump = 2, maxJump = 3\nOutput: false\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> <li><code>s[0] == '0'</code></li> <li><code>1 &lt;= minJump &lt;= maxJump &lt; s.length</code></li> </ul>"},{"location":"LeetCode_Problems/1872/","title":"1872. Stone Game VIII","text":"Problem <p>Alice and Bob take turns playing a game, with Alice starting first.</p> <p>There are <code>n</code> stones arranged in a row. On each player's turn, while the number of stones is more than one, they will do the following:</p> <ol> <li>Choose an integer <code>x &gt; 1</code>, and remove the leftmost <code>x</code> stones from the row.</li> <li>Add the sum of the removed stones' values to the player's score.</li> <li>Place a new stone, whose value is equal to that sum, on the left side of the row.</li> </ol> <p>The game stops when only one stone is left in the row.</p> <p>The score difference between Alice and Bob is <code>(Alice's score - Bob's score)</code>. Alice's goal is to maximize the score difference, and Bob's goal is the minimize the score difference.</p> <p>Given an integer array <code>stones</code> of length <code>n</code> where <code>stones[i]</code> represents the value of the <code>i<sup>th</sup></code> stone from the left, return the score difference between Alice and Bob if they both play optimally.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stones = [-1,2,-3,4,-5]\nOutput: 5\nExplanation:\n- Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of\n  value 2 on the left. stones = [2,-5].\n- Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on\n  the left. stones = [-3].\nThe difference between their scores is 2 - (-3) = 5.\n</pre> <p>Example 2:</p> <pre>\nInput: stones = [7,-6,5,10,5,-2,-6]\nOutput: 13\nExplanation:\n- Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a\n  stone of value 13 on the left. stones = [13].\nThe difference between their scores is 13 - 0 = 13.\n</pre> <p>Example 3:</p> <pre>\nInput: stones = [-10,-12]\nOutput: -22\nExplanation:\n- Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her\n  score and places a stone of value -22 on the left. stones = [-22].\nThe difference between their scores is (-22) - 0 = -22.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == stones.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= stones[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1873/","title":"1873. Calculate Special Bonus","text":"Problem <p>Table: <code>Employees</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| employee_id | int     |\n| name        | varchar |\n| salary      | int     |\n+-------------+---------+\nemployee_id is the primary key (column with unique values) for this table.\nEach row of this table indicates the employee ID, employee name, and salary.\n</pre> <p> </p> <p>Write a solution to calculate the bonus of each employee. The bonus of an employee is <code>100%</code> of their salary if the ID of the employee is an odd number and the employee's name does not start with the character <code>'M'</code>. The bonus of an employee is <code>0</code> otherwise.</p> <p>Return the result table ordered by <code>employee_id</code>.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployees table:\n+-------------+---------+--------+\n| employee_id | name    | salary |\n+-------------+---------+--------+\n| 2           | Meir    | 3000   |\n| 3           | Michael | 3800   |\n| 7           | Addilyn | 7400   |\n| 8           | Juan    | 6100   |\n| 9           | Kannon  | 7700   |\n+-------------+---------+--------+\nOutput: \n+-------------+-------+\n| employee_id | bonus |\n+-------------+-------+\n| 2           | 0     |\n| 3           | 0     |\n| 7           | 7400  |\n| 8           | 0     |\n| 9           | 7700  |\n+-------------+-------+\nExplanation: \nThe employees with IDs 2 and 8 get 0 bonus because they have an even employee_id.\nThe employee with ID 3 gets 0 bonus because their name starts with 'M'.\nThe rest of the employees get a 100% bonus.\n</pre>"},{"location":"LeetCode_Problems/1874/","title":"1874. Minimize Product Sum of Two Arrays","text":"Problem"},{"location":"LeetCode_Problems/1875/","title":"1875. Group Employees of the Same Salary","text":"Problem"},{"location":"LeetCode_Problems/1876/","title":"1876. Substrings of Size Three with Distinct Characters","text":"Problem <p>A string is good if there are no repeated characters.</p> <p>Given a string <code>s</code>\u200b\u200b\u200b\u200b\u200b, return the number of good substrings of length three in <code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b.</p> <p>Note that if there are multiple occurrences of the same substring, every occurrence should be counted.</p> <p>A substring is a contiguous sequence of characters in a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"xyzzaz\"\nOutput: 1\nExplanation: There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\". \nThe only good substring of length 3 is \"xyz\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aababcabc\"\nOutput: 4\nExplanation: There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".\nThe good substrings are \"abc\", \"bca\", \"cab\", and \"abc\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1877/","title":"1877. Minimize Maximum Pair Sum in Array","text":"Problem <p>The pair sum of a pair <code>(a,b)</code> is equal to <code>a + b</code>. The maximum pair sum is the largest pair sum in a list of pairs.</p> <ul> <li>For example, if we have pairs <code>(1,5)</code>, <code>(2,3)</code>, and <code>(4,4)</code>, the maximum pair sum would be <code>max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8</code>.</li> </ul> <p>Given an array <code>nums</code> of even length <code>n</code>, pair up the elements of <code>nums</code> into <code>n / 2</code> pairs such that:</p> <ul> <li>Each element of <code>nums</code> is in exactly one pair, and</li> <li>The maximum pair sum is minimized.</li> </ul> <p>Return the minimized maximum pair sum after optimally pairing up the elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,5,2,3]\nOutput: 7\nExplanation: The elements can be paired up into pairs (3,3) and (5,2).\nThe maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,5,4,2,4,6]\nOutput: 8\nExplanation: The elements can be paired up into pairs (3,5), (4,4), and (6,2).\nThe maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>n</code> is even.</li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1878/","title":"1878. Get Biggest Three Rhombus Sums in a Grid","text":"Problem <p>You are given an <code>m x n</code> integer matrix <code>grid</code>\u200b\u200b\u200b.</p> <p>A rhombus sum is the sum of the elements that form the border of a regular rhombus shape in <code>grid</code>\u200b\u200b\u200b. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum:</p> <p></p> <p>Note that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.</p> <p>Return the biggest three distinct rhombus sums in the <code>grid</code> in descending order. If there are less than three distinct values, return all of them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]\nOutput: [228,216,211]\nExplanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 20 + 3 + 200 + 5 = 228\n- Red: 200 + 2 + 10 + 4 = 216\n- Green: 5 + 200 + 4 + 2 = 211\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [20,9,8]\nExplanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 4 + 2 + 6 + 8 = 20\n- Red: 9 (area 0 rhombus in the bottom right corner)\n- Green: 8 (area 0 rhombus in the bottom middle)\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [[7,7,7]]\nOutput: [7]\nExplanation: All three possible rhombus sums are the same, so return [7].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>1 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1879/","title":"1879. Minimum XOR Sum of Two Arrays","text":"Problem <p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> of length <code>n</code>.</p> <p>The XOR sum of the two integer arrays is <code>(nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1])</code> (0-indexed).</p> <ul> <li>For example, the XOR sum of <code>[1,2,3]</code> and <code>[3,2,1]</code> is equal to <code>(1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4</code>.</li> </ul> <p>Rearrange the elements of <code>nums2</code> such that the resulting XOR sum is minimized.</p> <p>Return the XOR sum after the rearrangement.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2], nums2 = [2,3]\nOutput: 2\nExplanation: Rearrange <code>nums2</code> so that it becomes <code>[3,2]</code>.\nThe XOR sum is (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2.</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,0,3], nums2 = [5,3,4]\nOutput: 8\nExplanation: Rearrange <code>nums2</code> so that it becomes <code>[5,4,3]</code>. \nThe XOR sum is (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums1.length</code></li> <li><code>n == nums2.length</code></li> <li><code>1 &lt;= n &lt;= 14</code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1880/","title":"1880. Check if Word Equals Summation of Two Words","text":"Problem <p>The letter value of a letter is its position in the alphabet starting from 0 (i.e. <code>'a' -&gt; 0</code>, <code>'b' -&gt; 1</code>, <code>'c' -&gt; 2</code>, etc.).</p> <p>The numerical value of some string of lowercase English letters <code>s</code> is the concatenation of the letter values of each letter in <code>s</code>, which is then converted into an integer.</p> <ul> <li>For example, if <code>s = \"acb\"</code>, we concatenate each letter's letter value, resulting in <code>\"021\"</code>. After converting it, we get <code>21</code>.</li> </ul> <p>You are given three strings <code>firstWord</code>, <code>secondWord</code>, and <code>targetWord</code>, each consisting of lowercase English letters <code>'a'</code> through <code>'j'</code> inclusive.</p> <p>Return <code>true</code> if the summation of the numerical values of <code>firstWord</code> and <code>secondWord</code> equals the numerical value of <code>targetWord</code>, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: firstWord = \"acb\", secondWord = \"cba\", targetWord = \"cdb\"\nOutput: true\nExplanation:\nThe numerical value of firstWord is \"acb\" -&gt; \"021\" -&gt; 21.\nThe numerical value of secondWord is \"cba\" -&gt; \"210\" -&gt; 210.\nThe numerical value of targetWord is \"cdb\" -&gt; \"231\" -&gt; 231.\nWe return true because 21 + 210 == 231.\n</pre> <p>Example 2:</p> <pre>\nInput: firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aab\"\nOutput: false\nExplanation: \nThe numerical value of firstWord is \"aaa\" -&gt; \"000\" -&gt; 0.\nThe numerical value of secondWord is \"a\" -&gt; \"0\" -&gt; 0.\nThe numerical value of targetWord is \"aab\" -&gt; \"001\" -&gt; 1.\nWe return false because 0 + 0 != 1.\n</pre> <p>Example 3:</p> <pre>\nInput: firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aaaa\"\nOutput: true\nExplanation: \nThe numerical value of firstWord is \"aaa\" -&gt; \"000\" -&gt; 0.\nThe numerical value of secondWord is \"a\" -&gt; \"0\" -&gt; 0.\nThe numerical value of targetWord is \"aaaa\" -&gt; \"0000\" -&gt; 0.\nWe return true because 0 + 0 == 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= firstWord.length, </code><code>secondWord.length, </code><code>targetWord.length &lt;= 8</code></li> <li><code>firstWord</code>, <code>secondWord</code>, and <code>targetWord</code> consist of lowercase English letters from <code>'a'</code> to <code>'j'</code> inclusive.</li> </ul>"},{"location":"LeetCode_Problems/1881/","title":"1881. Maximum Value after Insertion","text":"Problem <p>You are given a very large integer <code>n</code>, represented as a string,\u200b\u200b\u200b\u200b\u200b\u200b and an integer digit <code>x</code>. The digits in <code>n</code> and the digit <code>x</code> are in the inclusive range <code>[1, 9]</code>, and <code>n</code> may represent a negative number.</p> <p>You want to maximize <code>n</code>'s numerical value by inserting <code>x</code> anywhere in the decimal representation of <code>n</code>\u200b\u200b\u200b\u200b\u200b\u200b. You cannot insert <code>x</code> to the left of the negative sign.</p> <ul> <li>For example, if <code>n = 73</code> and <code>x = 6</code>, it would be best to insert it between <code>7</code> and <code>3</code>, making <code>n = 763</code>.</li> <li>If <code>n = -55</code> and <code>x = 2</code>, it would be best to insert it before the first <code>5</code>, making <code>n = -255</code>.</li> </ul> <p>Return a string representing the maximum value of <code>n</code>\u200b\u200b\u200b\u200b\u200b\u200b after the insertion.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = \"99\", x = 9\nOutput: \"999\"\nExplanation: The result is the same regardless of where you insert 9.\n</pre> <p>Example 2:</p> <pre>\nInput: n = \"-13\", x = 2\nOutput: \"-123\"\nExplanation: You can make n one of {-213, -123, -132}, and the largest of those three is -123.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= x &lt;= 9</code></li> <li>The digits in <code>n</code>\u200b\u200b\u200b are in the range <code>[1, 9]</code>.</li> <li><code>n</code> is a valid representation of an integer.</li> <li>In the case of a negative <code>n</code>,\u200b\u200b\u200b\u200b\u200b\u200b it will begin with <code>'-'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1882/","title":"1882. Process Tasks Using Servers","text":"Problem <p>You are given two 0-indexed integer arrays <code>servers</code> and <code>tasks</code> of lengths <code>n</code>\u200b\u200b\u200b\u200b\u200b\u200b and <code>m</code>\u200b\u200b\u200b\u200b\u200b\u200b respectively. <code>servers[i]</code> is the weight of the <code>i<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code>\u200b\u200b\u200b\u200b server, and <code>tasks[j]</code> is the time needed to process the <code>j<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code>\u200b\u200b\u200b\u200b task in seconds.</p> <p>Tasks are assigned to the servers using a task queue. Initially, all servers are free, and the queue is empty.</p> <p>At second <code>j</code>, the <code>j<sup>th</sup></code> task is inserted into the queue (starting with the <code>0<sup>th</sup></code> task being inserted at second <code>0</code>). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, and in case of a tie, it is assigned to a free server with the smallest index.</p> <p>If there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above.</p> <p>A server that is assigned task <code>j</code> at second <code>t</code> will be free again at second <code>t + tasks[j]</code>.</p> <p>Build an array <code>ans</code>\u200b\u200b\u200b\u200b of length <code>m</code>, where <code>ans[j]</code> is the index of the server the <code>j<sup>\u200b\u200b\u200b\u200b\u200b\u200bth</sup></code> task will be assigned to.</p> <p>Return the array <code>ans</code>\u200b\u200b\u200b\u200b.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: servers = [3,3,2], tasks = [1,2,3,2,1,2]\nOutput: [2,2,0,2,1,2]\nExplanation: Events in chronological order go as follows:\n- At second 0, task 0 is added and processed using server 2 until second 1.\n- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.\n- At second 2, task 2 is added and processed using server 0 until second 5.\n- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.\n- At second 4, task 4 is added and processed using server 1 until second 5.\n- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7.</pre> <p>Example 2:</p> <pre>\nInput: servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]\nOutput: [1,4,1,4,1,3,2]\nExplanation: Events in chronological order go as follows: \n- At second 0, task 0 is added and processed using server 1 until second 2.\n- At second 1, task 1 is added and processed using server 4 until second 2.\n- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4. \n- At second 3, task 3 is added and processed using server 4 until second 7.\n- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9. \n- At second 5, task 5 is added and processed using server 3 until second 7.\n- At second 6, task 6 is added and processed using server 2 until second 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>servers.length == n</code></li> <li><code>tasks.length == m</code></li> <li><code>1 &lt;= n, m &lt;= 2 * 10<sup>5</sup></code></li> <li><code>1 &lt;= servers[i], tasks[j] &lt;= 2 * 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1883/","title":"1883. Minimum Skips to Arrive at Meeting On Time","text":"Problem <p>You are given an integer <code>hoursBefore</code>, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through <code>n</code> roads. The road lengths are given as an integer array <code>dist</code> of length <code>n</code>, where <code>dist[i]</code> describes the length of the <code>i<sup>th</sup></code> road in kilometers. In addition, you are given an integer <code>speed</code>, which is the speed (in km/h) you will travel at.</p> <p>After you travel road <code>i</code>, you must rest and wait for the next integer hour before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting.</p> <ul> <li>For example, if traveling a road takes <code>1.4</code> hours, you must wait until the <code>2</code> hour mark before traveling the next road. If traveling a road takes exactly\u00a0<code>2</code>\u00a0hours, you do not need to wait.</li> </ul> <p>However, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks.</p> <ul> <li>For example, suppose traveling the first road takes <code>1.4</code> hours and traveling the second road takes <code>0.6</code> hours. Skipping the rest after the first road will mean you finish traveling the second road right at the <code>2</code> hour mark, letting you start traveling the third road immediately.</li> </ul> <p>Return the minimum number of skips required to arrive at the meeting on time, or <code>-1</code> if it is impossible.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: dist = [1,3,2], speed = 4, hoursBefore = 2\nOutput: 1\nExplanation:\nWithout skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours.\nYou can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours.\nNote that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest.\n</pre> <p>Example 2:</p> <pre>\nInput: dist = [7,3,5,5], speed = 2, hoursBefore = 10\nOutput: 2\nExplanation:\nWithout skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.\nYou can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours.\n</pre> <p>Example 3:</p> <pre>\nInput: dist = [7,3,5,5], speed = 1, hoursBefore = 10\nOutput: -1\nExplanation: It is impossible to arrive at the meeting on time even if you skip all the rests.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == dist.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= dist[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= speed &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= hoursBefore &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1884/","title":"1884. Egg Drop With 2 Eggs and N Floors","text":"Problem <p>You are given two identical eggs and you have access to a building with <code>n</code> floors labeled from <code>1</code> to <code>n</code>.</p> <p>You know that there exists a floor <code>f</code> where <code>0 &lt;= f &lt;= n</code> such that any egg dropped at a floor higher than <code>f</code> will break, and any egg dropped at or below floor <code>f</code> will not break.</p> <p>In each move, you may take an unbroken egg and drop it from any floor <code>x</code> (where <code>1 &lt;= x &lt;= n</code>). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.</p> <p>Return the minimum number of moves that you need to determine with certainty what the value of <code>f</code> is.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: 2\nExplanation: We can drop the first egg from floor 1 and the second egg from floor 2.\nIf the first egg breaks, we know that f = 0.\nIf the second egg breaks but the first egg didn't, we know that f = 1.\nOtherwise, if both eggs survive, we know that f = 2.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 100\nOutput: 14\nExplanation: One optimal strategy is:\n- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. Total drops is 1 + 8 = 9.\n- If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. Total drops is 2 + 12 = 14.\n- If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.\nRegardless of the outcome, it takes at most 14 drops to determine f.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1885/","title":"1885. Count Pairs in Two Arrays","text":"Problem"},{"location":"LeetCode_Problems/1886/","title":"1886. Determine Whether Matrix Can Be Obtained By Rotation","text":"Problem <p>Given two <code>n x n</code> binary matrices <code>mat</code> and <code>target</code>, return <code>true</code> if it is possible to make <code>mat</code> equal to <code>target</code> by rotating <code>mat</code> in 90-degree increments, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]\nOutput: true\nExplanation: We can rotate mat 90 degrees clockwise to make mat equal target.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]\nOutput: false\nExplanation: It is impossible to make mat equal to target by rotating mat.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]\nOutput: true\nExplanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == mat.length == target.length</code></li> <li><code>n == mat[i].length == target[i].length</code></li> <li><code>1 &lt;= n &lt;= 10</code></li> <li><code>mat[i][j]</code> and <code>target[i][j]</code> are either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1887/","title":"1887. Reduction Operations to Make the Array Elements Equal","text":"Problem <p>Given an integer array <code>nums</code>, your goal is to make all elements in <code>nums</code> equal. To complete one operation, follow these steps:</p> <ol> <li>Find the largest value in <code>nums</code>. Let its index be <code>i</code> (0-indexed) and its value be <code>largest</code>. If there are multiple elements with the largest value, pick the smallest <code>i</code>.</li> <li>Find the next largest value in <code>nums</code> strictly smaller than <code>largest</code>. Let its value be <code>nextLargest</code>.</li> <li>Reduce <code>nums[i]</code> to <code>nextLargest</code>.</li> </ol> <p>Return the number of operations to make all elements in <code>nums</code> equal.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,1,3]\nOutput: 3\nExplanation:\u00a0It takes 3 operations to make all elements in nums equal:\n1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3].\n2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3].\n3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1]\nOutput: 0\nExplanation:\u00a0All elements in nums are already equal.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,2,2,3]\nOutput: 4\nExplanation:\u00a0It takes 4 operations to make all elements in nums equal:\n1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2].\n2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2].\n3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2].\n4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 5 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1888/","title":"1888. Minimum Number of Flips to Make the Binary String Alternating","text":"Problem <p>You are given a binary string <code>s</code>. You are allowed to perform two types of operations on the string in any sequence:</p> <ul> <li>Type-1: Remove the character at the start of the string <code>s</code> and append it to the end of the string.</li> <li>Type-2: Pick any character in <code>s</code> and flip its value, i.e., if its value is <code>'0'</code> it becomes <code>'1'</code> and vice-versa.</li> </ul> <p>Return the minimum number of type-2 operations you need to perform such that <code>s</code> becomes alternating.</p> <p>The string is called alternating if no two adjacent characters are equal.</p> <ul> <li>For example, the strings <code>\"010\"</code> and <code>\"1010\"</code> are alternating, while the string <code>\"0100\"</code> is not.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"111000\"\nOutput: 2\nExplanation: Use the first operation two times to make s = \"100011\".\nThen, use the second operation on the third and sixth elements to make s = \"101010\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"010\"\nOutput: 0\nExplanation: The string is already alternating.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"1110\"\nOutput: 1\nExplanation: Use the second operation on the second element to make s = \"1010\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1889/","title":"1889. Minimum Space Wasted From Packaging","text":"Problem <p>You have <code>n</code> packages that you are trying to place in boxes, one package in each box. There are <code>m</code> suppliers that each produce boxes of different sizes (with infinite supply). A package can be placed in a box if the size of the package is less than or equal to the size of the box.</p> <p>The package sizes are given as an integer array <code>packages</code>, where <code>packages[i]</code> is the size of the <code>i<sup>th</sup></code> package. The suppliers are given as a 2D integer array <code>boxes</code>, where <code>boxes[j]</code> is an array of box sizes that the <code>j<sup>th</sup></code> supplier produces.</p> <p>You want to choose a single supplier and use boxes from them such that the total wasted space is minimized. For each package in a box, we define the space wasted to be <code>size of the box - size of the package</code>. The total wasted space is the sum of the space wasted in all the boxes.</p> <ul> <li>For example, if you have to fit packages with sizes <code>[2,3,5]</code> and the supplier offers boxes of sizes <code>[4,8]</code>, you can fit the packages of size-<code>2</code> and size-<code>3</code> into two boxes of size-<code>4</code> and the package with size-<code>5</code> into a box of size-<code>8</code>. This would result in a waste of <code>(4-2) + (4-3) + (8-5) = 6</code>.</li> </ul> <p>Return the minimum total wasted space by choosing the box supplier optimally, or <code>-1</code> if it is impossible to fit all the packages inside boxes. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: packages = [2,3,5], boxes = [[4,8],[2,8]]\nOutput: 6\nExplanation: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.\nThe total waste is (4-2) + (4-3) + (8-5) = 6.\n</pre> <p>Example 2:</p> <pre>\nInput: packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]\nOutput: -1\nExplanation: There is no box that the package of size 5 can fit in.\n</pre> <p>Example 3:</p> <pre>\nInput: packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]\nOutput: 9\nExplanation: It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.\nThe total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == packages.length</code></li> <li><code>m == boxes.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= packages[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= boxes[j].length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= boxes[j][k] &lt;= 10<sup>5</sup></code></li> <li><code>sum(boxes[j].length) &lt;= 10<sup>5</sup></code></li> <li>The elements in <code>boxes[j]</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1890/","title":"1890. The Latest Login in 2020","text":"Problem <p>Table: <code>Logins</code></p> <pre>\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| user_id        | int      |\n| time_stamp     | datetime |\n+----------------+----------+\n(user_id, time_stamp) is the primary key (combination of columns with unique values) for this table.\nEach row contains information about the login time for the user with ID user_id.\n</pre> <p> </p> <p>Write a solution to report the latest login for all users in the year <code>2020</code>. Do not include the users who did not login in <code>2020</code>.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nLogins table:\n+---------+---------------------+\n| user_id | time_stamp          |\n+---------+---------------------+\n| 6       | 2020-06-30 15:06:07 |\n| 6       | 2021-04-21 14:06:06 |\n| 6       | 2019-03-07 00:18:15 |\n| 8       | 2020-02-01 05:10:53 |\n| 8       | 2020-12-30 00:46:50 |\n| 2       | 2020-01-16 02:49:50 |\n| 2       | 2019-08-25 07:59:08 |\n| 14      | 2019-07-14 09:00:00 |\n| 14      | 2021-01-06 11:59:59 |\n+---------+---------------------+\nOutput: \n+---------+---------------------+\n| user_id | last_stamp          |\n+---------+---------------------+\n| 6       | 2020-06-30 15:06:07 |\n| 8       | 2020-12-30 00:46:50 |\n| 2       | 2020-01-16 02:49:50 |\n+---------+---------------------+\nExplanation: \nUser 6 logged into their account 3 times but only once in 2020, so we include this login in the result table.\nUser 8 logged into their account 2 times in 2020, once in February and once in December. We include only the latest one (December) in the result table.\nUser 2 logged into their account 2 times but only once in 2020, so we include this login in the result table.\nUser 14 did not login in 2020, so we do not include them in the result table.\n</pre>"},{"location":"LeetCode_Problems/1891/","title":"1891. Cutting Ribbons","text":"Problem"},{"location":"LeetCode_Problems/1892/","title":"1892. Page Recommendations II","text":"Problem"},{"location":"LeetCode_Problems/1893/","title":"1893. Check if All the Integers in a Range Are Covered","text":"Problem <p>You are given a 2D integer array <code>ranges</code> and two integers <code>left</code> and <code>right</code>. Each <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> represents an inclusive interval between <code>start<sub>i</sub></code> and <code>end<sub>i</sub></code>.</p> <p>Return <code>true</code> if each integer in the inclusive range <code>[left, right]</code> is covered by at least one interval in <code>ranges</code>. Return <code>false</code> otherwise.</p> <p>An integer <code>x</code> is covered by an interval <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> if <code>start<sub>i</sub> &lt;= x &lt;= end<sub>i</sub></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5\nOutput: true\nExplanation: Every integer between 2 and 5 is covered:\n- 2 is covered by the first range.\n- 3 and 4 are covered by the second range.\n- 5 is covered by the third range.\n</pre> <p>Example 2:</p> <pre>\nInput: ranges = [[1,10],[10,20]], left = 21, right = 21\nOutput: false\nExplanation: 21 is not covered by any range.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= ranges.length &lt;= 50</code></li> <li><code>1 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 50</code></li> <li><code>1 &lt;= left &lt;= right &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/1894/","title":"1894. Find the Student that Will Replace the Chalk","text":"Problem <p>There are <code>n</code> students in a class numbered from <code>0</code> to <code>n - 1</code>. The teacher will give each student a problem starting with the student number <code>0</code>, then the student number <code>1</code>, and so on until the teacher reaches the student number <code>n - 1</code>. After that, the teacher will restart the process, starting with the student number <code>0</code> again.</p> <p>You are given a 0-indexed integer array <code>chalk</code> and an integer <code>k</code>. There are initially <code>k</code> pieces of chalk. When the student number <code>i</code> is given a problem to solve, they will use <code>chalk[i]</code> pieces of chalk to solve that problem. However, if the current number of chalk pieces is strictly less than <code>chalk[i]</code>, then the student number <code>i</code> will be asked to replace the chalk.</p> <p>Return the index of the student that will replace the chalk pieces.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: chalk = [5,1,5], k = 22\nOutput: 0\nExplanation: The students go in turns as follows:\n- Student number 0 uses 5 chalk, so k = 17.\n- Student number 1 uses 1 chalk, so k = 16.\n- Student number 2 uses 5 chalk, so k = 11.\n- Student number 0 uses 5 chalk, so k = 6.\n- Student number 1 uses 1 chalk, so k = 5.\n- Student number 2 uses 5 chalk, so k = 0.\nStudent number 0 does not have enough chalk, so they will have to replace it.</pre> <p>Example 2:</p> <pre>\nInput: chalk = [3,4,1,2], k = 25\nOutput: 1\nExplanation: The students go in turns as follows:\n- Student number 0 uses 3 chalk so k = 22.\n- Student number 1 uses 4 chalk so k = 18.\n- Student number 2 uses 1 chalk so k = 17.\n- Student number 3 uses 2 chalk so k = 15.\n- Student number 0 uses 3 chalk so k = 12.\n- Student number 1 uses 4 chalk so k = 8.\n- Student number 2 uses 1 chalk so k = 7.\n- Student number 3 uses 2 chalk so k = 5.\n- Student number 0 uses 3 chalk so k = 2.\nStudent number 1 does not have enough chalk, so they will have to replace it.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>chalk.length == n</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= chalk[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1895/","title":"1895. Largest Magic Square","text":"Problem <p>A <code>k x k</code> magic square is a <code>k x k</code> grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal. The integers in the magic square do not have to be distinct. Every <code>1 x 1</code> grid is trivially a magic square.</p> <p>Given an <code>m x n</code> integer <code>grid</code>, return the size (i.e., the side length <code>k</code>) of the largest magic square that can be found within this grid.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]\nOutput: 3\nExplanation: The largest magic square has a size of 3.\nEvery row sum, column sum, and diagonal sum of this magic square is equal to 12.\n- Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12\n- Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12\n- Diagonal sums: 5+4+3 = 6+4+2 = 12\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]\nOutput: 2\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>1 &lt;= grid[i][j] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1896/","title":"1896. Minimum Cost to Change the Final Value of Expression","text":"Problem <p>You are given a valid boolean expression as a string <code>expression</code> consisting of the characters <code>'1'</code>,<code>'0'</code>,<code>'&amp;'</code> (bitwise AND operator),<code>'|'</code> (bitwise OR operator),<code>'('</code>, and <code>')'</code>.</p> <ul> <li>For example, <code>\"()1|1\"</code> and <code>\"(1)&amp;()\"</code> are not valid while <code>\"1\"</code>, <code>\"(((1))|(0))\"</code>, and <code>\"1|(0&amp;(1))\"</code> are valid expressions.</li> </ul> <p>Return the minimum cost to change the final value of the expression.</p> <ul> <li>For example, if <code>expression = \"1|1|(0&amp;0)&amp;1\"</code>, its value is <code>1|1|(0&amp;0)&amp;1 = 1|1|0&amp;1 = 1|0&amp;1 = 1&amp;1 = 1</code>. We want to apply operations so that the new expression evaluates to <code>0</code>.</li> </ul> <p>The cost of changing the final value of an expression is the number of operations performed on the expression. The types of operations are described as follows:</p> <ul> <li>Turn a <code>'1'</code> into a <code>'0'</code>.</li> <li>Turn a <code>'0'</code> into a <code>'1'</code>.</li> <li>Turn a <code>'&amp;'</code> into a <code>'|'</code>.</li> <li>Turn a <code>'|'</code> into a <code>'&amp;'</code>.</li> </ul> <p>Note: <code>'&amp;'</code> does not take precedence over <code>'|'</code> in the order of calculation. Evaluate parentheses first, then in left-to-right order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: expression = \"1&amp;(0|1)\"\nOutput: 1\nExplanation: We can turn \"1&amp;(0|1)\" into \"1&amp;(0&amp;1)\" by changing the '|' to a '&amp;' using 1 operation.\nThe new expression evaluates to 0. \n</pre> <p>Example 2:</p> <pre>\nInput: expression = \"(0&amp;0)&amp;(0&amp;0&amp;0)\"\nOutput: 3\nExplanation: We can turn \"(0&amp;0)&amp;(0&amp;0&amp;0)\" into \"(0|1)|(0&amp;0&amp;0)\" using 3 operations.\nThe new expression evaluates to 1.\n</pre> <p>Example 3:</p> <pre>\nInput: expression = \"(0|(1|0&amp;1))\"\nOutput: 1\nExplanation: We can turn \"(0|(1|0&amp;1))\" into \"(0|(0|0&amp;1))\" using 1 operation.\nThe new expression evaluates to 0.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= expression.length &lt;= 10<sup>5</sup></code></li> <li><code>expression</code>\u00a0only contains\u00a0<code>'1'</code>,<code>'0'</code>,<code>'&amp;'</code>,<code>'|'</code>,<code>'('</code>, and\u00a0<code>')'</code></li> <li>All parentheses\u00a0are properly matched.</li> <li>There will be no empty parentheses (i.e:\u00a0<code>\"()\"</code>\u00a0is not a substring of\u00a0<code>expression</code>).</li> </ul>"},{"location":"LeetCode_Problems/1897/","title":"1897. Redistribute Characters to Make All Strings Equal","text":"Problem <p>You are given an array of strings <code>words</code> (0-indexed).</p> <p>In one operation, pick two distinct indices <code>i</code> and <code>j</code>, where <code>words[i]</code> is a non-empty string, and move any character from <code>words[i]</code> to any position in <code>words[j]</code>.</p> <p>Return <code>true</code> if you can make every string in <code>words</code> equal using any number of operations, and <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"abc\",\"aabc\",\"bc\"]\nOutput: true\nExplanation: Move the first 'a' in <code>words[1] to the front of words[2],\nto make </code><code>words[1]</code> = \"abc\" and words[2] = \"abc\".\nAll the strings are now equal to \"abc\", so return <code>true</code>.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"ab\",\"a\"]\nOutput: false\nExplanation: It is impossible to make all the strings equal using the operation.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 100</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1898/","title":"1898. Maximum Number of Removable Characters","text":"Problem <p>You are given two strings <code>s</code> and <code>p</code> where <code>p</code> is a subsequence of <code>s</code>. You are also given a distinct 0-indexed integer array <code>removable</code> containing a subset of indices of <code>s</code> (<code>s</code> is also 0-indexed).</p> <p>You want to choose an integer <code>k</code> (<code>0 &lt;= k &lt;= removable.length</code>) such that, after removing <code>k</code> characters from <code>s</code> using the first <code>k</code> indices in <code>removable</code>, <code>p</code> is still a subsequence of <code>s</code>. More formally, you will mark the character at <code>s[removable[i]]</code> for each <code>0 &lt;= i &lt; k</code>, then remove all marked characters and check if <code>p</code> is still a subsequence.</p> <p>Return the maximum <code>k</code> you can choose such that <code>p</code> is still a subsequence of <code>s</code> after the removals.</p> <p>A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcacb\", p = \"ab\", removable = [3,1,0]\nOutput: 2\nExplanation: After removing the characters at indices 3 and 1, \"abcacb\" becomes \"accb\".\n\"ab\" is a subsequence of \"accb\".\nIf we remove the characters at indices 3, 1, and 0, \"abcacb\" becomes \"ccb\", and \"ab\" is no longer a subsequence.\nHence, the maximum k is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]\nOutput: 1\nExplanation: After removing the character at index 3, \"abcbddddd\" becomes \"abcddddd\".\n\"abcd\" is a subsequence of \"abcddddd\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]\nOutput: 0\nExplanation: If you remove the first index in the array removable, \"abc\" is no longer a subsequence.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= p.length &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= removable.length &lt; s.length</code></li> <li><code>0 &lt;= removable[i] &lt; s.length</code></li> <li><code>p</code> is a subsequence of <code>s</code>.</li> <li><code>s</code> and <code>p</code> both consist of lowercase English letters.</li> <li>The elements in <code>removable</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/1899/","title":"1899. Merge Triplets to Form Target Triplet","text":"Problem <p>A triplet is an array of three integers. You are given a 2D integer array <code>triplets</code>, where <code>triplets[i] = [a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>]</code> describes the <code>i<sup>th</sup></code> triplet. You are also given an integer array <code>target = [x, y, z]</code> that describes the triplet you want to obtain.</p> <p>To obtain <code>target</code>, you may apply the following operation on <code>triplets</code> any number of times (possibly zero):</p> <ul> <li>Choose two indices (0-indexed) <code>i</code> and <code>j</code> (<code>i != j</code>) and update <code>triplets[j]</code> to become <code>[max(a<sub>i</sub>, a<sub>j</sub>), max(b<sub>i</sub>, b<sub>j</sub>), max(c<sub>i</sub>, c<sub>j</sub>)]</code>.      <ul> <li>For example, if <code>triplets[i] = [2, 5, 3]</code> and <code>triplets[j] = [1, 7, 5]</code>, <code>triplets[j]</code> will be updated to <code>[max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]</code>.</li> </ul> </li> </ul> <p>Return <code>true</code> if it is possible to obtain the <code>target</code> triplet <code>[x, y, z]</code> as an element of <code>triplets</code>, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]\nOutput: true\nExplanation: Perform the following operations:\n- Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]]\nThe target triplet [2,7,5] is now an element of triplets.\n</pre> <p>Example 2:</p> <pre>\nInput: triplets = [[3,4,5],[4,5,6]], target = [3,2,5]\nOutput: false\nExplanation: It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets.\n</pre> <p>Example 3:</p> <pre>\nInput: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]\nOutput: true\nExplanation: Perform the following operations:\n- Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]].\n- Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]].\nThe target triplet [5,5,5] is now an element of triplets.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= triplets.length &lt;= 10<sup>5</sup></code></li> <li><code>triplets[i].length == target.length == 3</code></li> <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub>, c<sub>i</sub>, x, y, z &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1900/","title":"1900. The Earliest and Latest Rounds Where Players Compete","text":"Problem <p>There is a tournament where <code>n</code> players are participating. The players are standing in a single row and are numbered from <code>1</code> to <code>n</code> based on their initial standing position (player <code>1</code> is the first player in the row, player <code>2</code> is the second player in the row, etc.).</p> <p>The tournament consists of multiple rounds (starting from round number <code>1</code>). In each round, the <code>i<sup>th</sup></code> player from the front of the row competes against the <code>i<sup>th</sup></code> player from the end of the row, and the winner advances to the next round. When the number of players is odd for the current round, the player in the middle automatically advances to the next round.</p> <ul> <li>For example, if the row consists of players <code>1, 2, 4, 6, 7</code> <ul> <li>Player <code>1</code> competes against player <code>7</code>.</li> <li>Player <code>2</code> competes against player <code>6</code>.</li> <li>Player <code>4</code> automatically advances to the next round.</li> </ul> </li> </ul> <p>After each round is over, the winners are lined back up in the row based on the original ordering assigned to them initially (ascending order).</p> <p>The players numbered <code>firstPlayer</code> and <code>secondPlayer</code> are the best in the tournament. They can win against any other player before they compete against each other. If any two other players compete against each other, either of them might win, and thus you may choose the outcome of this round.</p> <p>Given the integers <code>n</code>, <code>firstPlayer</code>, and <code>secondPlayer</code>, return an integer array containing two values, the earliest possible round number and the\u00a0latest possible round number in which these two players will compete against each other, respectively.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 11, firstPlayer = 2, secondPlayer = 4\nOutput: [3,4]\nExplanation:\nOne possible scenario which leads to the earliest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 2, 3, 4, 5, 6, 11\nThird round: 2, 3, 4\nOne possible scenario which leads to the latest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 1, 2, 3, 4, 5, 6\nThird round: 1, 2, 4\nFourth round: 2, 4\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5, firstPlayer = 1, secondPlayer = 5\nOutput: [1,1]\nExplanation: The players numbered 1 and 5 compete in the first round.\nThere is no way to make them compete in any other round.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 28</code></li> <li><code>1 &lt;= firstPlayer &lt; secondPlayer &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/1901/","title":"1901. Find a Peak Element II","text":"Problem <p>A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.</p> <p>Given a 0-indexed <code>m x n</code> matrix <code>mat</code> where no two adjacent cells are equal, find any peak element <code>mat[i][j]</code> and return the length 2 array <code>[i,j]</code>.</p> <p>You may assume that the entire matrix is surrounded by an outer perimeter with the value <code>-1</code> in each cell.</p> <p>You must write an algorithm that runs in <code>O(m log(n))</code> or <code>O(n log(m))</code> time.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[1,4],[3,2]]\nOutput: [0,1]\nExplanation:\u00a0Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: mat = [[10,20,15],[21,30,14],[7,16,32]]\nOutput: [1,1]\nExplanation:\u00a0Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 500</code></li> <li><code>1 &lt;= mat[i][j] &lt;= 10<sup>5</sup></code></li> <li>No two adjacent cells are equal.</li> </ul>"},{"location":"LeetCode_Problems/1902/","title":"1902. Depth of BST Given Insertion Order","text":"Problem"},{"location":"LeetCode_Problems/1903/","title":"1903. Largest Odd Number in String","text":"Problem <p>You are given a string <code>num</code>, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of <code>num</code>, or an empty string <code>\"\"</code> if no odd integer exists.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"52\"\nOutput: \"5\"\nExplanation: The only non-empty substrings are \"5\", \"2\", and \"52\". \"5\" is the only odd number.\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"4206\"\nOutput: \"\"\nExplanation: There are no odd numbers in \"4206\".\n</pre> <p>Example 3:</p> <pre>\nInput: num = \"35427\"\nOutput: \"35427\"\nExplanation: \"35427\" is already an odd number.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num.length &lt;= 10<sup>5</sup></code></li> <li><code>num</code> only consists of digits and does not contain any leading zeros.</li> </ul>"},{"location":"LeetCode_Problems/1904/","title":"1904. The Number of Full Rounds You Have Played","text":"Problem <p>You are participating in an online chess tournament. There is a chess round that starts every <code>15</code> minutes. The first round of the day starts at <code>00:00</code>, and after every <code>15</code> minutes, a new round starts.</p> <ul> <li>For example, the second round starts at <code>00:15</code>, the fourth round starts at <code>00:45</code>, and the seventh round starts at <code>01:30</code>.</li> </ul> <p>You are given two strings <code>loginTime</code> and <code>logoutTime</code> where:</p> <ul> <li><code>loginTime</code> is the time you will login to the game, and</li> <li><code>logoutTime</code> is the time you will logout from the game.</li> </ul> <p>If <code>logoutTime</code> is earlier than <code>loginTime</code>, this means you have played from <code>loginTime</code> to midnight and from midnight to <code>logoutTime</code>.</p> <p>Return the number of full chess rounds you have played in the tournament.</p> <p>Note:\u00a0All the given times follow the 24-hour clock. That means the first round of the day starts at <code>00:00</code> and the last round of the day starts at <code>23:45</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: loginTime = \"09:31\", logoutTime = \"10:14\"\nOutput: 1\nExplanation: You played one full round from 09:45 to 10:00.\nYou did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.\nYou did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended.\n</pre> <p>Example 2:</p> <pre>\nInput: loginTime = \"21:30\", logoutTime = \"03:00\"\nOutput: 22\nExplanation: You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.\n10 + 12 = 22.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>loginTime</code> and <code>logoutTime</code> are in the format <code>hh:mm</code>.</li> <li><code>00 &lt;= hh &lt;= 23</code></li> <li><code>00 &lt;= mm &lt;= 59</code></li> <li><code>loginTime</code> and <code>logoutTime</code> are not equal.</li> </ul>"},{"location":"LeetCode_Problems/1905/","title":"1905. Count Sub Islands","text":"Problem <p>You are given two <code>m x n</code> binary matrices <code>grid1</code> and <code>grid2</code> containing only <code>0</code>'s (representing water) and <code>1</code>'s (representing land). An island is a group of <code>1</code>'s connected 4-directionally (horizontal or vertical). Any cells outside of the grid are considered water cells.</p> <p>An island in <code>grid2</code> is considered a sub-island if there is an island in <code>grid1</code> that contains all the cells that make up this island in <code>grid2</code>.</p> <p>Return the number of islands in <code>grid2</code> that are considered sub-islands.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]\nOutput: 3\nExplanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]\nOutput: 2 \nExplanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid1.length == grid2.length</code></li> <li><code>n == grid1[i].length == grid2[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 500</code></li> <li><code>grid1[i][j]</code> and <code>grid2[i][j]</code> are either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1906/","title":"1906. Minimum Absolute Difference Queries","text":"Problem <p>The minimum absolute difference of an array <code>a</code> is defined as the minimum value of <code>|a[i] - a[j]|</code>, where <code>0 &lt;= i &lt; j &lt; a.length</code> and <code>a[i] != a[j]</code>. If all elements of <code>a</code> are the same, the minimum absolute difference is <code>-1</code>.</p> <ul> <li>For example, the minimum absolute difference of the array <code>[5,2,3,7,2]</code> is <code>|2 - 3| = 1</code>. Note that it is not <code>0</code> because <code>a[i]</code> and <code>a[j]</code> must be different.</li> </ul> <p>You are given an integer array <code>nums</code> and the array <code>queries</code> where <code>queries[i] = [l<sub>i</sub>, r<sub>i</sub>]</code>. For each query <code>i</code>, compute the minimum absolute difference of the subarray <code>nums[l<sub>i</sub>...r<sub>i</sub>]</code> containing the elements of <code>nums</code> between the 0-based indices <code>l<sub>i</sub></code> and <code>r<sub>i</sub></code> (inclusive).</p> <p>Return an array <code>ans</code> where <code>ans[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p>A subarray is a contiguous sequence of elements in an array.</p> <p>The value of <code>|x|</code> is defined as:</p> <ul> <li><code>x</code> if <code>x &gt;= 0</code>.</li> <li><code>-x</code> if <code>x &lt; 0</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]\nOutput: [2,1,4,1]\nExplanation: The queries are processed as follows:\n- queries[0] = [0,1]: The subarray is [1,3] and the minimum absolute difference is |1-3| = 2.\n- queries[1] = [1,2]: The subarray is [3,4] and the minimum absolute difference is |3-4| = 1.\n- queries[2] = [2,3]: The subarray is [4,8] and the minimum absolute difference is |4-8| = 4.\n- queries[3] = [0,3]: The subarray is [1,3,4,8] and the minimum absolute difference is |3-4| = 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]\nOutput: [-1,1,1,3]\nExplanation: The queries are processed as follows:\n- queries[0] = [2,3]: The subarray is [2,2] and the minimum absolute difference is -1 because all the\n  elements are the same.\n- queries[1] = [0,2]: The subarray is [4,5,2] and the minimum absolute difference is |4-5| = 1.\n- queries[2] = [0,5]: The subarray is [4,5,2,2,7,10] and the minimum absolute difference is |4-5| = 1.\n- queries[3] = [3,5]: The subarray is [2,7,10] and the minimum absolute difference is |7-10| = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> <li><code>1 &lt;= queries.length &lt;= 2\u00a0* 10<sup>4</sup></code></li> <li><code>0 &lt;= l<sub>i</sub> &lt; r<sub>i</sub> &lt; nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/1907/","title":"1907. Count Salary Categories","text":"Problem <p>Table: <code>Accounts</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| account_id  | int  |\n| income      | int  |\n+-------------+------+\naccount_id is the primary key (column with unique values) for this table.\nEach row contains information about the monthly income for one bank account.\n</pre> <p> </p> <p>Write a solution\u00a0to calculate the number of bank accounts for each salary category. The salary categories are:</p> <ul> <li><code>\"Low Salary\"</code>: All the salaries strictly less than <code>$20000</code>.</li> <li><code>\"Average Salary\"</code>: All the salaries in the inclusive range <code>[$20000, $50000]</code>.</li> <li><code>\"High Salary\"</code>: All the salaries strictly greater than <code>$50000</code>.</li> </ul> <p>The result table must contain all three categories. If there are no accounts in a category,\u00a0return\u00a0<code>0</code>.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nAccounts table:\n+------------+--------+\n| account_id | income |\n+------------+--------+\n| 3          | 108939 |\n| 2          | 12747  |\n| 8          | 87709  |\n| 6          | 91796  |\n+------------+--------+\nOutput: \n+----------------+----------------+\n| category       | accounts_count |\n+----------------+----------------+\n| Low Salary     | 1              |\n| Average Salary | 0              |\n| High Salary    | 3              |\n+----------------+----------------+\nExplanation: \nLow Salary: Account 2.\nAverage Salary: No accounts.\nHigh Salary: Accounts 3, 6, and 8.\n</pre>"},{"location":"LeetCode_Problems/1908/","title":"1908. Game of Nim","text":"Problem"},{"location":"LeetCode_Problems/1909/","title":"1909. Remove One Element to Make the Array Strictly Increasing","text":"Problem <p>Given a 0-indexed integer array <code>nums</code>, return <code>true</code> if it can be made strictly increasing after removing exactly one element, or <code>false</code> otherwise. If the array is already strictly increasing, return <code>true</code>.</p> <p>The array <code>nums</code> is strictly increasing if <code>nums[i - 1] &lt; nums[i]</code> for each index <code>(1 &lt;= i &lt; nums.length).</code></p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,10,5,7]\nOutput: true\nExplanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].\n[1,2,5,7] is strictly increasing, so return true.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,1,2]\nOutput: false\nExplanation:\n[3,1,2] is the result of removing the element at index 0.\n[2,1,2] is the result of removing the element at index 1.\n[2,3,2] is the result of removing the element at index 2.\n[2,3,1] is the result of removing the element at index 3.\nNo resulting array is strictly increasing, so return false.</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,1]\nOutput: false\nExplanation: The result of removing any element is [1,1].\n[1,1] is not strictly increasing, so return false.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1910/","title":"1910. Remove All Occurrences of a Substring","text":"Problem <p>Given two strings <code>s</code> and <code>part</code>, perform the following operation on <code>s</code> until all occurrences of the substring <code>part</code> are removed:</p> <ul> <li>Find the leftmost occurrence of the substring <code>part</code> and remove it from <code>s</code>.</li> </ul> <p>Return <code>s</code> after removing all occurrences of <code>part</code>.</p> <p>A substring is a contiguous sequence of characters in a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"daabcbaabcbc\", part = \"abc\"\nOutput: \"dab\"\nExplanation: The following operations are done:\n- s = \"daabcbaabcbc\", remove \"abc\" starting at index 2, so s = \"dabaabcbc\".\n- s = \"dabaabcbc\", remove \"abc\" starting at index 4, so s = \"dababc\".\n- s = \"dababc\", remove \"abc\" starting at index 3, so s = \"dab\".\nNow s has no occurrences of \"abc\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"axxxxyyyyb\", part = \"xy\"\nOutput: \"ab\"\nExplanation: The following operations are done:\n- s = \"axxxxyyyyb\", remove \"xy\" starting at index 4 so s = \"axxxyyyb\".\n- s = \"axxxyyyb\", remove \"xy\" starting at index 3 so s = \"axxyyb\".\n- s = \"axxyyb\", remove \"xy\" starting at index 2 so s = \"axyb\".\n- s = \"axyb\", remove \"xy\" starting at index 1 so s = \"ab\".\nNow s has no occurrences of \"xy\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>1 &lt;= part.length &lt;= 1000</code></li> <li><code>s</code>\u200b\u200b\u200b\u200b\u200b\u200b and <code>part</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1911/","title":"1911. Maximum Alternating Subsequence Sum","text":"Problem <p>The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.</p> <ul> <li>For example, the alternating sum of <code>[4,2,5,3]</code> is <code>(4 + 5) - (2 + 3) = 4</code>.</li> </ul> <p>Given an array <code>nums</code>, return the maximum alternating sum of any subsequence of <code>nums</code> (after reindexing the elements of the subsequence).</p> <ul> </ul> <p>A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, <code>[2,7,4]</code> is a subsequence of <code>[4,2,3,7,2,1,4]</code> (the underlined elements), while <code>[2,4,2]</code> is not.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,2,5,3]\nOutput: 7\nExplanation: It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,6,7,8]\nOutput: 8\nExplanation: It is optimal to choose the subsequence [8] with alternating sum 8.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [6,2,1,2,4,5]\nOutput: 10\nExplanation: It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1912/","title":"1912. Design Movie Rental System","text":"Problem <p>You have a movie renting company consisting of <code>n</code> shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies.</p> <p>Each movie is given as a 2D integer array <code>entries</code> where <code>entries[i] = [shop<sub>i</sub>, movie<sub>i</sub>, price<sub>i</sub>]</code> indicates that there is a copy of movie <code>movie<sub>i</sub></code> at shop <code>shop<sub>i</sub></code> with a rental price of <code>price<sub>i</sub></code>. Each shop carries at most one copy of a movie <code>movie<sub>i</sub></code>.</p> <p>The system should support the following functions:</p> <ul> <li>Search: Finds the cheapest 5 shops that have an unrented copy of a given movie. The shops should be sorted by price in ascending order, and in case of a tie, the one with the smaller <code>shop<sub>i</sub></code> should appear first. If there are less than 5 matching shops, then all of them should be returned. If no shop has an unrented copy, then an empty list should be returned.</li> <li>Rent: Rents an unrented copy of a given movie from a given shop.</li> <li>Drop: Drops off a previously rented copy of a given movie at a given shop.</li> <li>Report: Returns the cheapest 5 rented movies (possibly of the same movie ID) as a 2D list <code>res</code> where <code>res[j] = [shop<sub>j</sub>, movie<sub>j</sub>]</code> describes that the <code>j<sup>th</sup></code> cheapest rented movie <code>movie<sub>j</sub></code> was rented from the shop <code>shop<sub>j</sub></code>. The movies in <code>res</code> should be sorted by price in ascending order, and in case of a tie, the one with the smaller <code>shop<sub>j</sub></code> should appear first, and if there is still tie, the one with the smaller <code>movie<sub>j</sub></code> should appear first. If there are fewer than 5 rented movies, then all of them should be returned. If no movies are currently being rented, then an empty list should be returned.</li> </ul> <p>Implement the <code>MovieRentingSystem</code> class:</p> <ul> <li><code>MovieRentingSystem(int n, int[][] entries)</code> Initializes the <code>MovieRentingSystem</code> object with <code>n</code> shops and the movies in <code>entries</code>.</li> <li><code>List&lt;Integer&gt; search(int movie)</code> Returns a list of shops that have an unrented copy of the given <code>movie</code> as described above.</li> <li><code>void rent(int shop, int movie)</code> Rents the given <code>movie</code> from the given <code>shop</code>.</li> <li><code>void drop(int shop, int movie)</code> Drops off a previously rented <code>movie</code> at the given <code>shop</code>.</li> <li><code>List&lt;List&lt;Integer&gt;&gt; report()</code> Returns a list of cheapest rented movies as described above.</li> </ul> <p>Note: The test cases will be generated such that <code>rent</code> will only be called if the shop has an unrented copy of the movie, and <code>drop</code> will only be called if the shop had previously rented out the movie.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"MovieRentingSystem\", \"search\", \"rent\", \"rent\", \"report\", \"drop\", \"search\"]\n[[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]\nOutput\n[null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]\n\nExplanation\nMovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]);\nmovieRentingSystem.search(1);  // return [1, 0, 2], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number.\nmovieRentingSystem.rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2,3].\nmovieRentingSystem.rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1].\nmovieRentingSystem.report();   // return [[0, 1], [1, 2]]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1.\nmovieRentingSystem.drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1,2].\nmovieRentingSystem.search(2);  // return [0, 1]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 3 * 10<sup>5</sup></code></li> <li><code>1 &lt;= entries.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= shop<sub>i</sub> &lt; n</code></li> <li><code>1 &lt;= movie<sub>i</sub>, price<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>Each shop carries at most one copy of a movie <code>movie<sub>i</sub></code>.</li> <li>At most <code>10<sup>5</sup></code> calls in total will be made to <code>search</code>, <code>rent</code>, <code>drop</code> and <code>report</code>.</li> </ul>"},{"location":"LeetCode_Problems/1913/","title":"1913. Maximum Product Difference Between Two Pairs","text":"Problem <p>The product difference between two pairs <code>(a, b)</code> and <code>(c, d)</code> is defined as <code>(a * b) - (c * d)</code>.</p> <ul> <li>For example, the product difference between <code>(5, 6)</code> and <code>(2, 7)</code> is <code>(5 * 6) - (2 * 7) = 16</code>.</li> </ul> <p>Given an integer array <code>nums</code>, choose four distinct indices <code>w</code>, <code>x</code>, <code>y</code>, and <code>z</code> such that the product difference between pairs <code>(nums[w], nums[x])</code> and <code>(nums[y], nums[z])</code> is maximized.</p> <p>Return the maximum such product difference.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,6,2,7,4]\nOutput: 34\nExplanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).\nThe product difference is (6 * 7) - (2 * 4) = 34.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,2,5,9,7,4,8]\nOutput: 64\nExplanation: We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).\nThe product difference is (9 * 8) - (2 * 4) = 64.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>4 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1914/","title":"1914. Cyclically Rotating a Grid","text":"Problem <p>You are given an <code>m x n</code> integer matrix <code>grid</code>\u200b\u200b\u200b, where <code>m</code> and <code>n</code> are both even integers, and an integer <code>k</code>.</p> <p>The matrix is composed of several layers, which is shown in the below image, where each color is its own layer:</p> <p></p> <p>A cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. An example rotation is shown below:</p> <p></p> <p>Return the matrix after applying <code>k</code> cyclic rotations to it.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[40,10],[30,20]], k = 1\nOutput: [[10,20],[40,30]]\nExplanation: The figures above represent the grid at every state.\n</pre> <p>Example 2:</p> <p> </p> <pre>\nInput: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2\nOutput: [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]\nExplanation: The figures above represent the grid at every state.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>2 &lt;= m, n &lt;= 50</code></li> <li>Both <code>m</code> and <code>n</code> are even integers.</li> <li><code>1 &lt;= grid[i][j] &lt;=5000</code></li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1915/","title":"1915. Number of Wonderful Substrings","text":"Problem <p>A wonderful string is a string where at most one letter appears an odd number of times.</p> <ul> <li>For example, <code>\"ccjjc\"</code> and <code>\"abab\"</code> are wonderful, but <code>\"ab\"</code> is not.</li> </ul> <p>Given a string <code>word</code> that consists of the first ten lowercase English letters (<code>'a'</code> through <code>'j'</code>), return the number of wonderful non-empty substrings in <code>word</code>. If the same substring appears multiple times in <code>word</code>, then count each occurrence separately.</p> <p>A substring is a contiguous sequence of characters in a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"aba\"\nOutput: 4\nExplanation: The four wonderful substrings are underlined below:\n- \"aba\" -&gt; \"a\"\n- \"aba\" -&gt; \"b\"\n- \"aba\" -&gt; \"a\"\n- \"aba\" -&gt; \"aba\"\n</pre> <p>Example 2:</p> <pre>\nInput: word = \"aabb\"\nOutput: 9\nExplanation: The nine wonderful substrings are underlined below:\n- \"aabb\" -&gt; \"a\"\n- \"aabb\" -&gt; \"aa\"\n- \"aabb\" -&gt; \"aab\"\n- \"aabb\" -&gt; \"aabb\"\n- \"aabb\" -&gt; \"a\"\n- \"aabb\" -&gt; \"abb\"\n- \"aabb\" -&gt; \"b\"\n- \"aabb\" -&gt; \"bb\"\n- \"aabb\" -&gt; \"b\"\n</pre> <p>Example 3:</p> <pre>\nInput: word = \"he\"\nOutput: 2\nExplanation: The two wonderful substrings are underlined below:\n- \"he\" -&gt; \"h\"\n- \"he\" -&gt; \"e\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li> <li><code>word</code> consists of lowercase English letters from <code>'a'</code>\u00a0to <code>'j'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1916/","title":"1916. Count Ways to Build Rooms in an Ant Colony","text":"Problem <p>You are an ant tasked with adding <code>n</code> new rooms numbered <code>0</code> to <code>n-1</code> to your colony. You are given the expansion plan as a 0-indexed integer array of length <code>n</code>, <code>prevRoom</code>, where <code>prevRoom[i]</code> indicates that you must build room <code>prevRoom[i]</code> before building room <code>i</code>, and these two rooms must be connected directly. Room <code>0</code> is already built, so <code>prevRoom[0] = -1</code>. The expansion\u00a0plan is given such that once all the rooms are built, every room will be reachable from room <code>0</code>.</p> <p>You can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected.\u00a0You can choose to build any room as long as its previous room\u00a0is already built.</p> <p>Return the number of different orders you can build all the rooms in. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: prevRoom = [-1,0,1]\nOutput: 1\nExplanation:\u00a0There is only one way to build the additional rooms: 0 \u2192 1 \u2192 2\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: prevRoom = [-1,0,0,1,2]\nOutput: 6\nExplanation:\nThe 6 ways are:\n0 \u2192 1 \u2192 3 \u2192 2 \u2192 4\n0 \u2192 2 \u2192 4 \u2192 1 \u2192 3\n0 \u2192 1 \u2192 2 \u2192 3 \u2192 4\n0 \u2192 1 \u2192 2 \u2192 4 \u2192 3\n0 \u2192 2 \u2192 1 \u2192 3 \u2192 4\n0 \u2192 2 \u2192 1 \u2192 4 \u2192 3\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == prevRoom.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>prevRoom[0] == -1</code></li> <li><code>0 &lt;= prevRoom[i] &lt; n</code> for all <code>1 &lt;= i &lt; n</code></li> <li>Every room is reachable from room <code>0</code> once all the rooms are built.</li> </ul>"},{"location":"LeetCode_Problems/1917/","title":"1917. Leetcodify Friends Recommendations","text":"Problem"},{"location":"LeetCode_Problems/1918/","title":"1918. Kth Smallest Subarray Sum","text":"Problem"},{"location":"LeetCode_Problems/1919/","title":"1919. Leetcodify Similar Friends","text":"Problem"},{"location":"LeetCode_Problems/1920/","title":"1920. Build Array from Permutation","text":"Problem <p>Given a zero-based permutation <code>nums</code> (0-indexed), build an array <code>ans</code> of the same length where <code>ans[i] = nums[nums[i]]</code> for each <code>0 &lt;= i &lt; nums.length</code> and return it.</p> <p>A zero-based permutation <code>nums</code> is an array of distinct integers from <code>0</code> to <code>nums.length - 1</code> (inclusive).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,2,1,5,3,4]\nOutput: [0,1,2,4,5,3]\nExplanation: The array ans is built as follows: \nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]\n    = [0,1,2,4,5,3]</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,0,1,2,3,4]\nOutput: [4,5,0,1,2,3]\nExplanation: The array ans is built as follows:\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]\n    = [4,5,0,1,2,3]</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt; nums.length</code></li> <li>The elements in <code>nums</code> are distinct.</li> </ul> <p> </p> <p>Follow-up: Can you solve it without using an extra space (i.e., <code>O(1)</code> memory)?</p>"},{"location":"LeetCode_Problems/1921/","title":"1921. Eliminate Maximum Number of Monsters","text":"Problem <p>You are playing a video game where you are defending your city from a group of <code>n</code> monsters. You are given a 0-indexed integer array <code>dist</code> of size <code>n</code>, where <code>dist[i]</code> is the initial distance in kilometers of the <code>i<sup>th</sup></code> monster from the city.</p> <p>The monsters walk toward the city at a constant speed. The speed of each monster is given to you in an integer array <code>speed</code> of size <code>n</code>, where <code>speed[i]</code> is the speed of the <code>i<sup>th</sup></code> monster in kilometers per minute.</p> <p>You have a weapon that, once fully charged, can eliminate a single monster. However, the weapon takes one minute to charge. The weapon is fully charged at the very start.</p> <p>You lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, and the game ends before you can use your weapon.</p> <p>Return the maximum number of monsters that you can eliminate before you lose, or <code>n</code> if you can eliminate all the monsters before they reach the city.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: dist = [1,3,4], speed = [1,1,1]\nOutput: 3\nExplanation:\nIn the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.\nAfter a minute, the distances of the monsters are [X,X,2]. You eliminate the thrid monster.\nAll 3 monsters can be eliminated.</pre> <p>Example 2:</p> <pre>\nInput: dist = [1,1,2,3], speed = [1,1,1,1]\nOutput: 1\nExplanation:\nIn the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,1,2], so you lose.\nYou can only eliminate 1 monster.\n</pre> <p>Example 3:</p> <pre>\nInput: dist = [3,2,4], speed = [5,3,2]\nOutput: 1\nExplanation:\nIn the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,2], so you lose.\nYou can only eliminate 1 monster.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == dist.length == speed.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= dist[i], speed[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1922/","title":"1922. Count Good Numbers","text":"Problem <p>A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (<code>2</code>, <code>3</code>, <code>5</code>, or <code>7</code>).</p> <ul> <li>For example, <code>\"2582\"</code> is good because the digits (<code>2</code> and <code>8</code>) at even positions are even and the digits (<code>5</code> and <code>2</code>) at odd positions are prime. However, <code>\"3245\"</code> is not good because <code>3</code> is at an even index but is not even.</li> </ul> <p>Given an integer <code>n</code>, return the total number of good digit strings of length <code>n</code>. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A digit string is a string consisting of digits <code>0</code> through <code>9</code> that may contain leading zeros.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: 5\nExplanation: The good numbers of length 1 are \"0\", \"2\", \"4\", \"6\", \"8\".\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4\nOutput: 400\n</pre> <p>Example 3:</p> <pre>\nInput: n = 50\nOutput: 564908303\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>15</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1923/","title":"1923. Longest Common Subpath","text":"Problem <p>There is a country of <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code>. In this country, there is a road connecting every pair of cities.</p> <p>There are <code>m</code> friends numbered from <code>0</code> to <code>m - 1</code> who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city more than once, but the same city will not be listed consecutively.</p> <p>Given an integer <code>n</code> and a 2D integer array <code>paths</code> where <code>paths[i]</code> is an integer array representing the path of the <code>i<sup>th</sup></code> friend, return the length of the longest common subpath that is shared by every friend's path, or <code>0</code> if there is no common subpath at all.</p> <p>A subpath of a path is a contiguous sequence of cities within that path.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5, paths = [[0,1,2,3,4],\n                       [2,3,4],\n                       [4,0,1,2,3]]\nOutput: 2\nExplanation: The longest common subpath is [2,3].\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, paths = [[0],[1],[2]]\nOutput: 0\nExplanation: There is no common subpath shared by the three paths.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 5, paths = [[0,1,2,3,4],\n                       [4,3,2,1,0]]\nOutput: 1\nExplanation: The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>m == paths.length</code></li> <li><code>2 &lt;= m &lt;= 10<sup>5</sup></code></li> <li><code>sum(paths[i].length) &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= paths[i][j] &lt; n</code></li> <li>The same city is not listed multiple times consecutively in <code>paths[i]</code>.</li> </ul>"},{"location":"LeetCode_Problems/1924/","title":"1924. Erect the Fence II","text":"Problem"},{"location":"LeetCode_Problems/1925/","title":"1925. Count Square Sum Triples","text":"Problem <p>A square triple <code>(a,b,c)</code> is a triple where <code>a</code>, <code>b</code>, and <code>c</code> are integers and <code>a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup></code>.</p> <p>Given an integer <code>n</code>, return the number of square triples such that <code>1 &lt;= a, b, c &lt;= n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5\nOutput: 2\nExplanation: The square triples are (3,4,5) and (4,3,5).\n</pre> <p>Example 2:</p> <pre>\nInput: n = 10\nOutput: 4\nExplanation: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 250</code></li> </ul>"},{"location":"LeetCode_Problems/1926/","title":"1926. Nearest Exit from Entrance in Maze","text":"Problem <p>You are given an <code>m x n</code> matrix <code>maze</code> (0-indexed) with empty cells (represented as <code>'.'</code>) and walls (represented as <code>'+'</code>). You are also given the <code>entrance</code> of the maze, where <code>entrance = [entrance<sub>row</sub>, entrance<sub>col</sub>]</code> denotes the row and column of the cell you are initially standing at.</p> <p>In one step, you can move one cell up, down, left, or right. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the nearest exit from the <code>entrance</code>. An exit is defined as an empty cell that is at the border of the <code>maze</code>. The <code>entrance</code> does not count as an exit.</p> <p>Return the number of steps in the shortest path from the <code>entrance</code> to the nearest exit, or <code>-1</code> if no such path exists.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: maze = [[\"+\",\"+\",\".\",\"+\"],[\".\",\".\",\".\",\"+\"],[\"+\",\"+\",\"+\",\".\"]], entrance = [1,2]\nOutput: 1\nExplanation: There are 3 exits in this maze at [1,0], [0,2], and [2,3].\nInitially, you are at the entrance cell [1,2].\n- You can reach [1,0] by moving 2 steps left.\n- You can reach [0,2] by moving 1 step up.\nIt is impossible to reach [2,3] from the entrance.\nThus, the nearest exit is [0,2], which is 1 step away.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: maze = [[\"+\",\"+\",\"+\"],[\".\",\".\",\".\"],[\"+\",\"+\",\"+\"]], entrance = [1,0]\nOutput: 2\nExplanation: There is 1 exit in this maze at [1,2].\n[1,0] does not count as an exit since it is the entrance cell.\nInitially, you are at the entrance cell [1,0].\n- You can reach [1,2] by moving 2 steps right.\nThus, the nearest exit is [1,2], which is 2 steps away.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: maze = [[\".\",\"+\"]], entrance = [0,0]\nOutput: -1\nExplanation: There are no exits in this maze.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>maze.length == m</code></li> <li><code>maze[i].length == n</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>maze[i][j]</code> is either <code>'.'</code> or <code>'+'</code>.</li> <li><code>entrance.length == 2</code></li> <li><code>0 &lt;= entrance<sub>row</sub> &lt; m</code></li> <li><code>0 &lt;= entrance<sub>col</sub> &lt; n</code></li> <li><code>entrance</code> will always be an empty cell.</li> </ul>"},{"location":"LeetCode_Problems/1927/","title":"1927. Sum Game","text":"Problem <p>Alice and Bob take turns playing a game, with Alice\u00a0starting first.</p> <p>You are given a string <code>num</code> of even length consisting of digits and <code>'?'</code> characters. On each turn, a player will do the following if there is still at least one <code>'?'</code> in <code>num</code>:</p> <ol> <li>Choose an index <code>i</code> where <code>num[i] == '?'</code>.</li> <li>Replace <code>num[i]</code> with any digit between <code>'0'</code> and <code>'9'</code>.</li> </ol> <p>The game ends when there are no more <code>'?'</code> characters in <code>num</code>.</p> <p>For Bob\u00a0to win, the sum of the digits in the first half of <code>num</code> must be equal to the sum of the digits in the second half. For Alice\u00a0to win, the sums must not be equal.</p> <ul> <li>For example, if the game ended with <code>num = \"243801\"</code>, then Bob\u00a0wins because <code>2+4+3 = 8+0+1</code>. If the game ended with <code>num = \"243803\"</code>, then Alice\u00a0wins because <code>2+4+3 != 8+0+3</code>.</li> </ul> <p>Assuming Alice and Bob play optimally, return <code>true</code> if Alice will win and <code>false</code> if Bob will win.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"5023\"\nOutput: false\nExplanation: There are no moves to be made.\nThe sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3.\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"25??\"\nOutput: true\nExplanation: Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal.\n</pre> <p>Example 3:</p> <pre>\nInput: num = \"?3295???\"\nOutput: false\nExplanation: It can be proven that Bob will always win. One possible outcome is:\n- Alice replaces the first '?' with '9'. num = \"93295???\".\n- Bob replaces one of the '?' in the right half with '9'. num = \"932959??\".\n- Alice replaces one of the '?' in the right half with '2'. num = \"9329592?\".\n- Bob replaces the last '?' in the right half with '7'. num = \"93295927\".\nBob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= num.length &lt;= 10<sup>5</sup></code></li> <li><code>num.length</code> is even.</li> <li><code>num</code> consists of only digits and <code>'?'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1928/","title":"1928. Minimum Cost to Reach Destination in Time","text":"Problem <p>There is a country of <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code> where all the cities are connected by bi-directional roads. The roads are represented as a 2D integer array <code>edges</code> where <code>edges[i] = [x<sub>i</sub>, y<sub>i</sub>, time<sub>i</sub>]</code> denotes a road between cities <code>x<sub>i</sub></code> and <code>y<sub>i</sub></code> that takes <code>time<sub>i</sub></code> minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.</p> <p>Each time you pass through a city, you must pay a passing fee. This is represented as a 0-indexed integer array <code>passingFees</code> of length <code>n</code> where <code>passingFees[j]</code> is the amount of dollars you must pay when you pass through city <code>j</code>.</p> <p>In the beginning, you are at city <code>0</code> and want to reach city <code>n - 1</code> in <code>maxTime</code> minutes or less. The cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities).</p> <p>Given <code>maxTime</code>, <code>edges</code>, and <code>passingFees</code>, return the minimum cost to complete your journey, or <code>-1</code> if you cannot complete it within <code>maxTime</code> minutes.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\nOutput: 11\nExplanation: The path to take is 0 -&gt; 1 -&gt; 2 -&gt; 5, which takes 30 minutes and has $11 worth of passing fees.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\nOutput: 48\nExplanation: The path to take is 0 -&gt; 3 -&gt; 4 -&gt; 5, which takes 26 minutes and has $48 worth of passing fees.\nYou cannot take path 0 -&gt; 1 -&gt; 2 -&gt; 5 since it would take too long.\n</pre> <p>Example 3:</p> <pre>\nInput: maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\nOutput: -1\nExplanation: There is no way to reach city 5 from city 0 within 25 minutes.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= maxTime &lt;= 1000</code></li> <li><code>n == passingFees.length</code></li> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>n - 1 &lt;= edges.length &lt;= 1000</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n - 1</code></li> <li><code>1 &lt;= time<sub>i</sub> &lt;= 1000</code></li> <li><code>1 &lt;= passingFees[j] &lt;= 1000</code> </li> <li>The graph may contain multiple edges between two nodes.</li> <li>The graph does not contain self loops.</li> </ul>"},{"location":"LeetCode_Problems/1929/","title":"1929. Concatenation of Array","text":"Problem <p>Given an integer array <code>nums</code> of length <code>n</code>, you want to create an array <code>ans</code> of length <code>2n</code> where <code>ans[i] == nums[i]</code> and <code>ans[i + n] == nums[i]</code> for <code>0 &lt;= i &lt; n</code> (0-indexed).</p> <p>Specifically, <code>ans</code> is the concatenation of two <code>nums</code> arrays.</p> <p>Return the array <code>ans</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,1]\nOutput: [1,2,1,1,2,1]\nExplanation: The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]\n- ans = [1,2,1,1,2,1]</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,2,1]\nOutput: [1,3,2,1,1,3,2,1]\nExplanation: The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]\n- ans = [1,3,2,1,1,3,2,1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1930/","title":"1930. Unique Length-3 Palindromic Subsequences","text":"Problem <p>Given a string <code>s</code>, return the number of unique palindromes of length three that are a subsequence of <code>s</code>.</p> <p>Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.</p> <p>A palindrome is a string that reads the same forwards and backwards.</p> <p>A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.</p> <ul> <li>For example, <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aabca\"\nOutput: 3\nExplanation: The 3 palindromic subsequences of length 3 are:\n- \"aba\" (subsequence of \"aabca\")\n- \"aaa\" (subsequence of \"aabca\")\n- \"aca\" (subsequence of \"aabca\")\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"adc\"\nOutput: 0\nExplanation: There are no palindromic subsequences of length 3 in \"adc\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"bbcbaba\"\nOutput: 4\nExplanation: The 4 palindromic subsequences of length 3 are:\n- \"bbb\" (subsequence of \"bbcbaba\")\n- \"bcb\" (subsequence of \"bbcbaba\")\n- \"bab\" (subsequence of \"bbcbaba\")\n- \"aba\" (subsequence of \"bbcbaba\")\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1931/","title":"1931. Painting a Grid With Three Different Colors","text":"Problem <p>You are given two integers <code>m</code> and <code>n</code>. Consider an <code>m x n</code> grid where each cell is initially white. You can paint each cell red, green, or blue. All cells must be painted.</p> <p>Return the number of ways to color the grid with no two adjacent cells having the same color. Since the answer can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: m = 1, n = 1\nOutput: 3\nExplanation: The three possible colorings are shown in the image above.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: m = 1, n = 2\nOutput: 6\nExplanation: The six possible colorings are shown in the image above.\n</pre> <p>Example 3:</p> <pre>\nInput: m = 5, n = 5\nOutput: 580986\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m &lt;= 5</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1932/","title":"1932. Merge BSTs to Create Single BST","text":"Problem <p>You are given <code>n</code> BST (binary search tree) root nodes for <code>n</code> separate BSTs stored in an array <code>trees</code> (0-indexed). Each BST in <code>trees</code> has at most 3 nodes, and no two roots have the same value. In one operation, you can:</p> <ul> <li>Select two distinct indices <code>i</code> and <code>j</code> such that the value stored at one of the leaves of <code>trees[i]</code> is equal to the root value of <code>trees[j]</code>.</li> <li>Replace the leaf node in <code>trees[i]</code> with <code>trees[j]</code>.</li> <li>Remove <code>trees[j]</code> from <code>trees</code>.</li> </ul> <p>Return the root of the resulting BST if it is possible to form a valid BST after performing <code>n - 1</code> operations, or <code>null</code> if it is impossible to create a valid BST.</p> <p>A BST (binary search tree) is a binary tree where each node satisfies the following property:</p> <ul> <li>Every node in the node's left subtree has a value\u00a0strictly less\u00a0than the node's value.</li> <li>Every node in the node's right subtree has a value\u00a0strictly greater\u00a0than the node's value.</li> </ul> <p>A leaf is a node that has no children.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: trees = [[2,1],[3,2,5],[5,4]]\nOutput: [3,2,5,1,null,4]\nExplanation:\nIn the first operation, pick i=1 and j=0, and merge trees[0] into trees[1].\nDelete trees[0], so trees = [[3,2,5,1],[5,4]].\n\nIn the second operation, pick i=0 and j=1, and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[3,2,5,1,null,4]].\n\nThe resulting tree, shown above, is a valid BST, so return its root.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: trees = [[5,3,8],[3,2,6]]\nOutput: []\nExplanation:\nPick i=0 and j=1 and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[5,3,8,2,6]].\n\nThe resulting tree is shown above. This is the only valid operation that can be performed, but the resulting tree is not a valid BST, so return null.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: trees = [[5,4],[3]]\nOutput: []\nExplanation: It is impossible to perform any operations.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == trees.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li>The number of nodes in each tree is in the range <code>[1, 3]</code>.</li> <li>Each node in the input may have children but no grandchildren.</li> <li>No two roots of <code>trees</code> have the same value.</li> <li>All the trees in the input are valid BSTs.</li> <li><code>1 &lt;= TreeNode.val &lt;= 5 * 10<sup>4</sup></code>.</li> </ul>"},{"location":"LeetCode_Problems/1933/","title":"1933. Check if String Is Decomposable Into Value-Equal Substrings","text":"Problem"},{"location":"LeetCode_Problems/1934/","title":"1934. Confirmation Rate","text":"Problem <p>Table: <code>Signups</code></p> <pre>\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| user_id        | int      |\n| time_stamp     | datetime |\n+----------------+----------+\nuser_id is the column of unique values for this table.\nEach row contains information about the signup time for the user with ID user_id.\n</pre> <p> </p> <p>Table: <code>Confirmations</code></p> <pre>\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| user_id        | int      |\n| time_stamp     | datetime |\n| action         | ENUM     |\n+----------------+----------+\n(user_id, time_stamp) is the primary key (combination of columns with unique values) for this table.\nuser_id is a foreign key (reference column) to the Signups table.\naction is an ENUM (category) of the type ('confirmed', 'timeout')\nEach row of this table indicates that the user with ID user_id requested a confirmation message at time_stamp and that confirmation message was either confirmed ('confirmed') or expired without confirming ('timeout').\n</pre> <p> </p> <p>The confirmation rate of a user is the number of <code>'confirmed'</code> messages divided by the total number of requested confirmation messages. The confirmation rate of a user that did not request any confirmation messages is <code>0</code>. Round the confirmation rate to two decimal places.</p> <p>Write a solution to find the confirmation rate of each user.</p> <p>Return the result table in any order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nSignups table:\n+---------+---------------------+\n| user_id | time_stamp          |\n+---------+---------------------+\n| 3       | 2020-03-21 10:16:13 |\n| 7       | 2020-01-04 13:57:59 |\n| 2       | 2020-07-29 23:09:44 |\n| 6       | 2020-12-09 10:39:37 |\n+---------+---------------------+\nConfirmations table:\n+---------+---------------------+-----------+\n| user_id | time_stamp          | action    |\n+---------+---------------------+-----------+\n| 3       | 2021-01-06 03:30:46 | timeout   |\n| 3       | 2021-07-14 14:00:00 | timeout   |\n| 7       | 2021-06-12 11:57:29 | confirmed |\n| 7       | 2021-06-13 12:58:28 | confirmed |\n| 7       | 2021-06-14 13:59:27 | confirmed |\n| 2       | 2021-01-22 00:00:00 | confirmed |\n| 2       | 2021-02-28 23:59:59 | timeout   |\n+---------+---------------------+-----------+\nOutput: \n+---------+-------------------+\n| user_id | confirmation_rate |\n+---------+-------------------+\n| 6       | 0.00              |\n| 3       | 0.00              |\n| 7       | 1.00              |\n| 2       | 0.50              |\n+---------+-------------------+\nExplanation: \nUser 6 did not request any confirmation messages. The confirmation rate is 0.\nUser 3 made 2 requests and both timed out. The confirmation rate is 0.\nUser 7 made 3 requests and all were confirmed. The confirmation rate is 1.\nUser 2 made 2 requests where one was confirmed and the other timed out. The confirmation rate is 1 / 2 = 0.5.\n</pre>"},{"location":"LeetCode_Problems/1935/","title":"1935. Maximum Number of Words You Can Type","text":"Problem <p>There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.</p> <p>Given a string <code>text</code> of words separated by a single space (no leading or trailing spaces) and a string <code>brokenLetters</code> of all distinct letter keys that are broken, return the number of words in <code>text</code> you can fully type using this keyboard.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: text = \"hello world\", brokenLetters = \"ad\"\nOutput: 1\nExplanation: We cannot type \"world\" because the 'd' key is broken.\n</pre> <p>Example 2:</p> <pre>\nInput: text = \"leet code\", brokenLetters = \"lt\"\nOutput: 1\nExplanation: We cannot type \"leet\" because the 'l' and 't' keys are broken.\n</pre> <p>Example 3:</p> <pre>\nInput: text = \"leet code\", brokenLetters = \"e\"\nOutput: 0\nExplanation: We cannot type either word because the 'e' key is broken.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= brokenLetters.length &lt;= 26</code></li> <li><code>text</code> consists of words separated by a single space without any leading or trailing spaces.</li> <li>Each word only consists of lowercase English letters.</li> <li><code>brokenLetters</code> consists of distinct lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1936/","title":"1936. Add Minimum Number of Rungs","text":"Problem <p>You are given a strictly increasing integer array <code>rungs</code> that represents the height of rungs on a ladder. You are currently on the floor at height <code>0</code>, and you want to reach the last rung.</p> <p>You are also given an integer <code>dist</code>. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is at most <code>dist</code>. You are able to insert rungs at any positive integer height if a rung is not already there.</p> <p>Return the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rungs = [1,3,5,10], dist = 2\nOutput: 2\nExplanation:\nYou currently cannot reach the last rung.\nAdd rungs at heights 7 and 8 to climb this ladder. \nThe ladder will now have rungs at [1,3,5,7,8,10].\n</pre> <p>Example 2:</p> <pre>\nInput: rungs = [3,6,8,10], dist = 3\nOutput: 0\nExplanation:\nThis ladder can be climbed without adding additional rungs.\n</pre> <p>Example 3:</p> <pre>\nInput: rungs = [3,4,6,7], dist = 2\nOutput: 1\nExplanation:\nYou currently cannot reach the first rung from the ground.\nAdd a rung at height 1 to climb this ladder.\nThe ladder will now have rungs at [1,3,4,6,7].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rungs.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= rungs[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= dist &lt;= 10<sup>9</sup></code></li> <li><code>rungs</code> is strictly increasing.</li> </ul>"},{"location":"LeetCode_Problems/1937/","title":"1937. Maximum Number of Points with Cost","text":"Problem <p>You are given an <code>m x n</code> integer matrix <code>points</code> (0-indexed). Starting with <code>0</code> points, you want to maximize the number of points you can get from the matrix.</p> <p>To gain points, you must pick one cell in each row. Picking the cell at coordinates <code>(r, c)</code> will add <code>points[r][c]</code> to your score.</p> <p>However, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows <code>r</code> and <code>r + 1</code> (where <code>0 &lt;= r &lt; m - 1</code>), picking cells at coordinates <code>(r, c<sub>1</sub>)</code> and <code>(r + 1, c<sub>2</sub>)</code> will subtract <code>abs(c<sub>1</sub> - c<sub>2</sub>)</code> from your score.</p> <p>Return the maximum number of points you can achieve.</p> <p><code>abs(x)</code> is defined as:</p> <ul> <li><code>x</code> for <code>x &gt;= 0</code>.</li> <li><code>-x</code> for <code>x &lt; 0</code>.</li> </ul> <p> </p> <p>Example 1: </p> <p></p> <pre>\nInput: points = [[1,2,3],[1,5,1],[3,1,1]]\nOutput: 9\nExplanation:\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).\nYou add 3 + 5 + 3 = 11 to your score.\nHowever, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.\nYour final score is 11 - 2 = 9.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: points = [[1,5],[2,3],[4,2]]\nOutput: 11\nExplanation:\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).\nYou add 5 + 3 + 4 = 12 to your score.\nHowever, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.\nYour final score is 12 - 1 = 11.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == points.length</code></li> <li><code>n == points[r].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= points[r][c] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1938/","title":"1938. Maximum Genetic Difference Query","text":"Problem <p>There is a rooted tree consisting of <code>n</code> nodes numbered <code>0</code> to <code>n - 1</code>. Each node's number denotes its unique genetic value (i.e. the genetic value of node <code>x</code> is <code>x</code>). The genetic difference between two genetic values is defined as the bitwise-XOR of their values. You are given the integer array <code>parents</code>, where <code>parents[i]</code> is the parent for node <code>i</code>. If node <code>x</code> is the root of the tree, then <code>parents[x] == -1</code>.</p> <p>You are also given the array <code>queries</code> where <code>queries[i] = [node<sub>i</sub>, val<sub>i</sub>]</code>. For each query <code>i</code>, find the maximum genetic difference between <code>val<sub>i</sub></code> and <code>p<sub>i</sub></code>, where <code>p<sub>i</sub></code> is the genetic value of any node that is on the path between <code>node<sub>i</sub></code> and the root (including <code>node<sub>i</sub></code> and the root). More formally, you want to maximize <code>val<sub>i</sub> XOR p<sub>i</sub></code>.</p> <p>Return an array <code>ans</code> where <code>ans[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]\nOutput: [2,3,7]\nExplanation: The queries are processed as follows:\n- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.\n- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.\n- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]\nOutput: [6,14,7]\nExplanation: The queries are processed as follows:\n- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.\n- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.\n- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= parents.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= parents[i] &lt;= parents.length - 1</code> for every node <code>i</code> that is not the root.</li> <li><code>parents[root] == -1</code></li> <li><code>1 &lt;= queries.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>0 &lt;= node<sub>i</sub> &lt;= parents.length - 1</code></li> <li><code>0 &lt;= val<sub>i</sub> &lt;= 2 * 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1939/","title":"1939. Users That Actively Request Confirmation Messages","text":"Problem"},{"location":"LeetCode_Problems/1940/","title":"1940. Longest Common Subsequence Between Sorted Arrays","text":"Problem"},{"location":"LeetCode_Problems/1941/","title":"1941. Check if All Characters Have Equal Number of Occurrences","text":"Problem <p>Given a string <code>s</code>, return <code>true</code> if <code>s</code> is a good string, or <code>false</code> otherwise.</p> <p>A string <code>s</code> is good if all the characters that appear in <code>s</code> have the same number of occurrences (i.e., the same frequency).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abacbc\"\nOutput: true\nExplanation: The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aaabb\"\nOutput: false\nExplanation: The characters that appear in s are 'a' and 'b'.\n'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1942/","title":"1942. The Number of the Smallest Unoccupied Chair","text":"Problem <p>There is a party where <code>n</code> friends numbered from <code>0</code> to <code>n - 1</code> are attending. There is an infinite number of chairs in this party that are numbered from <code>0</code> to <code>infinity</code>. When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.</p> <ul> <li>For example, if chairs <code>0</code>, <code>1</code>, and <code>5</code> are occupied when a friend comes, they will sit on chair number <code>2</code>.</li> </ul> <p>When a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.</p> <p>You are given a 0-indexed 2D integer array <code>times</code> where <code>times[i] = [arrival<sub>i</sub>, leaving<sub>i</sub>]</code>, indicating the arrival and leaving times of the <code>i<sup>th</sup></code> friend respectively, and an integer <code>targetFriend</code>. All arrival times are distinct.</p> <p>Return the chair number that the friend numbered <code>targetFriend</code> will sit on.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: times = [[1,4],[2,3],[4,6]], targetFriend = 1\nOutput: 1\nExplanation: \n- Friend 0 arrives at time 1 and sits on chair 0.\n- Friend 1 arrives at time 2 and sits on chair 1.\n- Friend 1 leaves at time 3 and chair 1 becomes empty.\n- Friend 0 leaves at time 4 and chair 0 becomes empty.\n- Friend 2 arrives at time 4 and sits on chair 0.\nSince friend 1 sat on chair 1, we return 1.\n</pre> <p>Example 2:</p> <pre>\nInput: times = [[3,10],[1,5],[2,6]], targetFriend = 0\nOutput: 2\nExplanation: \n- Friend 1 arrives at time 1 and sits on chair 0.\n- Friend 2 arrives at time 2 and sits on chair 1.\n- Friend 0 arrives at time 3 and sits on chair 2.\n- Friend 1 leaves at time 5 and chair 0 becomes empty.\n- Friend 2 leaves at time 6 and chair 1 becomes empty.\n- Friend 0 leaves at time 10 and chair 2 becomes empty.\nSince friend 0 sat on chair 2, we return 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == times.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>times[i].length == 2</code></li> <li><code>1 &lt;= arrival<sub>i</sub> &lt; leaving<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= targetFriend &lt;= n - 1</code></li> <li>Each <code>arrival<sub>i</sub></code> time is distinct.</li> </ul>"},{"location":"LeetCode_Problems/1943/","title":"1943. Describe the Painting","text":"Problem <p>There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a unique color. You are given a 2D integer array <code>segments</code>, where <code>segments[i] = [start<sub>i</sub>, end<sub>i</sub>, color<sub>i</sub>]</code> represents the half-closed segment <code>[start<sub>i</sub>, end<sub>i</sub>)</code> with <code>color<sub>i</sub></code> as the color.</p> <p>The colors in the overlapping segments of the painting were mixed when it was painted. When two or more colors mix, they form a new color that can be represented as a set of mixed colors.</p> <ul> <li>For example, if colors <code>2</code>, <code>4</code>, and <code>6</code> are mixed, then the resulting mixed color is <code>{2,4,6}</code>.</li> </ul> <p>For the sake of simplicity, you should only output the sum of the elements in the set rather than the full set.</p> <p>You want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors. These segments can be represented by the 2D array <code>painting</code> where <code>painting[j] = [left<sub>j</sub>, right<sub>j</sub>, mix<sub>j</sub>]</code> describes a half-closed segment <code>[left<sub>j</sub>, right<sub>j</sub>)</code> with the mixed color sum of <code>mix<sub>j</sub></code>.</p> <ul> <li>For example, the painting created with <code>segments = [[1,4,5],[1,7,7]]</code> can be described by <code>painting = [[1,4,12],[4,7,7]]</code> because:      <ul> <li><code>[1,4)</code> is colored <code>{5,7}</code> (with a sum of <code>12</code>) from both the first and second segments.</li> <li><code>[4,7)</code> is colored <code>{7}</code> from only the second segment.</li> </ul> </li> </ul> <p>Return the 2D array <code>painting</code> describing the finished painting (excluding any parts that are not painted). You may return the segments in any order.</p> <p>A half-closed segment <code>[a, b)</code> is the section of the number line between points <code>a</code> and <code>b</code> including point <code>a</code> and not including point <code>b</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: segments = [[1,4,5],[4,7,7],[1,7,9]]\nOutput: [[1,4,14],[4,7,16]]\nExplanation: The painting can be described as follows:\n- [1,4) is colored {5,9} (with a sum of 14) from the first and third segments.\n- [4,7) is colored {7,9} (with a sum of 16) from the second and third segments.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: segments = [[1,7,9],[6,8,15],[8,10,7]]\nOutput: [[1,6,9],[6,7,24],[7,8,15],[8,10,7]]\nExplanation: The painting can be described as follows:\n- [1,6) is colored 9 from the first segment.\n- [6,7) is colored {9,15} (with a sum of 24) from the first and second segments.\n- [7,8) is colored 15 from the second segment.\n- [8,10) is colored 7 from the third segment.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]\nOutput: [[1,4,12],[4,7,12]]\nExplanation: The painting can be described as follows:\n- [1,4) is colored {5,7} (with a sum of 12) from the first and second segments.\n- [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments.\nNote that returning a single segment [1,7) is incorrect because the mixed color sets are different.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= segments.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>segments[i].length == 3</code></li> <li><code>1 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= color<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li>Each <code>color<sub>i</sub></code> is distinct.</li> </ul>"},{"location":"LeetCode_Problems/1944/","title":"1944. Number of Visible People in a Queue","text":"Problem <p>There are <code>n</code> people standing in a queue, and they numbered from <code>0</code> to <code>n - 1</code> in left to right order. You are given an array <code>heights</code> of distinct integers where <code>heights[i]</code> represents the height of the <code>i<sup>th</sup></code> person.</p> <p>A person can see another person to their right in the queue if everybody in between is shorter than both of them. More formally, the <code>i<sup>th</sup></code> person can see the <code>j<sup>th</sup></code> person if <code>i &lt; j</code> and <code>min(heights[i], heights[j]) &gt; max(heights[i+1], heights[i+2], ..., heights[j-1])</code>.</p> <p>Return an array <code>answer</code> of length <code>n</code> where <code>answer[i]</code> is the number of people the <code>i<sup>th</sup></code> person can see to their right in the queue.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: heights = [10,6,8,5,11,9]\nOutput: [3,1,2,1,1,0]\nExplanation:\nPerson 0 can see person 1, 2, and 4.\nPerson 1 can see person 2.\nPerson 2 can see person 3 and 4.\nPerson 3 can see person 4.\nPerson 4 can see person 5.\nPerson 5 can see no one since nobody is to the right of them.\n</pre> <p>Example 2:</p> <pre>\nInput: heights = [5,1,2,3,10]\nOutput: [4,1,1,1,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == heights.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= heights[i] &lt;= 10<sup>5</sup></code></li> <li>All the values of <code>heights</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/1945/","title":"1945. Sum of Digits of String After Convert","text":"Problem <p>You are given a string <code>s</code> consisting of lowercase English letters, and an integer <code>k</code>.</p> <p>First, convert <code>s</code> into an integer by replacing each letter with its position in the alphabet (i.e., replace <code>'a'</code> with <code>1</code>, <code>'b'</code> with <code>2</code>, ..., <code>'z'</code> with <code>26</code>). Then, transform the integer by replacing it with the sum of its digits. Repeat the transform operation <code>k</code> times in total.</p> <p>For example, if <code>s = \"zbax\"</code> and <code>k = 2</code>, then the resulting integer would be <code>8</code> by the following operations:</p> <ul> <li>Convert: <code>\"zbax\" \u279d \"(26)(2)(1)(24)\" \u279d \"262124\" \u279d 262124</code></li> <li>Transform #1: <code>262124 \u279d 2 + 6 + 2 + 1 + 2 + 4\u00a0\u279d 17</code></li> <li>Transform #2: <code>17 \u279d 1 + 7 \u279d 8</code></li> </ul> <p>Return the resulting integer after performing the operations described above.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"iiii\", k = 1\nOutput: 36\nExplanation: The operations are as follows:\n- Convert: \"iiii\" \u279d \"(9)(9)(9)(9)\" \u279d \"9999\" \u279d 9999\n- Transform #1: 9999 \u279d 9 + 9 + 9 + 9 \u279d 36\nThus the resulting integer is 36.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"leetcode\", k = 2\nOutput: 6\nExplanation: The operations are as follows:\n- Convert: \"leetcode\" \u279d \"(12)(5)(5)(20)(3)(15)(4)(5)\" \u279d \"12552031545\" \u279d 12552031545\n- Transform #1: 12552031545 \u279d 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 \u279d 33\n- Transform #2: 33 \u279d 3 + 3 \u279d 6\nThus the resulting integer is 6.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"zbax\", k = 2\nOutput: 8\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= 10</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1946/","title":"1946. Largest Number After Mutating Substring","text":"Problem <p>You are given a string <code>num</code>, which represents a large integer. You are also given a 0-indexed integer array <code>change</code> of length <code>10</code> that maps each digit <code>0-9</code> to another digit. More formally, digit <code>d</code> maps to digit <code>change[d]</code>.</p> <p>You may choose to mutate a single substring of <code>num</code>. To mutate a substring, replace each digit <code>num[i]</code> with the digit it maps to in <code>change</code> (i.e. replace <code>num[i]</code> with <code>change[num[i]]</code>).</p> <p>Return a string representing the largest possible integer after mutating (or choosing not to) a single substring of <code>num</code>.</p> <p>A substring is a contiguous sequence of characters within the string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"132\", change = [9,8,5,0,3,6,4,2,6,8]\nOutput: \"832\"\nExplanation: Replace the substring \"1\":\n- 1 maps to change[1] = 8.\nThus, \"132\" becomes \"832\".\n\"832\" is the largest number that can be created, so return it.\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"021\", change = [9,4,3,5,7,2,1,9,0,6]\nOutput: \"934\"\nExplanation: Replace the substring \"021\":\n- 0 maps to change[0] = 9.\n- 2 maps to change[2] = 3.\n- 1 maps to change[1] = 4.\nThus, \"021\" becomes \"934\".\n\"934\" is the largest number that can be created, so return it.\n</pre> <p>Example 3:</p> <pre>\nInput: num = \"5\", change = [1,4,7,5,3,2,5,6,9,4]\nOutput: \"5\"\nExplanation: \"5\" is already the largest number that can be created, so return it.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num.length &lt;= 10<sup>5</sup></code></li> <li><code>num</code> consists of only digits <code>0-9</code>.</li> <li><code>change.length == 10</code></li> <li><code>0 &lt;= change[d] &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/1947/","title":"1947. Maximum Compatibility Score Sum","text":"Problem <p>There is a survey that consists of <code>n</code> questions where each question's answer is either <code>0</code> (no) or <code>1</code> (yes).</p> <p>The survey was given to <code>m</code> students numbered from <code>0</code> to <code>m - 1</code> and <code>m</code> mentors numbered from <code>0</code> to <code>m - 1</code>. The answers of the students are represented by a 2D integer array <code>students</code> where <code>students[i]</code> is an integer array that contains the answers of the <code>i<sup>th</sup></code> student (0-indexed). The answers of the mentors are represented by a 2D integer array <code>mentors</code> where <code>mentors[j]</code> is an integer array that contains the answers of the <code>j<sup>th</sup></code> mentor (0-indexed).</p> <p>Each student will be assigned to one mentor, and each mentor will have one student assigned to them. The compatibility score of a student-mentor pair is the number of answers that are the same for both the student and the mentor.</p> <ul> <li>For example, if the student's answers were <code>[1, 0, 1]</code> and the mentor's answers were <code>[0, 0, 1]</code>, then their compatibility score is 2 because only the second and the third answers are the same.</li> </ul> <p>You are tasked with finding the optimal student-mentor pairings to maximize the sum of the compatibility scores.</p> <p>Given <code>students</code> and <code>mentors</code>, return the maximum compatibility score sum that can be achieved.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]\nOutput: 8\nExplanation:\u00a0We assign students to mentors in the following way:\n- student 0 to mentor 2 with a compatibility score of 3.\n- student 1 to mentor 0 with a compatibility score of 2.\n- student 2 to mentor 1 with a compatibility score of 3.\nThe compatibility score sum is 3 + 2 + 3 = 8.\n</pre> <p>Example 2:</p> <pre>\nInput: students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]\nOutput: 0\nExplanation: The compatibility score of any student-mentor pair is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == students.length == mentors.length</code></li> <li><code>n == students[i].length == mentors[j].length</code></li> <li><code>1 &lt;= m, n &lt;= 8</code></li> <li><code>students[i][k]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>mentors[j][k]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/1948/","title":"1948. Delete Duplicate Folders in System","text":"Problem <p>Due to a bug, there are many duplicate folders in a file system. You are given a 2D array <code>paths</code>, where <code>paths[i]</code> is an array representing an absolute path to the <code>i<sup>th</sup></code> folder in the file system.</p> <ul> <li>For example, <code>[\"one\", \"two\", \"three\"]</code> represents the path <code>\"/one/two/three\"</code>.</li> </ul> <p>Two folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure. The folders do not need to be at the root level to be identical. If two or more folders are identical, then mark the folders as well as all their subfolders.</p> <ul> <li>For example, folders <code>\"/a\"</code> and <code>\"/b\"</code> in the file structure below are identical. They (as well as their subfolders) should all be marked:      <ul> <li><code>/a</code></li> <li><code>/a/x</code></li> <li><code>/a/x/y</code></li> <li><code>/a/z</code></li> <li><code>/b</code></li> <li><code>/b/x</code></li> <li><code>/b/x/y</code></li> <li><code>/b/z</code></li> </ul> </li> <li>However, if the file structure also included the path <code>\"/b/w\"</code>, then the folders <code>\"/a\"</code> and <code>\"/b\"</code> would not be identical. Note that <code>\"/a/x\"</code> and <code>\"/b/x\"</code> would still be considered identical even with the added folder.</li> </ul> <p>Once all the identical folders and their subfolders have been marked, the file system will delete all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.</p> <p>Return the 2D array <code>ans</code> containing the paths of the remaining folders after deleting all the marked folders. The paths may be returned in any order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: paths = [[\"a\"],[\"c\"],[\"d\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"d\",\"a\"]]\nOutput: [[\"d\"],[\"d\",\"a\"]]\nExplanation: The file structure is as shown.\nFolders \"/a\" and \"/c\" (and their subfolders) are marked for deletion because they both contain an empty\nfolder named \"b\".\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: paths = [[\"a\"],[\"c\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"a\",\"b\",\"x\"],[\"a\",\"b\",\"x\",\"y\"],[\"w\"],[\"w\",\"y\"]]\nOutput: [[\"c\"],[\"c\",\"b\"],[\"a\"],[\"a\",\"b\"]]\nExplanation: The file structure is as shown. \nFolders \"/a/b/x\" and \"/w\" (and their subfolders) are marked for deletion because they both contain an empty folder named \"y\".\nNote that folders \"/a\" and \"/c\" are identical after the deletion, but they are not deleted because they were not marked beforehand.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: paths = [[\"a\",\"b\"],[\"c\",\"d\"],[\"c\"],[\"a\"]]\nOutput: [[\"c\"],[\"c\",\"d\"],[\"a\"],[\"a\",\"b\"]]\nExplanation: All folders are unique in the file system.\nNote that the returned array can be in a different order as the order does not matter.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= paths.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= paths[i].length &lt;= 500</code></li> <li><code>1 &lt;= paths[i][j].length &lt;= 10</code></li> <li><code>1 &lt;= sum(paths[i][j].length) &lt;= 2 * 10<sup>5</sup></code></li> <li><code>path[i][j]</code> consists of lowercase English letters.</li> <li>No two paths lead to the same folder.</li> <li>For any folder not at the root level, its parent folder will also be in the input.</li> </ul>"},{"location":"LeetCode_Problems/1949/","title":"1949. Strong Friendship","text":"Problem"},{"location":"LeetCode_Problems/1950/","title":"1950. Maximum of Minimum Values in All Subarrays","text":"Problem"},{"location":"LeetCode_Problems/1951/","title":"1951. All the Pairs With the Maximum Number of Common Followers","text":"Problem"},{"location":"LeetCode_Problems/1952/","title":"1952. Three Divisors","text":"Problem <p>Given an integer <code>n</code>, return <code>true</code> if <code>n</code> has exactly three positive divisors. Otherwise, return <code>false</code>.</p> <p>An integer <code>m</code> is a divisor of <code>n</code> if there exists an integer <code>k</code> such that <code>n = k * m</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2\nOutput: false\nExplantion: 2 has only two divisors: 1 and 2.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4\nOutput: true\nExplantion: 4 has three divisors: 1, 2, and 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1953/","title":"1953. Maximum Number of Weeks for Which You Can Work","text":"Problem <p>There are <code>n</code> projects numbered from <code>0</code> to <code>n - 1</code>. You are given an integer array <code>milestones</code> where each <code>milestones[i]</code> denotes the number of milestones the <code>i<sup>th</sup></code> project has.</p> <p>You can work on the projects following these two rules:</p> <ul> <li>Every week, you will finish exactly one milestone of one project. You\u00a0must\u00a0work every week.</li> <li>You cannot work on two milestones from the same project for two consecutive weeks.</li> </ul> <p>Once all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will stop working. Note that you may not be able to finish every project's milestones due to these constraints.</p> <p>Return the maximum number of weeks you would be able to work on the projects without violating the rules mentioned above.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: milestones = [1,2,3]\nOutput: 6\nExplanation: One possible scenario is:\n\u200b\u200b\u200b\u200b- During the 1<sup>st</sup> week, you will work on a milestone of project 0.\n- During the 2<sup>nd</sup> week, you will work on a milestone of project 2.\n- During the 3<sup>rd</sup> week, you will work on a milestone of project 1.\n- During the 4<sup>th</sup> week, you will work on a milestone of project 2.\n- During the 5<sup>th</sup> week, you will work on a milestone of project 1.\n- During the 6<sup>th</sup> week, you will work on a milestone of project 2.\nThe total number of weeks is 6.\n</pre> <p>Example 2:</p> <pre>\nInput: milestones = [5,2,1]\nOutput: 7\nExplanation: One possible scenario is:\n- During the 1<sup>st</sup> week, you will work on a milestone of project 0.\n- During the 2<sup>nd</sup> week, you will work on a milestone of project 1.\n- During the 3<sup>rd</sup> week, you will work on a milestone of project 0.\n- During the 4<sup>th</sup> week, you will work on a milestone of project 1.\n- During the 5<sup>th</sup> week, you will work on a milestone of project 0.\n- During the 6<sup>th</sup> week, you will work on a milestone of project 2.\n- During the 7<sup>th</sup> week, you will work on a milestone of project 0.\nThe total number of weeks is 7.\nNote that you cannot work on the last milestone of project 0 on 8<sup>th</sup> week because it would violate the rules.\nThus, one milestone in project 0 will remain unfinished.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == milestones.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= milestones[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1954/","title":"1954. Minimum Garden Perimeter to Collect Enough Apples","text":"Problem <p>In a garden represented as an infinite 2D grid, there is an apple tree planted at every integer coordinate. The apple tree planted at an integer coordinate <code>(i, j)</code> has <code>|i| + |j|</code> apples growing on it.</p> <p>You will buy an axis-aligned square plot of land that is centered at <code>(0, 0)</code>.</p> <p>Given an integer <code>neededApples</code>, return the minimum perimeter of a plot such that at least <code>neededApples</code> apples are inside or on the perimeter of that plot.</p> <p>The value of <code>|x|</code> is defined as:</p> <ul> <li><code>x</code> if <code>x &gt;= 0</code></li> <li><code>-x</code> if <code>x &lt; 0</code></li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: neededApples = 1\nOutput: 8\nExplanation: A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8.\n</pre> <p>Example 2:</p> <pre>\nInput: neededApples = 13\nOutput: 16\n</pre> <p>Example 3:</p> <pre>\nInput: neededApples = 1000000000\nOutput: 5040\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= neededApples &lt;= 10<sup>15</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1955/","title":"1955. Count Number of Special Subsequences","text":"Problem <p>A sequence is special if it consists of a positive number of <code>0</code>s, followed by a positive number of <code>1</code>s, then a positive number of <code>2</code>s.</p> <ul> <li>For example, <code>[0,1,2]</code> and <code>[0,0,1,1,1,2]</code> are special.</li> <li>In contrast, <code>[2,1,0]</code>, <code>[1]</code>, and <code>[0,1,2,0]</code> are not special.</li> </ul> <p>Given an array <code>nums</code> (consisting of only integers <code>0</code>, <code>1</code>, and <code>2</code>), return the number of different subsequences that are special. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are different if the set of indices chosen are different.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,2,2]\nOutput: 3\nExplanation: The special subsequences are bolded [0,1,2,2], [0,1,2,2], and [0,1,2,2].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,0,0]\nOutput: 0\nExplanation: There are no special subsequences in [2,2,0,0].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [0,1,2,0,1,2]\nOutput: 7\nExplanation: The special subsequences are bolded:\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 2</code></li> </ul>"},{"location":"LeetCode_Problems/1956/","title":"1956. Minimum Time For K Virus Variants to Spread","text":"Problem"},{"location":"LeetCode_Problems/1957/","title":"1957. Delete Characters to Make Fancy String","text":"Problem <p>A fancy string is a string where no three consecutive characters are equal.</p> <p>Given a string <code>s</code>, delete the minimum possible number of characters from <code>s</code> to make it fancy.</p> <p>Return the final string after the deletion. It can be shown that the answer will always be unique.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"leeetcode\"\nOutput: \"leetcode\"\nExplanation:\nRemove an 'e' from the first group of 'e's to create \"leetcode\".\nNo three consecutive characters are equal, so return \"leetcode\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aaabaaaa\"\nOutput: \"aabaa\"\nExplanation:\nRemove an 'a' from the first group of 'a's to create \"aabaaaa\".\nRemove two 'a's from the second group of 'a's to create \"aabaa\".\nNo three consecutive characters are equal, so return \"aabaa\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"aab\"\nOutput: \"aab\"\nExplanation: No three consecutive characters are equal, so return \"aab\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1958/","title":"1958. Check if Move is Legal","text":"Problem <p>You are given a 0-indexed <code>8 x 8</code> grid <code>board</code>, where <code>board[r][c]</code> represents the cell <code>(r, c)</code> on a game board. On the board, free cells are represented by <code>'.'</code>, white cells are represented by <code>'W'</code>, and black cells are represented by <code>'B'</code>.</p> <p>Each move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only legal if, after changing it, the cell becomes the endpoint of a good line (horizontal, vertical, or diagonal).</p> <p>A good line is a line of three or more cells (including the endpoints) where the endpoints of the line are one color, and the remaining cells in the middle are the opposite color (no cells in the line are free). You can find examples for good lines in the figure below:</p> <p></p> <p>Given two integers <code>rMove</code> and <code>cMove</code> and a character <code>color</code> representing the color you are playing as (white or black), return <code>true</code> if changing cell <code>(rMove, cMove)</code> to color <code>color</code> is a legal move, or <code>false</code> if it is not legal.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]], rMove = 4, cMove = 3, color = \"B\"\nOutput: true\nExplanation: '.', 'W', and 'B' are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an 'X'.\nThe two good lines with the chosen cell as an endpoint are annotated above with the red rectangles.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"B\",\".\",\".\",\"W\",\".\",\".\",\".\"],[\".\",\".\",\"W\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\"B\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"B\",\"W\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\"W\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"B\"]], rMove = 4, cMove = 4, color = \"W\"\nOutput: false\nExplanation: While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>board.length == board[r].length == 8</code></li> <li><code>0 &lt;= rMove, cMove &lt; 8</code></li> <li><code>board[rMove][cMove] == '.'</code></li> <li><code>color</code> is either <code>'B'</code> or <code>'W'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1959/","title":"1959. Minimum Total Space Wasted With K Resizing Operations","text":"Problem <p>You are currently designing a dynamic array. You are given a 0-indexed integer array <code>nums</code>, where <code>nums[i]</code> is the number of elements that will be in the array at time <code>i</code>. In addition, you are given an integer <code>k</code>, the maximum number of times you can resize the array (to any size).</p> <p>The size of the array at time <code>t</code>, <code>size<sub>t</sub></code>, must be at least <code>nums[t]</code> because there needs to be enough space in the array to hold all the elements. The space wasted at\u00a0time <code>t</code> is defined as <code>size<sub>t</sub> - nums[t]</code>, and the total space wasted is the sum of the space wasted across every time <code>t</code> where <code>0 &lt;= t &lt; nums.length</code>.</p> <p>Return the minimum total space wasted if you can resize the array at most <code>k</code> times.</p> <p>Note: The array can have any size at the start and does not count towards the number of resizing operations.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [10,20], k = 0\nOutput: 10\nExplanation: size = [20,20].\nWe can set the initial size to be 20.\nThe total wasted space is (20 - 10) + (20 - 20) = 10.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [10,20,30], k = 1\nOutput: 10\nExplanation: size = [20,20,30].\nWe can set the initial size to be 20 and resize to 30 at time 2. \nThe total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [10,20,15,30,20], k = 2\nOutput: 15\nExplanation: size = [10,20,20,30,30].\nWe can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3.\nThe total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> <li><code>0 &lt;= k &lt;= nums.length - 1</code></li> </ul>"},{"location":"LeetCode_Problems/1960/","title":"1960. Maximum Product of the Length of Two Palindromic Substrings","text":"Problem <p>You are given a 0-indexed string <code>s</code> and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.</p> <p>More formally, you want to choose four integers <code>i</code>, <code>j</code>, <code>k</code>, <code>l</code> such that <code>0 &lt;= i &lt;= j &lt; k &lt;= l &lt; s.length</code> and both the substrings <code>s[i...j]</code> and <code>s[k...l]</code> are palindromes and have odd lengths. <code>s[i...j]</code> denotes a substring from index <code>i</code> to index <code>j</code> inclusive.</p> <p>Return the maximum possible product of the lengths of the two non-intersecting palindromic substrings.</p> <p>A palindrome is a string that is the same forward and backward. A substring is a contiguous sequence of characters in a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ababbb\"\nOutput: 9\nExplanation: Substrings \"aba\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"zaaaxbbby\"\nOutput: 9\nExplanation: Substrings \"aaa\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1961/","title":"1961. Check If String Is a Prefix of Array","text":"Problem <p>Given a string <code>s</code> and an array of strings <code>words</code>, determine whether <code>s</code> is a prefix string of <code>words</code>.</p> <p>A string <code>s</code> is a prefix string of <code>words</code> if <code>s</code> can be made by concatenating the first <code>k</code> strings in <code>words</code> for some positive <code>k</code> no larger than <code>words.length</code>.</p> <p>Return <code>true</code> if <code>s</code> is a prefix string of <code>words</code>, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"iloveleetcode\", words = [\"i\",\"love\",\"leetcode\",\"apples\"]\nOutput: true\nExplanation:\ns can be made by concatenating \"i\", \"love\", and \"leetcode\" together.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"iloveleetcode\", words = [\"apples\",\"i\",\"love\",\"leetcode\"]\nOutput: false\nExplanation:\nIt is impossible to make s using a prefix of arr.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 20</code></li> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>words[i]</code> and <code>s</code> consist of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1962/","title":"1962. Remove Stones to Minimize the Total","text":"Problem <p>You are given a 0-indexed integer array <code>piles</code>, where <code>piles[i]</code> represents the number of stones in the <code>i<sup>th</sup></code> pile, and an integer <code>k</code>. You should apply the following operation exactly <code>k</code> times:</p> <ul> <li>Choose any <code>piles[i]</code> and remove <code>floor(piles[i] / 2)</code> stones from it.</li> </ul> <p>Notice that you can apply the operation on the same pile more than once.</p> <p>Return the minimum possible total number of stones remaining after applying the <code>k</code> operations.</p> <p><code>floor(x)</code> is the greatest integer that is smaller than or equal to <code>x</code> (i.e., rounds <code>x</code> down).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: piles = [5,4,9], k = 2\nOutput: 12\nExplanation:\u00a0Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [5,4,5].\n- Apply the operation on pile 0. The resulting piles are [3,4,5].\nThe total number of stones in [3,4,5] is 12.\n</pre> <p>Example 2:</p> <pre>\nInput: piles = [4,3,6,7], k = 3\nOutput: 12\nExplanation:\u00a0Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [4,3,3,7].\n- Apply the operation on pile 3. The resulting piles are [4,3,3,4].\n- Apply the operation on pile 0. The resulting piles are [2,3,3,4].\nThe total number of stones in [2,3,3,4] is 12.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= piles.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= piles[i] &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1963/","title":"1963. Minimum Number of Swaps to Make the String Balanced","text":"Problem <p>You are given a 0-indexed string <code>s</code> of even length <code>n</code>. The string consists of exactly <code>n / 2</code> opening brackets <code>'['</code> and <code>n / 2</code> closing brackets <code>']'</code>.</p> <p>A string is called balanced if and only if:</p> <ul> <li>It is the empty string, or</li> <li>It can be written as <code>AB</code>, where both <code>A</code> and <code>B</code> are balanced strings, or</li> <li>It can be written as <code>[C]</code>, where <code>C</code> is a balanced string.</li> </ul> <p>You may swap the brackets at any two indices any number of times.</p> <p>Return the minimum number of swaps to make <code>s</code> balanced.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"][][\"\nOutput: 1\nExplanation: You can make the string balanced by swapping index 0 with index 3.\nThe resulting string is \"[[]]\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"]]][[[\"\nOutput: 2\nExplanation: You can do the following to make the string balanced:\n- Swap index 0 with index 4. s = \"[]][][\".\n- Swap index 1 with index 5. s = \"[[][]]\".\nThe resulting string is \"[[][]]\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"[]\"\nOutput: 0\nExplanation: The string is already balanced.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == s.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>6</sup></code></li> <li><code>n</code> is even.</li> <li><code>s[i]</code> is either <code>'[' </code>or <code>']'</code>.</li> <li>The number of opening brackets <code>'['</code> equals <code>n / 2</code>, and the number of closing brackets <code>']'</code> equals <code>n / 2</code>.</li> </ul>"},{"location":"LeetCode_Problems/1964/","title":"1964. Find the Longest Valid Obstacle Course at Each Position","text":"Problem <p>You want to build some obstacle courses. You are given a 0-indexed integer array <code>obstacles</code> of length <code>n</code>, where <code>obstacles[i]</code> describes the height of the <code>i<sup>th</sup></code> obstacle.</p> <p>For every index <code>i</code> between <code>0</code> and <code>n - 1</code> (inclusive), find the length of the longest obstacle course in <code>obstacles</code> such that:</p> <ul> <li>You choose any number of obstacles between <code>0</code> and <code>i</code> inclusive.</li> <li>You must include the <code>i<sup>th</sup></code> obstacle in the course.</li> <li>You must put the chosen obstacles in the same order as they appear in <code>obstacles</code>.</li> <li>Every obstacle (except the first) is taller than or the same height as the obstacle immediately before it.</li> </ul> <p>Return an array <code>ans</code> of length <code>n</code>, where <code>ans[i]</code> is the length of the longest obstacle course for index <code>i</code> as described above.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: obstacles = [1,2,3,2]\nOutput: [1,2,3,3]\nExplanation: The longest valid obstacle course at each position is:\n- i = 0: [1], [1] has length 1.\n- i = 1: [1,2], [1,2] has length 2.\n- i = 2: [1,2,3], [1,2,3] has length 3.\n- i = 3: [1,2,3,2], [1,2,2] has length 3.\n</pre> <p>Example 2:</p> <pre>\nInput: obstacles = [2,2,1]\nOutput: [1,2,1]\nExplanation: The longest valid obstacle course at each position is:\n- i = 0: [2], [2] has length 1.\n- i = 1: [2,2], [2,2] has length 2.\n- i = 2: [2,2,1], [1] has length 1.\n</pre> <p>Example 3:</p> <pre>\nInput: obstacles = [3,1,5,6,4,2]\nOutput: [1,1,2,3,2,2]\nExplanation: The longest valid obstacle course at each position is:\n- i = 0: [3], [3] has length 1.\n- i = 1: [3,1], [1] has length 1.\n- i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.\n- i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.\n- i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.\n- i = 5: [3,1,5,6,4,2], [1,2] has length 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == obstacles.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= obstacles[i] &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1965/","title":"1965. Employees With Missing Information","text":"Problem <p>Table: <code>Employees</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| employee_id | int     |\n| name        | varchar |\n+-------------+---------+\nemployee_id is the column with unique values for this table.\nEach row of this table indicates the name of the employee whose ID is employee_id.\n</pre> <p> </p> <p>Table: <code>Salaries</code></p> <pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| employee_id | int     |\n| salary      | int     |\n+-------------+---------+\nemployee_id is the column with unique values for this table.\nEach row of this table indicates the salary of the employee whose ID is employee_id.\n</pre> <p> </p> <p>Write a solution to report the IDs of all the employees with missing information. The information of an employee is missing if:</p> <ul> <li>The employee's name is missing, or</li> <li>The employee's salary is missing.</li> </ul> <p>Return the result table ordered by <code>employee_id</code> in ascending order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nEmployees table:\n+-------------+----------+\n| employee_id | name     |\n+-------------+----------+\n| 2           | Crew     |\n| 4           | Haven    |\n| 5           | Kristian |\n+-------------+----------+\nSalaries table:\n+-------------+--------+\n| employee_id | salary |\n+-------------+--------+\n| 5           | 76071  |\n| 1           | 22517  |\n| 4           | 63539  |\n+-------------+--------+\nOutput: \n+-------------+\n| employee_id |\n+-------------+\n| 1           |\n| 2           |\n+-------------+\nExplanation: \nEmployees 1, 2, 4, and 5 are working at this company.\nThe name of employee 1 is missing.\nThe salary of employee 2 is missing.\n</pre>"},{"location":"LeetCode_Problems/1966/","title":"1966. Binary Searchable Numbers in an Unsorted Array","text":"Problem"},{"location":"LeetCode_Problems/1967/","title":"1967. Number of Strings That Appear as Substrings in Word","text":"Problem <p>Given an array of strings <code>patterns</code> and a string <code>word</code>, return the number of strings in <code>patterns</code> that exist as a substring in <code>word</code>.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"\nOutput: 3\nExplanation:\n- \"a\" appears as a substring in \"abc\".\n- \"abc\" appears as a substring in \"abc\".\n- \"bc\" appears as a substring in \"abc\".\n- \"d\" does not appear as a substring in \"abc\".\n3 of the strings in patterns appear as a substring in word.\n</pre> <p>Example 2:</p> <pre>\nInput: patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"\nOutput: 2\nExplanation:\n- \"a\" appears as a substring in \"aaaaabbbbb\".\n- \"b\" appears as a substring in \"aaaaabbbbb\".\n- \"c\" does not appear as a substring in \"aaaaabbbbb\".\n2 of the strings in patterns appear as a substring in word.\n</pre> <p>Example 3:</p> <pre>\nInput: patterns = [\"a\",\"a\",\"a\"], word = \"ab\"\nOutput: 3\nExplanation: Each of the patterns appears as a substring in word \"ab\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= patterns.length &lt;= 100</code></li> <li><code>1 &lt;= patterns[i].length &lt;= 100</code></li> <li><code>1 &lt;= word.length &lt;= 100</code></li> <li><code>patterns[i]</code> and <code>word</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1968/","title":"1968. Array With Elements Not Equal to Average of Neighbors","text":"Problem <p>You are given a 0-indexed array <code>nums</code> of distinct integers. You want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors.</p> <p>More formally, the rearranged array should have the property such that for every <code>i</code> in the range <code>1 &lt;= i &lt; nums.length - 1</code>, <code>(nums[i-1] + nums[i+1]) / 2</code> is not equal to <code>nums[i]</code>.</p> <p>Return any rearrangement of <code>nums</code> that meets the requirements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4,5]\nOutput: [1,2,4,5,3]\nExplanation:\nWhen i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.\nWhen i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.\nWhen i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [6,2,0,9,7]\nOutput: [9,7,6,2,0]\nExplanation:\nWhen i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.\nWhen i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.\nWhen i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1969/","title":"1969. Minimum Non-Zero Product of the Array Elements","text":"Problem <p>You are given a positive integer <code>p</code>. Consider an array <code>nums</code> (1-indexed) that consists of the integers in the inclusive range <code>[1, 2<sup>p</sup> - 1]</code> in their binary representations. You are allowed to do the following operation any number of times:</p> <ul> <li>Choose two elements <code>x</code> and <code>y</code> from <code>nums</code>.</li> <li>Choose a bit in <code>x</code> and swap it with its corresponding bit in <code>y</code>. Corresponding bit refers to the bit that is in the same position in the other integer.</li> </ul> <p>For example, if <code>x = 1101</code> and <code>y = 0011</code>, after swapping the <code>2<sup>nd</sup></code> bit from the right, we have <code>x = 1111</code> and <code>y = 0001</code>.</p> <p>Find the minimum non-zero product of <code>nums</code> after performing the above operation any number of times. Return this product modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Note: The answer should be the minimum product before the modulo operation is done.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: p = 1\nOutput: 1\nExplanation: nums = [1].\nThere is only one element, so the product equals that element.\n</pre> <p>Example 2:</p> <pre>\nInput: p = 2\nOutput: 6\nExplanation: nums = [01, 10, 11].\nAny swap would either make the product 0 or stay the same.\nThus, the array product of 1 * 2 * 3 = 6 is already minimized.\n</pre> <p>Example 3:</p> <pre>\nInput: p = 3\nOutput: 1512\nExplanation: nums = [001, 010, 011, 100, 101, 110, 111]\n- In the first operation we can swap the leftmost bit of the second and fifth elements.\n    - The resulting array is [001, 110, 011, 100, 001, 110, 111].\n- In the second operation we can swap the middle bit of the third and fourth elements.\n    - The resulting array is [001, 110, 001, 110, 001, 110, 111].\nThe array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= p &lt;= 60</code></li> </ul>"},{"location":"LeetCode_Problems/1970/","title":"1970. Last Day Where You Can Still Cross","text":"Problem <p>There is a 1-based binary matrix where <code>0</code> represents land and <code>1</code> represents water. You are given integers <code>row</code> and <code>col</code> representing the number of rows and columns in the matrix, respectively.</p> <p>Initially on day <code>0</code>, the entire matrix is land. However, each day a new cell becomes flooded with water. You are given a 1-based 2D array <code>cells</code>, where <code>cells[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> represents that on the <code>i<sup>th</sup></code> day, the cell on the <code>r<sub>i</sub><sup>th</sup></code> row and <code>c<sub>i</sub><sup>th</sup></code> column (1-based coordinates) will be covered with water (i.e., changed to <code>1</code>).</p> <p>You want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. You can start from any cell in the top row and end at any cell in the bottom row. You can only travel in the four cardinal directions (left, right, up, and down).</p> <p>Return the last day where it is possible to walk from the top to the bottom by only walking on land cells.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]\nOutput: 2\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]\nOutput: 1\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 1.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]\nOutput: 3\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= row, col &lt;= 2 * 10<sup>4</sup></code></li> <li><code>4 &lt;= row * col &lt;= 2 * 10<sup>4</sup></code></li> <li><code>cells.length == row * col</code></li> <li><code>1 &lt;= r<sub>i</sub> &lt;= row</code></li> <li><code>1 &lt;= c<sub>i</sub> &lt;= col</code></li> <li>All the values of <code>cells</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/1971/","title":"1971. Find if Path Exists in Graph","text":"Problem <p>There is a bi-directional graph with <code>n</code> vertices, where each vertex is labeled from <code>0</code> to <code>n - 1</code> (inclusive). The edges in the graph are represented as a 2D integer array <code>edges</code>, where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> denotes a bi-directional edge between vertex <code>u<sub>i</sub></code> and vertex <code>v<sub>i</sub></code>. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.</p> <p>You want to determine if there is a valid path that exists from vertex <code>source</code> to vertex <code>destination</code>.</p> <p>Given <code>edges</code> and the integers <code>n</code>, <code>source</code>, and <code>destination</code>, return <code>true</code> if there is a valid path from <code>source</code> to <code>destination</code>, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2\nOutput: true\nExplanation: There are two paths from vertex 0 to vertex 2:\n- 0 \u2192 1 \u2192 2\n- 0 \u2192 2\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5\nOutput: false\nExplanation: There is no path from vertex 0 to vertex 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li> <li><code>0 &lt;= edges.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li><code>0 &lt;= source, destination &lt;= n - 1</code></li> <li>There are no duplicate edges.</li> <li>There are no self edges.</li> </ul>"},{"location":"LeetCode_Problems/1972/","title":"1972. First and Last Call On the Same Day","text":"Problem"},{"location":"LeetCode_Problems/1973/","title":"1973. Count Nodes Equal to Sum of Descendants","text":"Problem"},{"location":"LeetCode_Problems/1974/","title":"1974. Minimum Time to Type Word Using Special Typewriter","text":"Problem <p>There is a special typewriter with lowercase English letters <code>'a'</code> to <code>'z'</code> arranged in a circle with a pointer. A character can only be typed if the pointer is pointing to that character. The pointer is initially pointing to the character <code>'a'</code>.</p> <p></p> <p>Each second, you may perform one of the following operations:</p> <ul> <li>Move the pointer one character counterclockwise or clockwise.</li> <li>Type the character the pointer is currently on.</li> </ul> <p>Given a string <code>word</code>, return the minimum number of seconds to type out the characters in <code>word</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"abc\"\nOutput: 5\nExplanation: \nThe characters are printed as follows:\n- Type the character 'a' in 1 second since the pointer is initially on 'a'.\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer clockwise to 'c' in 1 second.\n- Type the character 'c' in 1 second.\n</pre> <p>Example 2:</p> <pre>\nInput: word = \"bza\"\nOutput: 7\nExplanation:\nThe characters are printed as follows:\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer counterclockwise to 'z' in 2 seconds.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'a' in 1 second.\n- Type the character 'a' in 1 second.\n</pre> <p>Example 3:</p> <pre>\nInput: word = \"zjpc\"\nOutput: 34\nExplanation:\nThe characters are printed as follows:\n- Move the pointer counterclockwise to 'z' in 1 second.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'j' in 10 seconds.\n- Type the character 'j' in 1 second.\n- Move the pointer clockwise to 'p' in 6 seconds.\n- Type the character 'p' in 1 second.\n- Move the pointer counterclockwise to 'c' in 13 seconds.\n- Type the character 'c' in 1 second.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 100</code></li> <li><code>word</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/1975/","title":"1975. Maximum Matrix Sum","text":"Problem <p>You are given an <code>n x n</code> integer <code>matrix</code>. You can do the following operation any number of times:</p> <ul> <li>Choose any two adjacent elements of <code>matrix</code> and multiply each of them by <code>-1</code>.</li> </ul> <p>Two elements are considered adjacent if and only if they share a border.</p> <p>Your goal is to maximize the summation of the matrix's elements. Return the maximum sum of the matrix's elements using the operation mentioned above.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[1,-1],[-1,1]]\nOutput: 4\nExplanation: We can follow the following steps to reach sum equals 4:\n- Multiply the 2 elements in the first row by -1.\n- Multiply the 2 elements in the first column by -1.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]\nOutput: 16\nExplanation: We can follow the following step to reach sum equals 16:\n- Multiply the 2 last elements in the second row by -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == matrix.length == matrix[i].length</code></li> <li><code>2 &lt;= n &lt;= 250</code></li> <li><code>-10<sup>5</sup> &lt;= matrix[i][j] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1976/","title":"1976. Number of Ways to Arrive at Destination","text":"Problem <p>You are in a city that consists of <code>n</code> intersections numbered from <code>0</code> to <code>n - 1</code> with bi-directional roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.</p> <p>You are given an integer <code>n</code> and a 2D integer array <code>roads</code> where <code>roads[i] = [u<sub>i</sub>, v<sub>i</sub>, time<sub>i</sub>]</code> means that there is a road between intersections <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> that takes <code>time<sub>i</sub></code> minutes to travel. You want to know in how many ways you can travel from intersection <code>0</code> to intersection <code>n - 1</code> in the shortest amount of time.</p> <p>Return the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]\nOutput: 4\nExplanation: The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.\nThe four ways to get there in 7 minutes are:\n- 0 \u279d 6\n- 0 \u279d 4 \u279d 6\n- 0 \u279d 1 \u279d 2 \u279d 5 \u279d 6\n- 0 \u279d 1 \u279d 3 \u279d 5 \u279d 6\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, roads = [[1,0,10]]\nOutput: 1\nExplanation: There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 200</code></li> <li><code>n - 1 &lt;= roads.length &lt;= n * (n - 1) / 2</code></li> <li><code>roads[i].length == 3</code></li> <li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li> <li><code>1 &lt;= time<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>u<sub>i </sub>!= v<sub>i</sub></code></li> <li>There is at most one road connecting any two intersections.</li> <li>You can reach any intersection from any other intersection.</li> </ul>"},{"location":"LeetCode_Problems/1977/","title":"1977. Number of Ways to Separate Numbers","text":"Problem <p>You wrote down many positive integers in a string called <code>num</code>. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was non-decreasing and that no integer had leading zeros.</p> <p>Return the number of possible lists of integers that you could have written down to get the string <code>num</code>. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"327\"\nOutput: 2\nExplanation: You could have written down the numbers:\n3, 27\n327\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"094\"\nOutput: 0\nExplanation: No numbers can have leading zeros and all numbers must be positive.\n</pre> <p>Example 3:</p> <pre>\nInput: num = \"0\"\nOutput: 0\nExplanation: No numbers can have leading zeros and all numbers must be positive.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num.length &lt;= 3500</code></li> <li><code>num</code> consists of digits <code>'0'</code> through <code>'9'</code>.</li> </ul>"},{"location":"LeetCode_Problems/1978/","title":"1978. Employees Whose Manager Left the Company","text":"Problem <p>Table: <code>Employees</code></p> <pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| employee_id | int      |\n| name        | varchar  |\n| manager_id  | int      |\n| salary      | int      |\n+-------------+----------+\nIn SQL, employee_id is the primary key for this table.\nThis table contains information about the employees, their salary, and the ID of their manager. Some employees do not have a manager (manager_id is null). \n</pre> <p> </p> <p>Find the IDs of the employees whose salary is strictly less than <code>$30000</code> and whose manager left the company. When a manager leaves the company, their information is deleted from the <code>Employees</code> table, but the reports still have their <code>manager_id</code> set to the manager that left.</p> <p>Return the result table ordered by <code>employee_id</code>.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput:  \nEmployees table:\n+-------------+-----------+------------+--------+\n| employee_id | name      | manager_id | salary |\n+-------------+-----------+------------+--------+\n| 3           | Mila      | 9          | 60301  |\n| 12          | Antonella | null       | 31000  |\n| 13          | Emery     | null       | 67084  |\n| 1           | Kalel     | 11         | 21241  |\n| 9           | Mikaela   | null       | 50937  |\n| 11          | Joziah    | 6          | 28485  |\n+-------------+-----------+------------+--------+\nOutput: \n+-------------+\n| employee_id |\n+-------------+\n| 11          |\n+-------------+\n\nExplanation: \nThe employees with a salary less than $30000 are 1 (Kalel) and 11 (Joziah).\nKalel's manager is employee 11, who is still in the company (Joziah).\nJoziah's manager is employee 6, who left the company because there is no row for employee 6 as it was deleted.\n</pre>"},{"location":"LeetCode_Problems/1979/","title":"1979. Find Greatest Common Divisor of Array","text":"Problem <p>Given an integer array <code>nums</code>, return the greatest common divisor of the smallest number and largest number in <code>nums</code>.</p> <p>The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,5,6,9,10]\nOutput: 2\nExplanation:\nThe smallest number in nums is 2.\nThe largest number in nums is 10.\nThe greatest common divisor of 2 and 10 is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [7,5,6,8,3]\nOutput: 1\nExplanation:\nThe smallest number in nums is 3.\nThe largest number in nums is 8.\nThe greatest common divisor of 3 and 8 is 1.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,3]\nOutput: 3\nExplanation:\nThe smallest number in nums is 3.\nThe largest number in nums is 3.\nThe greatest common divisor of 3 and 3 is 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/1980/","title":"1980. Find Unique Binary String","text":"Problem <p>Given an array of strings <code>nums</code> containing <code>n</code> unique binary strings each of length <code>n</code>, return a binary string of length <code>n</code> that does not appear in <code>nums</code>. If there are multiple answers, you may return any of them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [\"01\",\"10\"]\nOutput: \"11\"\nExplanation: \"11\" does not appear in nums. \"00\" would also be correct.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [\"00\",\"01\"]\nOutput: \"11\"\nExplanation: \"11\" does not appear in nums. \"10\" would also be correct.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [\"111\",\"011\",\"001\"]\nOutput: \"101\"\nExplanation: \"101\" does not appear in nums. \"000\", \"010\", \"100\", and \"110\" would also be correct.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 16</code></li> <li><code>nums[i].length == n</code></li> <li><code>nums[i] </code>is either <code>'0'</code> or <code>'1'</code>.</li> <li>All the strings of <code>nums</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/1981/","title":"1981. Minimize the Difference Between Target and Chosen Elements","text":"Problem <p>You are given an <code>m x n</code> integer matrix <code>mat</code> and an integer <code>target</code>.</p> <p>Choose one integer from each row in the matrix such that the absolute difference between <code>target</code> and the sum of the chosen elements is minimized.</p> <p>Return the minimum absolute difference.</p> <p>The absolute difference between two numbers <code>a</code> and <code>b</code> is the absolute value of <code>a - b</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13\nOutput: 0\nExplanation: One possible choice is to:\n- Choose 1 from the first row.\n- Choose 5 from the second row.\n- Choose 7 from the third row.\nThe sum of the chosen elements is 13, which equals the target, so the absolute difference is 0.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: mat = [[1],[2],[3]], target = 100\nOutput: 94\nExplanation: The best possible choice is to:\n- Choose 1 from the first row.\n- Choose 2 from the second row.\n- Choose 3 from the third row.\nThe sum of the chosen elements is 6, and the absolute difference is 94.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: mat = [[1,2,9,8,7]], target = 6\nOutput: 1\nExplanation: The best choice is to choose 7 from the first row.\nThe absolute difference is 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n == mat[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 70</code></li> <li><code>1 &lt;= mat[i][j] &lt;= 70</code></li> <li><code>1 &lt;= target &lt;= 800</code></li> </ul>"},{"location":"LeetCode_Problems/1982/","title":"1982. Find Array Given Subset Sums","text":"Problem <p>You are given an integer <code>n</code> representing the length of an unknown array that you are trying to recover. You are also given an array <code>sums</code> containing the values of all <code>2<sup>n</sup></code> subset sums of the unknown array (in no particular order).</p> <p>Return the array <code>ans</code> of length <code>n</code> representing the unknown array. If multiple answers exist, return any of them.</p> <p>An array <code>sub</code> is a subset of an array <code>arr</code> if <code>sub</code> can be obtained from <code>arr</code> by deleting some (possibly zero or all) elements of <code>arr</code>. The sum of the elements in <code>sub</code> is one possible subset sum of <code>arr</code>. The sum of an empty array is considered to be <code>0</code>.</p> <p>Note: Test cases are generated such that there will always be at least one correct answer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, sums = [-3,-2,-1,0,0,1,2,3]\nOutput: [1,2,-3]\nExplanation: [1,2,-3] is able to achieve the given subset sums:\n- []: sum is 0\n- [1]: sum is 1\n- [2]: sum is 2\n- [1,2]: sum is 3\n- [-3]: sum is -3\n- [1,-3]: sum is -2\n- [2,-3]: sum is -1\n- [1,2,-3]: sum is 0\nNote that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, sums = [0,0,0,0]\nOutput: [0,0]\nExplanation: The only correct answer is [0,0].\n</pre> <p>Example 3:</p> <pre>\nInput: n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]\nOutput: [0,-1,4,5]\nExplanation: [0,-1,4,5] is able to achieve the given subset sums.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 15</code></li> <li><code>sums.length == 2<sup>n</sup></code></li> <li><code>-10<sup>4</sup> &lt;= sums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1983/","title":"1983. Widest Pair of Indices With Equal Range Sum","text":"Problem"},{"location":"LeetCode_Problems/1984/","title":"1984. Minimum Difference Between Highest and Lowest of K Scores","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>, where <code>nums[i]</code> represents the score of the <code>i<sup>th</sup></code> student. You are also given an integer <code>k</code>.</p> <p>Pick the scores of any <code>k</code> students from the array so that the difference between the highest and the lowest of the <code>k</code> scores is minimized.</p> <p>Return the minimum possible difference.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [90], k = 1\nOutput: 0\nExplanation: There is one way to pick score(s) of one student:\n- [90]. The difference between the highest and lowest score is 90 - 90 = 0.\nThe minimum possible difference is 0.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [9,4,1,7], k = 2\nOutput: 2\nExplanation: There are six ways to pick score(s) of two students:\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.\n- [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.\n- [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.\n- [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.\nThe minimum possible difference is 2.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1985/","title":"1985. Find the Kth Largest Integer in the Array","text":"Problem <p>You are given an array of strings <code>nums</code> and an integer <code>k</code>. Each string in <code>nums</code> represents an integer without leading zeros.</p> <p>Return the string that represents the <code>k<sup>th</sup></code> largest integer in <code>nums</code>.</p> <p>Note: Duplicate numbers should be counted distinctly. For example, if <code>nums</code> is <code>[\"1\",\"2\",\"2\"]</code>, <code>\"2\"</code> is the first largest integer, <code>\"2\"</code> is the second-largest integer, and <code>\"1\"</code> is the third-largest integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [\"3\",\"6\",\"7\",\"10\"], k = 4\nOutput: \"3\"\nExplanation:\nThe numbers in nums sorted in non-decreasing order are [\"3\",\"6\",\"7\",\"10\"].\nThe 4<sup>th</sup> largest integer in nums is \"3\".\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [\"2\",\"21\",\"12\",\"1\"], k = 3\nOutput: \"2\"\nExplanation:\nThe numbers in nums sorted in non-decreasing order are [\"1\",\"2\",\"12\",\"21\"].\nThe 3<sup>rd</sup> largest integer in nums is \"2\".\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [\"0\",\"0\"], k = 2\nOutput: \"0\"\nExplanation:\nThe numbers in nums sorted in non-decreasing order are [\"0\",\"0\"].\nThe 2<sup>nd</sup> largest integer in nums is \"0\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i].length &lt;= 100</code></li> <li><code>nums[i]</code> consists of only digits.</li> <li><code>nums[i]</code> will not have any leading zeros.</li> </ul>"},{"location":"LeetCode_Problems/1986/","title":"1986. Minimum Number of Work Sessions to Finish the Tasks","text":"Problem <p>There are <code>n</code> tasks assigned to you. The task times are represented as an integer array <code>tasks</code> of length <code>n</code>, where the <code>i<sup>th</sup></code> task takes <code>tasks[i]</code> hours to finish. A work session is when you work for at most <code>sessionTime</code> consecutive hours and then take a break.</p> <p>You should finish the given tasks in a way that satisfies the following conditions:</p> <ul> <li>If you start a task in a work session, you must complete it in the same work session.</li> <li>You can start a new task immediately after finishing the previous one.</li> <li>You may complete the tasks in any order.</li> </ul> <p>Given <code>tasks</code> and <code>sessionTime</code>, return the minimum number of work sessions needed to finish all the tasks following the conditions above.</p> <p>The tests are generated such that <code>sessionTime</code> is greater than or equal to the maximum element in <code>tasks[i]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tasks = [1,2,3], sessionTime = 3\nOutput: 2\nExplanation: You can finish the tasks in two work sessions.\n- First work session: finish the first and the second tasks in 1 + 2 = 3 hours.\n- Second work session: finish the third task in 3 hours.\n</pre> <p>Example 2:</p> <pre>\nInput: tasks = [3,1,3,1,1], sessionTime = 8\nOutput: 2\nExplanation: You can finish the tasks in two work sessions.\n- First work session: finish all the tasks except the last one in 3 + 1 + 3 + 1 = 8 hours.\n- Second work session: finish the last task in 1 hour.\n</pre> <p>Example 3:</p> <pre>\nInput: tasks = [1,2,3,4,5], sessionTime = 15\nOutput: 1\nExplanation: You can finish all the tasks in one work session.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == tasks.length</code></li> <li><code>1 &lt;= n &lt;= 14</code></li> <li><code>1 &lt;= tasks[i] &lt;= 10</code></li> <li><code>max(tasks[i]) &lt;= sessionTime &lt;= 15</code></li> </ul>"},{"location":"LeetCode_Problems/1987/","title":"1987. Number of Unique Good Subsequences","text":"Problem <p>You are given a binary string <code>binary</code>. A subsequence of <code>binary</code> is considered good if it is not empty and has no leading zeros (with the exception of <code>\"0\"</code>).</p> <p>Find the number of unique good subsequences of <code>binary</code>.</p> <ul> <li>For example, if <code>binary = \"001\"</code>, then all the good subsequences are <code>[\"0\", \"0\", \"1\"]</code>, so the unique good subsequences are <code>\"0\"</code> and <code>\"1\"</code>. Note that subsequences <code>\"00\"</code>, <code>\"01\"</code>, and <code>\"001\"</code> are not good because they have leading zeros.</li> </ul> <p>Return the number of unique good subsequences of <code>binary</code>. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: binary = \"001\"\nOutput: 2\nExplanation: The good subsequences of binary are [\"0\", \"0\", \"1\"].\nThe unique good subsequences are \"0\" and \"1\".\n</pre> <p>Example 2:</p> <pre>\nInput: binary = \"11\"\nOutput: 2\nExplanation: The good subsequences of binary are [\"1\", \"1\", \"11\"].\nThe unique good subsequences are \"1\" and \"11\".</pre> <p>Example 3:</p> <pre>\nInput: binary = \"101\"\nOutput: 5\nExplanation: The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"]. \nThe unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= binary.length &lt;= 10<sup>5</sup></code></li> <li><code>binary</code> consists of only <code>'0'</code>s and <code>'1'</code>s.</li> </ul>"},{"location":"LeetCode_Problems/1988/","title":"1988. Find Cutoff Score for Each School","text":"Problem"},{"location":"LeetCode_Problems/1989/","title":"1989. Maximum Number of People That Can Be Caught in Tag","text":"Problem"},{"location":"LeetCode_Problems/1990/","title":"1990. Count the Number of Experiments","text":"Problem"},{"location":"LeetCode_Problems/1991/","title":"1991. Find the Middle Index in Array","text":"Problem <p>Given a 0-indexed integer array <code>nums</code>, find the leftmost <code>middleIndex</code> (i.e., the smallest amongst all the possible ones).</p> <p>A <code>middleIndex</code> is an index where <code>nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1]</code>.</p> <p>If <code>middleIndex == 0</code>, the left side sum is considered to be <code>0</code>. Similarly, if <code>middleIndex == nums.length - 1</code>, the right side sum is considered to be <code>0</code>.</p> <p>Return the leftmost <code>middleIndex</code> that satisfies the condition, or <code>-1</code> if there is no such index.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,-1,8,4]\nOutput: 3\nExplanation: The sum of the numbers before index 3 is: 2 + 3 + -1 = 4\nThe sum of the numbers after index 3 is: 4 = 4\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,-1,4]\nOutput: 2\nExplanation: The sum of the numbers before index 2 is: 1 + -1 = 0\nThe sum of the numbers after index 2 is: 0\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,5]\nOutput: -1\nExplanation: There is no valid middleIndex.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> </ul> <p> </p> <p>Note: This question is the same as\u00a0724:\u00a0https://leetcode.com/problems/find-pivot-index/</p>"},{"location":"LeetCode_Problems/1992/","title":"1992. Find All Groups of Farmland","text":"Problem <p>You are given a 0-indexed <code>m x n</code> binary matrix <code>land</code> where a <code>0</code> represents a hectare of forested land and a <code>1</code> represents a hectare of farmland.</p> <p>To keep the land organized, there are designated rectangular areas of hectares that consist entirely of farmland. These rectangular areas are called groups. No two groups are adjacent, meaning farmland in one group is not four-directionally adjacent to another farmland in a different group.</p> <p><code>land</code> can be represented by a coordinate system where the top left corner of <code>land</code> is <code>(0, 0)</code> and the bottom right corner of <code>land</code> is <code>(m-1, n-1)</code>. Find the coordinates of the top left and bottom right corner of each group of farmland. A group of farmland with a top left corner at <code>(r<sub>1</sub>, c<sub>1</sub>)</code> and a bottom right corner at <code>(r<sub>2</sub>, c<sub>2</sub>)</code> is represented by the 4-length array <code>[r<sub>1</sub>, c<sub>1</sub>, r<sub>2</sub>, c<sub>2</sub>].</code></p> <p>Return a 2D array containing the 4-length arrays described above for each group of farmland in <code>land</code>. If there are no groups of farmland, return an empty array. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: land = [[1,0,0],[0,1,1],[0,1,1]]\nOutput: [[0,0,0,0],[1,1,2,2]]\nExplanation:\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[0][0].\nThe second group has a top left corner at land[1][1] and a bottom right corner at land[2][2].\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: land = [[1,1],[1,1]]\nOutput: [[0,0,1,1]]\nExplanation:\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[1][1].\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: land = [[0]]\nOutput: []\nExplanation:\nThere are no groups of farmland.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == land.length</code></li> <li><code>n == land[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 300</code></li> <li><code>land</code> consists of only <code>0</code>'s and <code>1</code>'s.</li> <li>Groups of farmland are rectangular in shape.</li> </ul>"},{"location":"LeetCode_Problems/1993/","title":"1993. Operations on Tree","text":"Problem <p>You are given a tree with <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> in the form of a parent array <code>parent</code> where <code>parent[i]</code> is the parent of the <code>i<sup>th</sup></code> node. The root of the tree is node <code>0</code>, so <code>parent[0] = -1</code> since it has no parent. You want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree.</p> <p>The data structure should support the following functions:</p> <ul> <li>Lock: Locks the given node for the given user and prevents other users from locking the same node. You may only lock a node using this function if the node is unlocked.</li> <li>Unlock: Unlocks the given node for the given user. You may only unlock a node using this function if it is currently locked by the same user.</li> <li>Upgrade: Locks the given node for the given user and unlocks all of its descendants regardless of who locked it. You may only upgrade a node if all 3 conditions are true:     <ul> <li>The node is unlocked,</li> <li>It has at least one locked descendant (by any user), and</li> <li>It does not have any locked ancestors.</li> </ul> </li> </ul> <p>Implement the <code>LockingTree</code> class:</p> <ul> <li><code>LockingTree(int[] parent)</code> initializes the data structure with the parent array.</li> <li><code>lock(int num, int user)</code> returns <code>true</code> if it is possible for the user with id <code>user</code> to lock the node <code>num</code>, or <code>false</code> otherwise. If it is possible, the node <code>num</code> will become locked by the user with id <code>user</code>.</li> <li><code>unlock(int num, int user)</code> returns <code>true</code> if it is possible for the user with id <code>user</code> to unlock the node <code>num</code>, or <code>false</code> otherwise. If it is possible, the node <code>num</code> will become unlocked.</li> <li><code>upgrade(int num, int user)</code> returns <code>true</code> if it is possible for the user with id <code>user</code> to upgrade the node <code>num</code>, or <code>false</code> otherwise. If it is possible, the node <code>num</code> will be upgraded.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"LockingTree\", \"lock\", \"unlock\", \"unlock\", \"lock\", \"upgrade\", \"lock\"]\n[[[-1, 0, 0, 1, 1, 2, 2]], [2, 2], [2, 3], [2, 2], [4, 5], [0, 1], [0, 1]]\nOutput\n[null, true, false, true, true, true, false]\n\nExplanation\nLockingTree lockingTree = new LockingTree([-1, 0, 0, 1, 1, 2, 2]);\nlockingTree.lock(2, 2);    // return true because node 2 is unlocked.\n                           // Node 2 will now be locked by user 2.\nlockingTree.unlock(2, 3);  // return false because user 3 cannot unlock a node locked by user 2.\nlockingTree.unlock(2, 2);  // return true because node 2 was previously locked by user 2.\n                           // Node 2 will now be unlocked.\nlockingTree.lock(4, 5);    // return true because node 4 is unlocked.\n                           // Node 4 will now be locked by user 5.\nlockingTree.upgrade(0, 1); // return true because node 0 is unlocked and has at least one locked descendant (node 4).\n                           // Node 0 will now be locked by user 1 and node 4 will now be unlocked.\nlockingTree.lock(0, 1);    // return false because node 0 is already locked.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == parent.length</code></li> <li><code>2 &lt;= n &lt;= 2000</code></li> <li><code>0 &lt;= parent[i] &lt;= n - 1</code> for <code>i != 0</code></li> <li><code>parent[0] == -1</code></li> <li><code>0 &lt;= num &lt;= n - 1</code></li> <li><code>1 &lt;= user &lt;= 10<sup>4</sup></code></li> <li><code>parent</code> represents a valid tree.</li> <li>At most <code>2000</code> calls in total will be made to <code>lock</code>, <code>unlock</code>, and <code>upgrade</code>.</li> </ul>"},{"location":"LeetCode_Problems/1994/","title":"1994. The Number of Good Subsets","text":"Problem <p>You are given an integer array <code>nums</code>. We call a subset of <code>nums</code> good if its product can be represented as a product of one or more distinct prime numbers.</p> <ul> <li>For example, if <code>nums = [1, 2, 3, 4]</code>:      <ul> <li><code>[2, 3]</code>, <code>[1, 2, 3]</code>, and <code>[1, 3]</code> are good subsets with products <code>6 = 2*3</code>, <code>6 = 2*3</code>, and <code>3 = 3</code> respectively.</li> <li><code>[1, 4]</code> and <code>[4]</code> are not good subsets with products <code>4 = 2*2</code> and <code>4 = 2*2</code> respectively.</li> </ul> </li> </ul> <p>Return the number of different good subsets in <code>nums</code> modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A subset of <code>nums</code> is any array that can be obtained by deleting some (possibly none or all) elements from <code>nums</code>. Two subsets are different if and only if the chosen indices to delete are different.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: 6\nExplanation: The good subsets are:\n- [1,2]: product is 2, which is the product of distinct prime 2.\n- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [1,3]: product is 3, which is the product of distinct prime 3.\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [3]: product is 3, which is the product of distinct prime 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,2,3,15]\nOutput: 5\nExplanation: The good subsets are:\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.\n- [3]: product is 3, which is the product of distinct prime 3.\n- [15]: product is 15, which is the product of distinct primes 3 and 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 30</code></li> </ul>"},{"location":"LeetCode_Problems/1995/","title":"1995. Count Special Quadruplets","text":"Problem <p>Given a 0-indexed integer array <code>nums</code>, return the number of distinct quadruplets <code>(a, b, c, d)</code> such that:</p> <ul> <li><code>nums[a] + nums[b] + nums[c] == nums[d]</code>, and</li> <li><code>a &lt; b &lt; c &lt; d</code></li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,6]\nOutput: 1\nExplanation: The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,3,6,4,5]\nOutput: 0\nExplanation: There are no such quadruplets in [3,3,6,4,5].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,1,3,5]\nOutput: 4\nExplanation: The 4 quadruplets that satisfy the requirement are:\n- (0, 1, 2, 3): 1 + 1 + 1 == 3\n- (0, 1, 3, 4): 1 + 1 + 3 == 5\n- (0, 2, 3, 4): 1 + 1 + 3 == 5\n- (1, 2, 3, 4): 1 + 1 + 3 == 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>4 &lt;= nums.length &lt;= 50</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/1996/","title":"1996. The Number of Weak Characters in the Game","text":"Problem <p>You are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. You are given a 2D integer array <code>properties</code> where <code>properties[i] = [attack<sub>i</sub>, defense<sub>i</sub>]</code> represents the properties of the <code>i<sup>th</sup></code> character in the game.</p> <p>A character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. More formally, a character <code>i</code> is said to be weak if there exists another character <code>j</code> where <code>attack<sub>j</sub> &gt; attack<sub>i</sub></code> and <code>defense<sub>j</sub> &gt; defense<sub>i</sub></code>.</p> <p>Return the number of weak characters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: properties = [[5,5],[6,3],[3,6]]\nOutput: 0\nExplanation: No character has strictly greater attack and defense than the other.\n</pre> <p>Example 2:</p> <pre>\nInput: properties = [[2,2],[3,3]]\nOutput: 1\nExplanation: The first character is weak because the second character has a strictly greater attack and defense.\n</pre> <p>Example 3:</p> <pre>\nInput: properties = [[1,5],[10,4],[4,3]]\nOutput: 1\nExplanation: The third character is weak because the second character has a strictly greater attack and defense.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= properties.length &lt;= 10<sup>5</sup></code></li> <li><code>properties[i].length == 2</code></li> <li><code>1 &lt;= attack<sub>i</sub>, defense<sub>i</sub> &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1997/","title":"1997. First Day Where You Have Been in All the Rooms","text":"Problem <p>There are <code>n</code> rooms you need to visit, labeled from <code>0</code> to <code>n - 1</code>. Each day is labeled, starting from <code>0</code>. You will go in and visit one room a day.</p> <p>Initially on day <code>0</code>, you visit room <code>0</code>. The order you visit the rooms for the coming days is determined by the following rules and a given 0-indexed array <code>nextVisit</code> of length <code>n</code>:</p> <ul> <li>Assuming that on a day, you visit room <code>i</code>,</li> <li>if you have been in room <code>i</code> an odd number of times (including the current visit), on the next day you will visit a room with a lower or equal room number specified by <code>nextVisit[i]</code> where <code>0 &lt;= nextVisit[i] &lt;= i</code>;</li> <li>if you have been in room <code>i</code> an even number of times (including the current visit), on the next day you will visit room <code>(i + 1) mod n</code>.</li> </ul> <p>Return the label of the first day where you have been in all the rooms. It can be shown that such a day exists. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nextVisit = [0,0]\nOutput: 2\nExplanation:\n- On day 0, you visit room 0. The total times you have been in room 0 is 1, which is odd.\n\u00a0 On the next day you will visit room nextVisit[0] = 0\n- On day 1, you visit room 0, The total times you have been in room 0 is 2, which is even.\n\u00a0 On the next day you will visit room (0 + 1) mod 2 = 1\n- On day 2, you visit room 1. This is the first day where you have been in all the rooms.\n</pre> <p>Example 2:</p> <pre>\nInput: nextVisit = [0,0,2]\nOutput: 6\nExplanation:\nYour room visiting order for each day is: [0,0,1,0,0,1,2,...].\nDay 6 is the first day where you have been in all the rooms.\n</pre> <p>Example 3:</p> <pre>\nInput: nextVisit = [0,1,2,0]\nOutput: 6\nExplanation:\nYour room visiting order for each day is: [0,0,1,1,2,2,3,...].\nDay 6 is the first day where you have been in all the rooms.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nextVisit.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nextVisit[i] &lt;= i</code></li> </ul>"},{"location":"LeetCode_Problems/1998/","title":"1998. GCD Sort of an Array","text":"Problem <p>You are given an integer array <code>nums</code>, and you can perform the following operation any number of times on <code>nums</code>:</p> <ul> <li>Swap the positions of two elements <code>nums[i]</code> and <code>nums[j]</code> if <code>gcd(nums[i], nums[j]) &gt; 1</code> where <code>gcd(nums[i], nums[j])</code> is the greatest common divisor of <code>nums[i]</code> and <code>nums[j]</code>.</li> </ul> <p>Return <code>true</code> if it is possible to sort <code>nums</code> in non-decreasing order using the above swap method, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [7,21,3]\nOutput: true\nExplanation: We can sort [7,21,3] by performing the following operations:\n- Swap 7 and 21 because gcd(7,21) = 7. nums = [21,7,3]\n- Swap 21 and 3 because gcd(21,3) = 3. nums = [3,7,21]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,2,6,2]\nOutput: false\nExplanation: It is impossible to sort the array because 5 cannot be swapped with any other element.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [10,5,9,3,15]\nOutput: true\nWe can sort [10,5,9,3,15] by performing the following operations:\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [15,5,9,3,10]\n- Swap 15 and 3 because gcd(15,3) = 3. nums = [3,5,9,15,10]\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,10,15]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>2 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/1999/","title":"1999. Smallest Greater Multiple Made of Two Digits","text":"Problem"},{"location":"LeetCode_Problems/2000/","title":"2000. Reverse Prefix of Word","text":"Problem <p>Given a 0-indexed string <code>word</code> and a character <code>ch</code>, reverse the segment of <code>word</code> that starts at index <code>0</code> and ends at the index of the first occurrence of <code>ch</code> (inclusive). If the character <code>ch</code> does not exist in <code>word</code>, do nothing.</p> <ul> <li>For example, if <code>word = \"abcdefd\"</code> and <code>ch = \"d\"</code>, then you should reverse the segment that starts at <code>0</code> and ends at <code>3</code> (inclusive). The resulting string will be <code>\"dcbaefd\"</code>.</li> </ul> <p>Return the resulting string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"abcdefd\", ch = \"d\"\nOutput: \"dcbaefd\"\nExplanation:\u00a0The first occurrence of \"d\" is at index 3. \nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"dcbaefd\".\n</pre> <p>Example 2:</p> <pre>\nInput: word = \"xyxzxe\", ch = \"z\"\nOutput: \"zxyxxe\"\nExplanation:\u00a0The first and only occurrence of \"z\" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"zxyxxe\".\n</pre> <p>Example 3:</p> <pre>\nInput: word = \"abcd\", ch = \"z\"\nOutput: \"abcd\"\nExplanation:\u00a0\"z\" does not exist in word.\nYou should not do any reverse operation, the resulting string is \"abcd\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 250</code></li> <li><code>word</code> consists of lowercase English letters.</li> <li><code>ch</code> is a lowercase English letter.</li> </ul>"},{"location":"LeetCode_Problems/2001/","title":"2001. Number of Pairs of Interchangeable Rectangles","text":"Problem <p>You are given <code>n</code> rectangles represented by a 0-indexed 2D integer array <code>rectangles</code>, where <code>rectangles[i] = [width<sub>i</sub>, height<sub>i</sub>]</code> denotes the width and height of the <code>i<sup>th</sup></code> rectangle.</p> <p>Two rectangles <code>i</code> and <code>j</code> (<code>i &lt; j</code>) are considered interchangeable if they have the same width-to-height ratio. More formally, two rectangles are interchangeable if <code>width<sub>i</sub>/height<sub>i</sub> == width<sub>j</sub>/height<sub>j</sub></code> (using decimal division, not integer division).</p> <p>Return the number of pairs of interchangeable rectangles in <code>rectangles</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rectangles = [[4,8],[3,6],[10,20],[15,30]]\nOutput: 6\nExplanation: The following are the interchangeable pairs of rectangles by index (0-indexed):\n- Rectangle 0 with rectangle 1: 4/8 == 3/6.\n- Rectangle 0 with rectangle 2: 4/8 == 10/20.\n- Rectangle 0 with rectangle 3: 4/8 == 15/30.\n- Rectangle 1 with rectangle 2: 3/6 == 10/20.\n- Rectangle 1 with rectangle 3: 3/6 == 15/30.\n- Rectangle 2 with rectangle 3: 10/20 == 15/30.\n</pre> <p>Example 2:</p> <pre>\nInput: rectangles = [[4,5],[7,8]]\nOutput: 0\nExplanation: There are no interchangeable pairs of rectangles.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == rectangles.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>rectangles[i].length == 2</code></li> <li><code>1 &lt;= width<sub>i</sub>, height<sub>i</sub> &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2002/","title":"2002. Maximum Product of the Length of Two Palindromic Subsequences","text":"Problem <p>Given a string <code>s</code>, find two disjoint palindromic subsequences of <code>s</code> such that the product of their lengths is maximized. The two subsequences are disjoint if they do not both pick a character at the same index.</p> <p>Return the maximum possible product of the lengths of the two palindromic subsequences.</p> <p>A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is palindromic if it reads the same forward and backward.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: s = \"leetcodecom\"\nOutput: 9\nExplanation: An optimal solution is to choose \"ete\" for the 1<sup>st</sup> subsequence and \"cdc\" for the 2<sup>nd</sup> subsequence.\nThe product of their lengths is: 3 * 3 = 9.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"bb\"\nOutput: 1\nExplanation: An optimal solution is to choose \"b\" (the first character) for the 1<sup>st</sup> subsequence and \"b\" (the second character) for the 2<sup>nd</sup> subsequence.\nThe product of their lengths is: 1 * 1 = 1.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"accbcaxxcxx\"\nOutput: 25\nExplanation: An optimal solution is to choose \"accca\" for the 1<sup>st</sup> subsequence and \"xxcxx\" for the 2<sup>nd</sup> subsequence.\nThe product of their lengths is: 5 * 5 = 25.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 12</code></li> <li><code>s</code> consists of lowercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/2003/","title":"2003. Smallest Missing Genetic Value in Each Subtree","text":"Problem <p>There is a family tree rooted at <code>0</code> consisting of <code>n</code> nodes numbered <code>0</code> to <code>n - 1</code>. You are given a 0-indexed integer array <code>parents</code>, where <code>parents[i]</code> is the parent for node <code>i</code>. Since node <code>0</code> is the root, <code>parents[0] == -1</code>.</p> <p>There are <code>10<sup>5</sup></code> genetic values, each represented by an integer in the inclusive range <code>[1, 10<sup>5</sup>]</code>. You are given a 0-indexed integer array <code>nums</code>, where <code>nums[i]</code> is a distinct genetic value for node <code>i</code>.</p> <p>Return an array <code>ans</code> of length <code>n</code> where <code>ans[i]</code> is the smallest genetic value that is missing from the subtree rooted at node <code>i</code>.</p> <p>The subtree rooted at a node <code>x</code> contains node <code>x</code> and all of its descendant nodes.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: parents = [-1,0,0,2], nums = [1,2,3,4]\nOutput: [5,1,1,1]\nExplanation: The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value.\n- 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.\n- 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value.\n- 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]\nOutput: [7,1,1,4,2,1]\nExplanation: The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value.\n- 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value.\n- 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.\n- 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value.\n- 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.\n- 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value.\n</pre> <p>Example 3:</p> <pre>\nInput: parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]\nOutput: [1,1,1,1,1,1,1]\nExplanation: The value 1 is missing from all the subtrees.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == parents.length == nums.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= parents[i] &lt;= n - 1</code> for <code>i != 0</code></li> <li><code>parents[0] == -1</code></li> <li><code>parents</code> represents a valid tree.</li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li>Each <code>nums[i]</code> is distinct.</li> </ul>"},{"location":"LeetCode_Problems/2004/","title":"2004. The Number of Seniors and Juniors to Join the Company","text":"Problem"},{"location":"LeetCode_Problems/2005/","title":"2005. Subtree Removal Game with Fibonacci Tree","text":"Problem"},{"location":"LeetCode_Problems/2006/","title":"2006. Count Number of Pairs With Absolute Difference K","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the number of pairs <code>(i, j)</code> where <code>i &lt; j</code> such that <code>|nums[i] - nums[j]| == k</code>.</p> <p>The value of <code>|x|</code> is defined as:</p> <ul> <li><code>x</code> if <code>x &gt;= 0</code>.</li> <li><code>-x</code> if <code>x &lt; 0</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,2,1], k = 1\nOutput: 4\nExplanation: The pairs with an absolute difference of 1 are:\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3], k = 3\nOutput: 0\nExplanation: There are no pairs with an absolute difference of 3.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,2,1,5,4], k = 2\nOutput: 3\nExplanation: The pairs with an absolute difference of 2 are:\n- [3,2,1,5,4]\n- [3,2,1,5,4]\n- [3,2,1,5,4]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= 99</code></li> </ul>"},{"location":"LeetCode_Problems/2007/","title":"2007. Find Original Array From Doubled Array","text":"Problem <p>An integer array <code>original</code> is transformed into a doubled array <code>changed</code> by appending twice the value of every element in <code>original</code>, and then randomly shuffling the resulting array.</p> <p>Given an array <code>changed</code>, return <code>original</code> if <code>changed</code> is a doubled array. If <code>changed</code> is not a doubled array, return an empty array. The elements in <code>original</code> may be returned in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: changed = [1,3,4,2,6,8]\nOutput: [1,3,4]\nExplanation: One possible original array could be [1,3,4]:\n- Twice the value of 1 is 1 * 2 = 2.\n- Twice the value of 3 is 3 * 2 = 6.\n- Twice the value of 4 is 4 * 2 = 8.\nOther original arrays could be [4,3,1] or [3,1,4].\n</pre> <p>Example 2:</p> <pre>\nInput: changed = [6,3,0,1]\nOutput: []\nExplanation: changed is not a doubled array.\n</pre> <p>Example 3:</p> <pre>\nInput: changed = [1]\nOutput: []\nExplanation: changed is not a doubled array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= changed.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= changed[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2008/","title":"2008. Maximum Earnings From Taxi","text":"Problem <p>There are <code>n</code> points on a road you are driving your taxi on. The <code>n</code> points on the road are labeled from <code>1</code> to <code>n</code> in the direction you are going, and you want to drive from point <code>1</code> to point <code>n</code> to make money by picking up passengers. You cannot change the direction of the taxi.</p> <p>The passengers are represented by a 0-indexed 2D integer array <code>rides</code>, where <code>rides[i] = [start<sub>i</sub>, end<sub>i</sub>, tip<sub>i</sub>]</code> denotes the <code>i<sup>th</sup></code> passenger requesting a ride from point <code>start<sub>i</sub></code> to point <code>end<sub>i</sub></code> who is willing to give a <code>tip<sub>i</sub></code> dollar tip.</p> <p>For each passenger <code>i</code> you pick up, you earn <code>end<sub>i</sub> - start<sub>i</sub> + tip<sub>i</sub></code> dollars. You may only drive at most one passenger at a time.</p> <p>Given <code>n</code> and <code>rides</code>, return the maximum number of dollars you can earn by picking up the passengers optimally.</p> <p>Note: You may drop off a passenger and pick up a different passenger at the same point.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5, rides = [[2,5,4],[1,5,1]]\nOutput: 7\nExplanation: We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]\nOutput: 20\nExplanation: We will pick up the following passengers:\n- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.\n- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.\n- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.\nWe earn 9 + 5 + 6 = 20 dollars in total.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= rides.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>rides[i].length == 3</code></li> <li><code>1 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= n</code></li> <li><code>1 &lt;= tip<sub>i</sub> &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2009/","title":"2009. Minimum Number of Operations to Make Array Continuous","text":"Problem <p>You are given an integer array <code>nums</code>. In one operation, you can replace any element in <code>nums</code> with any integer.</p> <p><code>nums</code> is considered continuous if both of the following conditions are fulfilled:</p> <ul> <li>All elements in <code>nums</code> are unique.</li> <li>The difference between the maximum element and the minimum element in <code>nums</code> equals <code>nums.length - 1</code>.</li> </ul> <p>For example, <code>nums = [4, 2, 5, 3]</code> is continuous, but <code>nums = [1, 2, 3, 5, 6]</code> is not continuous.</p> <p>Return the minimum number of operations to make <code>nums</code> continuous.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,2,5,3]\nOutput: 0\nExplanation:\u00a0nums is already continuous.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,5,6]\nOutput: 1\nExplanation:\u00a0One possible solution is to change the last element to 4.\nThe resulting array is [1,2,3,5,4], which is continuous.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,10,100,1000]\nOutput: 3\nExplanation:\u00a0One possible solution is to:\n- Change the second element to 2.\n- Change the third element to 3.\n- Change the fourth element to 4.\nThe resulting array is [1,2,3,4], which is continuous.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2010/","title":"2010. The Number of Seniors and Juniors to Join the Company II","text":"Problem"},{"location":"LeetCode_Problems/2011/","title":"2011. Final Value of Variable After Performing Operations","text":"Problem <p>There is a programming language with only four operations and one variable <code>X</code>:</p> <ul> <li><code>++X</code> and <code>X++</code> increments the value of the variable <code>X</code> by <code>1</code>.</li> <li><code>--X</code> and <code>X--</code> decrements the value of the variable <code>X</code> by <code>1</code>.</li> </ul> <p>Initially, the value of <code>X</code> is <code>0</code>.</p> <p>Given an array of strings <code>operations</code> containing a list of operations, return the final value of <code>X</code> after performing all the operations.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: operations = [\"--X\",\"X++\",\"X++\"]\nOutput: 1\nExplanation:\u00a0The operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X =  0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 =  0.\nX++: X is incremented by 1, X =  0 + 1 =  1.\n</pre> <p>Example 2:</p> <pre>\nInput: operations = [\"++X\",\"++X\",\"X++\"]\nOutput: 3\nExplanation: The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3.\n</pre> <p>Example 3:</p> <pre>\nInput: operations = [\"X++\",\"++X\",\"--X\",\"X--\"]\nOutput: 0\nExplanation:\u00a0The operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= operations.length &lt;= 100</code></li> <li><code>operations[i]</code> will be either <code>\"++X\"</code>, <code>\"X++\"</code>, <code>\"--X\"</code>, or <code>\"X--\"</code>.</li> </ul>"},{"location":"LeetCode_Problems/2012/","title":"2012. Sum of Beauty in the Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. For each index <code>i</code> (<code>1 &lt;= i &lt;= nums.length - 2</code>) the beauty of <code>nums[i]</code> equals:</p> <ul> <li><code>2</code>, if <code>nums[j] &lt; nums[i] &lt; nums[k]</code>, for all <code>0 &lt;= j &lt; i</code> and for all <code>i &lt; k &lt;= nums.length - 1</code>.</li> <li><code>1</code>, if <code>nums[i - 1] &lt; nums[i] &lt; nums[i + 1]</code>, and the previous condition is not satisfied.</li> <li><code>0</code>, if none of the previous conditions holds.</li> </ul> <p>Return the sum of beauty of all <code>nums[i]</code> where <code>1 &lt;= i &lt;= nums.length - 2</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 2\nExplanation: For each index i in the range 1 &lt;= i &lt;= 1:\n- The beauty of nums[1] equals 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,4,6,4]\nOutput: 1\nExplanation: For each index i in the range 1 &lt;= i &lt;= 2:\n- The beauty of nums[1] equals 1.\n- The beauty of nums[2] equals 0.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,2,1]\nOutput: 0\nExplanation: For each index i in the range 1 &lt;= i &lt;= 1:\n- The beauty of nums[1] equals 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2013/","title":"2013. Detect Squares","text":"Problem <p>You are given a stream of points on the X-Y plane. Design an algorithm that:</p> <ul> <li>Adds new points from the stream into a data structure. Duplicate points are allowed and should be treated as different points.</li> <li>Given a query point, counts the number of ways to choose three points from the data structure such that the three points and the query point form an axis-aligned square with positive area.</li> </ul> <p>An axis-aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.</p> <p>Implement the <code>DetectSquares</code> class:</p> <ul> <li><code>DetectSquares()</code> Initializes the object with an empty data structure.</li> <li><code>void add(int[] point)</code> Adds a new point <code>point = [x, y]</code> to the data structure.</li> <li><code>int count(int[] point)</code> Counts the number of ways to form axis-aligned squares with point <code>point = [x, y]</code> as described above.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"DetectSquares\", \"add\", \"add\", \"add\", \"count\", \"count\", \"add\", \"count\"]\n[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]\nOutput\n[null, null, null, null, 1, 0, null, 2]\n\nExplanation\nDetectSquares detectSquares = new DetectSquares();\ndetectSquares.add([3, 10]);\ndetectSquares.add([11, 2]);\ndetectSquares.add([3, 2]);\ndetectSquares.count([11, 10]); // return 1. You can choose:\n                               //   - The first, second, and third points\ndetectSquares.count([14, 8]);  // return 0. The query point cannot form a square with any points in the data structure.\ndetectSquares.add([11, 2]);    // Adding duplicate points is allowed.\ndetectSquares.count([11, 10]); // return 2. You can choose:\n                               //   - The first, second, and third points\n                               //   - The first, third, and fourth points\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>point.length == 2</code></li> <li><code>0 &lt;= x, y &lt;= 1000</code></li> <li>At most <code>3000</code> calls in total will be made to <code>add</code> and <code>count</code>.</li> </ul>"},{"location":"LeetCode_Problems/2014/","title":"2014. Longest Subsequence Repeated k Times","text":"Problem <p>You are given a string <code>s</code> of length <code>n</code>, and an integer <code>k</code>. You are tasked to find the longest subsequence repeated <code>k</code> times in string <code>s</code>.</p> <p>A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p> <p>A subsequence <code>seq</code> is repeated <code>k</code> times in the string <code>s</code> if <code>seq * k</code> is a subsequence of <code>s</code>, where <code>seq * k</code> represents a string constructed by concatenating <code>seq</code> <code>k</code> times.</p> <ul> <li>For example, <code>\"bba\"</code> is repeated <code>2</code> times in the string <code>\"bababcba\"</code>, because the string <code>\"bbabba\"</code>, constructed by concatenating <code>\"bba\"</code> <code>2</code> times, is a subsequence of the string <code>\"bababcba\"</code>.</li> </ul> <p>Return the longest subsequence repeated <code>k</code> times in string <code>s</code>. If multiple such subsequences are found, return the lexicographically largest one. If there is no such subsequence, return an empty string.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: s = \"letsleetcode\", k = 2\nOutput: \"let\"\nExplanation: There are two longest subsequences repeated 2 times: \"let\" and \"ete\".\n\"let\" is the lexicographically largest one.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"bb\", k = 2\nOutput: \"b\"\nExplanation: The longest subsequence repeated 2 times is \"b\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"ab\", k = 2\nOutput: \"\"\nExplanation: There is no subsequence repeated 2 times. Empty string is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == s.length</code></li> <li><code>2 &lt;= n, k &lt;= 2000</code></li> <li><code>2 &lt;= n &lt; k * 8</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2015/","title":"2015. Average Height of Buildings in Each Segment","text":"Problem"},{"location":"LeetCode_Problems/2016/","title":"2016. Maximum Difference Between Increasing Elements","text":"Problem <p>Given a 0-indexed integer array <code>nums</code> of size <code>n</code>, find the maximum difference between <code>nums[i]</code> and <code>nums[j]</code> (i.e., <code>nums[j] - nums[i]</code>), such that <code>0 &lt;= i &lt; j &lt; n</code> and <code>nums[i] &lt; nums[j]</code>.</p> <p>Return the maximum difference. If no such <code>i</code> and <code>j</code> exists, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [7,1,5,4]\nOutput: 4\nExplanation:\nThe maximum difference occurs with i = 1 and j = 2, nums[j] - nums[i] = 5 - 1 = 4.\nNote that with i = 1 and j = 0, the difference nums[j] - nums[i] = 7 - 1 = 6, but i &gt; j, so it is not valid.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [9,4,3,2]\nOutput: -1\nExplanation:\nThere is no i and j such that i &lt; j and nums[i] &lt; nums[j].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,5,2,10]\nOutput: 9\nExplanation:\nThe maximum difference occurs with i = 0 and j = 3, nums[j] - nums[i] = 10 - 1 = 9.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2017/","title":"2017. Grid Game","text":"Problem <p>You are given a 0-indexed 2D array <code>grid</code> of size <code>2 x n</code>, where <code>grid[r][c]</code> represents the number of points at position <code>(r, c)</code> on the matrix. Two robots are playing a game on this matrix.</p> <p>Both robots initially start at <code>(0, 0)</code> and want to reach <code>(1, n-1)</code>. Each robot may only move to the right (<code>(r, c)</code> to <code>(r, c + 1)</code>) or down (<code>(r, c)</code> to <code>(r + 1, c)</code>).</p> <p>At the start of the game, the first robot moves from <code>(0, 0)</code> to <code>(1, n-1)</code>, collecting all the points from the cells on its path. For all cells <code>(r, c)</code> traversed on the path, <code>grid[r][c]</code> is set to <code>0</code>. Then, the second robot moves from <code>(0, 0)</code> to <code>(1, n-1)</code>, collecting the points on its path. Note that their paths may intersect with one another.</p> <p>The first robot wants to minimize the number of points collected by the second robot. In contrast, the second robot wants to maximize the number of points it collects. If both robots play optimally, return the number of points collected by the second robot.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[2,5,4],[1,5,1]]\nOutput: 4\nExplanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 0 + 4 + 0 = 4 points.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[3,3,1],[8,5,2]]\nOutput: 4\nExplanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 3 + 1 + 0 = 4 points.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[1,3,1,15],[1,3,3,1]]\nOutput: 7\nExplanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 1 + 3 + 3 + 0 = 7 points.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>grid.length == 2</code></li> <li><code>n == grid[r].length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= grid[r][c] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2018/","title":"2018. Check if Word Can Be Placed In Crossword","text":"Problem <p>You are given an <code>m x n</code> matrix <code>board</code>, representing the current state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), <code>' '</code> to represent any empty cells, and <code>'#'</code> to represent any blocked cells.</p> <p>A word can be placed horizontally (left to right or right to left) or vertically (top to bottom or bottom to top) in the board if:</p> <ul> <li>It does not occupy a cell containing the character <code>'#'</code>.</li> <li>The cell each letter is placed in must either be <code>' '</code> (empty) or match the letter already on the <code>board</code>.</li> <li>There must not be any empty cells <code>' '</code> or other lowercase letters directly left or right of the word if the word was placed horizontally.</li> <li>There must not be any empty cells <code>' '</code> or other lowercase letters directly above or below the word if the word was placed vertically.</li> </ul> <p>Given a string <code>word</code>, return <code>true</code> if <code>word</code> can be placed in <code>board</code>, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \"c\", \" \"]], word = \"abc\"\nOutput: true\nExplanation: The word \"abc\" can be placed as shown above (top to bottom).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: board = [[\" \", \"#\", \"a\"], [\" \", \"#\", \"c\"], [\" \", \"#\", \"a\"]], word = \"ac\"\nOutput: false\nExplanation: It is impossible to place the word because there will always be a space/letter above or below it.</pre> <p>Example 3:</p> <p></p> <pre>\nInput: board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \" \", \"c\"]], word = \"ca\"\nOutput: true\nExplanation: The word \"ca\" can be placed as shown above (right to left). \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == board.length</code></li> <li><code>n == board[i].length</code></li> <li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li> <li><code>board[i][j]</code> will be <code>' '</code>, <code>'#'</code>, or a lowercase English letter.</li> <li><code>1 &lt;= word.length &lt;= max(m, n)</code></li> <li><code>word</code> will contain only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2019/","title":"2019. The Score of Students Solving Math Expression","text":"Problem <p>You are given a string <code>s</code> that contains digits <code>0-9</code>, addition symbols <code>'+'</code>, and multiplication symbols <code>'*'</code> only, representing a valid math expression of single digit numbers (e.g., <code>3+5*2</code>). This expression was given to <code>n</code> elementary school students. The students were instructed to get the answer of the expression by following this order of operations:</p> <ol> <li>Compute multiplication, reading from left to right; Then,</li> <li>Compute addition, reading from left to right.</li> </ol> <p>You are given an integer array <code>answers</code> of length <code>n</code>, which are the submitted answers of the students in no particular order. You are asked to grade the <code>answers</code>, by following these rules:</p> <ul> <li>If an answer equals the correct answer of the expression, this student will be rewarded <code>5</code> points;</li> <li>Otherwise, if the answer could be interpreted as if the student applied the operators in the wrong order but had correct arithmetic, this student will be rewarded <code>2</code> points;</li> <li>Otherwise, this student will be rewarded <code>0</code> points.</li> </ul> <p>Return the sum of the points of the students.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: s = \"7+3*1*2\", answers = [20,13,42]\nOutput: 7\nExplanation: As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: [20,13,42]\nA student might have applied the operators in this wrong order: ((7+3)*1)*2 = 20. Therefore one student is rewarded 2 points: [20,13,42]\nThe points for the students are: [2,5,0]. The sum of the points is 2+5+0=7.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"3+5*2\", answers = [13,0,10,13,13,16,16]\nOutput: 19\nExplanation: The correct answer of the expression is 13, therefore three students are rewarded 5 points each: [13,0,10,13,13,16,16]\nA student might have applied the operators in this wrong order: ((3+5)*2 = 16. Therefore two students are rewarded 2 points: [13,0,10,13,13,16,16]\nThe points for the students are: [5,0,0,5,5,2,2]. The sum of the points is 5+0+0+5+5+2+2=19.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"6+0*1\", answers = [12,9,6,4,8,6]\nOutput: 10\nExplanation: The correct answer of the expression is 6.\nIf a student had incorrectly done (6+0)*1, the answer would also be 6.\nBy the rules of grading, the students will still be rewarded 5 points (as they got the correct answer), not 2 points.\nThe points for the students are: [0,0,5,0,0,5]. The sum of the points is 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= s.length &lt;= 31</code></li> <li><code>s</code> represents a valid expression that contains only digits <code>0-9</code>, <code>'+'</code>, and <code>'*'</code> only.</li> <li>All the integer operands in the expression are in the inclusive range <code>[0, 9]</code>.</li> <li><code>1 &lt;=</code> The count of all operators (<code>'+'</code> and <code>'*'</code>) in the math expression <code>&lt;= 15</code></li> <li>Test data are generated such that the correct answer of the expression is in the range of <code>[0, 1000]</code>.</li> <li><code>n == answers.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= answers[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2020/","title":"2020. Number of Accounts That Did Not Stream","text":"Problem"},{"location":"LeetCode_Problems/2021/","title":"2021. Brightest Position on Street","text":"Problem"},{"location":"LeetCode_Problems/2022/","title":"2022. Convert 1D Array Into 2D Array","text":"Problem <p>You are given a 0-indexed 1-dimensional (1D) integer array <code>original</code>, and two integers, <code>m</code> and <code>n</code>. You are tasked with creating a 2-dimensional (2D) array with <code> m</code> rows and <code>n</code> columns using all the elements from <code>original</code>.</p> <p>The elements from indices <code>0</code> to <code>n - 1</code> (inclusive) of <code>original</code> should form the first row of the constructed 2D array, the elements from indices <code>n</code> to <code>2 * n - 1</code> (inclusive) should form the second row of the constructed 2D array, and so on.</p> <p>Return an <code>m x n</code> 2D array constructed according to the above procedure, or an empty 2D array if it is impossible.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: original = [1,2,3,4], m = 2, n = 2\nOutput: [[1,2],[3,4]]\nExplanation: The constructed 2D array should contain 2 rows and 2 columns.\nThe first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.\nThe second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array.\n</pre> <p>Example 2:</p> <pre>\nInput: original = [1,2,3], m = 1, n = 3\nOutput: [[1,2,3]]\nExplanation: The constructed 2D array should contain 1 row and 3 columns.\nPut all three elements in original into the first row of the constructed 2D array.\n</pre> <p>Example 3:</p> <pre>\nInput: original = [1,2], m = 1, n = 1\nOutput: []\nExplanation: There are 2 elements in original.\nIt is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= original.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= original[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m, n &lt;= 4 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2023/","title":"2023. Number of Pairs of Strings With Concatenation Equal to Target","text":"Problem <p>Given an array of digit strings <code>nums</code> and a digit string <code>target</code>, return the number of pairs of indices <code>(i, j)</code> (where <code>i != j</code>) such that the concatenation of <code>nums[i] + nums[j]</code> equals <code>target</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [\"777\",\"7\",\"77\",\"77\"], target = \"7777\"\nOutput: 4\nExplanation: Valid pairs are:\n- (0, 1): \"777\" + \"7\"\n- (1, 0): \"7\" + \"777\"\n- (2, 3): \"77\" + \"77\"\n- (3, 2): \"77\" + \"77\"\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [\"123\",\"4\",\"12\",\"34\"], target = \"1234\"\nOutput: 2\nExplanation: Valid pairs are:\n- (0, 1): \"123\" + \"4\"\n- (2, 3): \"12\" + \"34\"\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [\"1\",\"1\",\"1\"], target = \"11\"\nOutput: 6\nExplanation: Valid pairs are:\n- (0, 1): \"1\" + \"1\"\n- (1, 0): \"1\" + \"1\"\n- (0, 2): \"1\" + \"1\"\n- (2, 0): \"1\" + \"1\"\n- (1, 2): \"1\" + \"1\"\n- (2, 1): \"1\" + \"1\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i].length &lt;= 100</code></li> <li><code>2 &lt;= target.length &lt;= 100</code></li> <li><code>nums[i]</code> and <code>target</code> consist of digits.</li> <li><code>nums[i]</code> and <code>target</code> do not have leading zeros.</li> </ul>"},{"location":"LeetCode_Problems/2024/","title":"2024. Maximize the Confusion of an Exam","text":"Problem <p>A teacher is writing a test with <code>n</code> true/false questions, with <code>'T'</code> denoting true and <code>'F'</code> denoting false. He wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row).</p> <p>You are given a string <code>answerKey</code>, where <code>answerKey[i]</code> is the original answer to the <code>i<sup>th</sup></code> question. In addition, you are given an integer <code>k</code>, the maximum number of times you may perform the following operation:</p> <ul> <li>Change the answer key for any question to <code>'T'</code> or <code>'F'</code> (i.e., set <code>answerKey[i]</code> to <code>'T'</code> or <code>'F'</code>).</li> </ul> <p>Return the maximum number of consecutive <code>'T'</code>s or <code>'F'</code>s in the answer key after performing the operation at most <code>k</code> times.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: answerKey = \"TTFF\", k = 2\nOutput: 4\nExplanation: We can replace both the 'F's with 'T's to make answerKey = \"TTTT\".\nThere are four consecutive 'T's.\n</pre> <p>Example 2:</p> <pre>\nInput: answerKey = \"TFFT\", k = 1\nOutput: 3\nExplanation: We can replace the first 'T' with an 'F' to make answerKey = \"FFFT\".\nAlternatively, we can replace the second 'T' with an 'F' to make answerKey = \"TFFF\".\nIn both cases, there are three consecutive 'F's.\n</pre> <p>Example 3:</p> <pre>\nInput: answerKey = \"TTFTTFTT\", k = 1\nOutput: 5\nExplanation: We can replace the first 'F' to make answerKey = \"TTTTTFTT\"\nAlternatively, we can replace the second 'F' to make answerKey = \"TTFTTTTT\". \nIn both cases, there are five consecutive 'T's.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == answerKey.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>answerKey[i]</code> is either <code>'T'</code> or <code>'F'</code></li> <li><code>1 &lt;= k &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2025/","title":"2025. Maximum Number of Ways to Partition an Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of length <code>n</code>. The number of ways to partition <code>nums</code> is the number of <code>pivot</code> indices that satisfy both conditions:</p> <ul> <li><code>1 &lt;= pivot &lt; n</code></li> <li><code>nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]</code></li> </ul> <p>You are also given an integer <code>k</code>. You can choose to change the value of one element of <code>nums</code> to <code>k</code>, or to leave the array unchanged.</p> <p>Return the maximum possible number of ways to partition <code>nums</code> to satisfy both conditions after changing at most one element.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,-1,2], k = 3\nOutput: 1\nExplanation: One optimal approach is to change nums[0] to k. The array becomes [3,-1,2].\nThere is one way to partition the array:\n- For pivot = 2, we have the partition [3,-1 | 2]: 3 + -1 == 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,0,0], k = 1\nOutput: 2\nExplanation: The optimal approach is to leave the array unchanged.\nThere are two ways to partition the array:\n- For pivot = 1, we have the partition [0 | 0,0]: 0 == 0 + 0.\n- For pivot = 2, we have the partition [0,0 | 0]: 0 + 0 == 0.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33\nOutput: 4\nExplanation: One optimal approach is to change nums[2] to k. The array becomes [22,4,-33,-20,-15,15,-16,7,19,-10,0,-13,-14].\nThere are four ways to partition the array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= k, nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2026/","title":"2026. Low-Quality Problems","text":"Problem"},{"location":"LeetCode_Problems/2027/","title":"2027. Minimum Moves to Convert String","text":"Problem <p>You are given a string <code>s</code> consisting of <code>n</code> characters which are either <code>'X'</code> or <code>'O'</code>.</p> <p>A move is defined as selecting three consecutive characters of <code>s</code> and converting them to <code>'O'</code>. Note that if a move is applied to the character <code>'O'</code>, it will stay the same.</p> <p>Return the minimum number of moves required so that all the characters of <code>s</code> are converted to <code>'O'</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"XXX\"\nOutput: 1\nExplanation: XXX -&gt; OOO\nWe select all the 3 characters and convert them in one move.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"XXOX\"\nOutput: 2\nExplanation: XXOX -&gt; OOOX -&gt; OOOO\nWe select the first 3 characters in the first move, and convert them to <code>'O'</code>.\nThen we select the last 3 characters and convert them so that the final string contains all <code>'O'</code>s.</pre> <p>Example 3:</p> <pre>\nInput: s = \"OOOO\"\nOutput: 0\nExplanation: There are no <code>'X's</code> in <code>s</code> to convert.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'X'</code> or <code>'O'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2028/","title":"2028. Find Missing Observations","text":"Problem <p>You have observations of <code>n + m</code> 6-sided dice rolls with each face numbered from <code>1</code> to <code>6</code>. <code>n</code> of the observations went missing, and you only have the observations of <code>m</code> rolls. Fortunately, you have also calculated the average value of the <code>n + m</code> rolls.</p> <p>You are given an integer array <code>rolls</code> of length <code>m</code> where <code>rolls[i]</code> is the value of the <code>i<sup>th</sup></code> observation. You are also given the two integers <code>mean</code> and <code>n</code>.</p> <p>Return an array of length <code>n</code> containing the missing observations such that the average value of the <code>n + m</code> rolls is exactly <code>mean</code>. If there are multiple valid answers, return any of them. If no such array exists, return an empty array.</p> <p>The average value of a set of <code>k</code> numbers is the sum of the numbers divided by <code>k</code>.</p> <p>Note that <code>mean</code> is an integer, so the sum of the <code>n + m</code> rolls should be divisible by <code>n + m</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rolls = [3,2,4,3], mean = 4, n = 2\nOutput: [6,6]\nExplanation: The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4.\n</pre> <p>Example 2:</p> <pre>\nInput: rolls = [1,5,6], mean = 3, n = 4\nOutput: [2,3,2,2]\nExplanation: The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3.\n</pre> <p>Example 3:</p> <pre>\nInput: rolls = [1,2,3,4], mean = 6, n = 4\nOutput: []\nExplanation: It is impossible for the mean to be 6 no matter what the 4 missing rolls are.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == rolls.length</code></li> <li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= rolls[i], mean &lt;= 6</code></li> </ul>"},{"location":"LeetCode_Problems/2029/","title":"2029. Stone Game IX","text":"Problem <p>Alice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. You are given an integer array <code>stones</code>, where <code>stones[i]</code> is the value of the <code>i<sup>th</sup></code> stone.</p> <p>Alice and Bob take turns, with Alice starting first. On each turn, the player may remove any stone from <code>stones</code>. The player who removes a stone loses if the sum of the values of all removed stones is divisible by <code>3</code>. Bob will win automatically if there are no remaining stones (even if it is Alice's turn).</p> <p>Assuming both players play optimally, return <code>true</code> if Alice wins and <code>false</code> if Bob wins.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stones = [2,1]\nOutput: true\nExplanation:\u00a0The game will be played as follows:\n- Turn 1: Alice can remove either stone.\n- Turn 2: Bob removes the remaining stone. \nThe sum of the removed stones is 1 + 2 = 3 and is divisible by 3. Therefore, Bob loses and Alice wins the game.\n</pre> <p>Example 2:</p> <pre>\nInput: stones = [2]\nOutput: false\nExplanation:\u00a0Alice will remove the only stone, and the sum of the values on the removed stones is 2. \nSince all the stones are removed and the sum of values is not divisible by 3, Bob wins the game.\n</pre> <p>Example 3:</p> <pre>\nInput: stones = [5,1,2,4,3]\nOutput: false\nExplanation: Bob will always win. One possible way for Bob to win is shown below:\n- Turn 1: Alice can remove the second stone with value 1. Sum of removed stones = 1.\n- Turn 2: Bob removes the fifth stone with value 3. Sum of removed stones = 1 + 3 = 4.\n- Turn 3: Alices removes the fourth stone with value 4. Sum of removed stones = 1 + 3 + 4 = 8.\n- Turn 4: Bob removes the third stone with value 2. Sum of removed stones = 1 + 3 + 4 + 2 = 10.\n- Turn 5: Alice removes the first stone with value 5. Sum of removed stones = 1 + 3 + 4 + 2 + 5 = 15.\nAlice loses the game because the sum of the removed stones (15) is divisible by 3. Bob wins the game.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= stones.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= stones[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2030/","title":"2030. Smallest K-Length Subsequence With Occurrences of a Letter","text":"Problem <p>You are given a string <code>s</code>, an integer <code>k</code>, a letter <code>letter</code>, and an integer <code>repetition</code>.</p> <p>Return the lexicographically smallest subsequence of <code>s</code> of length <code>k</code> that has the letter <code>letter</code> appear at least <code>repetition</code> times. The test cases are generated so that the <code>letter</code> appears in <code>s</code> at least <code>repetition</code> times.</p> <p>A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p> <p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"leet\", k = 3, letter = \"e\", repetition = 1\nOutput: \"eet\"\nExplanation: There are four subsequences of length 3 that have the letter 'e' appear at least 1 time:\n- \"lee\" (from \"leet\")\n- \"let\" (from \"leet\")\n- \"let\" (from \"leet\")\n- \"eet\" (from \"leet\")\nThe lexicographically smallest subsequence among them is \"eet\".\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: s = \"leetcode\", k = 4, letter = \"e\", repetition = 2\nOutput: \"ecde\"\nExplanation: \"ecde\" is the lexicographically smallest subsequence of length 4 that has the letter \"e\" appear at least 2 times.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"bb\", k = 2, letter = \"b\", repetition = 2\nOutput: \"bb\"\nExplanation: \"bb\" is the only subsequence of length 2 that has the letter \"b\" appear at least 2 times.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= repetition &lt;= k &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> <li><code>letter</code> is a lowercase English letter, and appears in <code>s</code> at least <code>repetition</code> times.</li> </ul>"},{"location":"LeetCode_Problems/2031/","title":"2031. Count Subarrays With More Ones Than Zeros","text":"Problem"},{"location":"LeetCode_Problems/2032/","title":"2032. Two Out of Three","text":"Problem <p>Given three integer arrays <code>nums1</code>, <code>nums2</code>, and <code>nums3</code>, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]\nOutput: [3,2]\nExplanation: The values that are present in at least two arrays are:\n- 3, in all three arrays.\n- 2, in nums1 and nums2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]\nOutput: [2,3,1]\nExplanation: The values that are present in at least two arrays are:\n- 2, in nums2 and nums3.\n- 3, in nums1 and nums2.\n- 1, in nums1 and nums3.\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]\nOutput: []\nExplanation: No value is present in at least two arrays.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length, nums3.length &lt;= 100</code></li> <li><code>1 &lt;= nums1[i], nums2[j], nums3[k] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2033/","title":"2033. Minimum Operations to Make a Uni-Value Grid","text":"Problem <p>You are given a 2D integer <code>grid</code> of size <code>m x n</code> and an integer <code>x</code>. In one operation, you can add <code>x</code> to or subtract <code>x</code> from any element in the <code>grid</code>.</p> <p>A uni-value grid is a grid where all the elements of it are equal.</p> <p>Return the minimum number of operations to make the grid uni-value. If it is not possible, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[2,4],[6,8]], x = 2\nOutput: 4\nExplanation: We can make every element equal to 4 by doing the following: \n- Add x to 2 once.\n- Subtract x from 6 once.\n- Subtract x from 8 twice.\nA total of 4 operations were used.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,5],[2,3]], x = 1\nOutput: 5\nExplanation: We can make every element equal to 3.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[1,2],[3,4]], x = 2\nOutput: -1\nExplanation: It is impossible to make every element equal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= x, grid[i][j] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2034/","title":"2034. Stock Price Fluctuation","text":"Problem <p>You are given a stream of records about a particular stock. Each record contains a timestamp and the corresponding price of the stock at that timestamp.</p> <p>Unfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. Another record with the same timestamp may appear later in the stream correcting the price of the previous wrong record.</p> <p>Design an algorithm that:</p> <ul> <li>Updates the price of the stock at a particular timestamp, correcting the price from any previous records at the timestamp.</li> <li>Finds the latest price of the stock based on the current records. The latest price is the price at the latest timestamp recorded.</li> <li>Finds the maximum price the stock has been based on the current records.</li> <li>Finds the minimum price the stock has been based on the current records.</li> </ul> <p>Implement the <code>StockPrice</code> class:</p> <ul> <li><code>StockPrice()</code> Initializes the object with no price records.</li> <li><code>void update(int timestamp, int price)</code> Updates the <code>price</code> of the stock at the given <code>timestamp</code>.</li> <li><code>int current()</code> Returns the latest price of the stock.</li> <li><code>int maximum()</code> Returns the maximum price of the stock.</li> <li><code>int minimum()</code> Returns the minimum price of the stock.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"StockPrice\", \"update\", \"update\", \"current\", \"maximum\", \"update\", \"maximum\", \"update\", \"minimum\"]\n[[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]\nOutput\n[null, null, null, 5, 10, null, 5, null, 2]\n\nExplanation\nStockPrice stockPrice = new StockPrice();\nstockPrice.update(1, 10); // Timestamps are [1] with corresponding prices [10].\nstockPrice.update(2, 5);  // Timestamps are [1,2] with corresponding prices [10,5].\nstockPrice.current();     // return 5, the latest timestamp is 2 with the price being 5.\nstockPrice.maximum();     // return 10, the maximum price is 10 at timestamp 1.\nstockPrice.update(1, 3);  // The previous timestamp 1 had the wrong price, so it is updated to 3.\n                          // Timestamps are [1,2] with corresponding prices [3,5].\nstockPrice.maximum();     // return 5, the maximum price is 5 after the correction.\nstockPrice.update(4, 2);  // Timestamps are [1,2,4] with corresponding prices [3,5,2].\nstockPrice.minimum();     // return 2, the minimum price is 2 at timestamp 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= timestamp, price &lt;= 10<sup>9</sup></code></li> <li>At most <code>10<sup>5</sup></code> calls will be made in total to <code>update</code>, <code>current</code>, <code>maximum</code>, and <code>minimum</code>.</li> <li><code>current</code>, <code>maximum</code>, and <code>minimum</code> will be called only after <code>update</code> has been called at least once.</li> </ul>"},{"location":"LeetCode_Problems/2035/","title":"2035. Partition Array Into Two Arrays to Minimize Sum Difference","text":"Problem <p>You are given an integer array <code>nums</code> of <code>2 * n</code> integers. You need to partition <code>nums</code> into two arrays of length <code>n</code> to minimize the absolute difference of the sums of the arrays. To partition <code>nums</code>, put each element of <code>nums</code> into one of the two arrays.</p> <p>Return the minimum possible absolute difference.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [3,9,7,3]\nOutput: 2\nExplanation: One optimal partition is: [3,9] and [7,3].\nThe absolute difference between the sums of the arrays is abs((3 + 9) - (7 + 3)) = 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-36,36]\nOutput: 72\nExplanation: One optimal partition is: [-36] and [36].\nThe absolute difference between the sums of the arrays is abs((-36) - (36)) = 72.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: nums = [2,-1,0,4,-2,-9]\nOutput: 0\nExplanation: One optimal partition is: [2,4,-9] and [-1,0,-2].\nThe absolute difference between the sums of the arrays is abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 15</code></li> <li><code>nums.length == 2 * n</code></li> <li><code>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2036/","title":"2036. Maximum Alternating Subarray Sum","text":"Problem"},{"location":"LeetCode_Problems/2037/","title":"2037. Minimum Number of Moves to Seat Everyone","text":"Problem <p>There are <code>n</code> seats and <code>n</code> students in a room. You are given an array <code>seats</code> of length <code>n</code>, where <code>seats[i]</code> is the position of the <code>i<sup>th</sup></code> seat. You are also given the array <code>students</code> of length <code>n</code>, where <code>students[j]</code> is the position of the <code>j<sup>th</sup></code> student.</p> <p>You may perform the following move any number of times:</p> <ul> <li>Increase or decrease the position of the <code>i<sup>th</sup></code> student by <code>1</code> (i.e., moving the <code>i<sup>th</sup></code> student from position\u00a0<code>x</code>\u00a0to <code>x + 1</code> or <code>x - 1</code>)</li> </ul> <p>Return the minimum number of moves required to move each student to a seat such that no two students are in the same seat.</p> <p>Note that there may be multiple seats or students in the same position at the beginning.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: seats = [3,1,5], students = [2,7,4]\nOutput: 4\nExplanation: The students are moved as follows:\n- The first student is moved from from position 2 to position 1 using 1 move.\n- The second student is moved from from position 7 to position 5 using 2 moves.\n- The third student is moved from from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used.\n</pre> <p>Example 2:</p> <pre>\nInput: seats = [4,1,5,9], students = [1,3,2,6]\nOutput: 7\nExplanation: The students are moved as follows:\n- The first student is not moved.\n- The second student is moved from from position 3 to position 4 using 1 move.\n- The third student is moved from from position 2 to position 5 using 3 moves.\n- The fourth student is moved from from position 6 to position 9 using 3 moves.\nIn total, 0 + 1 + 3 + 3 = 7 moves were used.\n</pre> <p>Example 3:</p> <pre>\nInput: seats = [2,2,6,6], students = [1,3,2,6]\nOutput: 4\nExplanation: Note that there are two seats at position 2 and two seats at position 6.\nThe students are moved as follows:\n- The first student is moved from from position 1 to position 2 using 1 move.\n- The second student is moved from from position 3 to position 6 using 3 moves.\n- The third student is not moved.\n- The fourth student is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == seats.length == students.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= seats[i], students[j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2038/","title":"2038. Remove Colored Pieces if Both Neighbors are the Same Color","text":"Problem <p>There are <code>n</code> pieces arranged in a line, and each piece is colored either by <code>'A'</code> or by <code>'B'</code>. You are given a string <code>colors</code> of length <code>n</code> where <code>colors[i]</code> is the color of the <code>i<sup>th</sup></code> piece.</p> <p>Alice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first.</p> <ul> <li>Alice is only allowed to remove a piece colored <code>'A'</code> if both its neighbors are also colored <code>'A'</code>. She is not allowed to remove pieces that are colored <code>'B'</code>.</li> <li>Bob is only allowed to remove a piece colored <code>'B'</code> if both its neighbors are also colored <code>'B'</code>. He is not allowed to remove pieces that are colored <code>'A'</code>.</li> <li>Alice and Bob cannot remove pieces from the edge of the line.</li> <li>If a player cannot make a move on their turn, that player loses and the other player wins.</li> </ul> <p>Assuming Alice and Bob play optimally, return <code>true</code> if Alice wins, or return <code>false</code> if Bob wins.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: colors = \"AAABABB\"\nOutput: true\nExplanation:\nAAABABB -&gt; AABABB\nAlice moves first.\nShe removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.\n\nNow it's Bob's turn.\nBob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.\nThus, Alice wins, so return true.\n</pre> <p>Example 2:</p> <pre>\nInput: colors = \"AA\"\nOutput: false\nExplanation:\nAlice has her turn first.\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\nThus, Bob wins, so return false.\n</pre> <p>Example 3:</p> <pre>\nInput: colors = \"ABBBBBBBAAA\"\nOutput: false\nExplanation:\nABBBBBBBAAA -&gt; ABBBBBBBAA\nAlice moves first.\nHer only option is to remove the second to last 'A' from the right.\n\nABBBBBBBAA -&gt; ABBBBBBAA\nNext is Bob's turn.\nHe has many options for which 'B' piece to remove. He can pick any.\n\nOn Alice's second turn, she has no more pieces that she can remove.\nThus, Bob wins, so return false.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;=\u00a0colors.length &lt;= 10<sup>5</sup></code></li> <li><code>colors</code>\u00a0consists of only the letters\u00a0<code>'A'</code>\u00a0and\u00a0<code>'B'</code></li> </ul>"},{"location":"LeetCode_Problems/2039/","title":"2039. The Time When the Network Becomes Idle","text":"Problem <p>There is a network of <code>n</code> servers, labeled from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates there is a message channel between servers <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code>, and they can pass any number of messages to each other directly in one second. You are also given a 0-indexed integer array <code>patience</code> of length <code>n</code>.</p> <p>All servers are connected, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.</p> <p>The server labeled <code>0</code> is the master server. The rest are data servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers optimally, so every message takes the least amount of time to arrive at the master server. The master server will process all newly arrived messages instantly and send a reply to the originating server via the reversed path the message had gone through.</p> <p>At the beginning of second <code>0</code>, each data server sends its message to be processed. Starting from second <code>1</code>, at the beginning of every second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:</p> <ul> <li>If it has not, it will resend the message periodically. The data server <code>i</code> will resend the message every <code>patience[i]</code> second(s), i.e., the data server <code>i</code> will resend the message if <code>patience[i]</code> second(s) have elapsed since the last time the message was sent from this server.</li> <li>Otherwise, no more resending will occur from this server.</li> </ul> <p>The network becomes idle when there are no messages passing between servers or arriving at servers.</p> <p>Return the earliest second starting from which the network becomes idle.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: edges = [[0,1],[1,2]], patience = [0,2,1]\nOutput: 8\nExplanation:\nAt (the beginning of) second 0,\n- Data server 1 sends its message (denoted 1A) to the master server.\n- Data server 2 sends its message (denoted 2A) to the master server.\n\nAt second 1,\n- Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.\n- Server 1 has not received any reply. 1 second (1 &lt; patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message.\n- Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).\n\nAt second 2,\n- The reply 1A arrives at server 1. No more resending will occur from server 1.\n- Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.\n- Server 2 resends the message (denoted 2C).\n...\nAt second 4,\n- The reply 2A arrives at server 2. No more resending will occur from server 2.\n...\nAt second 7, reply 2D arrives at server 2.\n\nStarting from the beginning of the second 8, there are no messages passing between servers or arriving at servers.\nThis is the time when the network becomes idle.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]\nOutput: 3\nExplanation: Data servers 1 and 2 receive a reply back at the beginning of second 2.\nFrom the beginning of the second 3, the network becomes idle.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == patience.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>patience[0] == 0</code></li> <li><code>1 &lt;= patience[i] &lt;= 10<sup>5</sup></code> for <code>1 &lt;= i &lt; n</code></li> <li><code>1 &lt;= edges.length &lt;= min(10<sup>5</sup>, n * (n - 1) / 2)</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; n</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li>There are no duplicate edges.</li> <li>Each server can directly or indirectly reach another server.</li> </ul>"},{"location":"LeetCode_Problems/2040/","title":"2040. Kth Smallest Product of Two Sorted Arrays","text":"Problem <p>Given two sorted 0-indexed integer arrays <code>nums1</code> and <code>nums2</code> as well as an integer <code>k</code>, return the <code>k<sup>th</sup></code> (1-based) smallest product of <code>nums1[i] * nums2[j]</code> where <code>0 &lt;= i &lt; nums1.length</code> and <code>0 &lt;= j &lt; nums2.length</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [2,5], nums2 = [3,4], k = 2\nOutput: 8\nExplanation: The 2 smallest products are:\n- nums1[0] * nums2[0] = 2 * 3 = 6\n- nums1[0] * nums2[1] = 2 * 4 = 8\nThe 2<sup>nd</sup> smallest product is 8.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6\nOutput: 0\nExplanation: The 6 smallest products are:\n- nums1[0] * nums2[1] = (-4) * 4 = -16\n- nums1[0] * nums2[0] = (-4) * 2 = -8\n- nums1[1] * nums2[1] = (-2) * 4 = -8\n- nums1[1] * nums2[0] = (-2) * 2 = -4\n- nums1[2] * nums2[0] = 0 * 2 = 0\n- nums1[2] * nums2[1] = 0 * 4 = 0\nThe 6<sup>th</sup> smallest product is 0.\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3\nOutput: -6\nExplanation: The 3 smallest products are:\n- nums1[0] * nums2[4] = (-2) * 5 = -10\n- nums1[0] * nums2[3] = (-2) * 4 = -8\n- nums1[4] * nums2[0] = 2 * (-3) = -6\nThe 3<sup>rd</sup> smallest product is -6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= nums1.length * nums2.length</code></li> <li><code>nums1</code> and <code>nums2</code> are sorted.</li> </ul>"},{"location":"LeetCode_Problems/2041/","title":"2041. Accepted Candidates From the Interviews","text":"Problem"},{"location":"LeetCode_Problems/2042/","title":"2042. Check if Numbers Are Ascending in a Sentence","text":"Problem <p>A sentence is a list of tokens separated by a single space with no leading or trailing spaces. Every token is either a positive number consisting of digits <code>0-9</code> with no leading zeros, or a word consisting of lowercase English letters.</p> <ul> <li>For example, <code>\"a puppy has 2 eyes 4 legs\"</code> is a sentence with seven tokens: <code>\"2\"</code> and <code>\"4\"</code> are numbers and the other tokens such as <code>\"puppy\"</code> are words.</li> </ul> <p>Given a string <code>s</code> representing a sentence, you need to check if all the numbers in <code>s</code> are strictly increasing from left to right (i.e., other than the last number, each number is strictly smaller than the number on its right in <code>s</code>).</p> <p>Return <code>true</code> if so, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: s = \"1 box has 3 blue 4 red 6 green and 12 yellow marbles\"\nOutput: true\nExplanation: The numbers in s are: 1, 3, 4, 6, 12.\nThey are strictly increasing from left to right: 1 &lt; 3 &lt; 4 &lt; 6 &lt; 12.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"hello world 5 x 5\"\nOutput: false\nExplanation: The numbers in s are: 5, 5. They are not strictly increasing.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: s = \"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s\"\nOutput: false\nExplanation: The numbers in s are: 7, 51, 50, 60. They are not strictly increasing.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= s.length &lt;= 200</code></li> <li><code>s</code> consists of lowercase English letters, spaces, and digits from <code>0</code> to <code>9</code>, inclusive.</li> <li>The number of tokens in <code>s</code> is between <code>2</code> and <code>100</code>, inclusive.</li> <li>The tokens in <code>s</code> are separated by a single space.</li> <li>There are at least two numbers in <code>s</code>.</li> <li>Each number in <code>s</code> is a positive number less than <code>100</code>, with no leading zeros.</li> <li><code>s</code> contains no leading or trailing spaces.</li> </ul>"},{"location":"LeetCode_Problems/2043/","title":"2043. Simple Bank System","text":"Problem <p>You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has <code>n</code> accounts numbered from <code>1</code> to <code>n</code>. The initial balance of each account is stored in a 0-indexed integer array <code>balance</code>, with the <code>(i + 1)<sup>th</sup></code> account having an initial balance of <code>balance[i]</code>.</p> <p>Execute all the valid transactions. A transaction is valid if:</p> <ul> <li>The given account number(s) are between <code>1</code> and <code>n</code>, and</li> <li>The amount of money withdrawn or transferred from is less than or equal to the balance of the account.</li> </ul> <p>Implement the <code>Bank</code> class:</p> <ul> <li><code>Bank(long[] balance)</code> Initializes the object with the 0-indexed integer array <code>balance</code>.</li> <li><code>boolean transfer(int account1, int account2, long money)</code> Transfers <code>money</code> dollars from the account numbered <code>account1</code> to the account numbered <code>account2</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li> <li><code>boolean deposit(int account, long money)</code> Deposit <code>money</code> dollars into the account numbered <code>account</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li> <li><code>boolean withdraw(int account, long money)</code> Withdraw <code>money</code> dollars from the account numbered <code>account</code>. Return <code>true</code> if the transaction was successful, <code>false</code> otherwise.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Bank\", \"withdraw\", \"transfer\", \"deposit\", \"transfer\", \"withdraw\"]\n[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]\nOutput\n[null, true, true, true, false, false]\n\nExplanation\nBank bank = new Bank([10, 100, 20, 50, 30]);\nbank.withdraw(3, 10);    // return true, account 3 has a balance of $20, so it is valid to withdraw $10.\n                         // Account 3 has $20 - $10 = $10.\nbank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.\n                         // Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.\nbank.deposit(5, 20);     // return true, it is valid to deposit $20 to account 5.\n                         // Account 5 has $10 + $20 = $30.\nbank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,\n                         // so it is invalid to transfer $15 from it.\nbank.withdraw(10, 50);   // return false, it is invalid because account 10 does not exist.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == balance.length</code></li> <li><code>1 &lt;= n, account, account1, account2 &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= balance[i], money &lt;= 10<sup>12</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls will be made to each function <code>transfer</code>, <code>deposit</code>, <code>withdraw</code>.</li> </ul>"},{"location":"LeetCode_Problems/2044/","title":"2044. Count Number of Maximum Bitwise-OR Subsets","text":"Problem <p>Given an integer array <code>nums</code>, find the maximum possible bitwise OR of a subset of <code>nums</code> and return the number of different non-empty subsets with the maximum bitwise OR.</p> <p>An array <code>a</code> is a subset of an array <code>b</code> if <code>a</code> can be obtained from <code>b</code> by deleting some (possibly zero) elements of <code>b</code>. Two subsets are considered different if the indices of the elements chosen are different.</p> <p>The bitwise OR of an array <code>a</code> is equal to <code>a[0] OR a[1] OR ... OR a[a.length - 1]</code> (0-indexed).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,1]\nOutput: 2\nExplanation: The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:\n- [3]\n- [3,1]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,2]\nOutput: 7\nExplanation: All non-empty subsets of [2,2,2] have a bitwise OR of 2. There are 2<sup>3</sup> - 1 = 7 total subsets.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,2,1,5]\nOutput: 6\nExplanation: The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7:\n- [3,5]\n- [3,1,5]\n- [3,2,5]\n- [3,2,1,5]\n- [2,5]\n- [2,1,5]</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 16</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2045/","title":"2045. Second Minimum Time to Reach Destination","text":"Problem <p>A city is represented as a bi-directional connected graph with <code>n</code> vertices where each vertex is labeled from <code>1</code> to <code>n</code> (inclusive). The edges in the graph are represented as a 2D integer array <code>edges</code>, where each <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> denotes a bi-directional edge between vertex <code>u<sub>i</sub></code> and vertex <code>v<sub>i</sub></code>. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is <code>time</code> minutes.</p> <p>Each vertex has a traffic signal which changes its color from green to red and vice versa every\u00a0<code>change</code> minutes. All signals change at the same time. You can enter a vertex at any time, but can leave a vertex only when the signal is green. You cannot wait at a vertex if the signal is green.</p> <p>The second minimum value is defined as the smallest value strictly larger than the minimum value.</p> <ul> <li>For example the second minimum value of <code>[2, 3, 4]</code> is <code>3</code>, and the second minimum value of <code>[2, 2, 4]</code> is <code>4</code>.</li> </ul> <p>Given <code>n</code>, <code>edges</code>, <code>time</code>, and <code>change</code>, return the second minimum time it will take to go from vertex <code>1</code> to vertex <code>n</code>.</p> <p>Notes:</p> <ul> <li>You can go through any vertex any number of times, including <code>1</code> and <code>n</code>.</li> <li>You can assume that when the journey starts, all signals have just turned green.</li> </ul> <p> </p> <p>Example 1:</p> <p> </p> <pre>\nInput: n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5\nOutput: 13\nExplanation:\nThe figure on the left shows the given graph.\nThe blue path in the figure on the right is the minimum time path.\nThe time taken is:\n- Start at 1, time elapsed=0\n- 1 -&gt; 4: 3 minutes, time elapsed=3\n- 4 -&gt; 5: 3 minutes, time elapsed=6\nHence the minimum time needed is 6 minutes.\n\nThe red path shows the path to get the second minimum time.\n- Start at 1, time elapsed=0\n- 1 -&gt; 3: 3 minutes, time elapsed=3\n- 3 -&gt; 4: 3 minutes, time elapsed=6\n- Wait at 4 for 4 minutes, time elapsed=10\n- 4 -&gt; 5: 3 minutes, time elapsed=13\nHence the second minimum time is 13 minutes.      \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 2, edges = [[1,2]], time = 3, change = 2\nOutput: 11\nExplanation:\nThe minimum time path is 1 -&gt; 2 with time = 3 minutes.\nThe second minimum time path is 1 -&gt; 2 -&gt; 1 -&gt; 2 with time = 11 minutes.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>n - 1 &lt;= edges.length &lt;= min(2 * 10<sup>4</sup>, n * (n - 1) / 2)</code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li>There are no duplicate edges.</li> <li>Each vertex can be reached directly or indirectly from every other vertex.</li> <li><code>1 &lt;= time, change &lt;= 10<sup>3</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2046/","title":"2046. Sort Linked List Already Sorted Using Absolute Values","text":"Problem"},{"location":"LeetCode_Problems/2047/","title":"2047. Number of Valid Words in a Sentence","text":"Problem <p>A sentence consists of lowercase letters (<code>'a'</code> to <code>'z'</code>), digits (<code>'0'</code> to <code>'9'</code>), hyphens (<code>'-'</code>), punctuation marks (<code>'!'</code>, <code>'.'</code>, and <code>','</code>), and spaces (<code>' '</code>) only. Each sentence can be broken down into one or more tokens separated by one or more spaces <code>' '</code>.</p> <p>A token is a valid word if all three of the following are true:</p> <ul> <li>It only contains lowercase letters, hyphens, and/or punctuation (no digits).</li> <li>There is at most one hyphen <code>'-'</code>. If present, it must be surrounded by lowercase characters (<code>\"a-b\"</code> is valid, but <code>\"-ab\"</code> and <code>\"ab-\"</code> are not valid).</li> <li>There is at most one punctuation mark. If present, it must be at the end of the token (<code>\"ab,\"</code>, <code>\"cd!\"</code>, and <code>\".\"</code> are valid, but <code>\"a!b\"</code> and <code>\"c.,\"</code> are not valid).</li> </ul> <p>Examples of valid words include <code>\"a-b.\"</code>, <code>\"afad\"</code>, <code>\"ba-c\"</code>, <code>\"a!\"</code>, and <code>\"!\"</code>.</p> <p>Given a string <code>sentence</code>, return the number of valid words in <code>sentence</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: sentence = \"cat and  dog\"\nOutput: 3\nExplanation: The valid words in the sentence are \"cat\", \"and\", and \"dog\".\n</pre> <p>Example 2:</p> <pre>\nInput: sentence = \"!this  1-s b8d!\"\nOutput: 0\nExplanation: There are no valid words in the sentence.\n\"!this\" is invalid because it starts with a punctuation mark.\n\"1-s\" and \"b8d\" are invalid because they contain digits.\n</pre> <p>Example 3:</p> <pre>\nInput: sentence = \"alice and  bob are playing stone-game10\"\nOutput: 5\nExplanation: The valid words in the sentence are \"alice\", \"and\", \"bob\", \"are\", and \"playing\".\n\"stone-game10\" is invalid because it contains digits.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sentence.length &lt;= 1000</code></li> <li><code>sentence</code> only contains lowercase English letters, digits, <code>' '</code>, <code>'-'</code>, <code>'!'</code>, <code>'.'</code>, and <code>','</code>.</li> <li>There will be at least\u00a0<code>1</code> token.</li> </ul>"},{"location":"LeetCode_Problems/2048/","title":"2048. Next Greater Numerically Balanced Number","text":"Problem <p>An integer <code>x</code> is numerically balanced if for every digit <code>d</code> in the number <code>x</code>, there are exactly <code>d</code> occurrences of that digit in <code>x</code>.</p> <p>Given an integer <code>n</code>, return the smallest numerically balanced number strictly greater than <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: 22\nExplanation: \n22 is numerically balanced since:\n- The digit 2 occurs 2 times. \nIt is also the smallest numerically balanced number strictly greater than 1.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1000\nOutput: 1333\nExplanation: \n1333 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times. \nIt is also the smallest numerically balanced number strictly greater than 1000.\nNote that 1022 cannot be the answer because 0 appeared more than 0 times.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 3000\nOutput: 3133\nExplanation: \n3133 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times.\nIt is also the smallest numerically balanced number strictly greater than 3000.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= n &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2049/","title":"2049. Count Nodes With the Highest Score","text":"Problem <p>There is a binary tree rooted at <code>0</code> consisting of <code>n</code> nodes. The nodes are labeled from <code>0</code> to <code>n - 1</code>. You are given a 0-indexed integer array <code>parents</code> representing the tree, where <code>parents[i]</code> is the parent of node <code>i</code>. Since node <code>0</code> is the root, <code>parents[0] == -1</code>.</p> <p>Each node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees.</p> <p>Return the number of nodes that have the highest score.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: parents = [-1,2,0,2,0]\nOutput: 3\nExplanation:\n- The score of node 0 is: 3 * 1 = 3\n- The score of node 1 is: 4 = 4\n- The score of node 2 is: 1 * 1 * 2 = 2\n- The score of node 3 is: 4 = 4\n- The score of node 4 is: 4 = 4\nThe highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: parents = [-1,2,0]\nOutput: 2\nExplanation:\n- The score of node 0 is: 2 = 2\n- The score of node 1 is: 2 = 2\n- The score of node 2 is: 1 * 1 = 1\nThe highest score is 2, and two nodes (node 0 and node 1) have the highest score.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == parents.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>parents[0] == -1</code></li> <li><code>0 &lt;= parents[i] &lt;= n - 1</code> for <code>i != 0</code></li> <li><code>parents</code> represents a valid binary tree.</li> </ul>"},{"location":"LeetCode_Problems/2050/","title":"2050. Parallel Courses III","text":"Problem <p>You are given an integer <code>n</code>, which indicates that there are <code>n</code> courses labeled from <code>1</code> to <code>n</code>. You are also given a 2D integer array <code>relations</code> where <code>relations[j] = [prevCourse<sub>j</sub>, nextCourse<sub>j</sub>]</code> denotes that course <code>prevCourse<sub>j</sub></code> has to be completed before course <code>nextCourse<sub>j</sub></code> (prerequisite relationship). Furthermore, you are given a 0-indexed integer array <code>time</code> where <code>time[i]</code> denotes how many months it takes to complete the <code>(i+1)<sup>th</sup></code> course.</p> <p>You must find the minimum number of months needed to complete all the courses following these rules:</p> <ul> <li>You may start taking a course at any time if the prerequisites are met.</li> <li>Any number of courses can be taken at the same time.</li> </ul> <p>Return the minimum number of months needed to complete all the courses.</p> <p>Note: The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3, relations = [[1,3],[2,3]], time = [3,2,5]\nOutput: 8\nExplanation: The figure above represents the given graph and the time required to complete each course. \nWe start course 1 and course 2 simultaneously at month 0.\nCourse 1 takes 3 months and course 2 takes 2 months to complete respectively.\nThus, the earliest time we can start course 3 is at month 3, and the total time required is 3 + 5 = 8 months.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]\nOutput: 12\nExplanation: The figure above represents the given graph and the time required to complete each course.\nYou can start courses 1, 2, and 3 at month 0.\nYou can complete them after 1, 2, and 3 months respectively.\nCourse 4 can be taken only after course 3 is completed, i.e., after 3 months. It is completed after 3 + 4 = 7 months.\nCourse 5 can be taken only after courses 1, 2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 months.\nThus, the minimum time needed to complete all the courses is 7 + 5 = 12 months.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= relations.length &lt;= min(n * (n - 1) / 2, 5 * 10<sup>4</sup>)</code></li> <li><code>relations[j].length == 2</code></li> <li><code>1 &lt;= prevCourse<sub>j</sub>, nextCourse<sub>j</sub> &lt;= n</code></li> <li><code>prevCourse<sub>j</sub> != nextCourse<sub>j</sub></code></li> <li>All the pairs <code>[prevCourse<sub>j</sub>, nextCourse<sub>j</sub>]</code> are unique.</li> <li><code>time.length == n</code></li> <li><code>1 &lt;= time[i] &lt;= 10<sup>4</sup></code></li> <li>The given graph is a directed acyclic graph.</li> </ul>"},{"location":"LeetCode_Problems/2051/","title":"2051. The Category of Each Member in the Store","text":"Problem"},{"location":"LeetCode_Problems/2052/","title":"2052. Minimum Cost to Separate Sentence Into Rows","text":"Problem"},{"location":"LeetCode_Problems/2053/","title":"2053. Kth Distinct String in an Array","text":"Problem <p>A distinct string is a string that is present only once in an array.</p> <p>Given an array of strings <code>arr</code>, and an integer <code>k</code>, return the <code>k<sup>th</sup></code> distinct string present in <code>arr</code>. If there are fewer than <code>k</code> distinct strings, return an empty string <code>\"\"</code>.</p> <p>Note that the strings are considered in the order in which they appear in the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2\nOutput: \"a\"\nExplanation:\nThe only distinct strings in arr are \"d\" and \"a\".\n\"d\" appears 1<sup>st</sup>, so it is the 1<sup>st</sup> distinct string.\n\"a\" appears 2<sup>nd</sup>, so it is the 2<sup>nd</sup> distinct string.\nSince k == 2, \"a\" is returned. \n</pre> <p>Example 2:</p> <pre>\nInput: arr = [\"aaa\",\"aa\",\"a\"], k = 1\nOutput: \"aaa\"\nExplanation:\nAll strings in arr are distinct, so the 1<sup>st</sup> string \"aaa\" is returned.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [\"a\",\"b\",\"a\"], k = 3\nOutput: \"\"\nExplanation:\nThe only distinct string is \"b\". Since there are fewer than 3 distinct strings, we return an empty string \"\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= arr.length &lt;= 1000</code></li> <li><code>1 &lt;= arr[i].length &lt;= 5</code></li> <li><code>arr[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2054/","title":"2054. Two Best Non-Overlapping Events","text":"Problem <p>You are given a 0-indexed 2D integer array of <code>events</code> where <code>events[i] = [startTime<sub>i</sub>, endTime<sub>i</sub>, value<sub>i</sub>]</code>. The <code>i<sup>th</sup></code> event starts at <code>startTime<sub>i</sub></code><sub> </sub>and ends at <code>endTime<sub>i</sub></code>, and if you attend this event, you will receive a value of <code>value<sub>i</sub></code>. You can choose at most two non-overlapping events to attend such that the sum of their values is maximized.</p> <p>Return this maximum sum.</p> <p>Note that the start time and end time is inclusive: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time <code>t</code>, the next event must start at or after <code>t + 1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: events = [[1,3,2],[4,5,2],[2,4,3]]\nOutput: 4\nExplanation: Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: events = [[1,3,2],[4,5,2],[1,5,5]]\nOutput: 5\nExplanation: Choose event 2 for a sum of 5.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: events = [[1,5,3],[1,5,1],[6,6,5]]\nOutput: 8\nExplanation: Choose events 0 and 2 for a sum of 3 + 5 = 8.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= events.length &lt;= 10<sup>5</sup></code></li> <li><code>events[i].length == 3</code></li> <li><code>1 &lt;= startTime<sub>i</sub> &lt;= endTime<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= value<sub>i</sub> &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2055/","title":"2055. Plates Between Candles","text":"Problem <p>There is a long table with a line of plates and candles arranged on top of it. You are given a 0-indexed string <code>s</code> consisting of characters <code>'*'</code> and <code>'|'</code> only, where a <code>'*'</code> represents a plate and a <code>'|'</code> represents a candle.</p> <p>You are also given a 0-indexed 2D integer array <code>queries</code> where <code>queries[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> denotes the substring <code>s[left<sub>i</sub>...right<sub>i</sub>]</code> (inclusive). For each query, you need to find the number of plates between candles that are in the substring. A plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring.</p> <ul> <li>For example, <code>s = \"||**||**|*\"</code>, and a query <code>[3, 8]</code> denotes the substring <code>\"*||**|\"</code>. The number of plates between candles in this substring is <code>2</code>, as each of the two plates has at least one candle in the substring to its left and right.</li> </ul> <p>Return an integer array <code>answer</code> where <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: s = \"**|**|***|\", queries = [[2,5],[5,9]]\nOutput: [2,3]\nExplanation:\n- queries[0] has two plates between candles.\n- queries[1] has three plates between candles.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: s = \"***|**|*****|**||**|*\", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]\nOutput: [9,0,0,0,0]\nExplanation:\n- queries[0] has nine plates between candles.\n- The other queries have zero plates between candles.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of <code>'*'</code> and <code>'|'</code> characters.</li> <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> <li><code>queries[i].length == 2</code></li> <li><code>0 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt; s.length</code></li> </ul>"},{"location":"LeetCode_Problems/2056/","title":"2056. Number of Valid Move Combinations On Chessboard","text":"Problem <p>There is an <code>8 x 8</code> chessboard containing <code>n</code> pieces (rooks, queens, or bishops). You are given a string array <code>pieces</code> of length <code>n</code>, where <code>pieces[i]</code> describes the type (rook, queen, or bishop) of the <code>i<sup>th</sup></code> piece. In addition, you are given a 2D integer array <code>positions</code> also of length <code>n</code>, where <code>positions[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> piece is currently at the 1-based coordinate <code>(r<sub>i</sub>, c<sub>i</sub>)</code> on the chessboard.</p> <p>When making a move for a piece, you choose a destination square that the piece will travel toward and stop on.</p> <ul> <li>A rook can only travel horizontally or vertically from <code>(r, c)</code> to the direction of <code>(r+1, c)</code>, <code>(r-1, c)</code>, <code>(r, c+1)</code>, or <code>(r, c-1)</code>.</li> <li>A queen can only travel horizontally, vertically, or diagonally from <code>(r, c)</code> to the direction of <code>(r+1, c)</code>, <code>(r-1, c)</code>, <code>(r, c+1)</code>, <code>(r, c-1)</code>, <code>(r+1, c+1)</code>, <code>(r+1, c-1)</code>, <code>(r-1, c+1)</code>, <code>(r-1, c-1)</code>.</li> <li>A bishop can only travel diagonally from <code>(r, c)</code> to the direction of <code>(r+1, c+1)</code>, <code>(r+1, c-1)</code>, <code>(r-1, c+1)</code>, <code>(r-1, c-1)</code>.</li> </ul> <p>You must make a move for every piece on the board simultaneously. A move combination consists of all the moves performed on all the given pieces. Every second, each piece will instantaneously travel one square towards their destination if they are not already at it. All pieces start traveling at the <code>0<sup>th</sup></code> second. A move combination is invalid if, at a given time, two or more pieces occupy the same square.</p> <p>Return the number of valid move combinations\u200b\u200b\u200b\u200b\u200b.</p> <p>Notes:</p> <ul> <li>No two pieces will start in the same square.</li> <li>You may choose the square a piece is already on as its destination.</li> <li>If two pieces are directly adjacent to each other, it is valid for them to move past each other and swap positions in one second.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: pieces = [\"rook\"], positions = [[1,1]]\nOutput: 15\nExplanation: The image above shows the possible squares the piece can move to.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: pieces = [\"queen\"], positions = [[1,1]]\nOutput: 22\nExplanation: The image above shows the possible squares the piece can move to.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: pieces = [\"bishop\"], positions = [[4,3]]\nOutput: 12\nExplanation: The image above shows the possible squares the piece can move to.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == pieces.length </code></li> <li><code>n == positions.length</code></li> <li><code>1 &lt;= n &lt;= 4</code></li> <li><code>pieces</code> only contains the strings <code>\"rook\"</code>, <code>\"queen\"</code>, and <code>\"bishop\"</code>.</li> <li>There will be at most one queen on the chessboard.</li> <li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 8</code></li> <li>Each <code>positions[i]</code> is distinct.</li> </ul>"},{"location":"LeetCode_Problems/2057/","title":"2057. Smallest Index With Equal Value","text":"Problem <p>Given a 0-indexed integer array <code>nums</code>, return the smallest index <code>i</code> of <code>nums</code> such that <code>i mod 10 == nums[i]</code>, or <code>-1</code> if such index does not exist.</p> <p><code>x mod y</code> denotes the remainder when <code>x</code> is divided by <code>y</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,2]\nOutput: 0\nExplanation: \ni=0: 0 mod 10 = 0 == nums[0].\ni=1: 1 mod 10 = 1 == nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\nAll indices have i mod 10 == nums[i], so we return the smallest index 0.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,3,2,1]\nOutput: 2\nExplanation: \ni=0: 0 mod 10 = 0 != nums[0].\ni=1: 1 mod 10 = 1 != nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\ni=3: 3 mod 10 = 3 != nums[3].\n2 is the only index which has i mod 10 == nums[i].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,4,5,6,7,8,9,0]\nOutput: -1\nExplanation: No index satisfies i mod 10 == nums[i].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/2058/","title":"2058. Find the Minimum and Maximum Number of Nodes Between Critical Points","text":"Problem <p>A critical point in a linked list is defined as either a local maxima or a local minima.</p> <p>A node is a local maxima if the current node has a value strictly greater than the previous node and the next node.</p> <p>A node is a local minima if the current node has a value strictly smaller than the previous node and the next node.</p> <p>Note that a node can only be a local maxima/minima if there exists both a previous node and a next node.</p> <p>Given a linked list <code>head</code>, return an array of length 2 containing <code>[minDistance, maxDistance]</code> where <code>minDistance</code> is the minimum distance between any\u00a0two distinct critical points and <code>maxDistance</code> is the maximum distance between any\u00a0two distinct critical points. If there are fewer than two critical points, return <code>[-1, -1]</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [3,1]\nOutput: [-1,-1]\nExplanation: There are no critical points in [3,1].\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [5,3,1,2,5,1,2]\nOutput: [1,3]\nExplanation: There are three critical points:\n- [5,3,1,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.\n- [5,3,1,2,5,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.\n- [5,3,1,2,5,1,2]: The sixth node is a local minima because 1 is less than 5 and 2.\nThe minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.\nThe maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: head = [1,3,2,2,3,2,2,2,7]\nOutput: [3,3]\nExplanation: There are two critical points:\n- [1,3,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater than 1 and 2.\n- [1,3,2,2,3,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2 and 2.\nBoth the minimum and maximum distances are between the second and the fifth node.\nThus, minDistance and maxDistance is 5 - 2 = 3.\nNote that the last node is not considered a local maxima because it does not have a next node.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[2, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2059/","title":"2059. Minimum Operations to Convert Number","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> containing distinct numbers, an integer <code>start</code>, and an integer <code>goal</code>. There is an integer <code>x</code> that is initially set to <code>start</code>, and you want to perform operations on <code>x</code> such that it is converted to <code>goal</code>. You can perform the following operation repeatedly on the number <code>x</code>:</p> <p>If <code>0 &lt;= x &lt;= 1000</code>, then for any index <code>i</code> in the array (<code>0 &lt;= i &lt; nums.length</code>), you can set <code>x</code> to any of the following:</p> <ul> <li><code>x + nums[i]</code></li> <li><code>x - nums[i]</code></li> <li><code>x ^ nums[i]</code> (bitwise-XOR)</li> </ul> <p>Note that you can use each <code>nums[i]</code> any number of times in any order. Operations that set <code>x</code> to be out of the range <code>0 &lt;= x &lt;= 1000</code> are valid, but no more operations can be done afterward.</p> <p>Return the minimum number of operations needed to convert <code>x = start</code> into <code>goal</code>, and <code>-1</code> if it is not possible.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,4,12], start = 2, goal = 12\nOutput: 2\nExplanation: We can go from 2 \u2192 14 \u2192 12 with the following 2 operations.\n- 2 + 12 = 14\n- 14 - 2 = 12\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,5,7], start = 0, goal = -4\nOutput: 2\nExplanation: We can go from 0 \u2192 3 \u2192 -4 with the following 2 operations. \n- 0 + 3 = 3\n- 3 - 7 = -4\nNote that the last operation sets x out of the range 0 &lt;= x &lt;= 1000, which is valid.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,8,16], start = 0, goal = 1\nOutput: -1\nExplanation: There is no way to convert 0 into 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-10<sup>9</sup> &lt;= nums[i], goal &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= start &lt;= 1000</code></li> <li><code>start != goal</code></li> <li>All the integers in <code>nums</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/2060/","title":"2060. Check if an Original String Exists Given Two Encoded Strings","text":"Problem <p>An original string, consisting of lowercase English letters, can be encoded by the following steps:</p> <ul> <li>Arbitrarily split it into a sequence of some number of non-empty substrings.</li> <li>Arbitrarily choose some elements (possibly none) of the sequence, and replace each with its length (as a numeric string).</li> <li>Concatenate the sequence as the encoded string.</li> </ul> <p>For example, one way to encode an original string <code>\"abcdefghijklmnop\"</code> might be:</p> <ul> <li>Split it as a sequence: <code>[\"ab\", \"cdefghijklmn\", \"o\", \"p\"]</code>.</li> <li>Choose the second and third elements to be replaced by their lengths, respectively. The sequence becomes <code>[\"ab\", \"12\", \"1\", \"p\"]</code>.</li> <li>Concatenate the elements of the sequence to get the encoded string: <code>\"ab121p\"</code>.</li> </ul> <p>Given two encoded strings <code>s1</code> and <code>s2</code>, consisting of lowercase English letters and digits <code>1-9</code> (inclusive), return <code>true</code> if there exists an original string that could be encoded as both <code>s1</code> and <code>s2</code>. Otherwise, return <code>false</code>.</p> <p>Note: The test cases are generated such that the number of consecutive digits in <code>s1</code> and <code>s2</code> does not exceed <code>3</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"internationalization\", s2 = \"i18n\"\nOutput: true\nExplanation: It is possible that \"internationalization\" was the original string.\n- \"internationalization\" \n  -&gt; Split:       [\"internationalization\"]\n  -&gt; Do not replace any element\n  -&gt; Concatenate:  \"internationalization\", which is s1.\n- \"internationalization\"\n  -&gt; Split:       [\"i\", \"nternationalizatio\", \"n\"]\n  -&gt; Replace:     [\"i\", \"18\",                 \"n\"]\n  -&gt; Concatenate:  \"i18n\", which is s2\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"l123e\", s2 = \"44\"\nOutput: true\nExplanation: It is possible that \"leetcode\" was the original string.\n- \"leetcode\" \n  -&gt; Split:      [\"l\", \"e\", \"et\", \"cod\", \"e\"]\n  -&gt; Replace:    [\"l\", \"1\", \"2\",  \"3\",   \"e\"]\n  -&gt; Concatenate: \"l123e\", which is s1.\n- \"leetcode\" \n  -&gt; Split:      [\"leet\", \"code\"]\n  -&gt; Replace:    [\"4\",    \"4\"]\n  -&gt; Concatenate: \"44\", which is s2.\n</pre> <p>Example 3:</p> <pre>\nInput: s1 = \"a5b\", s2 = \"c5b\"\nOutput: false\nExplanation: It is impossible.\n- The original string encoded as s1 must start with the letter 'a'.\n- The original string encoded as s2 must start with the letter 'c'.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s1.length, s2.length &lt;= 40</code></li> <li><code>s1</code> and <code>s2</code> consist of digits <code>1-9</code> (inclusive), and lowercase English letters only.</li> <li>The number of consecutive digits in <code>s1</code> and <code>s2</code> does not exceed <code>3</code>.</li> </ul>"},{"location":"LeetCode_Problems/2061/","title":"2061. Number of Spaces Cleaning Robot Cleaned","text":"Problem"},{"location":"LeetCode_Problems/2062/","title":"2062. Count Vowel Substrings of a String","text":"Problem <p>A substring is a contiguous (non-empty) sequence of characters within a string.</p> <p>A vowel substring is a substring that only consists of vowels (<code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>) and has all five vowels present in it.</p> <p>Given a string <code>word</code>, return the number of vowel substrings in <code>word</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"aeiouu\"\nOutput: 2\nExplanation: The vowel substrings of word are as follows (underlined):\n- \"aeiouu\"\n- \"aeiouu\"\n</pre> <p>Example 2:</p> <pre>\nInput: word = \"unicornarihan\"\nOutput: 0\nExplanation: Not all 5 vowels are present, so there are no vowel substrings.\n</pre> <p>Example 3:</p> <pre>\nInput: word = \"cuaieuouac\"\nOutput: 7\nExplanation: The vowel substrings of word are as follows (underlined):\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 100</code></li> <li><code>word</code> consists of lowercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/2063/","title":"2063. Vowels of All Substrings","text":"Problem <p>Given a string <code>word</code>, return the sum of the number of vowels (<code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>) in every substring of <code>word</code>.</p> <p>A substring is a contiguous (non-empty) sequence of characters within a string.</p> <p>Note: Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"aba\"\nOutput: 6\nExplanation: \nAll possible substrings are: \"a\", \"ab\", \"aba\", \"b\", \"ba\", and \"a\".\n- \"b\" has 0 vowels in it\n- \"a\", \"ab\", \"ba\", and \"a\" have 1 vowel each\n- \"aba\" has 2 vowels in it\nHence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6. \n</pre> <p>Example 2:</p> <pre>\nInput: word = \"abc\"\nOutput: 3\nExplanation: \nAll possible substrings are: \"a\", \"ab\", \"abc\", \"b\", \"bc\", and \"c\".\n- \"a\", \"ab\", and \"abc\" have 1 vowel each\n- \"b\", \"bc\", and \"c\" have 0 vowels each\nHence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3.\n</pre> <p>Example 3:</p> <pre>\nInput: word = \"ltcd\"\nOutput: 0\nExplanation: There are no vowels in any substring of \"ltcd\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li> <li><code>word</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2064/","title":"2064. Minimized Maximum of Products Distributed to Any Store","text":"Problem <p>You are given an integer <code>n</code> indicating there are <code>n</code> specialty retail stores. There are <code>m</code> product types of varying amounts, which are given as a 0-indexed integer array <code>quantities</code>, where <code>quantities[i]</code> represents the number of products of the <code>i<sup>th</sup></code> product type.</p> <p>You need to distribute all products to the retail stores following these rules:</p> <ul> <li>A store can only be given at most one product type but can be given any amount of it.</li> <li>After distribution, each store will have been given some number of products (possibly <code>0</code>). Let <code>x</code> represent the maximum number of products given to any store. You want <code>x</code> to be as small as possible, i.e., you want to minimize the maximum number of products that are given to any store.</li> </ul> <p>Return the minimum possible <code>x</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 6, quantities = [11,6]\nOutput: 3\nExplanation: One optimal way is:\n- The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3\n- The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3\nThe maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 7, quantities = [15,10,10]\nOutput: 5\nExplanation: One optimal way is:\n- The 15 products of type 0 are distributed to the first three stores in these amounts: 5, 5, 5\n- The 10 products of type 1 are distributed to the next two stores in these amounts: 5, 5\n- The 10 products of type 2 are distributed to the last two stores in these amounts: 5, 5\nThe maximum number of products given to any store is max(5, 5, 5, 5, 5, 5, 5) = 5.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 1, quantities = [100000]\nOutput: 100000\nExplanation: The only optimal way is:\n- The 100000 products of type 0 are distributed to the only store.\nThe maximum number of products given to any store is max(100000) = 100000.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == quantities.length</code></li> <li><code>1 &lt;= m &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= quantities[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2065/","title":"2065. Maximum Path Quality of a Graph","text":"Problem <p>There is an undirected graph with <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> (inclusive). You are given a 0-indexed integer array <code>values</code> where <code>values[i]</code> is the value of the <code>i<sup>th</sup></code> node. You are also given a 0-indexed 2D integer array <code>edges</code>, where each <code>edges[j] = [u<sub>j</sub>, v<sub>j</sub>, time<sub>j</sub>]</code> indicates that there is an undirected edge between the nodes <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code>,<sub> </sub>and it takes <code>time<sub>j</sub></code> seconds to travel between the two nodes. Finally, you are given an integer <code>maxTime</code>.</p> <p>A valid path in the graph is any path that starts at node <code>0</code>, ends at node <code>0</code>, and takes at most <code>maxTime</code> seconds to complete. You may visit the same node multiple times. The quality of a valid path is the sum of the values of the unique nodes visited in the path (each node's value is added at most once to the sum).</p> <p>Return the maximum quality of a valid path.</p> <p>Note: There are at most four edges connected to each node.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49\nOutput: 75\nExplanation:\nOne possible path is 0 -&gt; 1 -&gt; 0 -&gt; 3 -&gt; 0. The total time taken is 10 + 10 + 10 + 10 = 40 &lt;= 49.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30\nOutput: 25\nExplanation:\nOne possible path is 0 -&gt; 3 -&gt; 0. The total time taken is 10 + 10 = 20 &lt;= 30.\nThe nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50\nOutput: 7\nExplanation:\nOne possible path is 0 -&gt; 1 -&gt; 3 -&gt; 1 -&gt; 0. The total time taken is 10 + 13 + 13 + 10 = 46 &lt;= 50.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == values.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= values[i] &lt;= 10<sup>8</sup></code></li> <li><code>0 &lt;= edges.length &lt;= 2000</code></li> <li><code>edges[j].length == 3 </code></li> <li><code>0 &lt;= u<sub>j </sub>&lt; v<sub>j</sub> &lt;= n - 1</code></li> <li><code>10 &lt;= time<sub>j</sub>, maxTime &lt;= 100</code></li> <li>All the pairs <code>[u<sub>j</sub>, v<sub>j</sub>]</code> are unique.</li> <li>There are at most four edges connected to each node.</li> <li>The graph may not be connected.</li> </ul>"},{"location":"LeetCode_Problems/2066/","title":"2066. Account Balance","text":"Problem"},{"location":"LeetCode_Problems/2067/","title":"2067. Number of Equal Count Substrings","text":"Problem"},{"location":"LeetCode_Problems/2068/","title":"2068. Check Whether Two Strings are Almost Equivalent","text":"Problem <p>Two strings <code>word1</code> and <code>word2</code> are considered almost equivalent if the differences between the frequencies of each letter from <code>'a'</code> to <code>'z'</code> between <code>word1</code> and <code>word2</code> is at most <code>3</code>.</p> <p>Given two strings <code>word1</code> and <code>word2</code>, each of length <code>n</code>, return <code>true</code> if <code>word1</code> and <code>word2</code> are almost equivalent, or <code>false</code> otherwise.</p> <p>The frequency of a letter <code>x</code> is the number of times it occurs in the string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word1 = \"aaaa\", word2 = \"bccb\"\nOutput: false\nExplanation: There are 4 'a's in \"aaaa\" but 0 'a's in \"bccb\".\nThe difference is 4, which is more than the allowed 3.\n</pre> <p>Example 2:</p> <pre>\nInput: word1 = \"abcdeef\", word2 = \"abaaacc\"\nOutput: true\nExplanation: The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 1 time in word1 and 4 times in word2. The difference is 3.\n- 'b' appears 1 time in word1 and 1 time in word2. The difference is 0.\n- 'c' appears 1 time in word1 and 2 times in word2. The difference is 1.\n- 'd' appears 1 time in word1 and 0 times in word2. The difference is 1.\n- 'e' appears 2 times in word1 and 0 times in word2. The difference is 2.\n- 'f' appears 1 time in word1 and 0 times in word2. The difference is 1.\n</pre> <p>Example 3:</p> <pre>\nInput: word1 = \"cccddabba\", word2 = \"babababab\"\nOutput: true\nExplanation: The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 2 times in word1 and 4 times in word2. The difference is 2.\n- 'b' appears 2 times in word1 and 5 times in word2. The difference is 3.\n- 'c' appears 3 times in word1 and 0 times in word2. The difference is 3.\n- 'd' appears 2 times in word1 and 0 times in word2. The difference is 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == word1.length == word2.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>word1</code> and <code>word2</code> consist only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2069/","title":"2069. Walking Robot Simulation II","text":"Problem <p>A <code>width x height</code> grid is on an XY-plane with the bottom-left cell at <code>(0, 0)</code> and the top-right cell at <code>(width - 1, height - 1)</code>. The grid is aligned with the four cardinal directions (<code>\"North\"</code>, <code>\"East\"</code>, <code>\"South\"</code>, and <code>\"West\"</code>). A robot is initially at cell <code>(0, 0)</code> facing direction <code>\"East\"</code>.</p> <p>The robot can be instructed to move for a specific number of steps. For each step, it does the following.</p> <ol> <li>Attempts to move forward one cell in the direction it is facing.</li> <li>If the cell the robot is moving to is out of bounds, the robot instead turns 90 degrees counterclockwise and retries the step.</li> </ol> <p>After the robot finishes moving the number of steps required, it stops and awaits the next instruction.</p> <p>Implement the <code>Robot</code> class:</p> <ul> <li><code>Robot(int width, int height)</code> Initializes the <code>width x height</code> grid with the robot at <code>(0, 0)</code> facing <code>\"East\"</code>.</li> <li><code>void step(int num)</code> Instructs the robot to move forward <code>num</code> steps.</li> <li><code>int[] getPos()</code> Returns the current cell the robot is at, as an array of length 2, <code>[x, y]</code>.</li> <li><code>String getDir()</code> Returns the current direction of the robot, <code>\"North\"</code>, <code>\"East\"</code>, <code>\"South\"</code>, or <code>\"West\"</code>.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"Robot\", \"step\", \"step\", \"getPos\", \"getDir\", \"step\", \"step\", \"step\", \"getPos\", \"getDir\"]\n[[6, 3], [2], [2], [], [], [2], [1], [4], [], []]\nOutput\n[null, null, null, [4, 0], \"East\", null, null, null, [1, 2], \"West\"]\n\nExplanation\nRobot robot = new Robot(6, 3); // Initialize the grid and the robot at (0, 0) facing East.\nrobot.step(2);  // It moves two steps East to (2, 0), and faces East.\nrobot.step(2);  // It moves two steps East to (4, 0), and faces East.\nrobot.getPos(); // return [4, 0]\nrobot.getDir(); // return \"East\"\nrobot.step(2);  // It moves one step East to (5, 0), and faces East.\n                // Moving the next step East would be out of bounds, so it turns and faces North.\n                // Then, it moves one step North to (5, 1), and faces North.\nrobot.step(1);  // It moves one step North to (5, 2), and faces North (not West).\nrobot.step(4);  // Moving the next step North would be out of bounds, so it turns and faces West.\n                // Then, it moves four steps West to (1, 2), and faces West.\nrobot.getPos(); // return [1, 2]\nrobot.getDir(); // return \"West\"\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= width, height &lt;= 100</code></li> <li><code>1 &lt;= num &lt;= 10<sup>5</sup></code></li> <li>At most <code>10<sup>4</sup></code> calls in total will be made to <code>step</code>, <code>getPos</code>, and <code>getDir</code>.</li> </ul>"},{"location":"LeetCode_Problems/2070/","title":"2070. Most Beautiful Item for Each Query","text":"Problem <p>You are given a 2D integer array <code>items</code> where <code>items[i] = [price<sub>i</sub>, beauty<sub>i</sub>]</code> denotes the price and beauty of an item respectively.</p> <p>You are also given a 0-indexed integer array <code>queries</code>. For each <code>queries[j]</code>, you want to determine the maximum beauty of an item whose price is less than or equal to <code>queries[j]</code>. If no such item exists, then the answer to this query is <code>0</code>.</p> <p>Return an array <code>answer</code> of the same length as <code>queries</code> where <code>answer[j]</code> is the answer to the <code>j<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]\nOutput: [2,4,5,5,6,6]\nExplanation:\n- For queries[0]=1, [1,2] is the only item which has price &lt;= 1. Hence, the answer for this query is 2.\n- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. \n  The maximum beauty among them is 4.\n- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].\n  The maximum beauty among them is 5.\n- For queries[4]=5 and queries[5]=6, all items can be considered.\n  Hence, the answer for them is the maximum beauty of all items, i.e., 6.\n</pre> <p>Example 2:</p> <pre>\nInput: items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]\nOutput: [4]\nExplanation: \nThe price of every item is equal to 1, so we choose the item with the maximum beauty 4. \nNote that multiple items can have the same price and/or beauty.  \n</pre> <p>Example 3:</p> <pre>\nInput: items = [[10,1000]], queries = [5]\nOutput: [0]\nExplanation:\nNo item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= items.length, queries.length &lt;= 10<sup>5</sup></code></li> <li><code>items[i].length == 2</code></li> <li><code>1 &lt;= price<sub>i</sub>, beauty<sub>i</sub>, queries[j] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2071/","title":"2071. Maximum Number of Tasks You Can Assign","text":"Problem <p>You have <code>n</code> tasks and <code>m</code> workers. Each task has a strength requirement stored in a 0-indexed integer array <code>tasks</code>, with the <code>i<sup>th</sup></code> task requiring <code>tasks[i]</code> strength to complete. The strength of each worker is stored in a 0-indexed integer array <code>workers</code>, with the <code>j<sup>th</sup></code> worker having <code>workers[j]</code> strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., <code>workers[j] &gt;= tasks[i]</code>).</p> <p>Additionally, you have <code>pills</code> magical pills that will increase a worker's strength by <code>strength</code>. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.</p> <p>Given the 0-indexed integer arrays <code>tasks</code> and <code>workers</code> and the integers <code>pills</code> and <code>strength</code>, return the maximum number of tasks that can be completed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1\nOutput: 3\nExplanation:\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 2 (0 + 1 &gt;= 1)\n- Assign worker 1 to task 1 (3 &gt;= 2)\n- Assign worker 2 to task 0 (3 &gt;= 3)\n</pre> <p>Example 2:</p> <pre>\nInput: tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5\nOutput: 1\nExplanation:\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 0 (0 + 5 &gt;= 5)\n</pre> <p>Example 3:</p> <pre>\nInput: tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10\nOutput: 2\nExplanation:\nWe can assign the magical pills and tasks as follows:\n- Give the magical pill to worker 0 and worker 1.\n- Assign worker 0 to task 0 (0 + 10 &gt;= 10)\n- Assign worker 1 to task 1 (10 + 10 &gt;= 15)\nThe last pill is not given because it will not make any worker strong enough for the last task.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == tasks.length</code></li> <li><code>m == workers.length</code></li> <li><code>1 &lt;= n, m &lt;= 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= pills &lt;= m</code></li> <li><code>0 &lt;= tasks[i], workers[j], strength &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2072/","title":"2072. The Winner University","text":"Problem"},{"location":"LeetCode_Problems/2073/","title":"2073. Time Needed to Buy Tickets","text":"Problem <p>There are <code>n</code> people in a line queuing to buy tickets, where the <code>0<sup>th</sup></code> person is at the front of the line and the <code>(n - 1)<sup>th</sup></code> person is at the back of the line.</p> <p>You are given a 0-indexed integer array <code>tickets</code> of length <code>n</code> where the number of tickets that the <code>i<sup>th</sup></code> person would like to buy is <code>tickets[i]</code>.</p> <p>Each person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line.</p> <p>Return the time taken for the person at position <code>k</code> (0-indexed) to finish buying tickets.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tickets = [2,3,2], k = 2\nOutput: 6\nExplanation: \n- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].\n- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].\nThe person at\u00a0position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.\n</pre> <p>Example 2:</p> <pre>\nInput: tickets = [5,1,1,1], k = 0\nOutput: 8\nExplanation:\n- In the first pass, everyone in the line buys a ticket and the line becomes [4, 0, 0, 0].\n- In the next 4 passes, only the person in position 0 is buying tickets.\nThe person at\u00a0position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == tickets.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= tickets[i] &lt;= 100</code></li> <li><code>0 &lt;= k &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/2074/","title":"2074. Reverse Nodes in Even Length Groups","text":"Problem <p>You are given the <code>head</code> of a linked list.</p> <p>The nodes in the linked list are sequentially assigned to non-empty groups whose lengths form the sequence of the natural numbers (<code>1, 2, 3, 4, ...</code>). The length of a group is the number of nodes assigned to it. In other words,</p> <ul> <li>The <code>1<sup>st</sup></code> node is assigned to the first group.</li> <li>The <code>2<sup>nd</sup></code> and the <code>3<sup>rd</sup></code> nodes are assigned to the second group.</li> <li>The <code>4<sup>th</sup></code>, <code>5<sup>th</sup></code>, and <code>6<sup>th</sup></code> nodes are assigned to the third group, and so on.</li> </ul> <p>Note that the length of the last group may be less than or equal to <code>1 + the length of the second to last group</code>.</p> <p>Reverse the nodes in each group with an even length, and return the <code>head</code> of the modified linked list.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [5,2,6,3,9,1,7,3,8,4]\nOutput: [5,6,2,3,9,1,4,8,3,7]\nExplanation:\n- The length of the first group is 1, which is odd, hence no reversal occurs.\n- The length of the second group is 2, which is even, hence the nodes are reversed.\n- The length of the third group is 3, which is odd, hence no reversal occurs.\n- The length of the last group is 4, which is even, hence the nodes are reversed.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,1,0,6]\nOutput: [1,0,1,6]\nExplanation:\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 1. No reversal occurs.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: head = [1,1,0,6,5]\nOutput: [1,0,1,5,6]\nExplanation:\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 2. The nodes are reversed.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2075/","title":"2075. Decode the Slanted Ciphertext","text":"Problem <p>A string <code>originalText</code> is encoded using a slanted transposition cipher to a string <code>encodedText</code> with the help of a matrix having a fixed number of rows <code>rows</code>.</p> <p><code>originalText</code> is placed first in a top-left to bottom-right manner.</p> <p></p> <p>The blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of <code>originalText</code>. The arrow indicates the order in which the cells are filled. All empty cells are filled with <code>' '</code>. The number of columns is chosen such that the rightmost column will not be empty after filling in <code>originalText</code>.</p> <p><code>encodedText</code> is then formed by appending all characters of the matrix in a row-wise fashion.</p> <p></p> <p>The characters in the blue cells are appended first to <code>encodedText</code>, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.</p> <p>For example, if <code>originalText = \"cipher\"</code> and <code>rows = 3</code>, then we encode it in the following manner:</p> <p></p> <p>The blue arrows depict how <code>originalText</code> is placed in the matrix, and the red arrows denote the order in which <code>encodedText</code> is formed. In the above example, <code>encodedText = \"ch ie pr\"</code>.</p> <p>Given the encoded string <code>encodedText</code> and number of rows <code>rows</code>, return the original string <code>originalText</code>.</p> <p>Note: <code>originalText</code> does not have any trailing spaces <code>' '</code>. The test cases are generated such that there is only one possible <code>originalText</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: encodedText = \"ch   ie   pr\", rows = 3\nOutput: \"cipher\"\nExplanation: This is the same example described in the problem description.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: encodedText = \"iveo    eed   l te   olc\", rows = 4\nOutput: \"i love leetcode\"\nExplanation: The figure above denotes the matrix that was used to encode originalText. \nThe blue arrows show how we can find originalText from encodedText.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: encodedText = \"coding\", rows = 1\nOutput: \"coding\"\nExplanation: Since there is only 1 row, both originalText and encodedText are the same.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= encodedText.length &lt;= 10<sup>6</sup></code></li> <li><code>encodedText</code> consists of lowercase English letters and <code>' '</code> only.</li> <li><code>encodedText</code> is a valid encoding of some <code>originalText</code> that does not have trailing spaces.</li> <li><code>1 &lt;= rows &lt;= 1000</code></li> <li>The testcases are generated such that there is only one possible <code>originalText</code>.</li> </ul>"},{"location":"LeetCode_Problems/2076/","title":"2076. Process Restricted Friend Requests","text":"Problem <p>You are given an integer <code>n</code> indicating the number of people in a network. Each person is labeled from <code>0</code> to <code>n - 1</code>.</p> <p>You are also given a 0-indexed 2D integer array <code>restrictions</code>, where <code>restrictions[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> means that person <code>x<sub>i</sub></code> and person <code>y<sub>i</sub></code> cannot become friends, either directly or indirectly through other people.</p> <p>Initially, no one is friends with each other. You are given a list of friend requests as a 0-indexed 2D integer array <code>requests</code>, where <code>requests[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> is a friend request between person <code>u<sub>j</sub></code> and person <code>v<sub>j</sub></code>.</p> <p>A friend request is successful if <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> can be friends. Each friend request is processed in the given order (i.e., <code>requests[j]</code> occurs before <code>requests[j + 1]</code>), and upon a successful request, <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> become direct friends for all future friend requests.</p> <p>Return a boolean array <code>result</code>, where each <code>result[j]</code> is <code>true</code> if the <code>j<sup>th</sup></code> friend request is successful or <code>false</code> if it is not.</p> <p>Note: If <code>u<sub>j</sub></code> and <code>v<sub>j</sub></code> are already direct friends, the request is still successful.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]\nOutput: [true,false]\nExplanation:\nRequest 0: Person 0 and person 2 can be friends, so they become direct friends. \nRequest 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0).\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]\nOutput: [true,false]\nExplanation:\nRequest 0: Person 1 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1).\n</pre> <p>Example 3:</p> <pre>\nInput: n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]\nOutput: [true,false,true,false]\nExplanation:\nRequest 0: Person 0 and person 4 can be friends, so they become direct friends.\nRequest 1: Person 1 and person 2 cannot be friends since they are directly restricted.\nRequest 2: Person 3 and person 1 can be friends, so they become direct friends.\nRequest 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= restrictions.length &lt;= 1000</code></li> <li><code>restrictions[i].length == 2</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n - 1</code></li> <li><code>x<sub>i</sub> != y<sub>i</sub></code></li> <li><code>1 &lt;= requests.length &lt;= 1000</code></li> <li><code>requests[j].length == 2</code></li> <li><code>0 &lt;= u<sub>j</sub>, v<sub>j</sub> &lt;= n - 1</code></li> <li><code>u<sub>j</sub> != v<sub>j</sub></code></li> </ul>"},{"location":"LeetCode_Problems/2077/","title":"2077. Paths in Maze That Lead to Same Room","text":"Problem"},{"location":"LeetCode_Problems/2078/","title":"2078. Two Furthest Houses With Different Colors","text":"Problem <p>There are <code>n</code> houses evenly lined up on the street, and each house is beautifully painted. You are given a 0-indexed integer array <code>colors</code> of length <code>n</code>, where <code>colors[i]</code> represents the color of the <code>i<sup>th</sup></code> house.</p> <p>Return the maximum distance between two houses with different colors.</p> <p>The distance between the <code>i<sup>th</sup></code> and <code>j<sup>th</sup></code> houses is <code>abs(i - j)</code>, where <code>abs(x)</code> is the absolute value of <code>x</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: colors = [1,1,1,6,1,1,1]\nOutput: 3\nExplanation: In the above image, color 1 is blue, and color 6 is red.\nThe furthest two houses with different colors are house 0 and house 3.\nHouse 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3.\nNote that houses 3 and 6 can also produce the optimal answer.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: colors = [1,8,3,8,3]\nOutput: 4\nExplanation: In the above image, color 1 is blue, color 8 is yellow, and color 3 is green.\nThe furthest two houses with different colors are house 0 and house 4.\nHouse 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4.\n</pre> <p>Example 3:</p> <pre>\nInput: colors = [0,1]\nOutput: 1\nExplanation: The furthest two houses with different colors are house 0 and house 1.\nHouse 0 has color 0, and house 1 has color 1. The distance between them is abs(0 - 1) = 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n ==\u00a0colors.length</code></li> <li><code>2 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= colors[i] &lt;= 100</code></li> <li>Test data are generated such that at least two houses have different colors.</li> </ul>"},{"location":"LeetCode_Problems/2079/","title":"2079. Watering Plants","text":"Problem <p>You want to water <code>n</code> plants in your garden with a watering can. The plants are arranged in a row and are labeled from <code>0</code> to <code>n - 1</code> from left to right where the <code>i<sup>th</sup></code> plant is located at <code>x = i</code>. There is a river at <code>x = -1</code> that you can refill your watering can at.</p> <p>Each plant needs a specific amount of water. You will water the plants in the following way:</p> <ul> <li>Water the plants in order from left to right.</li> <li>After watering the current plant, if you do not have enough water to completely water the next plant, return to the river to fully refill the watering can.</li> <li>You cannot refill the watering can early.</li> </ul> <p>You are initially at the river (i.e., <code>x = -1</code>). It takes one step to move one unit on the x-axis.</p> <p>Given a 0-indexed integer array <code>plants</code> of <code>n</code> integers, where <code>plants[i]</code> is the amount of water the <code>i<sup>th</sup></code> plant needs, and an integer <code>capacity</code> representing the watering can capacity, return the number of steps needed to water all the plants.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: plants = [2,2,3,3], capacity = 5\nOutput: 14\nExplanation: Start at the river with a full watering can:\n- Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.\n- Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.\n- Since you cannot completely water plant 2, walk back to the river to refill (2 steps).\n- Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.\n- Since you cannot completely water plant 3, walk back to the river to refill (3 steps).\n- Walk to plant 3 (4 steps) and water it.\nSteps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14.\n</pre> <p>Example 2:</p> <pre>\nInput: plants = [1,1,1,4,2,3], capacity = 4\nOutput: 30\nExplanation: Start at the river with a full watering can:\n- Water plants 0, 1, and 2 (3 steps). Return to river (3 steps).\n- Water plant 3 (4 steps). Return to river (4 steps).\n- Water plant 4 (5 steps). Return to river (5 steps).\n- Water plant 5 (6 steps).\nSteps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30.\n</pre> <p>Example 3:</p> <pre>\nInput: plants = [7,7,7,7,7,7,7], capacity = 8\nOutput: 49\nExplanation: You have to refill before watering each plant.\nSteps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == plants.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= plants[i] &lt;= 10<sup>6</sup></code></li> <li><code>max(plants[i]) &lt;= capacity &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2080/","title":"2080. Range Frequency Queries","text":"Problem <p>Design a data structure to find the frequency of a given value in a given subarray.</p> <p>The frequency of a value in a subarray is the number of occurrences of that value in the subarray.</p> <p>Implement the <code>RangeFreqQuery</code> class:</p> <ul> <li><code>RangeFreqQuery(int[] arr)</code> Constructs an instance of the class with the given 0-indexed integer array <code>arr</code>.</li> <li><code>int query(int left, int right, int value)</code> Returns the frequency of <code>value</code> in the subarray <code>arr[left...right]</code>.</li> </ul> <p>A subarray is a contiguous sequence of elements within an array. <code>arr[left...right]</code> denotes the subarray that contains the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> (inclusive).</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"RangeFreqQuery\", \"query\", \"query\"]\n[[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]]\nOutput\n[null, 1, 2]\n\nExplanation\nRangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]);\nrangeFreqQuery.query(1, 2, 4); // return 1. The value 4 occurs 1 time in the subarray [33, 4]\nrangeFreqQuery.query(0, 11, 33); // return 2. The value 33 occurs 2 times in the whole array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i], value &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= left &lt;= right &lt; arr.length</code></li> <li>At most <code>10<sup>5</sup></code> calls will be made to <code>query</code></li> </ul>"},{"location":"LeetCode_Problems/2081/","title":"2081. Sum of k-Mirror Numbers","text":"Problem <p>A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.</p> <ul> <li>For example, <code>9</code> is a 2-mirror number. The representation of <code>9</code> in base-10 and base-2 are <code>9</code> and <code>1001</code> respectively, which read the same both forward and backward.</li> <li>On the contrary, <code>4</code> is not a 2-mirror number. The representation of <code>4</code> in base-2 is <code>100</code>, which does not read the same both forward and backward.</li> </ul> <p>Given the base <code>k</code> and the number <code>n</code>, return the sum of the <code>n</code> smallest k-mirror numbers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: k = 2, n = 5\nOutput: 25\nExplanation:\nThe 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:\n  base-10    base-2\n    1          1\n    3          11\n    5          101\n    7          111\n    9          1001\nTheir sum = 1 + 3 + 5 + 7 + 9 = 25. \n</pre> <p>Example 2:</p> <pre>\nInput: k = 3, n = 7\nOutput: 499\nExplanation:\nThe 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:\n  base-10    base-3\n    1          1\n    2          2\n    4          11\n    8          22\n    121        11111\n    151        12121\n    212        21212\nTheir sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499.\n</pre> <p>Example 3:</p> <pre>\nInput: k = 7, n = 17\nOutput: 20379000\nExplanation: The 17 smallest 7-mirror numbers are:\n1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= k &lt;= 9</code></li> <li><code>1 &lt;= n &lt;= 30</code></li> </ul>"},{"location":"LeetCode_Problems/2082/","title":"2082. The Number of Rich Customers","text":"Problem"},{"location":"LeetCode_Problems/2083/","title":"2083. Substrings That Begin and End With the Same Letter","text":"Problem"},{"location":"LeetCode_Problems/2084/","title":"2084. Drop Type 1 Orders for Customers With Type 0 Orders","text":"Problem"},{"location":"LeetCode_Problems/2085/","title":"2085. Count Common Words With One Occurrence","text":"Problem <p>Given two string arrays <code>words1</code> and <code>words2</code>, return the number of strings that appear exactly once in each\u00a0of the two arrays.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words1 = [\"leetcode\",\"is\",\"amazing\",\"as\",\"is\"], words2 = [\"amazing\",\"leetcode\",\"is\"]\nOutput: 2\nExplanation:\n- \"leetcode\" appears exactly once in each of the two arrays. We count this string.\n- \"amazing\" appears exactly once in each of the two arrays. We count this string.\n- \"is\" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string.\n- \"as\" appears once in words1, but does not appear in words2. We do not count this string.\nThus, there are 2 strings that appear exactly once in each of the two arrays.\n</pre> <p>Example 2:</p> <pre>\nInput: words1 = [\"b\",\"bb\",\"bbb\"], words2 = [\"a\",\"aa\",\"aaa\"]\nOutput: 0\nExplanation: There are no strings that appear in each of the two arrays.\n</pre> <p>Example 3:</p> <pre>\nInput: words1 = [\"a\",\"ab\"], words2 = [\"a\",\"a\",\"a\",\"ab\"]\nOutput: 1\nExplanation: The only string that appears exactly once in each of the two arrays is \"ab\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words1.length, words2.length &lt;= 1000</code></li> <li><code>1 &lt;= words1[i].length, words2[j].length &lt;= 30</code></li> <li><code>words1[i]</code> and <code>words2[j]</code> consists only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2086/","title":"2086. Minimum Number of Food Buckets to Feed the Hamsters","text":"Problem <p>You are given a 0-indexed string <code>hamsters</code> where <code>hamsters[i]</code> is either:</p> <ul> <li><code>'H'</code> indicating that there is a hamster at index <code>i</code>, or</li> <li><code>'.'</code> indicating that index <code>i</code> is empty.</li> </ul> <p>You will add some number of food buckets at the empty indices in order to feed the hamsters. A hamster can be fed if there is at least one food bucket to its left or to its right. More formally, a hamster at index <code>i</code> can be fed if you place a food bucket at index <code>i - 1</code> and/or at index <code>i + 1</code>.</p> <p>Return the minimum number of food buckets you should place at empty indices to feed all the hamsters or <code>-1</code> if it is impossible to feed all of them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: hamsters = \"H..H\"\nOutput: 2\nExplanation: We place two food buckets at indices 1 and 2.\nIt can be shown that if we place only one food bucket, one of the hamsters will not be fed.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: hamsters = \".H.H.\"\nOutput: 1\nExplanation: We place one food bucket at index 2.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: hamsters = \".HHH.\"\nOutput: -1\nExplanation: If we place a food bucket at every empty index as shown, the hamster at index 2 will not be able to eat.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= hamsters.length &lt;= 10<sup>5</sup></code></li> <li><code>hamsters[i]</code> is either<code>'H'</code> or <code>'.'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2087/","title":"2087. Minimum Cost Homecoming of a Robot in a Grid","text":"Problem <p>There is an <code>m x n</code> grid, where <code>(0, 0)</code> is the top-left cell and <code>(m - 1, n - 1)</code> is the bottom-right cell. You are given an integer array <code>startPos</code> where <code>startPos = [start<sub>row</sub>, start<sub>col</sub>]</code> indicates that initially, a robot is at the cell <code>(start<sub>row</sub>, start<sub>col</sub>)</code>. You are also given an integer array <code>homePos</code> where <code>homePos = [home<sub>row</sub>, home<sub>col</sub>]</code> indicates that its home is at the cell <code>(home<sub>row</sub>, home<sub>col</sub>)</code>.</p> <p>The robot needs to go to its home. It can move one cell in four directions: left, right, up, or down, and it can not move outside the boundary. Every move incurs some cost. You are further given two 0-indexed integer arrays: <code>rowCosts</code> of length <code>m</code> and <code>colCosts</code> of length <code>n</code>.</p> <ul> <li>If the robot moves up or down into a cell whose row is <code>r</code>, then this move costs <code>rowCosts[r]</code>.</li> <li>If the robot moves left or right into a cell whose column is <code>c</code>, then this move costs <code>colCosts[c]</code>.</li> </ul> <p>Return the minimum total cost for this robot to return home.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]\nOutput: 18\nExplanation: One optimal path is that:\nStarting from (1, 0)\n-&gt; It goes down to (2, 0). This move costs rowCosts[2] = 3.\n-&gt; It goes right to (2, 1). This move costs colCosts[1] = 2.\n-&gt; It goes right to (2, 2). This move costs colCosts[2] = 6.\n-&gt; It goes right to (2, 3). This move costs colCosts[3] = 7.\nThe total cost is 3 + 2 + 6 + 7 = 18</pre> <p>Example 2:</p> <pre>\nInput: startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]\nOutput: 0\nExplanation: The robot is already at its home. Since no moves occur, the total cost is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == rowCosts.length</code></li> <li><code>n == colCosts.length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= rowCosts[r], colCosts[c] &lt;= 10<sup>4</sup></code></li> <li><code>startPos.length == 2</code></li> <li><code>homePos.length == 2</code></li> <li><code>0 &lt;= start<sub>row</sub>, home<sub>row</sub> &lt; m</code></li> <li><code>0 &lt;= start<sub>col</sub>, home<sub>col</sub> &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/2088/","title":"2088. Count Fertile Pyramids in a Land","text":"Problem <p>A farmer has a rectangular grid of land with <code>m</code> rows and <code>n</code> columns that can be divided into unit cells. Each cell is either fertile (represented by a <code>1</code>) or barren (represented by a <code>0</code>). All cells outside the grid are considered barren.</p> <p>A pyramidal plot of land can be defined as a set of cells with the following criteria:</p> <ol> <li>The number of cells in the set has to be greater than <code>1</code> and all cells must be fertile.</li> <li>The apex of a pyramid is the topmost cell of the pyramid. The height of a pyramid is the number of rows it covers. Let <code>(r, c)</code> be the apex of the pyramid, and its height be <code>h</code>. Then, the plot comprises of cells <code>(i, j)</code> where <code>r &lt;= i &lt;= r + h - 1</code> and <code>c - (i - r) &lt;= j &lt;= c + (i - r)</code>.</li> </ol> <p>An inverse pyramidal plot of land can be defined as a set of cells with similar criteria:</p> <ol> <li>The number of cells in the set has to be greater than <code>1</code> and all cells must be fertile.</li> <li>The apex of an inverse pyramid is the bottommost cell of the inverse pyramid. The height of an inverse pyramid is the number of rows it covers. Let <code>(r, c)</code> be the apex of the pyramid, and its height be <code>h</code>. Then, the plot comprises of cells <code>(i, j)</code> where <code>r - h + 1 &lt;= i &lt;= r</code> and <code>c - (r - i) &lt;= j &lt;= c + (r - i)</code>.</li> </ol> <p>Some examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells.</p> <p></p> <p>Given a 0-indexed <code>m x n</code> binary matrix <code>grid</code> representing the farmland, return the total number of pyramidal and inverse pyramidal plots that can be found in <code>grid</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,1,1,0],[1,1,1,1]]\nOutput: 2\nExplanation: The 2 possible pyramidal plots are shown in blue and red respectively.\nThere are no inverse pyramidal plots in this grid. \nHence total number of pyramidal and inverse pyramidal plots is 2 + 0 = 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,1,1],[1,1,1]]\nOutput: 2\nExplanation: The pyramidal plot is shown in blue, and the inverse pyramidal plot is shown in red. \nHence the total number of plots is 1 + 1 = 2.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]\nOutput: 13\nExplanation: There are 7 pyramidal plots, 3 of which are shown in the 2nd and 3rd figures.\nThere are 6 inverse pyramidal plots, 2 of which are shown in the last figure.\nThe total number of plots is 7 + 6 = 13.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 1000</code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/2089/","title":"2089. Find Target Indices After Sorting Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and a target element <code>target</code>.</p> <p>A target index is an index <code>i</code> such that <code>nums[i] == target</code>.</p> <p>Return a list of the target indices of <code>nums</code> after sorting <code>nums</code> in non-decreasing order. If there are no target indices, return an empty list. The returned list must be sorted in increasing order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,5,2,3], target = 2\nOutput: [1,2]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe indices where nums[i] == 2 are 1 and 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,5,2,3], target = 3\nOutput: [3]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe index where nums[i] == 3 is 3.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,5,2,3], target = 5\nOutput: [4]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe index where nums[i] == 5 is 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i], target &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2090/","title":"2090. K Radius Subarray Averages","text":"Problem <p>You are given a 0-indexed array <code>nums</code> of <code>n</code> integers, and an integer <code>k</code>.</p> <p>The k-radius average for a subarray of <code>nums</code> centered at some index <code>i</code> with the radius <code>k</code> is the average of all elements in <code>nums</code> between the indices <code>i - k</code> and <code>i + k</code> (inclusive). If there are less than <code>k</code> elements before or after the index <code>i</code>, then the k-radius average is <code>-1</code>.</p> <p>Build and return an array <code>avgs</code> of length <code>n</code> where <code>avgs[i]</code> is the k-radius average for the subarray centered at index <code>i</code>.</p> <p>The average of <code>x</code> elements is the sum of the <code>x</code> elements divided by <code>x</code>, using integer division. The integer division truncates toward zero, which means losing its fractional part.</p> <ul> <li>For example, the average of four elements <code>2</code>, <code>3</code>, <code>1</code>, and <code>5</code> is <code>(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75</code>, which truncates to <code>2</code>.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [7,4,3,9,1,8,5,2,6], k = 3\nOutput: [-1,-1,-1,5,4,4,-1,-1,-1]\nExplanation:\n- avg[0], avg[1], and avg[2] are -1 because there are less than k elements before each index.\n- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.\n  Using integer division, avg[3] = 37 / 7 = 5.\n- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.\n- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.\n- avg[6], avg[7], and avg[8] are -1 because there are less than k elements after each index.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [100000], k = 0\nOutput: [100000]\nExplanation:\n- The sum of the subarray centered at index 0 with radius 0 is: 100000.\n  avg[0] = 100000 / 1 = 100000.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [8], k = 100000\nOutput: [-1]\nExplanation: \n- avg[0] is -1 because there are less than k elements before and after index 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i], k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2091/","title":"2091. Removing Minimum and Maximum From Array","text":"Problem <p>You are given a 0-indexed array of distinct integers <code>nums</code>.</p> <p>There is an element in <code>nums</code> that has the lowest value and an element that has the highest value. We call them the minimum and maximum respectively. Your goal is to remove both these elements from the array.</p> <p>A deletion is defined as either removing an element from the front of the array or removing an element from the back of the array.</p> <p>Return the minimum number of deletions it would take to remove both the minimum and maximum element from the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,10,7,5,4,1,8,6]\nOutput: 5\nExplanation: \nThe minimum element in the array is nums[5], which is 1.\nThe maximum element in the array is nums[1], which is 10.\nWe can remove both the minimum and maximum by removing 2 elements from the front and 3 elements from the back.\nThis results in 2 + 3 = 5 deletions, which is the minimum number possible.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,-4,19,1,8,-2,-3,5]\nOutput: 3\nExplanation: \nThe minimum element in the array is nums[1], which is -4.\nThe maximum element in the array is nums[2], which is 19.\nWe can remove both the minimum and maximum by removing 3 elements from the front.\nThis results in only 3 deletions, which is the minimum number possible.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [101]\nOutput: 1\nExplanation:  \nThere is only one element in the array, which makes it both the minimum and maximum element.\nWe can remove it with 1 deletion.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li>The integers in <code>nums</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/2092/","title":"2092. Find All People With Secret","text":"Problem <p>You are given an integer <code>n</code> indicating there are <code>n</code> people numbered from <code>0</code> to <code>n - 1</code>. You are also given a 0-indexed 2D integer array <code>meetings</code> where <code>meetings[i] = [x<sub>i</sub>, y<sub>i</sub>, time<sub>i</sub>]</code> indicates that person <code>x<sub>i</sub></code> and person <code>y<sub>i</sub></code> have a meeting at <code>time<sub>i</sub></code>. A person may attend multiple meetings at the same time. Finally, you are given an integer <code>firstPerson</code>.</p> <p>Person <code>0</code> has a secret and initially shares the secret with a person <code>firstPerson</code> at time <code>0</code>. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person <code>x<sub>i</sub></code> has the secret at <code>time<sub>i</sub></code>, then they will share the secret with person <code>y<sub>i</sub></code>, and vice versa.</p> <p>The secrets are shared instantaneously. That is, a person may receive the secret and share it with people in other meetings within the same time frame.</p> <p>Return a list of all the people that have the secret after all the meetings have taken place. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1\nOutput: [0,1,2,3,5]\nExplanation:\nAt time 0, person 0 shares the secret with person 1.\nAt time 5, person 1 shares the secret with person 2.\nAt time 8, person 2 shares the secret with person 3.\nAt time 10, person 1 shares the secret with person 5.\u200b\u200b\u200b\u200b\nThus, people 0, 1, 2, 3, and 5 know the secret after all the meetings.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3\nOutput: [0,1,3]\nExplanation:\nAt time 0, person 0 shares the secret with person 3.\nAt time 2, neither person 1 nor person 2 know the secret.\nAt time 3, person 3 shares the secret with person 0 and person 1.\nThus, people 0, 1, and 3 know the secret after all the meetings.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1\nOutput: [0,1,2,3,4]\nExplanation:\nAt time 0, person 0 shares the secret with person 1.\nAt time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.\nNote that person 2 can share the secret at the same time as receiving it.\nAt time 2, person 3 shares the secret with person 4.\nThus, people 0, 1, 2, 3, and 4 know the secret after all the meetings.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li> <li><code>meetings[i].length == 3</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i </sub>&lt;= n - 1</code></li> <li><code>x<sub>i</sub> != y<sub>i</sub></code></li> <li><code>1 &lt;= time<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= firstPerson &lt;= n - 1</code></li> </ul>"},{"location":"LeetCode_Problems/2093/","title":"2093. Minimum Cost to Reach City With Discounts","text":"Problem"},{"location":"LeetCode_Problems/2094/","title":"2094. Finding 3-Digit Even Numbers","text":"Problem <p>You are given an integer array <code>digits</code>, where each element is a digit. The array may contain duplicates.</p> <p>You need to find all the unique integers that follow the given requirements:</p> <ul> <li>The integer consists of the concatenation of three elements from <code>digits</code> in any arbitrary order.</li> <li>The integer does not have leading zeros.</li> <li>The integer is even.</li> </ul> <p>For example, if the given <code>digits</code> were <code>[1, 2, 3]</code>, integers <code>132</code> and <code>312</code> follow the requirements.</p> <p>Return a sorted array of the unique integers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: digits = [2,1,3,0]\nOutput: [102,120,130,132,210,230,302,310,312,320]\nExplanation: All the possible integers that follow the requirements are in the output array. \nNotice that there are no odd integers or integers with leading zeros.\n</pre> <p>Example 2:</p> <pre>\nInput: digits = [2,2,8,8,2]\nOutput: [222,228,282,288,822,828,882]\nExplanation: The same digit can be used as many times as it appears in digits. \nIn this example, the digit 8 is used twice each time in 288, 828, and 882. \n</pre> <p>Example 3:</p> <pre>\nInput: digits = [3,7,5]\nOutput: []\nExplanation: No even integers can be formed using the given digits.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= digits.length &lt;= 100</code></li> <li><code>0 &lt;= digits[i] &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/2095/","title":"2095. Delete the Middle Node of a Linked List","text":"Problem <p>You are given the <code>head</code> of a linked list. Delete the middle node, and return the <code>head</code> of the modified linked list.</p> <p>The middle node of a linked list of size <code>n</code> is the <code>\u230an / 2\u230b<sup>th</sup></code> node from the start using 0-based indexing, where <code>\u230ax\u230b</code> denotes the largest integer less than or equal to <code>x</code>.</p> <ul> <li>For <code>n</code> = <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, and <code>5</code>, the middle nodes are <code>0</code>, <code>1</code>, <code>1</code>, <code>2</code>, and <code>2</code>, respectively.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,3,4,7,1,2,6]\nOutput: [1,3,4,1,2,6]\nExplanation:\nThe above figure represents the given linked list. The indices of the nodes are written below.\nSince n = 7, node 3 with value 7 is the middle node, which is marked in red.\nWe return the new list after removing this node. \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [1,2,3,4]\nOutput: [1,2,4]\nExplanation:\nThe above figure represents the given linked list.\nFor n = 4, node 2 with value 3 is the middle node, which is marked in red.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: head = [2,1]\nOutput: [2]\nExplanation:\nThe above figure represents the given linked list.\nFor n = 2, node 1 with value 1 is the middle node, which is marked in red.\nNode 0 with value 2 is the only node remaining after removing node 1.</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2096/","title":"2096. Step-By-Step Directions From a Binary Tree Node to Another","text":"Problem <p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes. Each node is uniquely assigned a value from <code>1</code> to <code>n</code>. You are also given an integer <code>startValue</code> representing the value of the start node <code>s</code>, and a different integer <code>destValue</code> representing the value of the destination node <code>t</code>.</p> <p>Find the shortest path starting from node <code>s</code> and ending at node <code>t</code>. Generate step-by-step directions of such path as a string consisting of only the uppercase letters <code>'L'</code>, <code>'R'</code>, and <code>'U'</code>. Each letter indicates a specific direction:</p> <ul> <li><code>'L'</code> means to go from a node to its left child node.</li> <li><code>'R'</code> means to go from a node to its right child node.</li> <li><code>'U'</code> means to go from a node to its parent node.</li> </ul> <p>Return the step-by-step directions of the shortest path from node <code>s</code> to node <code>t</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [5,1,2,3,null,6,4], startValue = 3, destValue = 6\nOutput: \"UURL\"\nExplanation: The shortest path is: 3 \u2192 1 \u2192 5 \u2192 2 \u2192 6.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [2,1], startValue = 2, destValue = 1\nOutput: \"L\"\nExplanation: The shortest path is: 2 \u2192 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is <code>n</code>.</li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= Node.val &lt;= n</code></li> <li>All the values in the tree are unique.</li> <li><code>1 &lt;= startValue, destValue &lt;= n</code></li> <li><code>startValue != destValue</code></li> </ul>"},{"location":"LeetCode_Problems/2097/","title":"2097. Valid Arrangement of Pairs","text":"Problem <p>You are given a 0-indexed 2D integer array <code>pairs</code> where <code>pairs[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>. An arrangement of <code>pairs</code> is valid if for every index <code>i</code> where <code>1 &lt;= i &lt; pairs.length</code>, we have <code>end<sub>i-1</sub> == start<sub>i</sub></code>.</p> <p>Return any valid arrangement of <code>pairs</code>.</p> <p>Note: The inputs will be generated such that there exists a valid arrangement of <code>pairs</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: pairs = [[5,1],[4,5],[11,9],[9,4]]\nOutput: [[11,9],[9,4],[4,5],[5,1]]\nExplanation:\nThis is a valid arrangement since end<sub>i-1</sub> always equals start<sub>i</sub>.\nend<sub>0</sub> = 9 == 9 = start<sub>1</sub> \nend<sub>1</sub> = 4 == 4 = start<sub>2</sub>\nend<sub>2</sub> = 5 == 5 = start<sub>3</sub>\n</pre> <p>Example 2:</p> <pre>\nInput: pairs = [[1,3],[3,2],[2,1]]\nOutput: [[1,3],[3,2],[2,1]]\nExplanation:\nThis is a valid arrangement since end<sub>i-1</sub> always equals start<sub>i</sub>.\nend<sub>0</sub> = 3 == 3 = start<sub>1</sub>\nend<sub>1</sub> = 2 == 2 = start<sub>2</sub>\nThe arrangements [[2,1],[1,3],[3,2]] and [[3,2],[2,1],[1,3]] are also valid.\n</pre> <p>Example 3:</p> <pre>\nInput: pairs = [[1,2],[1,3],[2,1]]\nOutput: [[1,2],[2,1],[1,3]]\nExplanation:\nThis is a valid arrangement since end<sub>i-1</sub> always equals start<sub>i</sub>.\nend<sub>0</sub> = 2 == 2 = start<sub>1</sub>\nend<sub>1</sub> = 1 == 1 = start<sub>2</sub>\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= pairs.length &lt;= 10<sup>5</sup></code></li> <li><code>pairs[i].length == 2</code></li> <li><code>0 &lt;= start<sub>i</sub>, end<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>start<sub>i</sub> != end<sub>i</sub></code></li> <li>No two pairs are exactly the same.</li> <li>There exists a valid arrangement of <code>pairs</code>.</li> </ul>"},{"location":"LeetCode_Problems/2098/","title":"2098. Subsequence of Size K With the Largest Even Sum","text":"Problem"},{"location":"LeetCode_Problems/2099/","title":"2099. Find Subsequence of Length K With the Largest Sum","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You want to find a subsequence of <code>nums</code> of length <code>k</code> that has the largest sum.</p> <p>Return any such subsequence as an integer array of length <code>k</code>.</p> <p>A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,3,3], k = 2\nOutput: [3,3]\nExplanation:\nThe subsequence has the largest sum of 3 + 3 = 6.</pre> <p>Example 2:</p> <pre>\nInput: nums = [-1,-2,3,4], k = 3\nOutput: [-1,3,4]\nExplanation: \nThe subsequence has the largest sum of -1 + 3 + 4 = 6.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,4,3,3], k = 2\nOutput: [3,4]\nExplanation:\nThe subsequence has the largest sum of 3 + 4 = 7. \nAnother possible subsequence is [4, 3].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-10<sup>5</sup>\u00a0&lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/2100/","title":"2100. Find Good Days to Rob the Bank","text":"Problem <p>You and a gang of thieves are planning on robbing a bank. You are given a 0-indexed integer array <code>security</code>, where <code>security[i]</code> is the number of guards on duty on the <code>i<sup>th</sup></code> day. The days are numbered starting from <code>0</code>. You are also given an integer <code>time</code>.</p> <p>The <code>i<sup>th</sup></code> day is a good day to rob the bank if:</p> <ul> <li>There are at least <code>time</code> days before and after the <code>i<sup>th</sup></code> day,</li> <li>The number of guards at the bank for the <code>time</code> days before <code>i</code> are non-increasing, and</li> <li>The number of guards at the bank for the <code>time</code> days after <code>i</code> are non-decreasing.</li> </ul> <p>More formally, this means day <code>i</code> is a good day to rob the bank if and only if <code>security[i - time] &gt;= security[i - time + 1] &gt;= ... &gt;= security[i] &lt;= ... &lt;= security[i + time - 1] &lt;= security[i + time]</code>.</p> <p>Return a list of all days (0-indexed) that are good days to rob the bank. The order that the days are returned in does not matter.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: security = [5,3,3,3,5,6,2], time = 2\nOutput: [2,3]\nExplanation:\nOn day 2, we have security[0] &gt;= security[1] &gt;= security[2] &lt;= security[3] &lt;= security[4].\nOn day 3, we have security[1] &gt;= security[2] &gt;= security[3] &lt;= security[4] &lt;= security[5].\nNo other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank.\n</pre> <p>Example 2:</p> <pre>\nInput: security = [1,1,1,1,1], time = 0\nOutput: [0,1,2,3,4]\nExplanation:\nSince time equals 0, every day is a good day to rob the bank, so return every day.\n</pre> <p>Example 3:</p> <pre>\nInput: security = [1,2,3,4,5,6], time = 2\nOutput: []\nExplanation:\nNo day has 2 days before it that have a non-increasing number of guards.\nThus, no day is a good day to rob the bank, so return an empty list.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= security.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= security[i], time &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2101/","title":"2101. Detonate the Maximum Bombs","text":"Problem <p>You are given a list of bombs. The range of a bomb is defined as the area where its effect can be felt. This area is in the shape of a circle with the center as the location of the bomb.</p> <p>The bombs are represented by a 0-indexed 2D integer array <code>bombs</code> where <code>bombs[i] = [x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub>]</code>. <code>x<sub>i</sub></code> and <code>y<sub>i</sub></code> denote the X-coordinate and Y-coordinate of the location of the <code>i<sup>th</sup></code> bomb, whereas <code>r<sub>i</sub></code> denotes the radius of its range.</p> <p>You may choose to detonate a single bomb. When a bomb is detonated, it will detonate all bombs that lie in its range. These bombs will further detonate the bombs that lie in their ranges.</p> <p>Given the list of <code>bombs</code>, return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: bombs = [[2,1,3],[6,1,4]]\nOutput: 2\nExplanation:\nThe above figure shows the positions and ranges of the 2 bombs.\nIf we detonate the left bomb, the right bomb will not be affected.\nBut if we detonate the right bomb, both bombs will be detonated.\nSo the maximum bombs that can be detonated is max(1, 2) = 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: bombs = [[1,1,5],[10,10,5]]\nOutput: 1\nExplanation:\nDetonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]\nOutput: 5\nExplanation:\nThe best bomb to detonate is bomb 0 because:\n- Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0.\n- Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2.\n- Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3.\nThus all 5 bombs are detonated.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= bombs.length\u00a0&lt;= 100</code></li> <li><code>bombs[i].length == 3</code></li> <li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub> &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2102/","title":"2102. Sequentially Ordinal Rank Tracker","text":"Problem <p>A scenic location is represented by its <code>name</code> and attractiveness <code>score</code>, where <code>name</code> is a unique string among all locations and <code>score</code> is an integer. Locations can be ranked from the best to the worst. The higher the score, the better the location. If the scores of two locations are equal, then the location with the lexicographically smaller name is better.</p> <p>You are building a system that tracks the ranking of locations with the system initially starting with no locations. It supports:</p> <ul> <li>Adding scenic locations, one at a time.</li> <li>Querying the <code>i<sup>th</sup></code> best location of all locations already added, where <code>i</code> is the number of times the system has been queried (including the current query).     <ul> <li>For example, when the system is queried for the <code>4<sup>th</sup></code> time, it returns the <code>4<sup>th</sup></code> best location of all locations already added.</li> </ul> </li> </ul> <p>Note that the test data are generated so that at any time, the number of queries does not exceed the number of locations added to the system.</p> <p>Implement the <code>SORTracker</code> class:</p> <ul> <li><code>SORTracker()</code> Initializes the tracker system.</li> <li><code>void add(string name, int score)</code> Adds a scenic location with <code>name</code> and <code>score</code> to the system.</li> <li><code>string get()</code> Queries and returns the <code>i<sup>th</sup></code> best location, where <code>i</code> is the number of times this method has been invoked (including this invocation).</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"SORTracker\", \"add\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"get\"]\n[[], [\"bradford\", 2], [\"branford\", 3], [], [\"alps\", 2], [], [\"orland\", 2], [], [\"orlando\", 3], [], [\"alpine\", 2], [], []]\nOutput\n[null, null, null, \"branford\", null, \"alps\", null, \"bradford\", null, \"bradford\", null, \"bradford\", \"orland\"]\n\nExplanation\nSORTracker tracker = new SORTracker(); // Initialize the tracker system.\ntracker.add(\"bradford\", 2); // Add location with name=\"bradford\" and score=2 to the system.\ntracker.add(\"branford\", 3); // Add location with name=\"branford\" and score=3 to the system.\ntracker.get();              // The sorted locations, from best to worst, are: branford, bradford.\n                            // Note that branford precedes bradford due to its higher score (3 &gt; 2).\n                            // This is the 1<sup>st</sup> time get() is called, so return the best location: \"branford\".\ntracker.add(\"alps\", 2);     // Add location with name=\"alps\" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, alps, bradford.\n                            // Note that alps precedes bradford even though they have the same score (2).\n                            // This is because \"alps\" is lexicographically smaller than \"bradford\".\n                            // Return the 2<sup>nd</sup> best location \"alps\", as it is the 2<sup>nd</sup> time get() is called.\ntracker.add(\"orland\", 2);   // Add location with name=\"orland\" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, alps, bradford, orland.\n                            // Return \"bradford\", as it is the 3<sup>rd</sup> time get() is called.\ntracker.add(\"orlando\", 3);  // Add location with name=\"orlando\" and score=3 to the system.\ntracker.get();              // Sorted locations: branford, orlando, alps, bradford, orland.\n                            // Return \"bradford\".\ntracker.add(\"alpine\", 2);   // Add location with name=\"alpine\" and score=2 to the system.\ntracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n                            // Return \"bradford\".\ntracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n                            // Return \"orland\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>name</code> consists of lowercase English letters, and is unique among all locations.</li> <li><code>1 &lt;= name.length &lt;= 10</code></li> <li><code>1 &lt;= score &lt;= 10<sup>5</sup></code></li> <li>At any time, the number of calls to <code>get</code> does not exceed the number of calls to <code>add</code>.</li> <li>At most <code>4 * 10<sup>4</sup></code> calls in total will be made to <code>add</code> and <code>get</code>.</li> </ul>"},{"location":"LeetCode_Problems/2103/","title":"2103. Rings and Rods","text":"Problem <p>There are <code>n</code> rings and each ring is either red, green, or blue. The rings are distributed across ten rods labeled from <code>0</code> to <code>9</code>.</p> <p>You are given a string <code>rings</code> of length <code>2n</code> that describes the <code>n</code> rings that are placed onto the rods. Every two characters in <code>rings</code> forms a color-position pair that is used to describe each ring where:</p> <ul> <li>The first character of the <code>i<sup>th</sup></code> pair denotes the <code>i<sup>th</sup></code> ring's color (<code>'R'</code>, <code>'G'</code>, <code>'B'</code>).</li> <li>The second character of the <code>i<sup>th</sup></code> pair denotes the rod that the <code>i<sup>th</sup></code> ring is placed on (<code>'0'</code> to <code>'9'</code>).</li> </ul> <p>For example, <code>\"R3G2B1\"</code> describes <code>n == 3</code> rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.</p> <p>Return the number of rods that have all three colors of rings on them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: rings = \"B0B6G0R6R0R6G9\"\nOutput: 1\nExplanation: \n- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.\n- The rod labeled 6 holds 3 rings, but it only has red and blue.\n- The rod labeled 9 holds only a green ring.\nThus, the number of rods with all three colors is 1.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: rings = \"B0R0G0R9R0B0G0\"\nOutput: 1\nExplanation: \n- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.\n- The rod labeled 9 holds only a red ring.\nThus, the number of rods with all three colors is 1.\n</pre> <p>Example 3:</p> <pre>\nInput: rings = \"G4\"\nOutput: 0\nExplanation: \nOnly one ring is given. Thus, no rods have all three colors.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>rings.length == 2 * n</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>rings[i]</code> where <code>i</code> is even is either <code>'R'</code>, <code>'G'</code>, or <code>'B'</code> (0-indexed).</li> <li><code>rings[i]</code> where <code>i</code> is odd is a digit from <code>'0'</code> to <code>'9'</code> (0-indexed).</li> </ul>"},{"location":"LeetCode_Problems/2104/","title":"2104. Sum of Subarray Ranges","text":"Problem <p>You are given an integer array <code>nums</code>. The range of a subarray of <code>nums</code> is the difference between the largest and smallest element in the subarray.</p> <p>Return the sum of all subarray ranges of <code>nums</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 4\nExplanation: The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0 \n[2], range = 2 - 2 = 0\n[3], range = 3 - 3 = 0\n[1,2], range = 2 - 1 = 1\n[2,3], range = 3 - 2 = 1\n[1,2,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,3]\nOutput: 4\nExplanation: The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0\n[3], range = 3 - 3 = 0\n[3], range = 3 - 3 = 0\n[1,3], range = 3 - 1 = 2\n[3,3], range = 3 - 3 = 0\n[1,3,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [4,-2,-3,4,1]\nOutput: 59\nExplanation: The sum of all subarray ranges of nums is 59.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul> <p> </p> <p>Follow-up: Could you find a solution with <code>O(n)</code> time complexity?</p>"},{"location":"LeetCode_Problems/2105/","title":"2105. Watering Plants II","text":"Problem <p>Alice and Bob want to water <code>n</code> plants in their garden. The plants are arranged in a row and are labeled from <code>0</code> to <code>n - 1</code> from left to right where the <code>i<sup>th</sup></code> plant is located at <code>x = i</code>.</p> <p>Each plant needs a specific amount of water. Alice and Bob have a watering can each, initially full. They water the plants in the following way:</p> <ul> <li>Alice waters the plants in order from left to right, starting from the <code>0<sup>th</sup></code> plant. Bob waters the plants in order from right to left, starting from the <code>(n - 1)<sup>th</sup></code> plant. They begin watering the plants simultaneously.</li> <li>It takes the same amount of time to water each plant regardless of how much water it needs.</li> <li>Alice/Bob must water the plant if they have enough in their can to fully water it. Otherwise, they first refill their can (instantaneously) then water the plant.</li> <li>In case both Alice and Bob reach the same plant, the one with more water currently in his/her watering can should water this plant. If they have the same amount of water, then Alice should water this plant.</li> </ul> <p>Given a 0-indexed integer array <code>plants</code> of <code>n</code> integers, where <code>plants[i]</code> is the amount of water the <code>i<sup>th</sup></code> plant needs, and two integers <code>capacityA</code> and <code>capacityB</code> representing the capacities of Alice's and Bob's watering cans respectively, return the number of times they have to refill to water all the plants.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: plants = [2,2,3,3], capacityA = 5, capacityB = 5\nOutput: 1\nExplanation:\n- Initially, Alice and Bob have 5 units of water each in their watering cans.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 3 units and 2 units of water respectively.\n- Alice has enough water for plant 1, so she waters it. Bob does not have enough water for plant 2, so he refills his can then waters it.\nSo, the total number of times they have to refill to water all the plants is 0 + 0 + 1 + 0 = 1.\n</pre> <p>Example 2:</p> <pre>\nInput: plants = [2,2,3,3], capacityA = 3, capacityB = 4\nOutput: 2\nExplanation:\n- Initially, Alice and Bob have 3 units and 4 units of water in their watering cans respectively.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 1 unit of water each, and need to water plants 1 and 2 respectively.\n- Since neither of them have enough water for their current plants, they refill their cans and then water the plants.\nSo, the total number of times they have to refill to water all the plants is 0 + 1 + 1 + 0 = 2.\n</pre> <p>Example 3:</p> <pre>\nInput: plants = [5], capacityA = 10, capacityB = 8\nOutput: 0\nExplanation:\n- There is only one plant.\n- Alice's watering can has 10 units of water, whereas Bob's can has 8 units. Since Alice has more water in her can, she waters this plant.\nSo, the total number of times they have to refill is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == plants.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= plants[i] &lt;= 10<sup>6</sup></code></li> <li><code>max(plants[i]) &lt;= capacityA, capacityB &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2106/","title":"2106. Maximum Fruits Harvested After at Most K Steps","text":"Problem <p>Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array <code>fruits</code> where <code>fruits[i] = [position<sub>i</sub>, amount<sub>i</sub>]</code> depicts <code>amount<sub>i</sub></code> fruits at the position <code>position<sub>i</sub></code>. <code>fruits</code> is already sorted by <code>position<sub>i</sub></code> in ascending order, and each <code>position<sub>i</sub></code> is unique.</p> <p>You are also given an integer <code>startPos</code> and an integer <code>k</code>. Initially, you are at the position <code>startPos</code>. From any position, you can either walk to the left or right. It takes one step to move one unit on the x-axis, and you can walk at most <code>k</code> steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.</p> <p>Return the maximum total number of fruits you can harvest.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4\nOutput: 9\nExplanation: \nThe optimal way is to:\n- Move right to position 6 and harvest 3 fruits\n- Move right to position 8 and harvest 6 fruits\nYou moved 3 steps and harvested 3 + 6 = 9 fruits in total.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4\nOutput: 14\nExplanation: \nYou can move at most k = 4 steps, so you cannot reach position 0 nor 10.\nThe optimal way is to:\n- Harvest the 7 fruits at the starting position 5\n- Move left to position 4 and harvest 1 fruit\n- Move right to position 6 and harvest 2 fruits\n- Move right to position 7 and harvest 4 fruits\nYou moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2\nOutput: 0\nExplanation:\nYou can move at most k = 2 steps and cannot reach any position with fruits.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= fruits.length &lt;= 10<sup>5</sup></code></li> <li><code>fruits[i].length == 2</code></li> <li><code>0 &lt;= startPos, position<sub>i</sub> &lt;= 2 * 10<sup>5</sup></code></li> <li><code>position<sub>i-1</sub> &lt; position<sub>i</sub></code> for any <code>i &gt; 0</code>\u00a0(0-indexed)</li> <li><code>1 &lt;= amount<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= k &lt;= 2 * 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2107/","title":"2107. Number of Unique Flavors After Sharing K Candies","text":"Problem"},{"location":"LeetCode_Problems/2108/","title":"2108. Find First Palindromic String in the Array","text":"Problem <p>Given an array of strings <code>words</code>, return the first palindromic string in the array. If there is no such string, return an empty string <code>\"\"</code>.</p> <p>A string is palindromic if it reads the same forward and backward.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]\nOutput: \"ada\"\nExplanation: The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"notapalindrome\",\"racecar\"]\nOutput: \"racecar\"\nExplanation: The first and only string that is palindromic is \"racecar\".\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"def\",\"ghi\"]\nOutput: \"\"\nExplanation: There are no palindromic strings, so the empty string is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 100</code></li> <li><code>words[i]</code> consists only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2109/","title":"2109. Adding Spaces to a String","text":"Problem <p>You are given a 0-indexed string <code>s</code> and a 0-indexed integer array <code>spaces</code> that describes the indices in the original string where spaces will be added. Each space should be inserted before the character at the given index.</p> <ul> <li>For example, given <code>s = \"EnjoyYourCoffee\"</code> and <code>spaces = [5, 9]</code>, we place spaces before <code>'Y'</code> and <code>'C'</code>, which are at indices <code>5</code> and <code>9</code> respectively. Thus, we obtain <code>\"Enjoy Your Coffee\"</code>.</li> </ul> <p>Return the modified string after the spaces have been added.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"LeetcodeHelpsMeLearn\", spaces = [8,13,15]\nOutput: \"Leetcode Helps Me Learn\"\nExplanation: \nThe indices 8, 13, and 15 correspond to the underlined characters in \"LeetcodeHelpsMeLearn\".\nWe then place spaces before those characters.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"icodeinpython\", spaces = [1,5,7,9]\nOutput: \"i code in py thon\"\nExplanation:\nThe indices 1, 5, 7, and 9 correspond to the underlined characters in \"icodeinpython\".\nWe then place spaces before those characters.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"spacing\", spaces = [0,1,2,3,4,5,6]\nOutput: \" s p a c i n g\"\nExplanation:\nWe are also able to place spaces before the first character of the string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li> <li><code>s</code> consists only of lowercase and uppercase English letters.</li> <li><code>1 &lt;= spaces.length &lt;= 3 * 10<sup>5</sup></code></li> <li><code>0 &lt;= spaces[i] &lt;= s.length - 1</code></li> <li>All the values of <code>spaces</code> are strictly increasing.</li> </ul>"},{"location":"LeetCode_Problems/2110/","title":"2110. Number of Smooth Descent Periods of a Stock","text":"Problem <p>You are given an integer array <code>prices</code> representing the daily price history of a stock, where <code>prices[i]</code> is the stock price on the <code>i<sup>th</sup></code> day.</p> <p>A smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly <code>1</code>. The first day of the period is exempted from this rule.</p> <p>Return the number of smooth descent periods.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: prices = [3,2,1,4]\nOutput: 7\nExplanation: There are 7 smooth descent periods:\n[3], [2], [1], [4], [3,2], [2,1], and [3,2,1]\nNote that a period with one day is a smooth descent period by the definition.\n</pre> <p>Example 2:</p> <pre>\nInput: prices = [8,6,7,7]\nOutput: 4\nExplanation: There are 4 smooth descent periods: [8], [6], [7], and [7]\nNote that [8,6] is not a smooth descent period as 8 - 6 \u2260 1.\n</pre> <p>Example 3:</p> <pre>\nInput: prices = [1]\nOutput: 1\nExplanation: There is 1 smooth descent period: [1]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= prices[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2111/","title":"2111. Minimum Operations to Make the Array K-Increasing","text":"Problem <p>You are given a 0-indexed array <code>arr</code> consisting of <code>n</code> positive integers, and a positive integer <code>k</code>.</p> <p>The array <code>arr</code> is called K-increasing if <code>arr[i-k] &lt;= arr[i]</code> holds for every index <code>i</code>, where <code>k &lt;= i &lt;= n-1</code>.</p> <ul> <li>For example, <code>arr = [4, 1, 5, 2, 6, 2]</code> is K-increasing for <code>k = 2</code> because:      <ul> <li><code>arr[0] &lt;= arr[2] (4 &lt;= 5)</code></li> <li><code>arr[1] &lt;= arr[3] (1 &lt;= 2)</code></li> <li><code>arr[2] &lt;= arr[4] (5 &lt;= 6)</code></li> <li><code>arr[3] &lt;= arr[5] (2 &lt;= 2)</code></li> </ul> </li> <li>However, the same <code>arr</code> is not K-increasing for <code>k = 1</code> (because <code>arr[0] &gt; arr[1]</code>) or <code>k = 3</code> (because <code>arr[0] &gt; arr[3]</code>).</li> </ul> <p>In one operation, you can choose an index <code>i</code> and change <code>arr[i]</code> into any positive integer.</p> <p>Return the minimum number of operations required to make the array K-increasing for the given <code>k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [5,4,3,2,1], k = 1\nOutput: 4\nExplanation:\nFor k = 1, the resultant array has to be non-decreasing.\nSome of the K-increasing arrays that can be formed are [5,6,7,8,9], [1,1,1,1,1], [2,2,3,4,4]. All of them require 4 operations.\nIt is suboptimal to change the array to, for example, [6,7,8,9,10] because it would take 5 operations.\nIt can be shown that we cannot make the array K-increasing in less than 4 operations.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [4,1,5,2,6,2], k = 2\nOutput: 0\nExplanation:\nThis is the same example as the one in the problem description.\nHere, for every index i where 2 &lt;= i &lt;= 5, arr[i-2] &lt;= arr[i].\nSince the given array is already K-increasing, we do not need to perform any operations.</pre> <p>Example 3:</p> <pre>\nInput: arr = [4,1,5,2,6,2], k = 3\nOutput: 2\nExplanation:\nIndices 3 and 5 are the only ones not satisfying arr[i-3] &lt;= arr[i] for 3 &lt;= i &lt;= 5.\nOne of the ways we can make the array K-increasing is by changing arr[3] to 4 and arr[5] to 5.\nThe array will now be [4,1,5,4,6,5].\nNote that there can be other ways to make the array K-increasing, but none of them require less than 2 operations.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i], k &lt;= arr.length</code></li> </ul>"},{"location":"LeetCode_Problems/2112/","title":"2112. The Airport With the Most Traffic","text":"Problem"},{"location":"LeetCode_Problems/2113/","title":"2113. Elements in Array After Removing and Replacing Elements","text":"Problem"},{"location":"LeetCode_Problems/2114/","title":"2114. Maximum Number of Words Found in Sentences","text":"Problem <p>A sentence is a list of words that are separated by a single space\u00a0with no leading or trailing spaces.</p> <p>You are given an array of strings <code>sentences</code>, where each <code>sentences[i]</code> represents a single sentence.</p> <p>Return the maximum number of words that appear in a single sentence.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: sentences = [\"alice and bob love leetcode\", \"i think so too\", \"this is great thanks very much\"]\nOutput: 6\nExplanation: \n- The first sentence, \"alice and bob love leetcode\", has 5 words in total.\n- The second sentence, \"i think so too\", has 4 words in total.\n- The third sentence, \"this is great thanks very much\", has 6 words in total.\nThus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words.\n</pre> <p>Example 2:</p> <pre>\nInput: sentences = [\"please wait\", \"continue to fight\", \"continue to win\"]\nOutput: 3\nExplanation: It is possible that multiple sentences contain the same number of words. \nIn this example, the second and third sentences (underlined) have the same number of words.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sentences.length &lt;= 100</code></li> <li><code>1 &lt;= sentences[i].length &lt;= 100</code></li> <li><code>sentences[i]</code> consists only of lowercase English letters and <code>' '</code> only.</li> <li><code>sentences[i]</code> does not have leading or trailing spaces.</li> <li>All the words in <code>sentences[i]</code> are separated by a single space.</li> </ul>"},{"location":"LeetCode_Problems/2115/","title":"2115. Find All Possible Recipes from Given Supplies","text":"Problem <p>You have information about <code>n</code> different recipes. You are given a string array <code>recipes</code> and a 2D string array <code>ingredients</code>. The <code>i<sup>th</sup></code> recipe has the name <code>recipes[i]</code>, and you can create it if you have all the needed ingredients from <code>ingredients[i]</code>. Ingredients to a recipe may need to be created from other recipes, i.e., <code>ingredients[i]</code> may contain a string that is in <code>recipes</code>.</p> <p>You are also given a string array <code>supplies</code> containing all the ingredients that you initially have, and you have an infinite supply of all of them.</p> <p>Return a list of all the recipes that you can create. You may return the answer in any order.</p> <p>Note that two recipes may contain each other in their ingredients.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: recipes = [\"bread\"], ingredients = [[\"yeast\",\"flour\"]], supplies = [\"yeast\",\"flour\",\"corn\"]\nOutput: [\"bread\"]\nExplanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\n</pre> <p>Example 2:</p> <pre>\nInput: recipes = [\"bread\",\"sandwich\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"]], supplies = [\"yeast\",\"flour\",\"meat\"]\nOutput: [\"bread\",\"sandwich\"]\nExplanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\".\n</pre> <p>Example 3:</p> <pre>\nInput: recipes = [\"bread\",\"sandwich\",\"burger\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"],[\"sandwich\",\"meat\",\"bread\"]], supplies = [\"yeast\",\"flour\",\"meat\"]\nOutput: [\"bread\",\"sandwich\",\"burger\"]\nExplanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\".\nWe can create \"burger\" since we have the ingredient \"meat\" and can create the ingredients \"bread\" and \"sandwich\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == recipes.length == ingredients.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= ingredients[i].length, supplies.length &lt;= 100</code></li> <li><code>1 &lt;= recipes[i].length, ingredients[i][j].length, supplies[k].length &lt;= 10</code></li> <li><code>recipes[i], ingredients[i][j]</code>, and <code>supplies[k]</code> consist only of lowercase English letters.</li> <li>All the values of <code>recipes</code> and <code>supplies</code>\u00a0combined are unique.</li> <li>Each <code>ingredients[i]</code> does not contain any duplicate values.</li> </ul>"},{"location":"LeetCode_Problems/2116/","title":"2116. Check if a Parentheses String Can Be Valid","text":"Problem <p>A parentheses string is a non-empty string consisting only of <code>'('</code> and <code>')'</code>. It is valid if any of the following conditions is true:</p> <ul> <li>It is <code>()</code>.</li> <li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid parentheses strings.</li> <li>It can be written as <code>(A)</code>, where <code>A</code> is a valid parentheses string.</li> </ul> <p>You are given a parentheses string <code>s</code> and a string <code>locked</code>, both of length <code>n</code>. <code>locked</code> is a binary string consisting only of <code>'0'</code>s and <code>'1'</code>s. For each index <code>i</code> of <code>locked</code>,</p> <ul> <li>If <code>locked[i]</code> is <code>'1'</code>, you cannot change <code>s[i]</code>.</li> <li>But if <code>locked[i]</code> is <code>'0'</code>, you can change <code>s[i]</code> to either <code>'('</code> or <code>')'</code>.</li> </ul> <p>Return <code>true</code> if you can make <code>s</code> a valid parentheses string. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: s = \"))()))\", locked = \"010100\"\nOutput: true\nExplanation: locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3].\nWe change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid.</pre> <p>Example 2:</p> <pre>\nInput: s = \"()()\", locked = \"0000\"\nOutput: true\nExplanation: We do not need to make any changes because s is already valid.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \")\", locked = \"0\"\nOutput: false\nExplanation: locked permits us to change s[0]. \nChanging s[0] to either '(' or ')' will not make s valid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == s.length == locked.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'('</code> or <code>')'</code>.</li> <li><code>locked[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2117/","title":"2117. Abbreviating the Product of a Range","text":"Problem <p>You are given two positive integers <code>left</code> and <code>right</code> with <code>left &lt;= right</code>. Calculate the product of all integers in the inclusive range <code>[left, right]</code>.</p> <p>Since the product may be very large, you will abbreviate it following these steps:</p> <ol> <li>Count all trailing zeros in the product and remove them. Let us denote this count as <code>C</code>.      <ul> <li>For example, there are <code>3</code> trailing zeros in <code>1000</code>, and there are <code>0</code> trailing zeros in <code>546</code>.</li> </ul> </li> <li>Denote the remaining number of digits in the product as <code>d</code>. If <code>d &gt; 10</code>, then express the product as <code>&lt;pre&gt;...&lt;suf&gt;</code> where <code>&lt;pre&gt;</code> denotes the first <code>5</code> digits of the product, and <code>&lt;suf&gt;</code> denotes the last <code>5</code> digits of the product after removing all trailing zeros. If <code>d &lt;= 10</code>, we keep it unchanged.     <ul> <li>For example, we express <code>1234567654321</code> as <code>12345...54321</code>, but <code>1234567</code> is represented as <code>1234567</code>.</li> </ul> </li> <li>Finally, represent the product as a string <code>\"&lt;pre&gt;...&lt;suf&gt;eC\"</code>.     <ul> <li>For example, <code>12345678987600000</code> will be represented as <code>\"12345...89876e5\"</code>.</li> </ul> </li> </ol> <p>Return a string denoting the abbreviated product of all integers in the inclusive range <code>[left, right]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: left = 1, right = 4\nOutput: \"24e0\"\nExplanation: The product is 1 \u00d7 2 \u00d7 3 \u00d7 4 = 24.\nThere are no trailing zeros, so 24 remains the same. The abbreviation will end with \"e0\".\nSince the number of digits is 2, which is less than 10, we do not have to abbreviate it further.\nThus, the final representation is \"24e0\".\n</pre> <p>Example 2:</p> <pre>\nInput: left = 2, right = 11\nOutput: \"399168e2\"\nExplanation: The product is 39916800.\nThere are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with \"e2\".\nThe number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\nHence, the abbreviated product is \"399168e2\".\n</pre> <p>Example 3:</p> <pre>\nInput: left = 371, right = 375\nOutput: \"7219856259e3\"\nExplanation: The product is 7219856259000.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= left &lt;= right &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2118/","title":"2118. Build the Equation","text":"Problem"},{"location":"LeetCode_Problems/2119/","title":"2119. A Number After a Double Reversal","text":"Problem <p>Reversing an integer means to reverse all its digits.</p> <ul> <li>For example, reversing <code>2021</code> gives <code>1202</code>. Reversing <code>12300</code> gives <code>321</code> as the leading zeros are not retained.</li> </ul> <p>Given an integer <code>num</code>, reverse <code>num</code> to get <code>reversed1</code>, then reverse <code>reversed1</code> to get <code>reversed2</code>. Return <code>true</code> if <code>reversed2</code> equals <code>num</code>. Otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 526\nOutput: true\nExplanation: Reverse num to get 625, then reverse 625 to get 526, which equals num.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 1800\nOutput: false\nExplanation: Reverse num to get 81, then reverse 81 to get 18, which does not equal num.\n</pre> <p>Example 3:</p> <pre>\nInput: num = 0\nOutput: true\nExplanation: Reverse num to get 0, then reverse 0 to get 0, which equals num.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2120/","title":"2120. Execution of All Suffix Instructions Staying in a Grid","text":"Problem <p>There is an <code>n x n</code> grid, with the top-left cell at <code>(0, 0)</code> and the bottom-right cell at <code>(n - 1, n - 1)</code>. You are given the integer <code>n</code> and an integer array <code>startPos</code> where <code>startPos = [start<sub>row</sub>, start<sub>col</sub>]</code> indicates that a robot is initially at cell <code>(start<sub>row</sub>, start<sub>col</sub>)</code>.</p> <p>You are also given a 0-indexed string <code>s</code> of length <code>m</code> where <code>s[i]</code> is the <code>i<sup>th</sup></code> instruction for the robot: <code>'L'</code> (move left), <code>'R'</code> (move right), <code>'U'</code> (move up), and <code>'D'</code> (move down).</p> <p>The robot can begin executing from any <code>i<sup>th</sup></code> instruction in <code>s</code>. It executes the instructions one by one towards the end of <code>s</code> but it stops if either of these conditions is met:</p> <ul> <li>The next instruction will move the robot off the grid.</li> <li>There are no more instructions left to execute.</li> </ul> <p>Return an array <code>answer</code> of length <code>m</code> where <code>answer[i]</code> is the number of instructions the robot can execute if the robot begins executing from the <code>i<sup>th</sup></code> instruction in <code>s</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3, startPos = [0,1], s = \"RRDDLU\"\nOutput: [1,5,4,3,1,0]\nExplanation: Starting from startPos and beginning execution from the i<sup>th</sup> instruction:\n- 0<sup>th</sup>: \"RRDDLU\". Only one instruction \"R\" can be executed before it moves off the grid.\n- 1<sup>st</sup>:  \"RDDLU\". All five instructions can be executed while it stays in the grid and ends at (1, 1).\n- 2<sup>nd</sup>:   \"DDLU\". All four instructions can be executed while it stays in the grid and ends at (1, 0).\n- 3<sup>rd</sup>:    \"DLU\". All three instructions can be executed while it stays in the grid and ends at (0, 0).\n- 4<sup>th</sup>:     \"LU\". Only one instruction \"L\" can be executed before it moves off the grid.\n- 5<sup>th</sup>:      \"U\". If moving up, it would move off the grid.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 2, startPos = [1,1], s = \"LURD\"\nOutput: [4,1,0,0]\nExplanation:\n- 0<sup>th</sup>: \"LURD\".\n- 1<sup>st</sup>:  \"URD\".\n- 2<sup>nd</sup>:   \"RD\".\n- 3<sup>rd</sup>:    \"D\".\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 1, startPos = [0,0], s = \"LRUD\"\nOutput: [0,0,0,0]\nExplanation: No matter which instruction the robot begins execution from, it would move off the grid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == s.length</code></li> <li><code>1 &lt;= n, m &lt;= 500</code></li> <li><code>startPos.length == 2</code></li> <li><code>0 &lt;= start<sub>row</sub>, start<sub>col</sub> &lt; n</code></li> <li><code>s</code> consists of <code>'L'</code>, <code>'R'</code>, <code>'U'</code>, and <code>'D'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2121/","title":"2121. Intervals Between Identical Elements","text":"Problem <p>You are given a 0-indexed array of <code>n</code> integers <code>arr</code>.</p> <p>The interval between two elements in <code>arr</code> is defined as the absolute difference between their indices. More formally, the interval between <code>arr[i]</code> and <code>arr[j]</code> is <code>|i - j|</code>.</p> <p>Return an array <code>intervals</code> of length <code>n</code> where <code>intervals[i]</code> is the sum of intervals between <code>arr[i]</code> and each element in <code>arr</code> with the same value as <code>arr[i]</code>.</p> <p>Note: <code>|x|</code> is the absolute value of <code>x</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [2,1,3,1,2,3,3]\nOutput: [4,2,7,2,4,4,5]\nExplanation:\n- Index 0: Another 2 is found at index 4. |0 - 4| = 4\n- Index 1: Another 1 is found at index 3. |1 - 3| = 2\n- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7\n- Index 3: Another 1 is found at index 1. |3 - 1| = 2\n- Index 4: Another 2 is found at index 0. |4 - 0| = 4\n- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4\n- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [10,5,10,10]\nOutput: [5,0,3,4]\nExplanation:\n- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5\n- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.\n- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3\n- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == arr.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2122/","title":"2122. Recover the Original Array","text":"Problem <p>Alice had a 0-indexed array <code>arr</code> consisting of <code>n</code> positive integers. She chose an arbitrary positive integer <code>k</code> and created two new 0-indexed integer arrays <code>lower</code> and <code>higher</code> in the following manner:</p> <ol> <li><code>lower[i] = arr[i] - k</code>, for every index <code>i</code> where <code>0 &lt;= i &lt; n</code></li> <li><code>higher[i] = arr[i] + k</code>, for every index <code>i</code> where <code>0 &lt;= i &lt; n</code></li> </ol> <p>Unfortunately, Alice lost all three arrays. However, she remembers the integers that were present in the arrays <code>lower</code> and <code>higher</code>, but not the array each integer belonged to. Help Alice and recover the original array.</p> <p>Given an array <code>nums</code> consisting of <code>2n</code> integers, where exactly <code>n</code> of the integers were present in <code>lower</code> and the remaining in <code>higher</code>, return the original array <code>arr</code>. In case the answer is not unique, return any valid array.</p> <p>Note: The test cases are generated such that there exists at least one valid array <code>arr</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,10,6,4,8,12]\nOutput: [3,7,11]\nExplanation:\nIf arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12].\nCombining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums.\nAnother valid possibility is that arr = [5,7,9] and k = 3. In that case, lower = [2,4,6] and higher = [8,10,12]. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,3,3]\nOutput: [2,2]\nExplanation:\nIf arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3].\nCombining lower and higher gives us [1,1,3,3], which is equal to nums.\nNote that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0.\nThis is invalid since k must be positive.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [5,435]\nOutput: [220]\nExplanation:\nThe only possible combination is arr = [220] and k = 215. Using them, we get lower = [5] and higher = [435].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 * n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li>The test cases are generated such that there exists at least one valid array <code>arr</code>.</li> </ul>"},{"location":"LeetCode_Problems/2123/","title":"2123. Minimum Operations to Remove Adjacent Ones in Matrix","text":"Problem"},{"location":"LeetCode_Problems/2124/","title":"2124. Check if All A's Appears Before All B's","text":"Problem <p>Given a string <code>s</code> consisting of only the characters <code>'a'</code> and <code>'b'</code>, return <code>true</code> if every <code>'a'</code> appears before every <code>'b'</code> in the string. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aaabbb\"\nOutput: true\nExplanation:\nThe 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.\nHence, every 'a' appears before every 'b' and we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abab\"\nOutput: false\nExplanation:\nThere is an 'a' at index 2 and a 'b' at index 1.\nHence, not every 'a' appears before every 'b' and we return false.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"bbb\"\nOutput: true\nExplanation:\nThere are no 'a's, hence, every 'a' appears before every 'b' and we return true.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s[i]</code> is either <code>'a'</code> or <code>'b'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2125/","title":"2125. Number of Laser Beams in a Bank","text":"Problem <p>Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array <code>bank</code> representing the floor plan of the bank, which is an <code>m x n</code> 2D matrix. <code>bank[i]</code> represents the <code>i<sup>th</sup></code> row, consisting of <code>'0'</code>s and <code>'1'</code>s. <code>'0'</code> means the cell is empty, while<code>'1'</code> means the cell has a security device.</p> <p>There is one laser beam between any two security devices if both conditions are met:</p> <ul> <li>The two devices are located on two different rows: <code>r<sub>1</sub></code> and <code>r<sub>2</sub></code>, where <code>r<sub>1</sub> &lt; r<sub>2</sub></code>.</li> <li>For each row <code>i</code> where <code>r<sub>1</sub> &lt; i &lt; r<sub>2</sub></code>, there are no security devices in the <code>i<sup>th</sup></code> row.</li> </ul> <p>Laser beams are independent, i.e., one beam does not interfere nor join with another.</p> <p>Return the total number of laser beams in the bank.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: bank = [\"011001\",\"000000\",\"010100\",\"001000\"]\nOutput: 8\nExplanation: Between each of the following device pairs, there is one beam. In total, there are 8 beams:\n * bank[0][1] -- bank[2][1]\n * bank[0][1] -- bank[2][3]\n * bank[0][2] -- bank[2][1]\n * bank[0][2] -- bank[2][3]\n * bank[0][5] -- bank[2][1]\n * bank[0][5] -- bank[2][3]\n * bank[2][1] -- bank[3][2]\n * bank[2][3] -- bank[3][2]\nNote that there is no beam between any device on the 0<sup>th</sup> row with any on the 3<sup>rd</sup> row.\nThis is because the 2<sup>nd</sup> row contains security devices, which breaks the second condition.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: bank = [\"000\",\"111\",\"000\"]\nOutput: 0\nExplanation: There does not exist two devices located on two different rows.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == bank.length</code></li> <li><code>n == bank[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 500</code></li> <li><code>bank[i][j]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2126/","title":"2126. Destroying Asteroids","text":"Problem <p>You are given an integer <code>mass</code>, which represents the original mass of a planet. You are further given an integer array <code>asteroids</code>, where <code>asteroids[i]</code> is the mass of the <code>i<sup>th</sup></code> asteroid.</p> <p>You can arrange for the planet to collide with the asteroids in any arbitrary order. If the mass of the planet is greater than or equal to the mass of the asteroid, the asteroid is destroyed and the planet gains the mass of the asteroid. Otherwise, the planet is destroyed.</p> <p>Return <code>true</code> if all asteroids can be destroyed. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: mass = 10, asteroids = [3,9,19,5,21]\nOutput: true\nExplanation: One way to order the asteroids is [9,19,5,3,21]:\n- The planet collides with the asteroid with a mass of 9. New planet mass: 10 + 9 = 19\n- The planet collides with the asteroid with a mass of 19. New planet mass: 19 + 19 = 38\n- The planet collides with the asteroid with a mass of 5. New planet mass: 38 + 5 = 43\n- The planet collides with the asteroid with a mass of 3. New planet mass: 43 + 3 = 46\n- The planet collides with the asteroid with a mass of 21. New planet mass: 46 + 21 = 67\nAll asteroids are destroyed.\n</pre> <p>Example 2:</p> <pre>\nInput: mass = 5, asteroids = [4,9,23,4]\nOutput: false\nExplanation: \nThe planet cannot ever gain enough mass to destroy the asteroid with a mass of 23.\nAfter the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22.\nThis is less than 23, so a collision would not destroy the last asteroid.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= mass &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= asteroids.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= asteroids[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2127/","title":"2127. Maximum Employees to Be Invited to a Meeting","text":"Problem <p>A company is organizing a meeting and has a list of <code>n</code> employees, waiting to be invited. They have arranged for a large circular table, capable of seating any number of employees.</p> <p>The employees are numbered from <code>0</code> to <code>n - 1</code>. Each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. The favorite person of an employee is not themself.</p> <p>Given a 0-indexed integer array <code>favorite</code>, where <code>favorite[i]</code> denotes the favorite person of the <code>i<sup>th</sup></code> employee, return the maximum number of employees that can be invited to the meeting.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: favorite = [2,2,1,2]\nOutput: 3\nExplanation:\nThe above figure shows how the company can invite employees 0, 1, and 2, and seat them at the round table.\nAll employees cannot be invited because employee 2 cannot sit beside employees 0, 1, and 3, simultaneously.\nNote that the company can also invite employees 1, 2, and 3, and give them their desired seats.\nThe maximum number of employees that can be invited to the meeting is 3. \n</pre> <p>Example 2:</p> <pre>\nInput: favorite = [1,2,0]\nOutput: 3\nExplanation: \nEach employee is the favorite person of at least one other employee, and the only way the company can invite them is if they invite every employee.\nThe seating arrangement will be the same as that in the figure given in example 1:\n- Employee 0 will sit between employees 2 and 1.\n- Employee 1 will sit between employees 0 and 2.\n- Employee 2 will sit between employees 1 and 0.\nThe maximum number of employees that can be invited to the meeting is 3.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: favorite = [3,0,1,4,1]\nOutput: 4\nExplanation:\nThe above figure shows how the company will invite employees 0, 1, 3, and 4, and seat them at the round table.\nEmployee 2 cannot be invited because the two spots next to their favorite employee 1 are taken.\nSo the company leaves them out of the meeting.\nThe maximum number of employees that can be invited to the meeting is 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == favorite.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= favorite[i] &lt;=\u00a0n - 1</code></li> <li><code>favorite[i] != i</code></li> </ul>"},{"location":"LeetCode_Problems/2128/","title":"2128. Remove All Ones With Row and Column Flips","text":"Problem"},{"location":"LeetCode_Problems/2129/","title":"2129. Capitalize the Title","text":"Problem <p>You are given a string <code>title</code> consisting of one or more words separated by a single space, where each word consists of English letters. Capitalize the string by changing the capitalization of each word such that:</p> <ul> <li>If the length of the word is <code>1</code> or <code>2</code> letters, change all letters to lowercase.</li> <li>Otherwise, change the first letter to uppercase and the remaining letters to lowercase.</li> </ul> <p>Return the capitalized <code>title</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: title = \"capiTalIze tHe titLe\"\nOutput: \"Capitalize The Title\"\nExplanation:\nSince all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase.\n</pre> <p>Example 2:</p> <pre>\nInput: title = \"First leTTeR of EACH Word\"\nOutput: \"First Letter of Each Word\"\nExplanation:\nThe word \"of\" has length 2, so it is all lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.\n</pre> <p>Example 3:</p> <pre>\nInput: title = \"i lOve leetcode\"\nOutput: \"i Love Leetcode\"\nExplanation:\nThe word \"i\" has length 1, so it is lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= title.length &lt;= 100</code></li> <li><code>title</code> consists of words separated by a single space without any leading or trailing spaces.</li> <li>Each word consists of uppercase and lowercase English letters and is non-empty.</li> </ul>"},{"location":"LeetCode_Problems/2130/","title":"2130. Maximum Twin Sum of a Linked List","text":"Problem <p>In a linked list of size <code>n</code>, where <code>n</code> is even, the <code>i<sup>th</sup></code> node (0-indexed) of the linked list is known as the twin of the <code>(n-1-i)<sup>th</sup></code> node, if <code>0 &lt;= i &lt;= (n / 2) - 1</code>.</p> <ul> <li>For example, if <code>n = 4</code>, then node <code>0</code> is the twin of node <code>3</code>, and node <code>1</code> is the twin of node <code>2</code>. These are the only nodes with twins for <code>n = 4</code>.</li> </ul> <p>The twin sum is defined as the sum of a node and its twin.</p> <p>Given the <code>head</code> of a linked list with even length, return the maximum twin sum of the linked list.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [5,4,2,1]\nOutput: 6\nExplanation:\nNodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.\nThere are no other nodes with twins in the linked list.\nThus, the maximum twin sum of the linked list is 6. \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [4,2,2,3]\nOutput: 7\nExplanation:\nThe nodes with twins present in this linked list are:\n- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.\n- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.\nThus, the maximum twin sum of the linked list is max(7, 4) = 7. \n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: head = [1,100000]\nOutput: 100001\nExplanation:\nThere is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is an even integer in the range <code>[2, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2131/","title":"2131. Longest Palindrome by Concatenating Two Letter Words","text":"Problem <p>You are given an array of strings <code>words</code>. Each element of <code>words</code> consists of two lowercase English letters.</p> <p>Create the longest possible palindrome by selecting some elements from <code>words</code> and concatenating them in any order. Each element can be selected at most once.</p> <p>Return the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return <code>0</code>.</p> <p>A palindrome is a string that reads the same forward and backward.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"lc\",\"cl\",\"gg\"]\nOutput: 6\nExplanation: One longest palindrome is \"lc\" + \"gg\" + \"cl\" = \"lcggcl\", of length 6.\nNote that \"clgglc\" is another longest palindrome that can be created.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"ab\",\"ty\",\"yt\",\"lc\",\"cl\",\"ab\"]\nOutput: 8\nExplanation: One longest palindrome is \"ty\" + \"lc\" + \"cl\" + \"yt\" = \"tylcclyt\", of length 8.\nNote that \"lcyttycl\" is another longest palindrome that can be created.\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"cc\",\"ll\",\"xx\"]\nOutput: 2\nExplanation: One longest palindrome is \"cc\", of length 2.\nNote that \"ll\" is another longest palindrome that can be created, and so is \"xx\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 10<sup>5</sup></code></li> <li><code>words[i].length == 2</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2132/","title":"2132. Stamping the Grid","text":"Problem <p>You are given an <code>m x n</code> binary matrix <code>grid</code> where each cell is either <code>0</code> (empty) or <code>1</code> (occupied).</p> <p>You are then given stamps of size <code>stampHeight x stampWidth</code>. We want to fit the stamps such that they follow the given restrictions and requirements:</p> <ol> <li>Cover all the empty cells.</li> <li>Do not cover any of the occupied cells.</li> <li>We can put as many stamps as we want.</li> <li>Stamps can overlap with each other.</li> <li>Stamps are not allowed to be rotated.</li> <li>Stamps must stay completely inside the grid.</li> </ol> <p>Return <code>true</code> if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3\nOutput: true\nExplanation: We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2 \nOutput: false \nExplanation: There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[r].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li> <li><code>grid[r][c]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>1 &lt;= stampHeight, stampWidth &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2133/","title":"2133. Check if Every Row and Column Contains All Numbers","text":"Problem <p>An <code>n x n</code> matrix is valid if every row and every column contains all the integers from <code>1</code> to <code>n</code> (inclusive).</p> <p>Given an <code>n x n</code> integer matrix <code>matrix</code>, return <code>true</code> if the matrix is valid. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[1,2,3],[3,1,2],[2,3,1]]\nOutput: true\nExplanation: In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.\nHence, we return true.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[1,1,1],[1,2,3],[1,2,3]]\nOutput: false\nExplanation: In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.\nHence, we return false.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == matrix.length == matrix[i].length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= matrix[i][j] &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2134/","title":"2134. Minimum Swaps to Group All 1's Together II","text":"Problem <p>A swap is defined as taking two distinct positions in an array and swapping the values in them.</p> <p>A circular array is defined as an array where we consider the first element and the last element to be adjacent.</p> <p>Given a binary circular array <code>nums</code>, return the minimum number of swaps required to group all <code>1</code>'s present in the array together at any location.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,0,1,1,0,0]\nOutput: 1\nExplanation: Here are a few of the ways to group all the 1's together:\n[0,0,1,1,1,0,0] using 1 swap.\n[0,1,1,1,0,0,0] using 1 swap.\n[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).\nThere is no way to group all 1's together with 0 swaps.\nThus, the minimum number of swaps required is 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1,1,1,0,0,1,1,0]\nOutput: 2\nExplanation: Here are a few of the ways to group all the 1's together:\n[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).\n[1,1,1,1,1,0,0,0,0] using 2 swaps.\nThere is no way to group all 1's together with 0 or 1 swaps.\nThus, the minimum number of swaps required is 2.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,0,0,1]\nOutput: 0\nExplanation: All the 1's are already grouped together due to the circular property of the array.\nThus, the minimum number of swaps required is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/2135/","title":"2135. Count Words Obtained After Adding a Letter","text":"Problem <p>You are given two 0-indexed arrays of strings <code>startWords</code> and <code>targetWords</code>. Each string consists of lowercase English letters only.</p> <p>For each string in <code>targetWords</code>, check if it is possible to choose a string from <code>startWords</code> and perform a conversion operation on it to be equal to that from <code>targetWords</code>.</p> <p>The conversion operation is described in the following two steps:</p> <ol> <li>Append any lowercase letter that is not present in the string to its end.      <ul> <li>For example, if the string is <code>\"abc\"</code>, the letters <code>'d'</code>, <code>'e'</code>, or <code>'y'</code> can be added to it, but not <code>'a'</code>. If <code>'d'</code> is added, the resulting string will be <code>\"abcd\"</code>.</li> </ul> </li> <li>Rearrange the letters of the new string in any arbitrary order.     <ul> <li>For example, <code>\"abcd\"</code> can be rearranged to <code>\"acbd\"</code>, <code>\"bacd\"</code>, <code>\"cbda\"</code>, and so on. Note that it can also be rearranged to <code>\"abcd\"</code> itself.</li> </ul> </li> </ol> <p>Return the number of strings in <code>targetWords</code> that can be obtained by performing the operations on any string of <code>startWords</code>.</p> <p>Note that you will only be verifying if the string in <code>targetWords</code> can be obtained from a string in <code>startWords</code> by performing the operations. The strings in <code>startWords</code> do not actually change during this process.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: startWords = [\"ant\",\"act\",\"tack\"], targetWords = [\"tack\",\"act\",\"acti\"]\nOutput: 2\nExplanation:\n- In order to form targetWords[0] = \"tack\", we use startWords[1] = \"act\", append 'k' to it, and rearrange \"actk\" to \"tack\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"act\".\n  Note that \"act\" does exist in startWords, but we must append one letter to the string before rearranging it.\n- In order to form targetWords[2] = \"acti\", we use startWords[1] = \"act\", append 'i' to it, and rearrange \"acti\" to \"acti\" itself.\n</pre> <p>Example 2:</p> <pre>\nInput: startWords = [\"ab\",\"a\"], targetWords = [\"abc\",\"abcd\"]\nOutput: 1\nExplanation:\n- In order to form targetWords[0] = \"abc\", we use startWords[0] = \"ab\", add 'c' to it, and rearrange it to \"abc\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"abcd\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= startWords.length, targetWords.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= startWords[i].length, targetWords[j].length &lt;= 26</code></li> <li>Each string of <code>startWords</code> and <code>targetWords</code> consists of lowercase English letters only.</li> <li>No letter occurs more than once in any string of <code>startWords</code> or <code>targetWords</code>.</li> </ul>"},{"location":"LeetCode_Problems/2136/","title":"2136. Earliest Possible Day of Full Bloom","text":"Problem <p>You have <code>n</code> flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays <code>plantTime</code> and <code>growTime</code>, of length <code>n</code> each:</p> <ul> <li><code>plantTime[i]</code> is the number of full days it takes you to plant the <code>i<sup>th</sup></code> seed. Every day, you can work on planting exactly one seed. You do not have to work on planting the same seed on consecutive days, but the planting of a seed is not complete until you have worked <code>plantTime[i]</code> days on planting it in total.</li> <li><code>growTime[i]</code> is the number of full days it takes the <code>i<sup>th</sup></code> seed to grow after being completely planted. After the last day of its growth, the flower blooms and stays bloomed forever.</li> </ul> <p>From the beginning of day <code>0</code>, you can plant the seeds in any order.</p> <p>Return the earliest possible day where all seeds are blooming.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: plantTime = [1,4,3], growTime = [2,3,1]\nOutput: 9\nExplanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 0, plant the 0<sup>th</sup> seed. The seed grows for 2 full days and blooms on day 3.\nOn days 1, 2, 3, and 4, plant the 1<sup>st</sup> seed. The seed grows for 3 full days and blooms on day 8.\nOn days 5, 6, and 7, plant the 2<sup>nd</sup> seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: plantTime = [1,2,3,2], growTime = [2,1,2,1]\nOutput: 9\nExplanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 1, plant the 0<sup>th</sup> seed. The seed grows for 2 full days and blooms on day 4.\nOn days 0 and 3, plant the 1<sup>st</sup> seed. The seed grows for 1 full day and blooms on day 5.\nOn days 2, 4, and 5, plant the 2<sup>nd</sup> seed. The seed grows for 2 full days and blooms on day 8.\nOn days 6 and 7, plant the 3<sup>rd</sup> seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.\n</pre> <p>Example 3:</p> <pre>\nInput: plantTime = [1], growTime = [1]\nOutput: 2\nExplanation: On day 0, plant the 0<sup>th</sup> seed. The seed grows for 1 full day and blooms on day 2.\nThus, on day 2, all the seeds are blooming.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == plantTime.length == growTime.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= plantTime[i], growTime[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2137/","title":"2137. Pour Water Between Buckets to Make Water Levels Equal","text":"Problem"},{"location":"LeetCode_Problems/2138/","title":"2138. Divide a String Into Groups of Size k","text":"Problem <p>A string <code>s</code> can be partitioned into groups of size <code>k</code> using the following procedure:</p> <ul> <li>The first group consists of the first <code>k</code> characters of the string, the second group consists of the next <code>k</code> characters of the string, and so on. Each character can be a part of exactly one group.</li> <li>For the last group, if the string does not have <code>k</code> characters remaining, a character <code>fill</code> is used to complete the group.</li> </ul> <p>Note that the partition is done so that after removing the <code>fill</code> character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be <code>s</code>.</p> <p>Given the string <code>s</code>, the size of each group <code>k</code> and the character <code>fill</code>, return a string array denoting the composition of every group <code>s</code> has been divided into, using the above procedure.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcdefghi\", k = 3, fill = \"x\"\nOutput: [\"abc\",\"def\",\"ghi\"]\nExplanation:\nThe first 3 characters \"abc\" form the first group.\nThe next 3 characters \"def\" form the second group.\nThe last 3 characters \"ghi\" form the third group.\nSince all groups can be completely filled by characters from the string, we do not need to use fill.\nThus, the groups formed are \"abc\", \"def\", and \"ghi\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcdefghij\", k = 3, fill = \"x\"\nOutput: [\"abc\",\"def\",\"ghi\",\"jxx\"]\nExplanation:\nSimilar to the previous example, we are forming the first three groups \"abc\", \"def\", and \"ghi\".\nFor the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice.\nThus, the 4 groups formed are \"abc\", \"def\", \"ghi\", and \"jxx\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of lowercase English letters only.</li> <li><code>1 &lt;= k &lt;= 100</code></li> <li><code>fill</code> is a lowercase English letter.</li> </ul>"},{"location":"LeetCode_Problems/2139/","title":"2139. Minimum Moves to Reach Target Score","text":"Problem <p>You are playing a game with integers. You start with the integer <code>1</code> and you want to reach the integer <code>target</code>.</p> <p>In one move, you can either:</p> <ul> <li>Increment the current integer by one (i.e., <code>x = x + 1</code>).</li> <li>Double the current integer (i.e., <code>x = 2 * x</code>).</li> </ul> <p>You can use the increment operation any number of times, however, you can only use the double operation at most <code>maxDoubles</code> times.</p> <p>Given the two integers <code>target</code> and <code>maxDoubles</code>, return the minimum number of moves needed to reach <code>target</code> starting with <code>1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: target = 5, maxDoubles = 0\nOutput: 4\nExplanation: Keep incrementing by 1 until you reach target.\n</pre> <p>Example 2:</p> <pre>\nInput: target = 19, maxDoubles = 2\nOutput: 7\nExplanation: Initially, x = 1\nIncrement 3 times so x = 4\nDouble once so x = 8\nIncrement once so x = 9\nDouble again so x = 18\nIncrement once so x = 19\n</pre> <p>Example 3:</p> <pre>\nInput: target = 10, maxDoubles = 4\nOutput: 4\nExplanation: Initially, x = 1\nIncrement once so x = 2\nDouble once so x = 4\nIncrement once so x = 5\nDouble again so x = 10\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= maxDoubles &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2140/","title":"2140. Solving Questions With Brainpower","text":"Problem <p>You are given a 0-indexed 2D integer array <code>questions</code> where <code>questions[i] = [points<sub>i</sub>, brainpower<sub>i</sub>]</code>.</p> <p>The array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question <code>0</code>) and make a decision whether to solve or skip each question. Solving question <code>i</code> will earn you <code>points<sub>i</sub></code> points but you will be unable to solve each of the next <code>brainpower<sub>i</sub></code> questions. If you skip question <code>i</code>, you get to make the decision on the next question.</p> <ul> <li>For example, given <code>questions = [[3, 2], [4, 3], [4, 4], [2, 5]]</code>:      <ul> <li>If question <code>0</code> is solved, you will earn <code>3</code> points but you will be unable to solve questions <code>1</code> and <code>2</code>.</li> <li>If instead, question <code>0</code> is skipped and question <code>1</code> is solved, you will earn <code>4</code> points but you will be unable to solve questions <code>2</code> and <code>3</code>.</li> </ul> </li> </ul> <p>Return the maximum points you can earn for the exam.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: questions = [[3,2],[4,3],[4,4],[2,5]]\nOutput: 5\nExplanation: The maximum points can be earned by solving questions 0 and 3.\n- Solve question 0: Earn 3 points, will be unable to solve the next 2 questions\n- Unable to solve questions 1 and 2\n- Solve question 3: Earn 2 points\nTotal points earned: 3 + 2 = 5. There is no other way to earn 5 or more points.\n</pre> <p>Example 2:</p> <pre>\nInput: questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]\nOutput: 7\nExplanation: The maximum points can be earned by solving questions 1 and 4.\n- Skip question 0\n- Solve question 1: Earn 2 points, will be unable to solve the next 2 questions\n- Unable to solve questions 2 and 3\n- Solve question 4: Earn 5 points\nTotal points earned: 2 + 5 = 7. There is no other way to earn 7 or more points.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= questions.length &lt;= 10<sup>5</sup></code></li> <li><code>questions[i].length == 2</code></li> <li><code>1 &lt;= points<sub>i</sub>, brainpower<sub>i</sub> &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2141/","title":"2141. Maximum Running Time of N Computers","text":"Problem <p>You have <code>n</code> computers. You are given the integer <code>n</code> and a 0-indexed integer array <code>batteries</code> where the <code>i<sup>th</sup></code> battery can run a computer for <code>batteries[i]</code> minutes. You are interested in running all <code>n</code> computers simultaneously using the given batteries.</p> <p>Initially, you can insert at most one battery into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.</p> <p>Note that the batteries cannot be recharged.</p> <p>Return the maximum number of minutes you can run all the <code>n</code> computers simultaneously.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 2, batteries = [3,3,3]\nOutput: 4\nExplanation: \nInitially, insert battery 0 into the first computer and battery 1 into the second computer.\nAfter two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.\nAt the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.\nBy the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.\nWe can run the two computers simultaneously for at most 4 minutes, so we return 4.\n\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 2, batteries = [1,1,1,1]\nOutput: 2\nExplanation: \nInitially, insert battery 0 into the first computer and battery 2 into the second computer. \nAfter one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. \nAfter another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.\nWe can run the two computers simultaneously for at most 2 minutes, so we return 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= batteries.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= batteries[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2142/","title":"2142. The Number of Passengers in Each Bus I","text":"Problem"},{"location":"LeetCode_Problems/2143/","title":"2143. Choose Numbers From Two Arrays in Range","text":"Problem"},{"location":"LeetCode_Problems/2144/","title":"2144. Minimum Cost of Buying Candies With Discount","text":"Problem <p>A shop is selling candies at a discount. For every two candies sold, the shop gives a third candy for free.</p> <p>The customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought.</p> <ul> <li>For example, if there are <code>4</code> candies with costs <code>1</code>, <code>2</code>, <code>3</code>, and <code>4</code>, and the customer buys candies with costs <code>2</code> and <code>3</code>, they\u00a0can take the candy with cost <code>1</code> for free, but not the candy with cost <code>4</code>.</li> </ul> <p>Given a 0-indexed integer array <code>cost</code>, where <code>cost[i]</code> denotes the cost of the <code>i<sup>th</sup></code> candy, return the minimum cost of buying all the candies.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: cost = [1,2,3]\nOutput: 5\nExplanation: We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the only way we can buy the candies.\nNote that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.\nThe cost of the free candy has to be less than or equal to the minimum cost of the purchased candies.\n</pre> <p>Example 2:</p> <pre>\nInput: cost = [6,5,7,9,2,2]\nOutput: 23\nExplanation: The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.\n</pre> <p>Example 3:</p> <pre>\nInput: cost = [5,5]\nOutput: 10\nExplanation: Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= cost.length &lt;= 100</code></li> <li><code>1 &lt;= cost[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2145/","title":"2145. Count the Hidden Sequences","text":"Problem <p>You are given a 0-indexed array of <code>n</code> integers <code>differences</code>, which describes the differences between each pair of consecutive integers of a hidden sequence of length <code>(n + 1)</code>. More formally, call the hidden sequence <code>hidden</code>, then we have that <code>differences[i] = hidden[i + 1] - hidden[i]</code>.</p> <p>You are further given two integers <code>lower</code> and <code>upper</code> that describe the inclusive range of values <code>[lower, upper]</code> that the hidden sequence can contain.</p> <ul> <li>For example, given <code>differences = [1, -3, 4]</code>, <code>lower = 1</code>, <code>upper = 6</code>, the hidden sequence is a sequence of length <code>4</code> whose elements are in between <code>1</code> and <code>6</code> (inclusive).      <ul> <li><code>[3, 4, 1, 5]</code> and <code>[4, 5, 2, 6]</code> are possible hidden sequences.</li> <li><code>[5, 6, 3, 7]</code> is not possible since it contains an element greater than <code>6</code>.</li> <li><code>[1, 2, 3, 4]</code> is not possible since the differences are not correct.</li> </ul> </li> </ul> <p>Return the number of possible hidden sequences there are. If there are no possible sequences, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: differences = [1,-3,4], lower = 1, upper = 6\nOutput: 2\nExplanation: The possible hidden sequences are:\n- [3, 4, 1, 5]\n- [4, 5, 2, 6]\nThus, we return 2.\n</pre> <p>Example 2:</p> <pre>\nInput: differences = [3,-4,5,1,-2], lower = -4, upper = 5\nOutput: 4\nExplanation: The possible hidden sequences are:\n- [-3, 0, -4, 1, 2, 0]\n- [-2, 1, -3, 2, 3, 1]\n- [-1, 2, -2, 3, 4, 2]\n- [0, 3, -1, 4, 5, 3]\nThus, we return 4.\n</pre> <p>Example 3:</p> <pre>\nInput: differences = [4,-7,2], lower = 3, upper = 6\nOutput: 0\nExplanation: There are no possible hidden sequences. Thus, we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == differences.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= differences[i] &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= lower &lt;= upper &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2146/","title":"2146. K Highest Ranked Items Within a Price Range","text":"Problem <p>You are given a 0-indexed 2D integer array <code>grid</code> of size <code>m x n</code> that represents a map of the items in a shop. The integers in the grid represent the following:</p> <ul> <li><code>0</code> represents a wall that you cannot pass through.</li> <li><code>1</code> represents an empty cell that you can freely move to and from.</li> <li>All other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells.</li> </ul> <p>It takes <code>1</code> step to travel between adjacent grid cells.</p> <p>You are also given integer arrays <code>pricing</code> and <code>start</code> where <code>pricing = [low, high]</code> and <code>start = [row, col]</code> indicates that you start at the position <code>(row, col)</code> and are interested only in items with a price in the range of <code>[low, high]</code> (inclusive). You are further given an integer <code>k</code>.</p> <p>You are interested in the positions of the <code>k</code> highest-ranked items whose prices are within the given price range. The rank is determined by the first of these criteria that is different:</p> <ol> <li>Distance, defined as the length of the shortest path from the <code>start</code> (shorter distance has a higher rank).</li> <li>Price (lower price has a higher rank, but it must be in the price range).</li> <li>The row number (smaller row number has a higher rank).</li> <li>The column number (smaller column number has a higher rank).</li> </ol> <p>Return the <code>k</code> highest-ranked items within the price range sorted by their rank (highest to lowest). If there are fewer than <code>k</code> reachable items within the price range, return all of them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,2,0,1],[1,3,0,1],[0,2,5,1]], pricing = [2,5], start = [0,0], k = 3\nOutput: [[0,1],[1,1],[2,1]]\nExplanation: You start at (0,0).\nWith a price range of [2,5], we can take items from (0,1), (1,1), (2,1) and (2,2).\nThe ranks of these items are:\n- (0,1) with distance 1\n- (1,1) with distance 2\n- (2,1) with distance 3\n- (2,2) with distance 4\nThus, the 3 highest ranked items in the price range are (0,1), (1,1), and (2,1).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,2,0,1],[1,3,3,1],[0,2,5,1]], pricing = [2,3], start = [2,3], k = 2\nOutput: [[2,1],[1,2]]\nExplanation: You start at (2,3).\nWith a price range of [2,3], we can take items from (0,1), (1,1), (1,2) and (2,1).\nThe ranks of these items are:\n- (2,1) with distance 2, price 2\n- (1,2) with distance 2, price 3\n- (1,1) with distance 3\n- (0,1) with distance 4\nThus, the 2 highest ranked items in the price range are (2,1) and (1,2).\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[1,1,1],[0,0,1],[2,3,4]], pricing = [2,3], start = [0,0], k = 3\nOutput: [[2,1],[2,0]]\nExplanation: You start at (0,0).\nWith a price range of [2,3], we can take items from (2,0) and (2,1). \nThe ranks of these items are: \n- (2,1) with distance 5\n- (2,0) with distance 6\nThus, the 2 highest ranked items in the price range are (2,1) and (2,0). \nNote that k = 3 but there are only 2 reachable items within the price range.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li> <li><code>pricing.length == 2</code></li> <li><code>2 &lt;= low &lt;= high &lt;= 10<sup>5</sup></code></li> <li><code>start.length == 2</code></li> <li><code>0 &lt;= row &lt;= m - 1</code></li> <li><code>0 &lt;= col &lt;= n - 1</code></li> <li><code>grid[row][col] &gt; 0</code></li> <li><code>1 &lt;= k &lt;= m * n</code></li> </ul>"},{"location":"LeetCode_Problems/2147/","title":"2147. Number of Ways to Divide a Long Corridor","text":"Problem <p>Along a long library corridor, there is a line of seats and decorative plants. You are given a 0-indexed string <code>corridor</code> of length <code>n</code> consisting of letters <code>'S'</code> and <code>'P'</code> where each <code>'S'</code> represents a seat and each <code>'P'</code> represents a plant.</p> <p>One room divider has already been installed to the left of index <code>0</code>, and another to the right of index <code>n - 1</code>. Additional room dividers can be installed. For each position between indices <code>i - 1</code> and <code>i</code> (<code>1 &lt;= i &lt;= n - 1</code>), at most one divider can be installed.</p> <p>Divide the corridor into non-overlapping sections, where each section has exactly two seats with any number of plants. There may be multiple ways to perform the division. Two ways are different if there is a position with a room divider installed in the first way but not in the second way.</p> <p>Return the number of ways to divide the corridor. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>. If there is no way, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: corridor = \"SSPPSPS\"\nOutput: 3\nExplanation: There are 3 different ways to divide the corridor.\nThe black bars in the above image indicate the two room dividers already installed.\nNote that in each of the ways, each section has exactly two seats.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: corridor = \"PPSPSP\"\nOutput: 1\nExplanation: There is only 1 way to divide the corridor, by not installing any additional dividers.\nInstalling any would create some section that does not have exactly two seats.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: corridor = \"S\"\nOutput: 0\nExplanation: There is no way to divide the corridor because there will always be a section that does not have exactly two seats.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == corridor.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>corridor[i]</code> is either <code>'S'</code> or <code>'P'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2148/","title":"2148. Count Elements With Strictly Smaller and Greater Elements","text":"Problem <p>Given an integer array <code>nums</code>, return the number of elements that have both a strictly smaller and a strictly greater element appear in <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [11,7,2,15]\nOutput: 2\nExplanation: The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.\nElement 11 has element 7 strictly smaller than it and element 15 strictly greater than it.\nIn total there are 2 elements having both a strictly smaller and a strictly greater element appear in <code>nums</code>.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-3,3,3,90]\nOutput: 2\nExplanation: The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.\nSince there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in <code>nums</code>.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2149/","title":"2149. Rearrange Array Elements by Sign","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of even length consisting of an equal number of positive and negative integers.</p> <p>You should rearrange the elements of <code>nums</code> such that the modified array follows the given conditions:</p> <ol> <li>Every consecutive pair of integers have opposite signs.</li> <li>For all integers with the same sign, the order in which they were present in <code>nums</code> is preserved.</li> <li>The rearranged array begins with a positive integer.</li> </ol> <p>Return the modified array after rearranging the elements to satisfy the aforementioned conditions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,1,-2,-5,2,-4]\nOutput: [3,-2,1,-5,2,-4]\nExplanation:\nThe positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].\nThe only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].\nOther ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.  \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-1,1]\nOutput: [1,-1]\nExplanation:\n1 is the only positive integer and -1 the only negative integer in nums.\nSo nums is rearranged to [1,-1].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>nums.length</code> is even</li> <li><code>1 &lt;= |nums[i]| &lt;= 10<sup>5</sup></code></li> <li><code>nums</code> consists of equal number of positive and negative integers.</li> </ul>"},{"location":"LeetCode_Problems/2150/","title":"2150. Find All Lonely Numbers in the Array","text":"Problem <p>You are given an integer array <code>nums</code>. A number <code>x</code> is lonely when it appears only once, and no adjacent numbers (i.e. <code>x + 1</code> and <code>x - 1)</code> appear in the array.</p> <p>Return all lonely numbers in <code>nums</code>. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [10,6,5,8]\nOutput: [10,8]\nExplanation: \n- 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.\n- 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.\n- 5 is not a lonely number since 6 appears in nums and vice versa.\nHence, the lonely numbers in nums are [10, 8].\nNote that [8, 10] may also be returned.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,5,3]\nOutput: [1,5]\nExplanation: \n- 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.\n- 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.\n- 3 is not a lonely number since it appears twice.\nHence, the lonely numbers in nums are [1, 5].\nNote that [5, 1] may also be returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2151/","title":"2151. Maximum Good People Based on Statements","text":"Problem <p>There are two types of persons:</p> <ul> <li>The good person: The person who always tells the truth.</li> <li>The bad person: The person who might tell the truth and might lie.</li> </ul> <p>You are given a 0-indexed 2D integer array <code>statements</code> of size <code>n x n</code> that represents the statements made by <code>n</code> people about each other. More specifically, <code>statements[i][j]</code> could be one of the following:</p> <ul> <li><code>0</code> which represents a statement made by person <code>i</code> that person <code>j</code> is a bad person.</li> <li><code>1</code> which represents a statement made by person <code>i</code> that person <code>j</code> is a good person.</li> <li><code>2</code> represents that no statement is made by person <code>i</code> about person <code>j</code>.</li> </ul> <p>Additionally, no person ever makes a statement about themselves. Formally, we have that <code>statements[i][i] = 2</code> for all <code>0 &lt;= i &lt; n</code>.</p> <p>Return the maximum number of people who can be good based on the statements made by the <code>n</code> people.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: statements = [[2,1,2],[1,2,2],[2,0,2]]\nOutput: 2\nExplanation: Each person makes a single statement.\n- Person 0 states that person 1 is good.\n- Person 1 states that person 0 is good.\n- Person 2 states that person 1 is bad.\nLet's take person 2 as the key.\n- Assuming that person 2 is a good person:\n    - Based on the statement made by person 2, person 1 is a bad person.\n    - Now we know for sure that person 1 is bad and person 2 is good.\n    - Based on the statement made by person 1, and since person 1 is bad, they could be:\n        - telling the truth. There will be a contradiction in this case and this assumption is invalid.\n        - lying. In this case, person 0 is also a bad person and lied in their statement.\n    - Following that person 2 is a good person, there will be only one good person in the group.\n- Assuming that person 2 is a bad person:\n    - Based on the statement made by person 2, and since person 2 is bad, they could be:\n        - telling the truth. Following this scenario, person 0 and 1 are both bad as explained before.\n            - Following that person 2 is bad but told the truth, there will be no good persons in the group.\n        - lying. In this case person 1 is a good person.\n            - Since person 1 is a good person, person 0 is also a good person.\n            - Following that person 2 is bad and lied, there will be two good persons in the group.\nWe can see that at most 2 persons are good in the best case, so we return 2.\nNote that there is more than one way to arrive at this conclusion.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: statements = [[2,0],[0,2]]\nOutput: 1\nExplanation: Each person makes a single statement.\n- Person 0 states that person 1 is bad.\n- Person 1 states that person 0 is bad.\nLet's take person 0 as the key.\n- Assuming that person 0 is a good person:\n    - Based on the statement made by person 0, person 1 is a bad person and was lying.\n    - Following that person 0 is a good person, there will be only one good person in the group.\n- Assuming that person 0 is a bad person:\n    - Based on the statement made by person 0, and since person 0 is bad, they could be:\n        - telling the truth. Following this scenario, person 0 and 1 are both bad.\n            - Following that person 0 is bad but told the truth, there will be no good persons in the group.\n        - lying. In this case person 1 is a good person.\n            - Following that person 0 is bad and lied, there will be only one good person in the group.\nWe can see that at most, one person is good in the best case, so we return 1.\nNote that there is more than one way to arrive at this conclusion.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == statements.length == statements[i].length</code></li> <li><code>2 &lt;= n &lt;= 15</code></li> <li><code>statements[i][j]</code> is either <code>0</code>, <code>1</code>, or <code>2</code>.</li> <li><code>statements[i][i] == 2</code></li> </ul>"},{"location":"LeetCode_Problems/2152/","title":"2152. Minimum Number of Lines to Cover Points","text":"Problem"},{"location":"LeetCode_Problems/2153/","title":"2153. The Number of Passengers in Each Bus II","text":"Problem"},{"location":"LeetCode_Problems/2154/","title":"2154. Keep Multiplying Found Values by Two","text":"Problem <p>You are given an array of integers <code>nums</code>. You are also given an integer <code>original</code> which is the first number that needs to be searched for in <code>nums</code>.</p> <p>You then do the following steps:</p> <ol> <li>If <code>original</code> is found in <code>nums</code>, multiply it by two (i.e., set <code>original = 2 * original</code>).</li> <li>Otherwise, stop the process.</li> <li>Repeat this process with the new number as long as you keep finding the number.</li> </ol> <p>Return the final value of <code>original</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,3,6,1,12], original = 3\nOutput: 24\nExplanation: \n- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,7,9], original = 4\nOutput: 4\nExplanation:\n- 4 is not found in nums. Thus, 4 is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i], original &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2155/","title":"2155. All Divisions With the Highest Score of a Binary Array","text":"Problem <p>You are given a 0-indexed binary array <code>nums</code> of length <code>n</code>. <code>nums</code> can be divided at index <code>i</code> (where <code>0 &lt;= i &lt;= n)</code> into two arrays (possibly empty) <code>nums<sub>left</sub></code> and <code>nums<sub>right</sub></code>:</p> <ul> <li><code>nums<sub>left</sub></code> has all the elements of <code>nums</code> between index <code>0</code> and <code>i - 1</code> (inclusive), while <code>nums<sub>right</sub></code> has all the elements of nums between index <code>i</code> and <code>n - 1</code> (inclusive).</li> <li>If <code>i == 0</code>, <code>nums<sub>left</sub></code> is empty, while <code>nums<sub>right</sub></code> has all the elements of <code>nums</code>.</li> <li>If <code>i == n</code>, <code>nums<sub>left</sub></code> has all the elements of nums, while <code>nums<sub>right</sub></code> is empty.</li> </ul> <p>The division score of an index <code>i</code> is the sum of the number of <code>0</code>'s in <code>nums<sub>left</sub></code> and the number of <code>1</code>'s in <code>nums<sub>right</sub></code>.</p> <p>Return all distinct indices that have the highest possible division score. You may return the answer in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,0,1,0]\nOutput: [2,4]\nExplanation: Division at index\n- 0: nums<sub>left</sub> is []. nums<sub>right</sub> is [0,0,1,0]. The score is 0 + 1 = 1.\n- 1: nums<sub>left</sub> is [0]. nums<sub>right</sub> is [0,1,0]. The score is 1 + 1 = 2.\n- 2: nums<sub>left</sub> is [0,0]. nums<sub>right</sub> is [1,0]. The score is 2 + 1 = 3.\n- 3: nums<sub>left</sub> is [0,0,1]. nums<sub>right</sub> is [0]. The score is 2 + 0 = 2.\n- 4: nums<sub>left</sub> is [0,0,1,0]. nums<sub>right</sub> is []. The score is 3 + 0 = 3.\nIndices 2 and 4 both have the highest possible division score 3.\nNote the answer [4,2] would also be accepted.</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,0,0]\nOutput: [3]\nExplanation: Division at index\n- 0: nums<sub>left</sub> is []. nums<sub>right</sub> is [0,0,0]. The score is 0 + 0 = 0.\n- 1: nums<sub>left</sub> is [0]. nums<sub>right</sub> is [0,0]. The score is 1 + 0 = 1.\n- 2: nums<sub>left</sub> is [0,0]. nums<sub>right</sub> is [0]. The score is 2 + 0 = 2.\n- 3: nums<sub>left</sub> is [0,0,0]. nums<sub>right</sub> is []. The score is 3 + 0 = 3.\nOnly index 3 has the highest possible division score 3.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1]\nOutput: [0]\nExplanation: Division at index\n- 0: nums<sub>left</sub> is []. nums<sub>right</sub> is [1,1]. The score is 0 + 2 = 2.\n- 1: nums<sub>left</sub> is [1]. nums<sub>right</sub> is [1]. The score is 0 + 1 = 1.\n- 2: nums<sub>left</sub> is [1,1]. nums<sub>right</sub> is []. The score is 0 + 0 = 0.\nOnly index 0 has the highest possible division score 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/2156/","title":"2156. Find Substring With Given Hash Value","text":"Problem <p>The hash of a 0-indexed string <code>s</code> of length <code>k</code>, given integers <code>p</code> and <code>m</code>, is computed using the following function:</p> <ul> <li><code>hash(s, p, m) = (val(s[0]) * p<sup>0</sup> + val(s[1]) * p<sup>1</sup> + ... + val(s[k-1]) * p<sup>k-1</sup>) mod m</code>.</li> </ul> <p>Where <code>val(s[i])</code> represents the index of <code>s[i]</code> in the alphabet from <code>val('a') = 1</code> to <code>val('z') = 26</code>.</p> <p>You are given a string <code>s</code> and the integers <code>power</code>, <code>modulo</code>, <code>k</code>, and <code>hashValue.</code> Return <code>sub</code>, the first substring of <code>s</code> of length <code>k</code> such that <code>hash(sub, power, modulo) == hashValue</code>.</p> <p>The test cases will be generated such that an answer always exists.</p> <p>A substring is a contiguous non-empty sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"leetcode\", power = 7, modulo = 20, k = 2, hashValue = 0\nOutput: \"ee\"\nExplanation: The hash of \"ee\" can be computed to be hash(\"ee\", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0. \n\"ee\" is the first substring of length 2 with hashValue 0. Hence, we return \"ee\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"fbxzaad\", power = 31, modulo = 100, k = 3, hashValue = 32\nOutput: \"fbx\"\nExplanation: The hash of \"fbx\" can be computed to be hash(\"fbx\", 31, 100) = (6 * 1 + 2 * 31 + 24 * 31<sup>2</sup>) mod 100 = 23132 mod 100 = 32. \nThe hash of \"bxz\" can be computed to be hash(\"bxz\", 31, 100) = (2 * 1 + 24 * 31 + 26 * 31<sup>2</sup>) mod 100 = 25732 mod 100 = 32. \n\"fbx\" is the first substring of length 3 with hashValue 32. Hence, we return \"fbx\".\nNote that \"bxz\" also has a hash of 32 but it appears later than \"fbx\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= s.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= power, modulo &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= hashValue &lt; modulo</code></li> <li><code>s</code> consists of lowercase English letters only.</li> <li>The test cases are generated such that an answer always exists.</li> </ul>"},{"location":"LeetCode_Problems/2157/","title":"2157. Groups of Strings","text":"Problem <p>You are given a 0-indexed array of strings <code>words</code>. Each string consists of lowercase English letters only. No letter occurs more than once in any string of <code>words</code>.</p> <p>Two strings <code>s1</code> and <code>s2</code> are said to be connected if the set of letters of <code>s2</code> can be obtained from the set of letters of <code>s1</code> by any one of the following operations:</p> <ul> <li>Adding exactly one letter to the set of the letters of <code>s1</code>.</li> <li>Deleting exactly one letter from the set of the letters of <code>s1</code>.</li> <li>Replacing exactly one letter from the set of the letters of <code>s1</code> with any letter, including itself.</li> </ul> <p>The array <code>words</code> can be divided into one or more non-intersecting groups. A string belongs to a group if any one of the following is true:</p> <ul> <li>It is connected to at least one other string of the group.</li> <li>It is the only string present in the group.</li> </ul> <p>Note that the strings in <code>words</code> should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique.</p> <p>Return an array <code>ans</code> of size <code>2</code> where:</p> <ul> <li><code>ans[0]</code> is the maximum number of groups <code>words</code> can be divided into, and</li> <li><code>ans[1]</code> is the size of the largest group.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"a\",\"b\",\"ab\",\"cde\"]\nOutput: [2,3]\nExplanation:\n- words[0] can be used to obtain words[1] (by replacing 'a' with 'b'), and words[2] (by adding 'b'). So words[0] is connected to words[1] and words[2].\n- words[1] can be used to obtain words[0] (by replacing 'b' with 'a'), and words[2] (by adding 'a'). So words[1] is connected to words[0] and words[2].\n- words[2] can be used to obtain words[0] (by deleting 'b'), and words[1] (by deleting 'a'). So words[2] is connected to words[0] and words[1].\n- words[3] is not connected to any string in words.\nThus, words can be divided into 2 groups [\"a\",\"b\",\"ab\"] and [\"cde\"]. The size of the largest group is 3.  \n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"a\",\"ab\",\"abc\"]\nOutput: [1,3]\nExplanation:\n- words[0] is connected to words[1].\n- words[1] is connected to words[0] and words[2].\n- words[2] is connected to words[1].\nSince all strings are connected to each other, they should be grouped together.\nThus, the size of the largest group is 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= words[i].length &lt;= 26</code></li> <li><code>words[i]</code> consists of lowercase English letters only.</li> <li>No letter occurs more than once in <code>words[i]</code>.</li> </ul>"},{"location":"LeetCode_Problems/2158/","title":"2158. Amount of New Area Painted Each Day","text":"Problem"},{"location":"LeetCode_Problems/2159/","title":"2159. Order Two Columns Independently","text":"Problem"},{"location":"LeetCode_Problems/2160/","title":"2160. Minimum Sum of Four Digit Number After Splitting Digits","text":"Problem <p>You are given a positive integer <code>num</code> consisting of exactly four digits. Split <code>num</code> into two new integers <code>new1</code> and <code>new2</code> by using the digits found in <code>num</code>. Leading zeros are allowed in <code>new1</code> and <code>new2</code>, and all the digits found in <code>num</code> must be used.</p> <ul> <li>For example, given <code>num = 2932</code>, you have the following digits: two <code>2</code>'s, one <code>9</code> and one <code>3</code>. Some of the possible pairs <code>[new1, new2]</code> are <code>[22, 93]</code>, <code>[23, 92]</code>, <code>[223, 9]</code> and <code>[2, 329]</code>.</li> </ul> <p>Return the minimum possible sum of <code>new1</code> and <code>new2</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 2932\nOutput: 52\nExplanation: Some possible pairs [new1, new2] are [29, 23], [223, 9], etc.\nThe minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 4009\nOutput: 13\nExplanation: Some possible pairs [new1, new2] are [0, 49], [490, 0], etc. \nThe minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1000 &lt;= num &lt;= 9999</code></li> </ul>"},{"location":"LeetCode_Problems/2161/","title":"2161. Partition Array According to Given Pivot","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and an integer <code>pivot</code>. Rearrange <code>nums</code> such that the following conditions are satisfied:</p> <ul> <li>Every element less than <code>pivot</code> appears before every element greater than <code>pivot</code>.</li> <li>Every element equal to <code>pivot</code> appears in between the elements less than and greater than <code>pivot</code>.</li> <li>The relative order of the elements less than <code>pivot</code> and the elements greater than <code>pivot</code> is maintained.     <ul> <li>More formally, consider every <code>p<sub>i</sub></code>, <code>p<sub>j</sub></code> where <code>p<sub>i</sub></code> is the new position of the <code>i<sup>th</sup></code> element and <code>p<sub>j</sub></code> is the new position of the <code>j<sup>th</sup></code> element. For elements less than <code>pivot</code>, if <code>i &lt; j</code> and <code>nums[i] &lt; pivot</code> and <code>nums[j] &lt; pivot</code>, then <code>p<sub>i</sub> &lt; p<sub>j</sub></code>. Similarly for elements greater than <code>pivot</code>, if <code>i &lt; j</code> and <code>nums[i] &gt; pivot</code> and <code>nums[j] &gt; pivot</code>, then <code>p<sub>i</sub> &lt; p<sub>j</sub></code>.</li> </ul> </li> </ul> <p>Return <code>nums</code> after the rearrangement.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [9,12,5,10,14,3,10], pivot = 10\nOutput: [9,5,3,10,10,12,14]\nExplanation: \nThe elements 9, 5, and 3 are less than the pivot so they are on the left side of the array.\nThe elements 12 and 14 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [9, 5, 3] and [12, 14] are the respective orderings.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-3,4,3,2], pivot = 2\nOutput: [-3,2,4,3]\nExplanation: \nThe element -3 is less than the pivot so it is on the left side of the array.\nThe elements 4 and 3 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [-3] and [4, 3] are the respective orderings.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> <li><code>pivot</code> equals to an element of <code>nums</code>.</li> </ul>"},{"location":"LeetCode_Problems/2162/","title":"2162. Minimum Cost to Set Cooking Time","text":"Problem <p>A generic microwave supports cooking times for:</p> <ul> <li>at least <code>1</code> second.</li> <li>at most <code>99</code> minutes and <code>99</code> seconds.</li> </ul> <p>To set the cooking time, you push at most four digits. The microwave normalizes what you push as four digits by prepending zeroes. It interprets the first two digits as the minutes and the last two digits as the seconds. It then adds them up as the cooking time. For example,</p> <ul> <li>You push <code>9</code> <code>5</code> <code>4</code> (three digits). It is normalized as <code>0954</code> and interpreted as <code>9</code> minutes and <code>54</code> seconds.</li> <li>You push <code>0</code> <code>0</code> <code>0</code> <code>8</code> (four digits). It is interpreted as <code>0</code> minutes and <code>8</code> seconds.</li> <li>You push <code>8</code> <code>0</code> <code>9</code> <code>0</code>. It is interpreted as <code>80</code> minutes and <code>90</code> seconds.</li> <li>You push <code>8</code> <code>1</code> <code>3</code> <code>0</code>. It is interpreted as <code>81</code> minutes and <code>30</code> seconds.</li> </ul> <p>You are given integers <code>startAt</code>, <code>moveCost</code>, <code>pushCost</code>, and <code>targetSeconds</code>. Initially, your finger is on the digit <code>startAt</code>. Moving the finger above any specific digit costs <code>moveCost</code> units of fatigue. Pushing the digit below the finger once costs <code>pushCost</code> units of fatigue.</p> <p>There can be multiple ways to set the microwave to cook for <code>targetSeconds</code> seconds but you are interested in the way with the minimum cost.</p> <p>Return the minimum cost to set <code>targetSeconds</code> seconds of cooking time.</p> <p>Remember that one minute consists of <code>60</code> seconds.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: startAt = 1, moveCost = 2, pushCost = 1, targetSeconds = 600\nOutput: 6\nExplanation: The following are the possible ways to set the cooking time.\n- 1 0 0 0, interpreted as 10 minutes and 0 seconds.\n\u00a0 The finger is already on digit 1, pushes 1 (with cost 1), moves to 0 (with cost 2), pushes 0 (with cost 1), pushes 0 (with cost 1), and pushes 0 (with cost 1).\n\u00a0 The cost is: 1 + 2 + 1 + 1 + 1 = 6. This is the minimum cost.\n- 0 9 6 0, interpreted as 9 minutes and 60 seconds. That is also 600 seconds.\n\u00a0 The finger moves to 0 (with cost 2), pushes 0 (with cost 1), moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\n\u00a0 The cost is: 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 = 12.\n- 9 6 0, normalized as 0960 and interpreted as 9 minutes and 60 seconds.\n\u00a0 The finger moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\n\u00a0 The cost is: 2 + 1 + 2 + 1 + 2 + 1 = 9.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: startAt = 0, moveCost = 1, pushCost = 2, targetSeconds = 76\nOutput: 6\nExplanation: The optimal way is to push two digits: 7 6, interpreted as 76 seconds.\nThe finger moves to 7 (with cost 1), pushes 7 (with cost 2), moves to 6 (with cost 1), and pushes 6 (with cost 2). The total cost is: 1 + 2 + 1 + 2 = 6\nNote other possible ways are 0076, 076, 0116, and 116, but none of them produces the minimum cost.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= startAt &lt;= 9</code></li> <li><code>1 &lt;= moveCost, pushCost &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= targetSeconds &lt;= 6039</code></li> </ul>"},{"location":"LeetCode_Problems/2163/","title":"2163. Minimum Difference in Sums After Removal of Elements","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> consisting of <code>3 * n</code> elements.</p> <p>You are allowed to remove any subsequence of elements of size exactly <code>n</code> from <code>nums</code>. The remaining <code>2 * n</code> elements will be divided into two equal parts:</p> <ul> <li>The first <code>n</code> elements belonging to the first part and their sum is <code>sum<sub>first</sub></code>.</li> <li>The next <code>n</code> elements belonging to the second part and their sum is <code>sum<sub>second</sub></code>.</li> </ul> <p>The difference in sums of the two parts is denoted as <code>sum<sub>first</sub> - sum<sub>second</sub></code>.</p> <ul> <li>For example, if <code>sum<sub>first</sub> = 3</code> and <code>sum<sub>second</sub> = 2</code>, their difference is <code>1</code>.</li> <li>Similarly, if <code>sum<sub>first</sub> = 2</code> and <code>sum<sub>second</sub> = 3</code>, their difference is <code>-1</code>.</li> </ul> <p>Return the minimum difference possible between the sums of the two parts after the removal of <code>n</code> elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,1,2]\nOutput: -1\nExplanation: Here, nums has 3 elements, so n = 1. \nThus we have to remove 1 element from nums and divide the array into two equal parts.\n- If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1.\n- If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1.\n- If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2.\nThe minimum difference between sums of the two parts is min(-1,1,2) = -1. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [7,9,5,8,1,3]\nOutput: 1\nExplanation: Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.\nIf we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12.\nTo obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1.\nIt can be shown that it is not possible to obtain a difference smaller than 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums.length == 3 * n</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2164/","title":"2164. Sort Even and Odd Indices Independently","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. Rearrange the values of <code>nums</code> according to the following rules:</p> <ol> <li>Sort the values at odd indices of <code>nums</code> in non-increasing order.      <ul> <li>For example, if <code>nums = [4,1,2,3]</code> before this step, it becomes <code>[4,3,2,1]</code> after. The values at odd indices <code>1</code> and <code>3</code> are sorted in non-increasing order.</li> </ul> </li> <li>Sort the values at even indices of <code>nums</code> in non-decreasing order.     <ul> <li>For example, if <code>nums = [4,1,2,3]</code> before this step, it becomes <code>[2,1,4,3]</code> after. The values at even indices <code>0</code> and <code>2</code> are sorted in non-decreasing order.</li> </ul> </li> </ol> <p>Return the array formed after rearranging the values of <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,1,2,3]\nOutput: [2,3,4,1]\nExplanation: \nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from [4,1,2,3] to [4,3,2,1].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from [4,1,2,3] to [2,3,4,1].\nThus, the array formed after rearranging the values is [2,3,4,1].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,1]\nOutput: [2,1]\nExplanation: \nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is [2,1], which is the same as the initial array. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2165/","title":"2165. Smallest Value of the Rearranged Number","text":"Problem <p>You are given an integer <code>num.</code> Rearrange the digits of <code>num</code> such that its value is minimized and it does not contain any leading zeros.</p> <p>Return the rearranged number with minimal value.</p> <p>Note that the sign of the number does not change after rearranging the digits.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 310\nOutput: 103\nExplanation: The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103.\n</pre> <p>Example 2:</p> <pre>\nInput: num = -7605\nOutput: -7650\nExplanation: Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-10<sup>15</sup> &lt;= num &lt;= 10<sup>15</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2166/","title":"2166. Design Bitset","text":"Problem <p>A Bitset is a data structure that compactly stores bits.</p> <p>Implement the <code>Bitset</code> class:</p> <ul> <li><code>Bitset(int size)</code> Initializes the Bitset with <code>size</code> bits, all of which are <code>0</code>.</li> <li><code>void fix(int idx)</code> Updates the value of the bit at the index <code>idx</code> to <code>1</code>. If the value was already <code>1</code>, no change occurs.</li> <li><code>void unfix(int idx)</code> Updates the value of the bit at the index <code>idx</code> to <code>0</code>. If the value was already <code>0</code>, no change occurs.</li> <li><code>void flip()</code> Flips the values of each bit in the Bitset. In other words, all bits with value <code>0</code> will now have value <code>1</code> and vice versa.</li> <li><code>boolean all()</code> Checks if the value of each bit in the Bitset is <code>1</code>. Returns <code>true</code> if it satisfies the condition, <code>false</code> otherwise.</li> <li><code>boolean one()</code> Checks if there is at least one bit in the Bitset with value <code>1</code>. Returns <code>true</code> if it satisfies the condition, <code>false</code> otherwise.</li> <li><code>int count()</code> Returns the total number of bits in the Bitset which have value <code>1</code>.</li> <li><code>String toString()</code> Returns the current composition of the Bitset. Note that in the resultant string, the character at the <code>i<sup>th</sup></code> index should coincide with the value at the <code>i<sup>th</sup></code> bit of the Bitset.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Bitset\", \"fix\", \"fix\", \"flip\", \"all\", \"unfix\", \"flip\", \"one\", \"unfix\", \"count\", \"toString\"]\n[[5], [3], [1], [], [], [0], [], [], [0], [], []]\nOutput\n[null, null, null, null, false, null, null, true, null, 2, \"01010\"]\n\nExplanation\nBitset bs = new Bitset(5); // bitset = \"00000\".\nbs.fix(3);     // the value at idx = 3 is updated to 1, so bitset = \"00010\".\nbs.fix(1);     // the value at idx = 1 is updated to 1, so bitset = \"01010\". \nbs.flip();     // the value of each bit is flipped, so bitset = \"10101\". \nbs.all();      // return False, as not all values of the bitset are 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = \"00101\".\nbs.flip();     // the value of each bit is flipped, so bitset = \"11010\". \nbs.one();      // return True, as there is at least 1 index with value 1.\nbs.unfix(0);   // the value at idx = 0 is updated to 0, so bitset = \"01010\".\nbs.count();    // return 2, as there are 2 bits with value 1.\nbs.toString(); // return \"01010\", which is the composition of bitset.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= size &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= idx &lt;= size - 1</code></li> <li>At most <code>10<sup>5</sup></code> calls will be made in total to <code>fix</code>, <code>unfix</code>, <code>flip</code>, <code>all</code>, <code>one</code>, <code>count</code>, and <code>toString</code>.</li> <li>At least one call will be made to <code>all</code>, <code>one</code>, <code>count</code>, or <code>toString</code>.</li> <li>At most <code>5</code> calls will be made to <code>toString</code>.</li> </ul>"},{"location":"LeetCode_Problems/2167/","title":"2167. Minimum Time to Remove All Cars Containing Illegal Goods","text":"Problem <p>You are given a 0-indexed binary string <code>s</code> which represents a sequence of train cars. <code>s[i] = '0'</code> denotes that the <code>i<sup>th</sup></code> car does not contain illegal goods and <code>s[i] = '1'</code> denotes that the <code>i<sup>th</sup></code> car does contain illegal goods.</p> <p>As the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations any number of times:</p> <ol> <li>Remove a train car from the left end (i.e., remove <code>s[0]</code>) which takes 1 unit of time.</li> <li>Remove a train car from the right end (i.e., remove <code>s[s.length - 1]</code>) which takes 1 unit of time.</li> <li>Remove a train car from anywhere in the sequence which takes 2 units of time.</li> </ol> <p>Return the minimum time to remove all the cars containing illegal goods.</p> <p>Note that an empty sequence of cars is considered to have no cars containing illegal goods.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"1100101\"\nOutput: 5\nExplanation: \nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end. Time taken is 1.\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2 + 1 + 2 = 5. \n\nAn alternative way is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end 3 times. Time taken is 3 * 1 = 3.\nThis also obtains a total time of 2 + 3 = 5.\n\n5 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"0010\"\nOutput: 2\nExplanation:\nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 3 times. Time taken is 3 * 1 = 3.\nThis obtains a total time of 3.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2.\n\nAnother way to remove all the cars containing illegal goods from the sequence is to \n- remove a car from the right end 2 times. Time taken is 2 * 1 = 2. \nThis obtains a total time of 2.\n\n2 is the minimum time taken to remove all the cars containing illegal goods. \nThere are no other ways to remove them with less time.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2168/","title":"2168. Unique Substrings With Equal Digit Frequency","text":"Problem"},{"location":"LeetCode_Problems/2169/","title":"2169. Count Operations to Obtain Zero","text":"Problem <p>You are given two non-negative integers <code>num1</code> and <code>num2</code>.</p> <p>In one operation, if <code>num1 &gt;= num2</code>, you must subtract <code>num2</code> from <code>num1</code>, otherwise subtract <code>num1</code> from <code>num2</code>.</p> <ul> <li>For example, if <code>num1 = 5</code> and <code>num2 = 4</code>, subtract <code>num2</code> from <code>num1</code>, thus obtaining <code>num1 = 1</code> and <code>num2 = 4</code>. However, if <code>num1 = 4</code> and <code>num2 = 5</code>, after one operation, <code>num1 = 4</code> and <code>num2 = 1</code>.</li> </ul> <p>Return the number of operations required to make either <code>num1 = 0</code> or <code>num2 = 0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num1 = 2, num2 = 3\nOutput: 3\nExplanation: \n- Operation 1: num1 = 2, num2 = 3. Since num1 &lt; num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1.\n- Operation 2: num1 = 2, num2 = 1. Since num1 &gt; num2, we subtract num2 from num1.\n- Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1.\nNow num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations.\nSo the total number of operations required is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: num1 = 10, num2 = 10\nOutput: 1\nExplanation: \n- Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0.\nNow num1 = 0 and num2 = 10. Since num1 == 0, we are done.\nSo the total number of operations required is 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num1, num2 &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2170/","title":"2170. Minimum Operations to Make the Array Alternating","text":"Problem <p>You are given a 0-indexed array <code>nums</code> consisting of <code>n</code> positive integers.</p> <p>The array <code>nums</code> is called alternating if:</p> <ul> <li><code>nums[i - 2] == nums[i]</code>, where <code>2 &lt;= i &lt;= n - 1</code>.</li> <li><code>nums[i - 1] != nums[i]</code>, where <code>1 &lt;= i &lt;= n - 1</code>.</li> </ul> <p>In one operation, you can choose an index <code>i</code> and change <code>nums[i]</code> into any positive integer.</p> <p>Return the minimum number of operations required to make the array alternating.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,1,3,2,4,3]\nOutput: 3\nExplanation:\nOne way to make the array alternating is by converting it to [3,1,3,1,3,1].\nThe number of operations required in this case is 3.\nIt can be proven that it is not possible to make the array alternating in less than 3 operations. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,2,2,2]\nOutput: 2\nExplanation:\nOne way to make the array alternating is by converting it to [1,2,1,2,1].\nThe number of operations required in this case is 2.\nNote that the array cannot be converted to [2,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2171/","title":"2171. Removing Minimum Number of Magic Beans","text":"Problem <p>You are given an array of positive integers <code>beans</code>, where each integer represents the number of magic beans found in a particular magic bag.</p> <p>Remove any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag (still containing at least one bean) is equal. Once a bean has been removed from a bag, you are not allowed to return it to any of the bags.</p> <p>Return the minimum number of magic beans that you have to remove.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: beans = [4,1,6,5]\nOutput: 4\nExplanation: \n- We remove 1 bean from the bag with only 1 bean.\n  This results in the remaining bags: [4,0,6,5]\n- Then we remove 2 beans from the bag with 6 beans.\n  This results in the remaining bags: [4,0,4,5]\n- Then we remove 1 bean from the bag with 5 beans.\n  This results in the remaining bags: [4,0,4,4]\nWe removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that remove 4 beans or fewer.\n</pre> <p>Example 2:</p> <pre>\nInput: beans = [2,10,3,2]\nOutput: 7\nExplanation:\n- We remove 2 beans from one of the bags with 2 beans.\n  This results in the remaining bags: [0,10,3,2]\n- Then we remove 2 beans from the other bag with 2 beans.\n  This results in the remaining bags: [0,10,3,0]\n- Then we remove 3 beans from the bag with 3 beans. \n  This results in the remaining bags: [0,10,0,0]\nWe removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that removes 7 beans or fewer.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= beans.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= beans[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2172/","title":"2172. Maximum AND Sum of Array","text":"Problem <p>You are given an integer array <code>nums</code> of length <code>n</code> and an integer <code>numSlots</code> such that <code>2 * numSlots &gt;= n</code>. There are <code>numSlots</code> slots numbered from <code>1</code> to <code>numSlots</code>.</p> <p>You have to place all <code>n</code> integers into the slots such that each slot contains at most two numbers. The AND sum of a given placement is the sum of the bitwise <code>AND</code> of every number with its respective slot number.</p> <ul> <li>For example, the AND sum of placing the numbers <code>[1, 3]</code> into slot <code>1</code> and <code>[4, 6]</code> into slot <code>2</code> is equal to <code>(1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4</code>.</li> </ul> <p>Return the maximum possible AND sum of <code>nums</code> given <code>numSlots</code> slots.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4,5,6], numSlots = 3\nOutput: 9\nExplanation: One possible placement is [1, 4] into slot 1, [2, 6] into slot 2, and [3, 5] into slot 3. \nThis gives the maximum AND sum of (1 AND 1) + (4 AND 1) + (2 AND 2) + (6 AND 2) + (3 AND 3) + (5 AND 3) = 1 + 0 + 2 + 2 + 3 + 1 = 9.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,10,4,7,1], numSlots = 9\nOutput: 24\nExplanation: One possible placement is [1, 1] into slot 1, [3] into slot 3, [4] into slot 4, [7] into slot 7, and [10] into slot 9.\nThis gives the maximum AND sum of (1 AND 1) + (1 AND 1) + (3 AND 3) + (4 AND 4) + (7 AND 7) + (10 AND 9) = 1 + 1 + 3 + 4 + 7 + 8 = 24.\nNote that slots 2, 5, 6, and 8 are empty which is permitted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= numSlots &lt;= 9</code></li> <li><code>1 &lt;= n &lt;= 2 * numSlots</code></li> <li><code>1 &lt;= nums[i] &lt;= 15</code></li> </ul>"},{"location":"LeetCode_Problems/2173/","title":"2173. Longest Winning Streak","text":"Problem"},{"location":"LeetCode_Problems/2174/","title":"2174. Remove All Ones With Row and Column Flips II","text":"Problem"},{"location":"LeetCode_Problems/2175/","title":"2175. The Change in Global Rankings","text":"Problem"},{"location":"LeetCode_Problems/2176/","title":"2176. Count Equal and Divisible Pairs in an Array","text":"Problem <p>Given a 0-indexed integer array <code>nums</code> of length <code>n</code> and an integer <code>k</code>, return the number of pairs <code>(i, j)</code> where <code>0 &lt;= i &lt; j &lt; n</code>, such that <code>nums[i] == nums[j]</code> and <code>(i * j)</code> is divisible by <code>k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,1,2,2,2,1,3], k = 2\nOutput: 4\nExplanation:\nThere are 4 pairs that meet all the requirements:\n- nums[0] == nums[6], and 0 * 6 == 0, which is divisible by 2.\n- nums[2] == nums[3], and 2 * 3 == 6, which is divisible by 2.\n- nums[2] == nums[4], and 2 * 4 == 8, which is divisible by 2.\n- nums[3] == nums[4], and 3 * 4 == 12, which is divisible by 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4], k = 1\nOutput: 0\nExplanation: Since no value in nums is repeated, there are no pairs (i,j) that meet all the requirements.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i], k &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2177/","title":"2177. Find Three Consecutive Integers That Sum to a Given Number","text":"Problem <p>Given an integer <code>num</code>, return three consecutive integers (as a sorted array) that sum to <code>num</code>. If <code>num</code> cannot be expressed as the sum of three consecutive integers, return an empty array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 33\nOutput: [10,11,12]\nExplanation: 33 can be expressed as 10 + 11 + 12 = 33.\n10, 11, 12 are 3 consecutive integers, so we return [10, 11, 12].\n</pre> <p>Example 2:</p> <pre>\nInput: num = 4\nOutput: []\nExplanation: There is no way to express 4 as the sum of 3 consecutive integers.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num &lt;= 10<sup>15</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2178/","title":"2178. Maximum Split of Positive Even Integers","text":"Problem <p>You are given an integer <code>finalSum</code>. Split it into a sum of a maximum number of unique positive even integers.</p> <ul> <li>For example, given <code>finalSum = 12</code>, the following splits are valid (unique positive even integers summing up to <code>finalSum</code>): <code>(12)</code>, <code>(2 + 10)</code>, <code>(2 + 4 + 6)</code>, and <code>(4 + 8)</code>. Among them, <code>(2 + 4 + 6)</code> contains the maximum number of integers. Note that <code>finalSum</code> cannot be split into <code>(2 + 2 + 4 + 4)</code> as all the numbers should be unique.</li> </ul> <p>Return a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for <code>finalSum</code>, return an empty list. You may return the integers in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: finalSum = 12\nOutput: [2,4,6]\nExplanation: The following are valid splits: <code>(12)</code>, <code>(2 + 10)</code>, <code>(2 + 4 + 6)</code>, and <code>(4 + 8)</code>.\n(2 + 4 + 6) has the maximum number of integers, which is 3. Thus, we return [2,4,6].\nNote that [2,6,4], [6,2,4], etc. are also accepted.\n</pre> <p>Example 2:</p> <pre>\nInput: finalSum = 7\nOutput: []\nExplanation: There are no valid splits for the given finalSum.\nThus, we return an empty array.\n</pre> <p>Example 3:</p> <pre>\nInput: finalSum = 28\nOutput: [6,8,2,12]\nExplanation: The following are valid splits: <code>(2 + 26)</code>, <code>(6 + 8 + 2 + 12)</code>, and <code>(4 + 24)</code>. \n<code>(6 + 8 + 2 + 12)</code> has the maximum number of integers, which is 4. Thus, we return [6,8,2,12].\nNote that [10,2,4,12], [6,2,4,16], etc. are also accepted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= finalSum &lt;= 10<sup>10</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2179/","title":"2179. Count Good Triplets in an Array","text":"Problem <p>You are given two 0-indexed arrays <code>nums1</code> and <code>nums2</code> of length <code>n</code>, both of which are permutations of <code>[0, 1, ..., n - 1]</code>.</p> <p>A good triplet is a set of <code>3</code> distinct values which are present in increasing order by position both in <code>nums1</code> and <code>nums2</code>. In other words, if we consider <code>pos1<sub>v</sub></code> as the index of the value <code>v</code> in <code>nums1</code> and <code>pos2<sub>v</sub></code> as the index of the value <code>v</code> in <code>nums2</code>, then a good triplet will be a set <code>(x, y, z)</code> where <code>0 &lt;= x, y, z &lt;= n - 1</code>, such that <code>pos1<sub>x</sub> &lt; pos1<sub>y</sub> &lt; pos1<sub>z</sub></code> and <code>pos2<sub>x</sub> &lt; pos2<sub>y</sub> &lt; pos2<sub>z</sub></code>.</p> <p>Return the total number of good triplets.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [2,0,1,3], nums2 = [0,1,2,3]\nOutput: 1\nExplanation: \nThere are 4 triplets (x,y,z) such that pos1<sub>x</sub> &lt; pos1<sub>y</sub> &lt; pos1<sub>z</sub>. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). \nOut of those triplets, only the triplet (0,1,3) satisfies pos2<sub>x</sub> &lt; pos2<sub>y</sub> &lt; pos2<sub>z</sub>. Hence, there is only 1 good triplet.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]\nOutput: 4\nExplanation: The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums1.length == nums2.length</code></li> <li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= n - 1</code></li> <li><code>nums1</code> and <code>nums2</code> are permutations of <code>[0, 1, ..., n - 1]</code>.</li> </ul>"},{"location":"LeetCode_Problems/2180/","title":"2180. Count Integers With Even Digit Sum","text":"Problem <p>Given a positive integer <code>num</code>, return the number of positive integers less than or equal to <code>num</code> whose digit sums are even.</p> <p>The digit sum of a positive integer is the sum of all its digits.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 4\nOutput: 2\nExplanation:\nThe only integers less than or equal to 4 whose digit sums are even are 2 and 4.    \n</pre> <p>Example 2:</p> <pre>\nInput: num = 30\nOutput: 14\nExplanation:\nThe 14 integers less than or equal to 30 whose digit sums are even are\n2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2181/","title":"2181. Merge Nodes in Between Zeros","text":"Problem <p>You are given the <code>head</code> of a linked list, which contains a series of integers separated by <code>0</code>'s. The beginning and end of the linked list will have <code>Node.val == 0</code>.</p> <p>For every two consecutive <code>0</code>'s, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any <code>0</code>'s.</p> <p>Return the <code>head</code> of the modified linked list.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [0,3,1,0,4,5,2,0]\nOutput: [4,11]\nExplanation: \nThe above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 3 + 1 = 4.\n- The sum of the nodes marked in red: 4 + 5 + 2 = 11.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [0,1,0,3,0,2,2,0]\nOutput: [1,3,4]\nExplanation: \nThe above figure represents the given linked list. The modified list contains\n- The sum of the nodes marked in green: 1 = 1.\n- The sum of the nodes marked in red: 3 = 3.\n- The sum of the nodes marked in yellow: 2 + 2 = 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[3, 2 * 10<sup>5</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> <li>There are no two consecutive nodes with <code>Node.val == 0</code>.</li> <li>The beginning and end of the linked list have <code>Node.val == 0</code>.</li> </ul>"},{"location":"LeetCode_Problems/2182/","title":"2182. Construct String With Repeat Limit","text":"Problem <p>You are given a string <code>s</code> and an integer <code>repeatLimit</code>. Construct a new string <code>repeatLimitedString</code> using the characters of <code>s</code> such that no letter appears more than <code>repeatLimit</code> times in a row. You do not have to use all characters from <code>s</code>.</p> <p>Return the lexicographically largest <code>repeatLimitedString</code> possible.</p> <p>A string <code>a</code> is lexicographically larger than a string <code>b</code> if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears later in the alphabet than the corresponding letter in <code>b</code>. If the first <code>min(a.length, b.length)</code> characters do not differ, then the longer string is the lexicographically larger one.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"cczazcc\", repeatLimit = 3\nOutput: \"zzcccac\"\nExplanation: We use all of the characters from s to construct the repeatLimitedString \"zzcccac\".\nThe letter 'a' appears at most 1 time in a row.\nThe letter 'c' appears at most 3 times in a row.\nThe letter 'z' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"zzcccac\".\nNote that the string \"zzcccca\" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aababab\", repeatLimit = 2\nOutput: \"bbabaa\"\nExplanation: We use only some of the characters from s to construct the repeatLimitedString \"bbabaa\". \nThe letter 'a' appears at most 2 times in a row.\nThe letter 'b' appears at most 2 times in a row.\nHence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.\nThe string is the lexicographically largest repeatLimitedString possible so we return \"bbabaa\".\nNote that the string \"bbabaaa\" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= repeatLimit &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2183/","title":"2183. Count Array Pairs Divisible by K","text":"Problem <p>Given a 0-indexed integer array <code>nums</code> of length <code>n</code> and an integer <code>k</code>, return the number of pairs <code>(i, j)</code> such that:</p> <ul> <li><code>0 &lt;= i &lt; j &lt;= n - 1</code> and</li> <li><code>nums[i] * nums[j]</code> is divisible by <code>k</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4,5], k = 2\nOutput: 7\nExplanation: \nThe 7 pairs of indices whose corresponding products are divisible by 2 are\n(0, 1), (0, 3), (1, 2), (1, 3), (1, 4), (2, 3), and (3, 4).\nTheir products are 2, 4, 6, 8, 10, 12, and 20 respectively.\nOther pairs such as (0, 2) and (2, 4) have products 3 and 15 respectively, which are not divisible by 2.    \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4], k = 5\nOutput: 0\nExplanation: There does not exist any pair of indices whose corresponding product is divisible by 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i], k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2184/","title":"2184. Number of Ways to Build Sturdy Brick Wall","text":"Problem"},{"location":"LeetCode_Problems/2185/","title":"2185. Counting Words With a Given Prefix","text":"Problem <p>You are given an array of strings <code>words</code> and a string <code>pref</code>.</p> <p>Return the number of strings in <code>words</code> that contain <code>pref</code> as a prefix.</p> <p>A prefix of a string <code>s</code> is any leading contiguous substring of <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"pay\",\"attention\",\"practice\",\"attend\"], <code>pref </code>= \"at\"\nOutput: 2\nExplanation: The 2 strings that contain \"at\" as a prefix are: \"attention\" and \"attend\".\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"leetcode\",\"win\",\"loops\",\"success\"], <code>pref </code>= \"code\"\nOutput: 0\nExplanation: There are no strings that contain \"code\" as a prefix.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length, pref.length &lt;= 100</code></li> <li><code>words[i]</code> and <code>pref</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2186/","title":"2186. Minimum Number of Steps to Make Two Strings Anagram II","text":"Problem <p>You are given two strings <code>s</code> and <code>t</code>. In one step, you can append any character to either <code>s</code> or <code>t</code>.</p> <p>Return the minimum number of steps to make <code>s</code> and <code>t</code> anagrams of each other.</p> <p>An anagram of a string is a string that contains the same characters with a different (or the same) ordering.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"leetcode\", t = \"coats\"\nOutput: 7\nExplanation: \n- In 2 steps, we can append the letters in \"as\" onto s = \"leetcode\", forming s = \"leetcodeas\".\n- In 5 steps, we can append the letters in \"leede\" onto t = \"coats\", forming t = \"coatsleede\".\n\"leetcodeas\" and \"coatsleede\" are now anagrams of each other.\nWe used a total of 2 + 5 = 7 steps.\nIt can be shown that there is no way to make them anagrams of each other with less than 7 steps.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"night\", t = \"thing\"\nOutput: 0\nExplanation: The given strings are already anagrams of each other. Thus, we do not need any further steps.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>s</code> and <code>t</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2187/","title":"2187. Minimum Time to Complete Trips","text":"Problem <p>You are given an array <code>time</code> where <code>time[i]</code> denotes the time taken by the <code>i<sup>th</sup></code> bus to complete one trip.</p> <p>Each bus can make multiple trips successively; that is, the next trip can start immediately after completing the current trip. Also, each bus operates independently; that is, the trips of one bus do not influence the trips of any other bus.</p> <p>You are also given an integer <code>totalTrips</code>, which denotes the number of trips all buses should make in total. Return the minimum time required for all buses to complete at least <code>totalTrips</code> trips.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: time = [1,2,3], totalTrips = 5\nOutput: 3\nExplanation:\n- At time t = 1, the number of trips completed by each bus are [1,0,0]. \n  The total number of trips completed is 1 + 0 + 0 = 1.\n- At time t = 2, the number of trips completed by each bus are [2,1,0]. \n  The total number of trips completed is 2 + 1 + 0 = 3.\n- At time t = 3, the number of trips completed by each bus are [3,1,1]. \n  The total number of trips completed is 3 + 1 + 1 = 5.\nSo the minimum time needed for all buses to complete at least 5 trips is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: time = [2], totalTrips = 1\nOutput: 2\nExplanation:\nThere is only one bus, and it will complete its first trip at t = 2.\nSo the minimum time needed to complete 1 trip is 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= time.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= time[i], totalTrips &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2188/","title":"2188. Minimum Time to Finish the Race","text":"Problem <p>You are given a 0-indexed 2D integer array <code>tires</code> where <code>tires[i] = [f<sub>i</sub>, r<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> tire can finish its <code>x<sup>th</sup></code> successive lap in <code>f<sub>i</sub> * r<sub>i</sub><sup>(x-1)</sup></code> seconds.</p> <ul> <li>For example, if <code>f<sub>i</sub> = 3</code> and <code>r<sub>i</sub> = 2</code>, then the tire would finish its <code>1<sup>st</sup></code> lap in <code>3</code> seconds, its <code>2<sup>nd</sup></code> lap in <code>3 * 2 = 6</code> seconds, its <code>3<sup>rd</sup></code> lap in <code>3 * 2<sup>2</sup> = 12</code> seconds, etc.</li> </ul> <p>You are also given an integer <code>changeTime</code> and an integer <code>numLaps</code>.</p> <p>The race consists of <code>numLaps</code> laps and you may start the race with any tire. You have an unlimited supply of each tire and after every lap, you may change to any given tire (including the current tire type) if you wait <code>changeTime</code> seconds.</p> <p>Return the minimum time to finish the race.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4\nOutput: 21\nExplanation: \nLap 1: Start with tire 0 and finish the lap in 2 seconds.\nLap 2: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nLap 3: Change tires to a new tire 0 for 5 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nTotal time = 2 + 6 + 5 + 2 + 6 = 21 seconds.\nThe minimum time to complete the race is 21 seconds.\n</pre> <p>Example 2:</p> <pre>\nInput: tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5\nOutput: 25\nExplanation: \nLap 1: Start with tire 1 and finish the lap in 2 seconds.\nLap 2: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 3: Change tires to a new tire 1 for 6 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 5: Change tires to tire 0 for 6 seconds then finish the lap in another 1 second.\nTotal time = 2 + 4 + 6 + 2 + 4 + 6 + 1 = 25 seconds.\nThe minimum time to complete the race is 25 seconds. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= tires.length &lt;= 10<sup>5</sup></code></li> <li><code>tires[i].length == 2</code></li> <li><code>1 &lt;= f<sub>i</sub>, changeTime &lt;= 10<sup>5</sup></code></li> <li><code>2 &lt;= r<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= numLaps &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2189/","title":"2189. Number of Ways to Build House of Cards","text":"Problem"},{"location":"LeetCode_Problems/2190/","title":"2190. Most Frequent Number Following Key In an Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. You are also given an integer <code>key</code>, which is present in <code>nums</code>.</p> <p>For every unique integer <code>target</code> in <code>nums</code>, count the number of times <code>target</code> immediately follows an occurrence of <code>key</code> in <code>nums</code>. In other words, count the number of indices <code>i</code> such that:</p> <ul> <li><code>0 &lt;= i &lt;= nums.length - 2</code>,</li> <li><code>nums[i] == key</code> and,</li> <li><code>nums[i + 1] == target</code>.</li> </ul> <p>Return the <code>target</code> with the maximum count. The test cases will be generated such that the <code>target</code> with maximum count is unique.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,100,200,1,100], key = 1\nOutput: 100\nExplanation: For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.\nNo other integers follow an occurrence of key, so we return 100.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,2,2,3], key = 2\nOutput: 2\nExplanation: For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.\nFor target = 3, there is only one occurrence at index 4 which follows an occurrence of key.\ntarget = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li>The test cases will be generated such that the answer is unique.</li> </ul>"},{"location":"LeetCode_Problems/2191/","title":"2191. Sort the Jumbled Numbers","text":"Problem <p>You are given a 0-indexed integer array <code>mapping</code> which represents the mapping rule of a shuffled decimal system. <code>mapping[i] = j</code> means digit <code>i</code> should be mapped to digit <code>j</code> in this system.</p> <p>The mapped value of an integer is the new integer obtained by replacing each occurrence of digit <code>i</code> in the integer with <code>mapping[i]</code> for all <code>0 &lt;= i &lt;= 9</code>.</p> <p>You are also given another integer array <code>nums</code>. Return the array <code>nums</code> sorted in non-decreasing order based on the mapped values of its elements.</p> <p>Notes:</p> <ul> <li>Elements with the same mapped values should appear in the same relative order as in the input.</li> <li>The elements of <code>nums</code> should only be sorted based on their mapped values and not be replaced by them.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: mapping = [8,9,4,0,2,1,3,5,7,6], nums = [991,338,38]\nOutput: [338,38,991]\nExplanation: \nMap the number 991 as follows:\n1. mapping[9] = 6, so all occurrences of the digit 9 will become 6.\n2. mapping[1] = 9, so all occurrences of the digit 1 will become 9.\nTherefore, the mapped value of 991 is 669.\n338 maps to 007, or 7 after removing the leading zeros.\n38 maps to 07, which is also 7 after removing leading zeros.\nSince 338 and 38 share the same mapped value, they should remain in the same relative order, so 338 comes before 38.\nThus, the sorted array is [338,38,991].\n</pre> <p>Example 2:</p> <pre>\nInput: mapping = [0,1,2,3,4,5,6,7,8,9], nums = [789,456,123]\nOutput: [123,456,789]\nExplanation: 789 maps to 789, 456 maps to 456, and 123 maps to 123. Thus, the sorted array is [123,456,789].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>mapping.length == 10</code></li> <li><code>0 &lt;= mapping[i] &lt;= 9</code></li> <li>All the values of <code>mapping[i]</code> are unique.</li> <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt; 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2192/","title":"2192. All Ancestors of a Node in a Directed Acyclic Graph","text":"Problem <p>You are given a positive integer <code>n</code> representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from <code>0</code> to <code>n - 1</code> (inclusive).</p> <p>You are also given a 2D integer array <code>edges</code>, where <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>]</code> denotes that there is a unidirectional edge from <code>from<sub>i</sub></code> to <code>to<sub>i</sub></code> in the graph.</p> <p>Return a list <code>answer</code>, where <code>answer[i]</code> is the list of ancestors of the <code>i<sup>th</sup></code> node, sorted in ascending order.</p> <p>A node <code>u</code> is an ancestor of another node <code>v</code> if <code>u</code> can reach <code>v</code> via a set of edges.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]\nOutput: [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]\nExplanation:\nThe above diagram represents the input graph.\n- Nodes 0, 1, and 2 do not have any ancestors.\n- Node 3 has two ancestors 0 and 1.\n- Node 4 has two ancestors 0 and 2.\n- Node 5 has three ancestors 0, 1, and 3.\n- Node 6 has five ancestors 0, 1, 2, 3, and 4.\n- Node 7 has four ancestors 0, 1, 2, and 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nOutput: [[],[0],[0,1],[0,1,2],[0,1,2,3]]\nExplanation:\nThe above diagram represents the input graph.\n- Node 0 does not have any ancestor.\n- Node 1 has one ancestor 0.\n- Node 2 has two ancestors 0 and 1.\n- Node 3 has three ancestors 0, 1, and 2.\n- Node 4 has four ancestors 0, 1, 2, and 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= edges.length &lt;= min(2000, n * (n - 1) / 2)</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt;= n - 1</code></li> <li><code>from<sub>i</sub> != to<sub>i</sub></code></li> <li>There are no duplicate edges.</li> <li>The graph is directed and acyclic.</li> </ul>"},{"location":"LeetCode_Problems/2193/","title":"2193. Minimum Number of Moves to Make Palindrome","text":"Problem <p>You are given a string <code>s</code> consisting only of lowercase English letters.</p> <p>In one move, you can select any two adjacent characters of <code>s</code> and swap them.</p> <p>Return the minimum number of moves needed to make <code>s</code> a palindrome.</p> <p>Note that the input will be generated such that <code>s</code> can always be converted to a palindrome.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aabb\"\nOutput: 2\nExplanation:\nWe can obtain two palindromes from s, \"abba\" and \"baab\". \n- We can obtain \"abba\" from s in 2 moves: \"aabb\" -&gt; \"abab\" -&gt; \"abba\".\n- We can obtain \"baab\" from s in 2 moves: \"aabb\" -&gt; \"abab\" -&gt; \"baab\".\nThus, the minimum number of moves needed to make s a palindrome is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"letelt\"\nOutput: 2\nExplanation:\nOne of the palindromes we can obtain from s in 2 moves is \"lettel\".\nOne of the ways we can obtain it is \"letelt\" -&gt; \"letetl\" -&gt; \"lettel\".\nOther palindromes such as \"tleelt\" can also be obtained in 2 moves.\nIt can be shown that it is not possible to obtain a palindrome in less than 2 moves.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2000</code></li> <li><code>s</code> consists only of lowercase English letters.</li> <li><code>s</code> can be converted to a palindrome using a finite number of moves.</li> </ul>"},{"location":"LeetCode_Problems/2194/","title":"2194. Cells in a Range on an Excel Sheet","text":"Problem <p>A cell <code>(r, c)</code> of an excel sheet is represented as a string <code>\"&lt;col&gt;&lt;row&gt;\"</code> where:</p> <ul> <li><code>&lt;col&gt;</code> denotes the column number <code>c</code> of the cell. It is represented by alphabetical letters.      <ul> <li>For example, the <code>1<sup>st</sup></code> column is denoted by <code>'A'</code>, the <code>2<sup>nd</sup></code> by <code>'B'</code>, the <code>3<sup>rd</sup></code> by <code>'C'</code>, and so on.</li> </ul> </li> <li><code>&lt;row&gt;</code> is the row number <code>r</code> of the cell. The <code>r<sup>th</sup></code> row is represented by the integer <code>r</code>.</li> </ul> <p>You are given a string <code>s</code>\u00a0in\u00a0the format <code>\"&lt;col1&gt;&lt;row1&gt;:&lt;col2&gt;&lt;row2&gt;\"</code>, where <code>&lt;col1&gt;</code> represents the column <code>c1</code>, <code>&lt;row1&gt;</code> represents the row <code>r1</code>, <code>&lt;col2&gt;</code> represents the column <code>c2</code>, and <code>&lt;row2&gt;</code> represents the row <code>r2</code>, such that <code>r1 &lt;= r2</code> and <code>c1 &lt;= c2</code>.</p> <p>Return the list of cells <code>(x, y)</code> such that <code>r1 &lt;= x &lt;= r2</code> and <code>c1 &lt;= y &lt;= c2</code>. The cells should be represented as\u00a0strings in the format mentioned above and be sorted in non-decreasing order first by columns and then by rows.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: s = \"K1:L2\"\nOutput: [\"K1\",\"K2\",\"L1\",\"L2\"]\nExplanation:\nThe above diagram shows the cells which should be present in the list.\nThe red arrows denote the order in which the cells should be presented.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: s = \"A1:F1\"\nOutput: [\"A1\",\"B1\",\"C1\",\"D1\",\"E1\",\"F1\"]\nExplanation:\nThe above diagram shows the cells which should be present in the list.\nThe red arrow denotes the order in which the cells should be presented.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>s.length == 5</code></li> <li><code>'A' &lt;= s[0] &lt;= s[3] &lt;= 'Z'</code></li> <li><code>'1' &lt;= s[1] &lt;= s[4] &lt;= '9'</code></li> <li><code>s</code> consists of uppercase English letters, digits and <code>':'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2195/","title":"2195. Append K Integers With Minimal Sum","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>k</code>. Append <code>k</code> unique positive integers that do not appear in <code>nums</code> to <code>nums</code> such that the resulting total sum is minimum.</p> <p>Return the sum of the <code>k</code> integers appended to <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,4,25,10,25], k = 2\nOutput: 5\nExplanation: The two unique positive integers that do not appear in nums which we append are 2 and 3.\nThe resulting sum of nums is 1 + 4 + 25 + 10 + 25 + 2 + 3 = 70, which is the minimum.\nThe sum of the two integers appended is 2 + 3 = 5, so we return 5.</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,6], k = 6\nOutput: 25\nExplanation: The six unique positive integers that do not appear in nums which we append are 1, 2, 3, 4, 7, and 8.\nThe resulting sum of nums is 5 + 6 + 1 + 2 + 3 + 4 + 7 + 8 = 36, which is the minimum. \nThe sum of the six integers appended is 1 + 2 + 3 + 4 + 7 + 8 = 25, so we return 25.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2196/","title":"2196. Create Binary Tree From Descriptions","text":"Problem <p>You are given a 2D integer array <code>descriptions</code> where <code>descriptions[i] = [parent<sub>i</sub>, child<sub>i</sub>, isLeft<sub>i</sub>]</code> indicates that <code>parent<sub>i</sub></code> is the parent of <code>child<sub>i</sub></code> in a binary tree of unique values. Furthermore,</p> <ul> <li>If <code>isLeft<sub>i</sub> == 1</code>, then <code>child<sub>i</sub></code> is the left child of <code>parent<sub>i</sub></code>.</li> <li>If <code>isLeft<sub>i</sub> == 0</code>, then <code>child<sub>i</sub></code> is the right child of <code>parent<sub>i</sub></code>.</li> </ul> <p>Construct the binary tree described by <code>descriptions</code> and return its root.</p> <p>The test cases will be generated such that the binary tree is valid.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: descriptions = [[20,15,1],[20,17,0],[50,20,1],[50,80,0],[80,19,1]]\nOutput: [50,20,80,15,17,19]\nExplanation: The root node is the node with value 50 since it has no parent.\nThe resulting binary tree is shown in the diagram.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: descriptions = [[1,2,1],[2,3,0],[3,4,1]]\nOutput: [1,2,null,null,3,4]\nExplanation: The root node is the node with value 1 since it has no parent.\nThe resulting binary tree is shown in the diagram.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= descriptions.length &lt;= 10<sup>4</sup></code></li> <li><code>descriptions[i].length == 3</code></li> <li><code>1 &lt;= parent<sub>i</sub>, child<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= isLeft<sub>i</sub> &lt;= 1</code></li> <li>The binary tree described by <code>descriptions</code> is valid.</li> </ul>"},{"location":"LeetCode_Problems/2197/","title":"2197. Replace Non-Coprime Numbers in Array","text":"Problem <p>You are given an array of integers <code>nums</code>. Perform the following steps:</p> <ol> <li>Find any two adjacent numbers in <code>nums</code> that are non-coprime.</li> <li>If no such numbers are found, stop the process.</li> <li>Otherwise, delete the two numbers and replace them with their LCM (Least Common Multiple).</li> <li>Repeat this process as long as you keep finding two adjacent non-coprime numbers.</li> </ol> <p>Return the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will lead to the same result.</p> <p>The test cases are generated such that the values in the final array are less than or equal to <code>10<sup>8</sup></code>.</p> <p>Two values <code>x</code> and <code>y</code> are non-coprime if <code>GCD(x, y) &gt; 1</code> where <code>GCD(x, y)</code> is the Greatest Common Divisor of <code>x</code> and <code>y</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [6,4,3,2,7,6,2]\nOutput: [12,7,6]\nExplanation: \n- (6, 4) are non-coprime with LCM(6, 4) = 12. Now, nums = [12,3,2,7,6,2].\n- (12, 3) are non-coprime with LCM(12, 3) = 12. Now, nums = [12,2,7,6,2].\n- (12, 2) are non-coprime with LCM(12, 2) = 12. Now, nums = [12,7,6,2].\n- (6, 2) are non-coprime with LCM(6, 2) = 6. Now, nums = [12,7,6].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [12,7,6].\nNote that there are other ways to obtain the same resultant array.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,1,1,3,3,3]\nOutput: [2,1,1,3]\nExplanation: \n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3,3].\n- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3].\n- (2, 2) are non-coprime with LCM(2, 2) = 2. Now, nums = [2,1,1,3].\nThere are no more adjacent non-coprime numbers in nums.\nThus, the final modified array is [2,1,1,3].\nNote that there are other ways to obtain the same resultant array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li>The test cases are generated such that the values in the final array are less than or equal to <code>10<sup>8</sup></code>.</li> </ul>"},{"location":"LeetCode_Problems/2198/","title":"2198. Number of Single Divisor Triplets","text":"Problem"},{"location":"LeetCode_Problems/2199/","title":"2199. Finding the Topic of Each Post","text":"Problem"},{"location":"LeetCode_Problems/2200/","title":"2200. Find All K-Distant Indices in an Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and two integers <code>key</code> and <code>k</code>. A k-distant index is an index <code>i</code> of <code>nums</code> for which there exists at least one index <code>j</code> such that <code>|i - j| &lt;= k</code> and <code>nums[j] == key</code>.</p> <p>Return a list of all k-distant indices sorted in increasing order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,4,9,1,3,9,5], key = 9, k = 1\nOutput: [1,2,3,4,5,6]\nExplanation: Here, <code>nums[2] == key</code> and <code>nums[5] == key.\n- For index 0, |0 - 2| &gt; k and |0 - 5| &gt; k, so there is no j</code> where <code>|0 - j| &lt;= k</code> and <code>nums[j] == key. Thus, 0 is not a k-distant index.\n- For index 1, |1 - 2| &lt;= k and nums[2] == key, so 1 is a k-distant index.\n- For index 2, |2 - 2| &lt;= k and nums[2] == key, so 2 is a k-distant index.\n- For index 3, |3 - 2| &lt;= k and nums[2] == key, so 3 is a k-distant index.\n- For index 4, |4 - 5| &lt;= k and nums[5] == key, so 4 is a k-distant index.\n- For index 5, |5 - 5| &lt;= k and nums[5] == key, so 5 is a k-distant index.\n- For index 6, |6 - 5| &lt;= k and nums[5] == key, so 6 is a k-distant index.\n</code>Thus, we return [1,2,3,4,5,6] which is sorted in increasing order. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,2,2,2], key = 2, k = 2\nOutput: [0,1,2,3,4]\nExplanation: For all indices i in nums, there exists some index j such that |i - j| &lt;= k and nums[j] == key, so every index is a k-distant index. \nHence, we return [0,1,2,3,4].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li><code>key</code> is an integer from the array <code>nums</code>.</li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/2201/","title":"2201. Count Artifacts That Can Be Extracted","text":"Problem <p>There is an <code>n x n</code> 0-indexed grid with some artifacts buried in it. You are given the integer <code>n</code> and a 0-indexed 2D integer array <code>artifacts</code> describing the positions of the rectangular artifacts where <code>artifacts[i] = [r1<sub>i</sub>, c1<sub>i</sub>, r2<sub>i</sub>, c2<sub>i</sub>]</code> denotes that the <code>i<sup>th</sup></code> artifact is buried in the subgrid where:</p> <ul> <li><code>(r1<sub>i</sub>, c1<sub>i</sub>)</code> is the coordinate of the top-left cell of the <code>i<sup>th</sup></code> artifact and</li> <li><code>(r2<sub>i</sub>, c2<sub>i</sub>)</code> is the coordinate of the bottom-right cell of the <code>i<sup>th</sup></code> artifact.</li> </ul> <p>You will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it.</p> <p>Given a 0-indexed 2D integer array <code>dig</code> where <code>dig[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> indicates that you will excavate the cell <code>(r<sub>i</sub>, c<sub>i</sub>)</code>, return the number of artifacts that you can extract.</p> <p>The test cases are generated such that:</p> <ul> <li>No two artifacts overlap.</li> <li>Each artifact only covers at most <code>4</code> cells.</li> <li>The entries of <code>dig</code> are unique.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]]\nOutput: 1\nExplanation: \nThe different colors represent different artifacts. Excavated cells are labeled with a 'D' in the grid.\nThere is 1 artifact that can be extracted, namely the red artifact.\nThe blue artifact has one part in cell (1,1) which remains uncovered, so we cannot extract it.\nThus, we return 1.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]]\nOutput: 2\nExplanation: Both the red and blue artifacts have all parts uncovered (labeled with a 'D') and can be extracted, so we return 2. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= artifacts.length, dig.length &lt;= min(n<sup>2</sup>, 10<sup>5</sup>)</code></li> <li><code>artifacts[i].length == 4</code></li> <li><code>dig[i].length == 2</code></li> <li><code>0 &lt;= r1<sub>i</sub>, c1<sub>i</sub>, r2<sub>i</sub>, c2<sub>i</sub>, r<sub>i</sub>, c<sub>i</sub> &lt;= n - 1</code></li> <li><code>r1<sub>i</sub> &lt;= r2<sub>i</sub></code></li> <li><code>c1<sub>i</sub> &lt;= c2<sub>i</sub></code></li> <li>No two artifacts will overlap.</li> <li>The number of cells covered by an artifact is at most <code>4</code>.</li> <li>The entries of <code>dig</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2202/","title":"2202. Maximize the Topmost Element After K Moves","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> representing the contents of a pile, where <code>nums[0]</code> is the topmost element of the pile.</p> <p>In one move, you can perform either of the following:</p> <ul> <li>If the pile is not empty, remove the topmost element of the pile.</li> <li>If there are one or more removed elements, add any one of them back onto the pile. This element becomes the new topmost element.</li> </ul> <p>You are also given an integer <code>k</code>, which denotes the total number of moves to be made.</p> <p>Return the maximum value of the topmost element of the pile possible after exactly <code>k</code> moves. In case it is not possible to obtain a non-empty pile after <code>k</code> moves, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,2,2,4,0,6], k = 4\nOutput: 5\nExplanation:\nOne of the ways we can end with 5 at the top of the pile after 4 moves is as follows:\n- Step 1: Remove the topmost element = 5. The pile becomes [2,2,4,0,6].\n- Step 2: Remove the topmost element = 2. The pile becomes [2,4,0,6].\n- Step 3: Remove the topmost element = 2. The pile becomes [4,0,6].\n- Step 4: Add 5 back onto the pile. The pile becomes [5,4,0,6].\nNote that this is not the only way to end with 5 at the top of the pile. It can be shown that 5 is the largest answer possible after 4 moves.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2], k = 1\nOutput: -1\nExplanation: \nIn the first move, our only option is to pop the topmost element of the pile.\nSince it is not possible to obtain a non-empty pile after one move, we return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2203/","title":"2203. Minimum Weighted Subgraph With the Required Paths","text":"Problem <p>You are given an integer <code>n</code> denoting the number of nodes of a weighted directed graph. The nodes are numbered from <code>0</code> to <code>n - 1</code>.</p> <p>You are also given a 2D integer array <code>edges</code> where <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]</code> denotes that there exists a directed edge from <code>from<sub>i</sub></code> to <code>to<sub>i</sub></code> with weight <code>weight<sub>i</sub></code>.</p> <p>Lastly, you are given three distinct integers <code>src1</code>, <code>src2</code>, and <code>dest</code> denoting three distinct nodes of the graph.</p> <p>Return the minimum weight of a subgraph of the graph such that it is possible to reach <code>dest</code> from both <code>src1</code> and <code>src2</code> via a set of edges of this subgraph. In case such a subgraph does not exist, return <code>-1</code>.</p> <p>A subgraph is a graph whose vertices and edges are subsets of the original graph. The weight of a subgraph is the sum of weights of its constituent edges.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5\nOutput: 9\nExplanation:\nThe above figure represents the input graph.\nThe blue edges represent one of the subgraphs that yield the optimal answer.\nNote that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer. It is not possible to get a subgraph with less weight satisfying all the constraints.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2\nOutput: -1\nExplanation:\nThe above figure represents the input graph.\nIt can be seen that there does not exist any path from node 1 to node 2, hence there are no subgraphs satisfying all the constraints.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= edges.length &lt;= 10<sup>5</sup></code></li> <li><code>edges[i].length == 3</code></li> <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub>, src1, src2, dest &lt;= n - 1</code></li> <li><code>from<sub>i</sub> != to<sub>i</sub></code></li> <li><code>src1</code>, <code>src2</code>, and <code>dest</code> are pairwise distinct.</li> <li><code>1 &lt;= weight[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2204/","title":"2204. Distance to a Cycle in Undirected Graph","text":"Problem"},{"location":"LeetCode_Problems/2205/","title":"2205. The Number of Users That Are Eligible for Discount","text":"Problem"},{"location":"LeetCode_Problems/2206/","title":"2206. Divide Array Into Equal Pairs","text":"Problem <p>You are given an integer array <code>nums</code> consisting of <code>2 * n</code> integers.</p> <p>You need to divide <code>nums</code> into <code>n</code> pairs such that:</p> <ul> <li>Each element belongs to exactly one pair.</li> <li>The elements present in a pair are equal.</li> </ul> <p>Return <code>true</code> if nums can be divided into <code>n</code> pairs, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,2,3,2,2,2]\nOutput: true\nExplanation: \nThere are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs.\nIf nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: false\nExplanation: \nThere is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums.length == 2 * n</code></li> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>1 &lt;= nums[i] &lt;= 500</code></li> </ul>"},{"location":"LeetCode_Problems/2207/","title":"2207. Maximize Number of Subsequences in a String","text":"Problem <p>You are given a 0-indexed string <code>text</code> and another 0-indexed string <code>pattern</code> of length <code>2</code>, both of which consist of only lowercase English letters.</p> <p>You can add either <code>pattern[0]</code> or <code>pattern[1]</code> anywhere in <code>text</code> exactly once. Note that the character can be added even at the beginning or at the end of <code>text</code>.</p> <p>Return the maximum number of times <code>pattern</code> can occur as a subsequence of the modified <code>text</code>.</p> <p>A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: text = \"abdcdbc\", pattern = \"ac\"\nOutput: 4\nExplanation:\nIf we add pattern[0] = 'a' in between text[1] and text[2], we get \"abadcdbc\". Now, the number of times \"ac\" occurs as a subsequence is 4.\nSome other strings which have 4 subsequences \"ac\" after adding a character to text are \"aabdcdbc\" and \"abdacdbc\".\nHowever, strings such as \"abdcadbc\", \"abdccdbc\", and \"abdcdbcc\", although obtainable, have only 3 subsequences \"ac\" and are thus suboptimal.\nIt can be shown that it is not possible to get more than 4 subsequences \"ac\" by adding only one character.\n</pre> <p>Example 2:</p> <pre>\nInput: text = \"aabb\", pattern = \"ab\"\nOutput: 6\nExplanation:\nSome of the strings which can be obtained from text and have 6 subsequences \"ab\" are \"aaabb\", \"aaabb\", and \"aabbb\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text.length &lt;= 10<sup>5</sup></code></li> <li><code>pattern.length == 2</code></li> <li><code>text</code> and <code>pattern</code> consist only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2208/","title":"2208. Minimum Operations to Halve Array Sum","text":"Problem <p>You are given an array <code>nums</code> of positive integers. In one operation, you can choose any number from <code>nums</code> and reduce it to exactly half the number. (Note that you may choose this reduced number in future operations.)</p> <p>Return the minimum number of operations to reduce the sum of <code>nums</code> by at least half.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,19,8,1]\nOutput: 3\nExplanation: The initial sum of nums is equal to 5 + 19 + 8 + 1 = 33.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 19 and reduce it to 9.5.\nPick the number 9.5 and reduce it to 4.75.\nPick the number 8 and reduce it to 4.\nThe final array is [5, 4.75, 4, 1] with a total sum of 5 + 4.75 + 4 + 1 = 14.75. \nThe sum of nums has been reduced by 33 - 14.75 = 18.25, which is at least half of the initial sum, 18.25 &gt;= 33/2 = 16.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,8,20]\nOutput: 3\nExplanation: The initial sum of nums is equal to 3 + 8 + 20 = 31.\nThe following is one of the ways to reduce the sum by at least half:\nPick the number 20 and reduce it to 10.\nPick the number 10 and reduce it to 5.\nPick the number 3 and reduce it to 1.5.\nThe final array is [1.5, 8, 5] with a total sum of 1.5 + 8 + 5 = 14.5. \nThe sum of nums has been reduced by 31 - 14.5 = 16.5, which is at least half of the initial sum, 16.5 &gt;= 31/2 = 15.5.\nOverall, 3 operations were used so we return 3.\nIt can be shown that we cannot reduce the sum by at least half in less than 3 operations.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2209/","title":"2209. Minimum White Tiles After Covering With Carpets","text":"Problem <p>You are given a 0-indexed binary string <code>floor</code>, which represents the colors of tiles on a floor:</p> <ul> <li><code>floor[i] = '0'</code> denotes that the <code>i<sup>th</sup></code> tile of the floor is colored black.</li> <li>On the other hand, <code>floor[i] = '1'</code> denotes that the <code>i<sup>th</sup></code> tile of the floor is colored white.</li> </ul> <p>You are also given <code>numCarpets</code> and <code>carpetLen</code>. You have <code>numCarpets</code> black carpets, each of length <code>carpetLen</code> tiles. Cover the tiles with the given carpets such that the number of white tiles still visible is minimum. Carpets may overlap one another.</p> <p>Return the minimum number of white tiles still visible.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: floor = \"10110101\", numCarpets = 2, carpetLen = 2\nOutput: 2\nExplanation: \nThe figure above shows one way of covering the tiles with the carpets such that only 2 white tiles are visible.\nNo other way of covering the tiles with the carpets can leave less than 2 white tiles visible.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: floor = \"11111\", numCarpets = 2, carpetLen = 3\nOutput: 0\nExplanation: \nThe figure above shows one way of covering the tiles with the carpets such that no white tiles are visible.\nNote that the carpets are able to overlap one another.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= carpetLen &lt;= floor.length &lt;= 1000</code></li> <li><code>floor[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> <li><code>1 &lt;= numCarpets &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2210/","title":"2210. Count Hills and Valleys in an Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. An index <code>i</code> is part of a hill in <code>nums</code> if the closest non-equal neighbors of <code>i</code> are smaller than <code>nums[i]</code>. Similarly, an index <code>i</code> is part of a valley in <code>nums</code> if the closest non-equal neighbors of <code>i</code> are larger than <code>nums[i]</code>. Adjacent indices <code>i</code> and <code>j</code> are part of the same hill or valley if <code>nums[i] == nums[j]</code>.</p> <p>Note that for an index to be part of a hill or valley, it must have a non-equal neighbor on both the left and right of the index.</p> <p>Return the number of hills and valleys in <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,4,1,1,6,5]\nOutput: 3\nExplanation:\nAt index 0: There is no non-equal neighbor of 2 on the left, so index 0 is neither a hill nor a valley.\nAt index 1: The closest non-equal neighbors of 4 are 2 and 1. Since 4 &gt; 2 and 4 &gt; 1, index 1 is a hill. \nAt index 2: The closest non-equal neighbors of 1 are 4 and 6. Since 1 &lt; 4 and 1 &lt; 6, index 2 is a valley.\nAt index 3: The closest non-equal neighbors of 1 are 4 and 6. Since 1 &lt; 4 and 1 &lt; 6, index 3 is a valley, but note that it is part of the same valley as index 2.\nAt index 4: The closest non-equal neighbors of 6 are 1 and 5. Since 6 &gt; 1 and 6 &gt; 5, index 4 is a hill.\nAt index 5: There is no non-equal neighbor of 5 on the right, so index 5 is neither a hill nor a valley. \nThere are 3 hills and valleys so we return 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [6,6,5,5,4,1]\nOutput: 0\nExplanation:\nAt index 0: There is no non-equal neighbor of 6 on the left, so index 0 is neither a hill nor a valley.\nAt index 1: There is no non-equal neighbor of 6 on the left, so index 1 is neither a hill nor a valley.\nAt index 2: The closest non-equal neighbors of 5 are 6 and 4. Since 5 &lt; 6 and 5 &gt; 4, index 2 is neither a hill nor a valley.\nAt index 3: The closest non-equal neighbors of 5 are 6 and 4. Since 5 &lt; 6 and 5 &gt; 4, index 3 is neither a hill nor a valley.\nAt index 4: The closest non-equal neighbors of 4 are 5 and 1. Since 4 &lt; 5 and 4 &gt; 1, index 4 is neither a hill nor a valley.\nAt index 5: There is no non-equal neighbor of 1 on the right, so index 5 is neither a hill nor a valley.\nThere are 0 hills and valleys so we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2211/","title":"2211. Count Collisions on a Road","text":"Problem <p>There are <code>n</code> cars on an infinitely long road. The cars are numbered from <code>0</code> to <code>n - 1</code> from left to right and each car is present at a unique point.</p> <p>You are given a 0-indexed string <code>directions</code> of length <code>n</code>. <code>directions[i]</code> can be either <code>'L'</code>, <code>'R'</code>, or <code>'S'</code> denoting whether the <code>i<sup>th</sup></code> car is moving towards the left, towards the right, or staying at its current point respectively. Each moving car has the same speed.</p> <p>The number of collisions can be calculated as follows:</p> <ul> <li>When two cars moving in opposite directions collide with each other, the number of collisions increases by <code>2</code>.</li> <li>When a moving car collides with a stationary car, the number of collisions increases by <code>1</code>.</li> </ul> <p>After a collision, the cars involved can no longer move and will stay at the point where they collided. Other than that, cars cannot change their state or direction of motion.</p> <p>Return the total number of collisions that will happen on the road.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: directions = \"RLRSLL\"\nOutput: 5\nExplanation:\nThe collisions that will happen on the road are:\n- Cars 0 and 1 will collide with each other. Since they are moving in opposite directions, the number of collisions becomes 0 + 2 = 2.\n- Cars 2 and 3 will collide with each other. Since car 3 is stationary, the number of collisions becomes 2 + 1 = 3.\n- Cars 3 and 4 will collide with each other. Since car 3 is stationary, the number of collisions becomes 3 + 1 = 4.\n- Cars 4 and 5 will collide with each other. After car 4 collides with car 3, it will stay at the point of collision and get hit by car 5. The number of collisions becomes 4 + 1 = 5.\nThus, the total number of collisions that will happen on the road is 5. \n</pre> <p>Example 2:</p> <pre>\nInput: directions = \"LLRR\"\nOutput: 0\nExplanation:\nNo cars will collide with each other. Thus, the total number of collisions that will happen on the road is 0.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= directions.length &lt;= 10<sup>5</sup></code></li> <li><code>directions[i]</code> is either <code>'L'</code>, <code>'R'</code>, or <code>'S'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2212/","title":"2212. Maximum Points in an Archery Competition","text":"Problem <p>Alice and Bob are opponents in an archery competition. The competition has set the following rules:</p> <ol> <li>Alice first shoots <code>numArrows</code> arrows and then Bob shoots <code>numArrows</code> arrows.</li> <li>The points are then calculated as follows:     <ol> <li>The target has integer scoring sections ranging from <code>0</code> to <code>11</code> inclusive.</li> <li>For each section of the target with score <code>k</code> (in between <code>0</code> to <code>11</code>), say Alice and Bob have shot <code>a<sub>k</sub></code> and <code>b<sub>k</sub></code> arrows on that section respectively. If <code>a<sub>k</sub> &gt;= b<sub>k</sub></code>, then Alice takes <code>k</code> points. If <code>a<sub>k</sub> &lt; b<sub>k</sub></code>, then Bob takes <code>k</code> points.</li> <li>However, if <code>a<sub>k</sub> == b<sub>k</sub> == 0</code>, then nobody takes <code>k</code> points.</li> </ol> </li> </ol> <ul> <li> <p>For example, if Alice and Bob both shot <code>2</code> arrows on the section with score <code>11</code>, then Alice takes <code>11</code> points. On the other hand, if Alice shot <code>0</code> arrows on the section with score <code>11</code> and Bob shot <code>2</code> arrows on that same section, then Bob takes <code>11</code> points.</p> </li> </ul> <p>You are given the integer <code>numArrows</code> and an integer array <code>aliceArrows</code> of size <code>12</code>, which represents the number of arrows Alice shot on each scoring section from <code>0</code> to <code>11</code>. Now, Bob wants to maximize the total number of points he can obtain.</p> <p>Return the array <code>bobArrows</code> which represents the number of arrows Bob shot on each scoring section from <code>0</code> to <code>11</code>. The sum of the values in <code>bobArrows</code> should equal <code>numArrows</code>.</p> <p>If there are multiple ways for Bob to earn the maximum total points, return any one of them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: numArrows = 9, aliceArrows = [1,1,0,1,0,0,2,1,0,1,2,0]\nOutput: [0,0,0,0,1,1,0,0,1,2,3,1]\nExplanation: The table above shows how the competition is scored. \nBob earns a total point of 4 + 5 + 8 + 9 + 10 + 11 = 47.\nIt can be shown that Bob cannot obtain a score higher than 47 points.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: numArrows = 3, aliceArrows = [0,0,1,0,0,0,0,0,0,0,0,2]\nOutput: [0,0,0,0,0,0,0,0,1,1,1,0]\nExplanation: The table above shows how the competition is scored.\nBob earns a total point of 8 + 9 + 10 = 27.\nIt can be shown that Bob cannot obtain a score higher than 27 points.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= numArrows &lt;= 10<sup>5</sup></code></li> <li><code>aliceArrows.length == bobArrows.length == 12</code></li> <li><code>0 &lt;= aliceArrows[i], bobArrows[i] &lt;= numArrows</code></li> <li><code>sum(aliceArrows[i]) == numArrows</code></li> </ul>"},{"location":"LeetCode_Problems/2213/","title":"2213. Longest Substring of One Repeating Character","text":"Problem <p>You are given a 0-indexed string <code>s</code>. You are also given a 0-indexed string <code>queryCharacters</code> of length <code>k</code> and a 0-indexed array of integer indices <code>queryIndices</code> of length <code>k</code>, both of which are used to describe <code>k</code> queries.</p> <p>The <code>i<sup>th</sup></code> query updates the character in <code>s</code> at index <code>queryIndices[i]</code> to the character <code>queryCharacters[i]</code>.</p> <p>Return an array <code>lengths</code> of length <code>k</code> where <code>lengths[i]</code> is the length of the longest substring of <code>s</code> consisting of only one repeating character after the <code>i<sup>th</sup></code> query is performed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"babacc\", queryCharacters = \"bcb\", queryIndices = [1,3,3]\nOutput: [3,3,4]\nExplanation: \n- 1<sup>st</sup> query updates s = \"bbbacc\". The longest substring consisting of one repeating character is \"bbb\" with length 3.\n- 2<sup>nd</sup> query updates s = \"bbbccc\". \n  The longest substring consisting of one repeating character can be \"bbb\" or \"ccc\" with length 3.\n- 3<sup>rd</sup> query updates s = \"bbbbcc\". The longest substring consisting of one repeating character is \"bbbb\" with length 4.\nThus, we return [3,3,4].\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abyzz\", queryCharacters = \"aa\", queryIndices = [2,1]\nOutput: [2,3]\nExplanation:\n- 1<sup>st</sup> query updates s = \"abazz\". The longest substring consisting of one repeating character is \"zz\" with length 2.\n- 2<sup>nd</sup> query updates s = \"aaazz\". The longest substring consisting of one repeating character is \"aaa\" with length 3.\nThus, we return [2,3].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> <li><code>k == queryCharacters.length == queryIndices.length</code></li> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> <li><code>queryCharacters</code> consists of lowercase English letters.</li> <li><code>0 &lt;= queryIndices[i] &lt; s.length</code></li> </ul>"},{"location":"LeetCode_Problems/2214/","title":"2214. Minimum Health to Beat Game","text":"Problem"},{"location":"LeetCode_Problems/2215/","title":"2215. Find the Difference of Two Arrays","text":"Problem <p>Given two 0-indexed integer arrays <code>nums1</code> and <code>nums2</code>, return a list <code>answer</code> of size <code>2</code> where:</p> <ul> <li><code>answer[0]</code> is a list of all distinct integers in <code>nums1</code> which are not present in <code>nums2</code>.</li> <li><code>answer[1]</code> is a list of all distinct integers in <code>nums2</code> which are not present in <code>nums1</code>.</li> </ul> <p>Note that the integers in the lists may be returned in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2,3], nums2 = [2,4,6]\nOutput: [[1,3],[4,6]]\nExplanation:\nFor nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].\nFor nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,2,3,3], nums2 = [1,1,2,2]\nOutput: [[3],[]]\nExplanation:\nFor nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].\nEvery integer in nums2 is present in nums1. Therefore, answer[1] = [].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li> <li><code>-1000 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2216/","title":"2216. Minimum Deletions to Make Array Beautiful","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. The array <code>nums</code> is beautiful if:</p> <ul> <li><code>nums.length</code> is even.</li> <li><code>nums[i] != nums[i + 1]</code> for all <code>i % 2 == 0</code>.</li> </ul> <p>Note that an empty array is considered beautiful.</p> <p>You can delete any number of elements from <code>nums</code>. When you delete an element, all the elements to the right of the deleted element will be shifted one unit to the left to fill the gap created and all the elements to the left of the deleted element will remain unchanged.</p> <p>Return the minimum number of elements to delete from <code>nums</code> to make it beautiful.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,2,3,5]\nOutput: 1\nExplanation: You can delete either <code>nums[0]</code> or <code>nums[1]</code> to make <code>nums</code> = [1,2,3,5] which is beautiful. It can be proven you need at least 1 deletion to make <code>nums</code> beautiful.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,2,2,3,3]\nOutput: 2\nExplanation: You can delete <code>nums[0]</code> and <code>nums[5]</code> to make nums = [1,2,2,3] which is beautiful. It can be proven you need at least 2 deletions to make nums beautiful.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2217/","title":"2217. Find Palindrome With Fixed Length","text":"Problem <p>Given an integer array <code>queries</code> and a positive integer <code>intLength</code>, return an array <code>answer</code> where <code>answer[i]</code> is either the <code>queries[i]<sup>th</sup></code> smallest positive palindrome of length <code>intLength</code> or <code>-1</code> if no such palindrome exists.</p> <p>A palindrome is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: queries = [1,2,3,4,5,90], intLength = 3\nOutput: [101,111,121,131,141,999]\nExplanation:\nThe first few palindromes of length 3 are:\n101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ...\nThe 90<sup>th</sup> palindrome of length 3 is 999.\n</pre> <p>Example 2:</p> <pre>\nInput: queries = [2,4,6], intLength = 4\nOutput: [1111,1331,1551]\nExplanation:\nThe first six palindromes of length 4 are:\n1001, 1111, 1221, 1331, 1441, and 1551.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= queries.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= queries[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= intLength\u00a0&lt;= 15</code></li> </ul>"},{"location":"LeetCode_Problems/2218/","title":"2218. Maximum Value of K Coins From Piles","text":"Problem <p>There are <code>n</code> piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.</p> <p>In one move, you can choose any coin on top of any pile, remove it, and add it to your wallet.</p> <p>Given a list <code>piles</code>, where <code>piles[i]</code> is a list of integers denoting the composition of the <code>i<sup>th</sup></code> pile from top to bottom, and a positive integer <code>k</code>, return the maximum total value of coins you can have in your wallet if you choose exactly <code>k</code> coins optimally.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: piles = [[1,100,3],[7,8,9]], k = 2\nOutput: 101\nExplanation:\nThe above diagram shows the different ways we can choose k coins.\nThe maximum total we can obtain is 101.\n</pre> <p>Example 2:</p> <pre>\nInput: piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7\nOutput: 706\nExplanation:\nThe maximum total can be obtained if we choose all coins from the last pile.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == piles.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= piles[i][j] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= sum(piles[i].length) &lt;= 2000</code></li> </ul>"},{"location":"LeetCode_Problems/2219/","title":"2219. Maximum Sum Score of Array","text":"Problem"},{"location":"LeetCode_Problems/2220/","title":"2220. Minimum Bit Flips to Convert Number","text":"Problem <p>A bit flip of a number <code>x</code> is choosing a bit in the binary representation of <code>x</code> and flipping it from either <code>0</code> to <code>1</code> or <code>1</code> to <code>0</code>.</p> <ul> <li>For example, for <code>x = 7</code>, the binary representation is <code>111</code> and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get <code>110</code>, flip the second bit from the right to get <code>101</code>, flip the fifth bit from the right (a leading zero) to get <code>10111</code>, etc.</li> </ul> <p>Given two integers <code>start</code> and <code>goal</code>, return the minimum number of bit flips to convert <code>start</code> to <code>goal</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: start = 10, goal = 7\nOutput: 3\nExplanation: The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:\n- Flip the first bit from the right: 1010 -&gt; 1011.\n- Flip the third bit from the right: 1011 -&gt; 1111.\n- Flip the fourth bit from the right: 1111 -&gt; 0111.\nIt can be shown we cannot convert 10 to 7 in less than 3 steps. Hence, we return 3.</pre> <p>Example 2:</p> <pre>\nInput: start = 3, goal = 4\nOutput: 3\nExplanation: The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps:\n- Flip the first bit from the right: 011 -&gt; 010.\n- Flip the second bit from the right: 010 -&gt; 000.\n- Flip the third bit from the right: 000 -&gt; 100.\nIt can be shown we cannot convert 3 to 4 in less than 3 steps. Hence, we return 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= start, goal &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2221/","title":"2221. Find Triangular Sum of an Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>, where <code>nums[i]</code> is a digit between <code>0</code> and <code>9</code> (inclusive).</p> <p>The triangular sum of <code>nums</code> is the value of the only element present in <code>nums</code> after the following process terminates:</p> <ol> <li>Let <code>nums</code> comprise of <code>n</code> elements. If <code>n == 1</code>, end the process. Otherwise, create a new 0-indexed integer array <code>newNums</code> of length <code>n - 1</code>.</li> <li>For each index <code>i</code>, where <code>0 &lt;= i &lt;\u00a0n - 1</code>, assign the value of <code>newNums[i]</code> as <code>(nums[i] + nums[i+1]) % 10</code>, where <code>%</code> denotes modulo operator.</li> <li>Replace the array <code>nums</code> with <code>newNums</code>.</li> <li>Repeat the entire process starting from step 1.</li> </ol> <p>Return the triangular sum of <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [1,2,3,4,5]\nOutput: 8\nExplanation:\nThe above diagram depicts the process from which we obtain the triangular sum of the array.</pre> <p>Example 2:</p> <pre>\nInput: nums = [5]\nOutput: 5\nExplanation:\nSince there is only one element in nums, the triangular sum is the value of that element itself.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/2222/","title":"2222. Number of Ways to Select Buildings","text":"Problem <p>You are given a 0-indexed binary string <code>s</code> which represents the types of buildings along a street where:</p> <ul> <li><code>s[i] = '0'</code> denotes that the <code>i<sup>th</sup></code> building is an office and</li> <li><code>s[i] = '1'</code> denotes that the <code>i<sup>th</sup></code> building is a restaurant.</li> </ul> <p>As a city official, you would like to select 3 buildings for random inspection. However, to ensure variety, no two consecutive buildings out of the selected buildings can be of the same type.</p> <ul> <li>For example, given <code>s = \"001101\"</code>, we cannot select the <code>1<sup>st</sup></code>, <code>3<sup>rd</sup></code>, and <code>5<sup>th</sup></code> buildings as that would form <code>\"011\"</code> which is not allowed due to having two consecutive buildings of the same type.</li> </ul> <p>Return the number of valid ways to select 3 buildings.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"001101\"\nOutput: 6\nExplanation: \nThe following sets of indices selected are valid:\n- [0,2,4] from \"001101\" forms \"010\"\n- [0,3,4] from \"001101\" forms \"010\"\n- [1,2,4] from \"001101\" forms \"010\"\n- [1,3,4] from \"001101\" forms \"010\"\n- [2,4,5] from \"001101\" forms \"101\"\n- [3,4,5] from \"001101\" forms \"101\"\nNo other selection is valid. Thus, there are 6 total ways.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"11100\"\nOutput: 0\nExplanation: It can be shown that there are no valid selections.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2223/","title":"2223. Sum of Scores of Built Strings","text":"Problem <p>You are building a string <code>s</code> of length <code>n</code> one character at a time, prepending each new character to the front of the string. The strings are labeled from <code>1</code> to <code>n</code>, where the string with length <code>i</code> is labeled <code>s<sub>i</sub></code>.</p> <ul> <li>For example, for <code>s = \"abaca\"</code>, <code>s<sub>1</sub> == \"a\"</code>, <code>s<sub>2</sub> == \"ca\"</code>, <code>s<sub>3</sub> == \"aca\"</code>, etc.</li> </ul> <p>The score of <code>s<sub>i</sub></code> is the length of the longest common prefix between <code>s<sub>i</sub></code> and <code>s<sub>n</sub></code> (Note that <code>s == s<sub>n</sub></code>).</p> <p>Given the final string <code>s</code>, return the sum of the score of every <code>s<sub>i</sub></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"babab\"\nOutput: 9\nExplanation:\nFor s<sub>1</sub> == \"b\", the longest common prefix is \"b\" which has a score of 1.\nFor s<sub>2</sub> == \"ab\", there is no common prefix so the score is 0.\nFor s<sub>3</sub> == \"bab\", the longest common prefix is \"bab\" which has a score of 3.\nFor s<sub>4</sub> == \"abab\", there is no common prefix so the score is 0.\nFor s<sub>5</sub> == \"babab\", the longest common prefix is \"babab\" which has a score of 5.\nThe sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9.</pre> <p>Example 2:</p> <pre>\nInput: s = \"azbazbzaz\"\nOutput: 14\nExplanation: \nFor s<sub>2</sub> == \"az\", the longest common prefix is \"az\" which has a score of 2.\nFor s<sub>6</sub> == \"azbzaz\", the longest common prefix is \"azb\" which has a score of 3.\nFor s<sub>9</sub> == \"azbazbzaz\", the longest common prefix is \"azbazbzaz\" which has a score of 9.\nFor all other s<sub>i</sub>, the score is 0.\nThe sum of the scores is 2 + 3 + 9 = 14, so we return 14.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2224/","title":"2224. Minimum Number of Operations to Convert Time","text":"Problem <p>You are given two strings <code>current</code> and <code>correct</code> representing two 24-hour times.</p> <p>24-hour times are formatted as <code>\"HH:MM\"</code>, where <code>HH</code> is between <code>00</code> and <code>23</code>, and <code>MM</code> is between <code>00</code> and <code>59</code>. The earliest 24-hour time is <code>00:00</code>, and the latest is <code>23:59</code>.</p> <p>In one operation you can increase the time <code>current</code> by <code>1</code>, <code>5</code>, <code>15</code>, or <code>60</code> minutes. You can perform this operation any number of times.</p> <p>Return the minimum number of operations needed to convert <code>current</code> to <code>correct</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: current = \"02:30\", correct = \"04:35\"\nOutput: 3\nExplanation:\nWe can convert current to correct in 3 operations as follows:\n- Add 60 minutes to current. current becomes \"03:30\".\n- Add 60 minutes to current. current becomes \"04:30\".\n- Add 5 minutes to current. current becomes \"04:35\".\nIt can be proven that it is not possible to convert current to correct in fewer than 3 operations.</pre> <p>Example 2:</p> <pre>\nInput: current = \"11:00\", correct = \"11:01\"\nOutput: 1\nExplanation: We only have to add one minute to current, so the minimum number of operations needed is 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>current</code> and <code>correct</code> are in the format <code>\"HH:MM\"</code></li> <li><code>current &lt;= correct</code></li> </ul>"},{"location":"LeetCode_Problems/2225/","title":"2225. Find Players With Zero or One Losses","text":"Problem <p>You are given an integer array <code>matches</code> where <code>matches[i] = [winner<sub>i</sub>, loser<sub>i</sub>]</code> indicates that the player <code>winner<sub>i</sub></code> defeated player <code>loser<sub>i</sub></code> in a match.</p> <p>Return a list <code>answer</code> of size <code>2</code> where:</p> <ul> <li><code>answer[0]</code> is a list of all players that have not lost any matches.</li> <li><code>answer[1]</code> is a list of all players that have lost exactly one match.</li> </ul> <p>The values in the two lists should be returned in increasing order.</p> <p>Note:</p> <ul> <li>You should only consider the players that have played at least one match.</li> <li>The testcases will be generated such that no two matches will have the same outcome.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]\nOutput: [[1,2,10],[4,5,7,8]]\nExplanation:\nPlayers 1, 2, and 10 have not lost any matches.\nPlayers 4, 5, 7, and 8 each have lost one match.\nPlayers 3, 6, and 9 each have lost two matches.\nThus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].\n</pre> <p>Example 2:</p> <pre>\nInput: matches = [[2,3],[1,3],[5,4],[6,4]]\nOutput: [[1,2,5,6],[]]\nExplanation:\nPlayers 1, 2, 5, and 6 have not lost any matches.\nPlayers 3 and 4 each have lost two matches.\nThus, answer[0] = [1,2,5,6] and answer[1] = [].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= matches.length &lt;= 10<sup>5</sup></code></li> <li><code>matches[i].length == 2</code></li> <li><code>1 &lt;= winner<sub>i</sub>, loser<sub>i</sub> &lt;= 10<sup>5</sup></code></li> <li><code>winner<sub>i</sub> != loser<sub>i</sub></code></li> <li>All <code>matches[i]</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2226/","title":"2226. Maximum Candies Allocated to K Children","text":"Problem <p>You are given a 0-indexed integer array <code>candies</code>. Each element in the array denotes a pile of candies of size <code>candies[i]</code>. You can divide each pile into any number of sub piles, but you cannot merge two piles together.</p> <p>You are also given an integer <code>k</code>. You should allocate piles of candies to <code>k</code> children such that each child gets the same number of candies. Each child can take at most one pile of candies and some piles of candies may go unused.</p> <p>Return the maximum number of candies each child can get.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: candies = [5,8,6], k = 3\nOutput: 5\nExplanation: We can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies.\n</pre> <p>Example 2:</p> <pre>\nInput: candies = [2,5], k = 11\nOutput: 0\nExplanation: There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= candies.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= candies[i] &lt;= 10<sup>7</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>12</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2227/","title":"2227. Encrypt and Decrypt Strings","text":"Problem <p>You are given a character array <code>keys</code> containing unique characters and a string array <code>values</code> containing strings of length 2. You are also given another string array <code>dictionary</code> that contains all permitted original strings after decryption. You should implement a data structure that can encrypt or decrypt a 0-indexed string.</p> <p>A string is encrypted with the following process:</p> <ol> <li>For each character <code>c</code> in the string, we find the index <code>i</code> satisfying <code>keys[i] == c</code> in <code>keys</code>.</li> <li>Replace <code>c</code> with <code>values[i]</code> in the string.</li> </ol> <p>Note that in case a character of the string is not present in <code>keys</code>, the encryption process cannot be carried out, and an empty string <code>\"\"</code> is returned.</p> <p>A string is decrypted with the following process:</p> <ol> <li>For each substring <code>s</code> of length 2 occurring at an even index in the string, we find an <code>i</code> such that <code>values[i] == s</code>. If there are multiple valid <code>i</code>, we choose any one of them. This means a string could have multiple possible strings it can decrypt to.</li> <li>Replace <code>s</code> with <code>keys[i]</code> in the string.</li> </ol> <p>Implement the <code>Encrypter</code> class:</p> <ul> <li><code>Encrypter(char[] keys, String[] values, String[] dictionary)</code> Initializes the <code>Encrypter</code> class with <code>keys, values</code>, and <code>dictionary</code>.</li> <li><code>String encrypt(String word1)</code> Encrypts <code>word1</code> with the encryption process described above and returns the encrypted string.</li> <li><code>int decrypt(String word2)</code> Returns the number of possible strings <code>word2</code> could decrypt to that also appear in <code>dictionary</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Encrypter\", \"encrypt\", \"decrypt\"]\n[[['a', 'b', 'c', 'd'], [\"ei\", \"zf\", \"ei\", \"am\"], [\"abcd\", \"acbd\", \"adbc\", \"badc\", \"dacb\", \"cadb\", \"cbda\", \"abad\"]], [\"abcd\"], [\"eizfeiam\"]]\nOutput\n[null, \"eizfeiam\", 2]\n\nExplanation\nEncrypter encrypter = new Encrypter([['a', 'b', 'c', 'd'], [\"ei\", \"zf\", \"ei\", \"am\"], [\"abcd\", \"acbd\", \"adbc\", \"badc\", \"dacb\", \"cadb\", \"cbda\", \"abad\"]);\nencrypter.encrypt(\"abcd\"); // return \"eizfeiam\". \n\u00a0                          // 'a' maps to \"ei\", 'b' maps to \"zf\", 'c' maps to \"ei\", and 'd' maps to \"am\".\nencrypter.decrypt(\"eizfeiam\"); // return 2. \n                              // \"ei\" can map to 'a' or 'c', \"zf\" maps to 'b', and \"am\" maps to 'd'. \n                              // Thus, the possible strings after decryption are \"abad\", \"cbad\", \"abcd\", and \"cbcd\". \n                              // 2 of those strings, \"abad\" and \"abcd\", appear in dictionary, so the answer is 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= keys.length == values.length &lt;= 26</code></li> <li><code>values[i].length == 2</code></li> <li><code>1 &lt;= dictionary.length &lt;= 100</code></li> <li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li> <li>All <code>keys[i]</code> and <code>dictionary[i]</code> are unique.</li> <li><code>1 &lt;= word1.length &lt;= 2000</code></li> <li><code>1 &lt;= word2.length &lt;= 200</code></li> <li>All <code>word1[i]</code> appear in <code>keys</code>.</li> <li><code>word2.length</code> is even.</li> <li><code>keys</code>, <code>values[i]</code>, <code>dictionary[i]</code>, <code>word1</code>, and <code>word2</code> only contain lowercase English letters.</li> <li>At most <code>200</code> calls will be made to <code>encrypt</code> and <code>decrypt</code> in total.</li> </ul>"},{"location":"LeetCode_Problems/2228/","title":"2228. Users With Two Purchases Within Seven Days","text":"Problem"},{"location":"LeetCode_Problems/2229/","title":"2229. Check if an Array Is Consecutive","text":"Problem"},{"location":"LeetCode_Problems/2230/","title":"2230. The Users That Are Eligible for Discount","text":"Problem"},{"location":"LeetCode_Problems/2231/","title":"2231. Largest Number After Digit Swaps by Parity","text":"Problem <p>You are given a positive integer <code>num</code>. You may swap any two digits of <code>num</code> that have the same parity (i.e. both odd digits or both even digits).</p> <p>Return the largest possible value of <code>num</code> after any number of swaps.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 1234\nOutput: 3412\nExplanation: Swap the digit 3 with the digit 1, this results in the number 3214.\nSwap the digit 2 with the digit 4, this results in the number 3412.\nNote that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.\nAlso note that we may not swap the digit 4 with the digit 1 since they are of different parities.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 65875\nOutput: 87655\nExplanation: Swap the digit 8 with the digit 6, this results in the number 85675.\nSwap the first digit 5 with the digit 7, this results in the number 87655.\nNote that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2232/","title":"2232. Minimize Result by Adding Parentheses to Expression","text":"Problem <p>You are given a 0-indexed string <code>expression</code> of the form <code>\"&lt;num1&gt;+&lt;num2&gt;\"</code> where <code>&lt;num1&gt;</code> and <code>&lt;num2&gt;</code> represent positive integers.</p> <p>Add a pair of parentheses to <code>expression</code> such that after the addition of parentheses, <code>expression</code> is a valid mathematical expression and evaluates to the smallest possible value. The left parenthesis must be added to the left of <code>'+'</code> and the right parenthesis must be added to the right of <code>'+'</code>.</p> <p>Return <code>expression</code> after adding a pair of parentheses such that <code>expression</code> evaluates to the smallest possible value. If there are multiple answers that yield the same result, return any of them.</p> <p>The input has been generated such that the original value of <code>expression</code>, and the value of <code>expression</code> after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: expression = \"247+38\"\nOutput: \"2(47+38)\"\nExplanation: The <code>expression</code> evaluates to 2 * (47 + 38) = 2 * 85 = 170.\nNote that \"2(4)7+38\" is invalid because the right parenthesis must be to the right of the <code>'+'</code>.\nIt can be shown that 170 is the smallest possible value.\n</pre> <p>Example 2:</p> <pre>\nInput: expression = \"12+34\"\nOutput: \"1(2+3)4\"\nExplanation: The expression evaluates to 1 * (2 + 3) * 4 = 1 * 5 * 4 = 20.\n</pre> <p>Example 3:</p> <pre>\nInput: expression = \"999+999\"\nOutput: \"(999+999)\"\nExplanation: The <code>expression</code> evaluates to 999 + 999 = 1998.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= expression.length &lt;= 10</code></li> <li><code>expression</code> consists of digits from <code>'1'</code> to <code>'9'</code> and <code>'+'</code>.</li> <li><code>expression</code> starts and ends with digits.</li> <li><code>expression</code> contains exactly one <code>'+'</code>.</li> <li>The original value of <code>expression</code>, and the value of <code>expression</code> after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.</li> </ul>"},{"location":"LeetCode_Problems/2233/","title":"2233. Maximum Product After K Increments","text":"Problem <p>You are given an array of non-negative integers <code>nums</code> and an integer <code>k</code>. In one operation, you may choose any element from <code>nums</code> and increment it by <code>1</code>.</p> <p>Return the maximum product of <code>nums</code> after at most <code>k</code> operations. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>. Note that you should maximize the product before taking the modulo.\u00a0</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,4], k = 5\nOutput: 20\nExplanation: Increment the first number 5 times.\nNow nums = [5, 4], with a product of 5 * 4 = 20.\nIt can be shown that 20 is maximum product possible, so we return 20.\nNote that there may be other ways to increment nums to have the maximum product.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [6,3,3,2], k = 2\nOutput: 216\nExplanation: Increment the second number 1 time and increment the fourth number 1 time.\nNow nums = [6, 4, 3, 3], with a product of 6 * 4 * 3 * 3 = 216.\nIt can be shown that 216 is maximum product possible, so we return 216.\nNote that there may be other ways to increment nums to have the maximum product.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length, k &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2234/","title":"2234. Maximum Total Beauty of the Gardens","text":"Problem <p>Alice is a caretaker of <code>n</code> gardens and she wants to plant flowers to maximize the total beauty of all her gardens.</p> <p>You are given a 0-indexed integer array <code>flowers</code> of size <code>n</code>, where <code>flowers[i]</code> is the number of flowers already planted in the <code>i<sup>th</sup></code> garden. Flowers that are already planted cannot be removed. You are then given another integer <code>newFlowers</code>, which is the maximum number of flowers that Alice can additionally plant. You are also given the integers <code>target</code>, <code>full</code>, and <code>partial</code>.</p> <p>A garden is considered complete if it has at least <code>target</code> flowers. The total beauty of the gardens is then determined as the sum of the following:</p> <ul> <li>The number of complete gardens multiplied by <code>full</code>.</li> <li>The minimum number of flowers in any of the incomplete gardens multiplied by <code>partial</code>. If there are no incomplete gardens, then this value will be <code>0</code>.</li> </ul> <p>Return the maximum total beauty that Alice can obtain after planting at most <code>newFlowers</code> flowers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1\nOutput: 14\nExplanation: Alice can plant\n- 2 flowers in the 0<sup>th</sup> garden\n- 3 flowers in the 1<sup>st</sup> garden\n- 1 flower in the 2<sup>nd</sup> garden\n- 1 flower in the 3<sup>rd</sup> garden\nThe gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.\nThere is 1 garden that is complete.\nThe minimum number of flowers in the incomplete gardens is 2.\nThus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14.\nNo other way of planting flowers can obtain a total beauty higher than 14.\n</pre> <p>Example 2:</p> <pre>\nInput: flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6\nOutput: 30\nExplanation: Alice can plant\n- 3 flowers in the 0<sup>th</sup> garden\n- 0 flowers in the 1<sup>st</sup> garden\n- 0 flowers in the 2<sup>nd</sup> garden\n- 2 flowers in the 3<sup>rd</sup> garden\nThe gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.\nThere are 3 gardens that are complete.\nThe minimum number of flowers in the incomplete gardens is 4.\nThus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30.\nNo other way of planting flowers can obtain a total beauty higher than 30.\nNote that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= flowers.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= flowers[i], target &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= newFlowers &lt;= 10<sup>10</sup></code></li> <li><code>1 &lt;= full, partial &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2235/","title":"2235. Add Two Integers","text":"Problem <p>Given two integers <code>num1</code> and <code>num2</code>, return the sum of the two integers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num1 = 12, num2 = 5\nOutput: 17\nExplanation: num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned.\n</pre> <p>Example 2:</p> <pre>\nInput: num1 = -10, num2 = 4\nOutput: -6\nExplanation: num1 + num2 = -6, so -6 is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-100 &lt;= num1, num2 &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2236/","title":"2236. Root Equals Sum of Children","text":"Problem <p>You are given the <code>root</code> of a binary tree that consists of exactly <code>3</code> nodes: the root, its left child, and its right child.</p> <p>Return <code>true</code> if the value of the root is equal to the sum of the values of its two children, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [10,4,6]\nOutput: true\nExplanation: The values of the root, its left child, and its right child are 10, 4, and 6, respectively.\n10 is equal to 4 + 6, so we return true.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [5,3,1]\nOutput: false\nExplanation: The values of the root, its left child, and its right child are 5, 3, and 1, respectively.\n5 is not equal to 3 + 1, so we return false.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The tree consists only of the root, its left child, and its right child.</li> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2237/","title":"2237. Count Positions on Street With Required Brightness","text":"Problem"},{"location":"LeetCode_Problems/2238/","title":"2238. Number of Times a Driver Was a Passenger","text":"Problem"},{"location":"LeetCode_Problems/2239/","title":"2239. Find Closest Number to Zero","text":"Problem <p>Given an integer array <code>nums</code> of size <code>n</code>, return the number with the value closest to <code>0</code> in <code>nums</code>. If there are multiple answers, return the number with the largest value.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-4,-2,1,4,8]\nOutput: 1\nExplanation:\nThe distance from -4 to 0 is |-4| = 4.\nThe distance from -2 to 0 is |-2| = 2.\nThe distance from 1 to 0 is |1| = 1.\nThe distance from 4 to 0 is |4| = 4.\nThe distance from 8 to 0 is |8| = 8.\nThus, the closest number to 0 in the array is 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,-1,1]\nOutput: 1\nExplanation: 1 and -1 are both the closest numbers to 0, so 1 being larger is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2240/","title":"2240. Number of Ways to Buy Pens and Pencils","text":"Problem <p>You are given an integer <code>total</code> indicating the amount of money you have. You are also given two integers <code>cost1</code> and <code>cost2</code> indicating the price of a pen and pencil respectively. You can spend part or all of your money to buy multiple quantities (or none) of each kind of writing utensil.</p> <p>Return the number of distinct ways you can buy some number of pens and pencils.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: total = 20, cost1 = 10, cost2 = 5\nOutput: 9\nExplanation: The price of a pen is 10 and the price of a pencil is 5.\n- If you buy 0 pens, you can buy 0, 1, 2, 3, or 4 pencils.\n- If you buy 1 pen, you can buy 0, 1, or 2 pencils.\n- If you buy 2 pens, you cannot buy any pencils.\nThe total number of ways to buy pens and pencils is 5 + 3 + 1 = 9.\n</pre> <p>Example 2:</p> <pre>\nInput: total = 5, cost1 = 10, cost2 = 10\nOutput: 1\nExplanation: The price of both pens and pencils are 10, which cost more than total, so you cannot buy any writing utensils. Therefore, there is only 1 way: buy 0 pens and 0 pencils.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= total, cost1, cost2 &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2241/","title":"2241. Design an ATM Machine","text":"Problem <p>There is an ATM machine that stores banknotes of <code>5</code> denominations: <code>20</code>, <code>50</code>, <code>100</code>, <code>200</code>, and <code>500</code> dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money.</p> <p>When withdrawing, the machine prioritizes using banknotes of larger values.</p> <ul> <li>For example, if you want to withdraw <code>$300</code> and there are <code>2</code> <code>$50</code> banknotes, <code>1</code> <code>$100</code> banknote, and <code>1</code> <code>$200</code> banknote, then the machine will use the <code>$100</code> and <code>$200</code> banknotes.</li> <li>However, if you try to withdraw <code>$600</code> and there are <code>3</code> <code>$200</code> banknotes and <code>1</code> <code>$500</code> banknote, then the withdraw request will be rejected because the machine will first try to use the <code>$500</code> banknote and then be unable to use banknotes to complete the remaining <code>$100</code>. Note that the machine is not allowed to use the <code>$200</code> banknotes instead of the <code>$500</code> banknote.</li> </ul> <p>Implement the ATM class:</p> <ul> <li><code>ATM()</code> Initializes the ATM object.</li> <li><code>void deposit(int[] banknotesCount)</code> Deposits new banknotes in the order <code>$20</code>, <code>$50</code>, <code>$100</code>, <code>$200</code>, and <code>$500</code>.</li> <li><code>int[] withdraw(int amount)</code> Returns an array of length <code>5</code> of the number of banknotes that will be handed to the user in the order <code>$20</code>, <code>$50</code>, <code>$100</code>, <code>$200</code>, and <code>$500</code>, and update the number of banknotes in the ATM after withdrawing. Returns <code>[-1]</code> if it is not possible (do not withdraw any banknotes in this case).</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"ATM\", \"deposit\", \"withdraw\", \"deposit\", \"withdraw\", \"withdraw\"]\n[[], [[0,0,1,2,1]], [600], [[0,1,0,1,1]], [600], [550]]\nOutput\n[null, null, [0,0,1,0,1], null, [-1], [0,1,0,0,1]]\n\nExplanation\nATM atm = new ATM();\natm.deposit([0,0,1,2,1]); // Deposits 1 $100 banknote, 2 $200 banknotes,\n                          // and 1 $500 banknote.\natm.withdraw(600);        // Returns [0,0,1,0,1]. The machine uses 1 $100 banknote\n                          // and 1 $500 banknote. The banknotes left over in the\n                          // machine are [0,0,0,2,0].\natm.deposit([0,1,0,1,1]); // Deposits 1 $50, $200, and $500 banknote.\n                          // The banknotes in the machine are now [0,1,0,3,1].\natm.withdraw(600);        // Returns [-1]. The machine will try to use a $500 banknote\n                          // and then be unable to complete the remaining $100,\n                          // so the withdraw request will be rejected.\n                          // Since the request is rejected, the number of banknotes\n                          // in the machine is not modified.\natm.withdraw(550);        // Returns [0,1,0,0,1]. The machine uses 1 $50 banknote\n                          // and 1 $500 banknote.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>banknotesCount.length == 5</code></li> <li><code>0 &lt;= banknotesCount[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= amount &lt;= 10<sup>9</sup></code></li> <li>At most <code>5000</code> calls in total will be made to <code>withdraw</code> and <code>deposit</code>.</li> <li>At least one call will be made to each function <code>withdraw</code> and <code>deposit</code>.</li> </ul>"},{"location":"LeetCode_Problems/2242/","title":"2242. Maximum Score of a Node Sequence","text":"Problem <p>There is an undirected graph with <code>n</code> nodes, numbered from <code>0</code> to <code>n - 1</code>.</p> <p>You are given a 0-indexed integer array <code>scores</code> of length <code>n</code> where <code>scores[i]</code> denotes the score of node <code>i</code>. You are also given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an undirected edge connecting nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p> <p>A node sequence is valid if it meets the following conditions:</p> <ul> <li>There is an edge connecting every pair of adjacent nodes in the sequence.</li> <li>No node appears more than once in the sequence.</li> </ul> <p>The score of a node sequence is defined as the sum of the scores of the nodes in the sequence.</p> <p>Return the maximum score of a valid node sequence with a length of <code>4</code>. If no such sequence exists, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]\nOutput: 24\nExplanation: The figure above shows the graph and the chosen node sequence [0,1,2,3].\nThe score of the node sequence is 5 + 2 + 9 + 8 = 24.\nIt can be shown that no other node sequence has a score of more than 24.\nNote that the sequences [3,1,2,0] and [1,0,2,3] are also valid and have a score of 24.\nThe sequence [0,3,2,4] is not valid since no edge connects nodes 0 and 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]\nOutput: -1\nExplanation: The figure above shows the graph.\nThere are no valid node sequences of length 4, so we return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == scores.length</code></li> <li><code>4 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= scores[i] &lt;= 10<sup>8</sup></code></li> <li><code>0 &lt;= edges.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>There are no duplicate edges.</li> </ul>"},{"location":"LeetCode_Problems/2243/","title":"2243. Calculate Digit Sum of a String","text":"Problem <p>You are given a string <code>s</code> consisting of digits and an integer <code>k</code>.</p> <p>A round can be completed if the length of <code>s</code> is greater than <code>k</code>. In one round, do the following:</p> <ol> <li>Divide <code>s</code> into consecutive groups of size <code>k</code> such that the first <code>k</code> characters are in the first group, the next <code>k</code> characters are in the second group, and so on. Note that the size of the last group can be smaller than <code>k</code>.</li> <li>Replace each group of <code>s</code> with a string representing the sum of all its digits. For example, <code>\"346\"</code> is replaced with <code>\"13\"</code> because <code>3 + 4 + 6 = 13</code>.</li> <li>Merge consecutive groups together to form a new string. If the length of the string is greater than <code>k</code>, repeat from step <code>1</code>.</li> </ol> <p>Return <code>s</code> after all rounds have been completed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"11111222223\", k = 3\nOutput: \"135\"\nExplanation: \n- For the first round, we divide s into groups of size 3: \"111\", \"112\", \"222\", and \"23\".\n  \u200b\u200b\u200b\u200b\u200bThen we calculate the digit sum of each group: 1 + 1 + 1 = 3, 1 + 1 + 2 = 4, 2 + 2 + 2 = 6, and 2 + 3 = 5. \n\u00a0 So, s becomes \"3\" + \"4\" + \"6\" + \"5\" = \"3465\" after the first round.\n- For the second round, we divide s into \"346\" and \"5\".\n\u00a0 Then we calculate the digit sum of each group: 3 + 4 + 6 = 13, 5 = 5. \n\u00a0 So, s becomes \"13\" + \"5\" = \"135\" after second round. \nNow, s.length &lt;= k, so we return \"135\" as the answer.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"00000000\", k = 3\nOutput: \"000\"\nExplanation: \nWe divide s into \"000\", \"000\", and \"00\".\nThen we calculate the digit sum of each group: 0 + 0 + 0 = 0, 0 + 0 + 0 = 0, and 0 + 0 = 0. \ns becomes \"0\" + \"0\" + \"0\" = \"000\", whose length is equal to k, so we return \"000\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>2 &lt;= k &lt;= 100</code></li> <li><code>s</code> consists of digits only.</li> </ul>"},{"location":"LeetCode_Problems/2244/","title":"2244. Minimum Rounds to Complete All Tasks","text":"Problem <p>You are given a 0-indexed integer array <code>tasks</code>, where <code>tasks[i]</code> represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level.</p> <p>Return the minimum rounds required to complete all the tasks, or <code>-1</code> if it is not possible to complete all the tasks.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tasks = [2,2,3,3,2,4,4,4,4,4]\nOutput: 4\nExplanation: To complete all the tasks, a possible plan is:\n- In the first round, you complete 3 tasks of difficulty level 2. \n- In the second round, you complete 2 tasks of difficulty level 3. \n- In the third round, you complete 3 tasks of difficulty level 4. \n- In the fourth round, you complete 2 tasks of difficulty level 4.  \nIt can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.\n</pre> <p>Example 2:</p> <pre>\nInput: tasks = [2,3,3]\nOutput: -1\nExplanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= tasks[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2245/","title":"2245. Maximum Trailing Zeros in a Cornered Path","text":"Problem <p>You are given a 2D integer array <code>grid</code> of size <code>m x n</code>, where each cell contains a positive integer.</p> <p>A cornered path is defined as a set of adjacent cells with at most one turn. More specifically, the path should exclusively move either horizontally or vertically up to the turn (if there is one), without returning to a previously visited cell. After the turn, the path will then move exclusively in the alternate direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell.</p> <p>The product of a path is defined as the product of all the values in the path.</p> <p>Return the maximum number of trailing zeros in the product of a cornered path found in <code>grid</code>.</p> <p>Note:</p> <ul> <li>Horizontal movement means moving in either the left or right direction.</li> <li>Vertical movement means moving in either the up or down direction.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]\nOutput: 3\nExplanation: The grid on the left shows a valid cornered path.\nIt has a product of 15 * 20 * 6 * 1 * 10 = 18000 which has 3 trailing zeros.\nIt can be shown that this is the maximum trailing zeros in the product of a cornered path.\n\nThe grid in the middle is not a cornered path as it has more than one turn.\nThe grid on the right is not a cornered path as it requires a return to a previously visited cell.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[4,3,2],[7,6,1],[8,8,8]]\nOutput: 0\nExplanation: The grid is shown in the figure above.\nThere are no cornered paths in the grid that result in a product with a trailing zero.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= grid[i][j] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2246/","title":"2246. Longest Path With Different Adjacent Characters","text":"Problem <p>You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node <code>0</code> consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The tree is represented by a 0-indexed array <code>parent</code> of size <code>n</code>, where <code>parent[i]</code> is the parent of node <code>i</code>. Since node <code>0</code> is the root, <code>parent[0] == -1</code>.</p> <p>You are also given a string <code>s</code> of length <code>n</code>, where <code>s[i]</code> is the character assigned to node <code>i</code>.</p> <p>Return the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: parent = [-1,0,0,1,1,2], s = \"abacbe\"\nOutput: 3\nExplanation: The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -&gt; 1 -&gt; 3. The length of this path is 3, so 3 is returned.\nIt can be proven that there is no longer path that satisfies the conditions. \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: parent = [-1,0,0,0], s = \"aabc\"\nOutput: 3\nExplanation: The longest path where each two adjacent nodes have different characters is the path: 2 -&gt; 0 -&gt; 3. The length of this path is 3, so 3 is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == parent.length == s.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= parent[i] &lt;= n - 1</code> for all <code>i &gt;= 1</code></li> <li><code>parent[0] == -1</code></li> <li><code>parent</code> represents a valid tree.</li> <li><code>s</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2247/","title":"2247. Maximum Cost of Trip With K Highways","text":"Problem"},{"location":"LeetCode_Problems/2248/","title":"2248. Intersection of Multiple Arrays","text":"Problem <p>Given a 2D integer array <code>nums</code> where <code>nums[i]</code> is a non-empty array of distinct positive integers, return the list of integers that are present in each array of <code>nums</code> sorted in ascending order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]\nOutput: [3,4]\nExplanation: \nThe only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4].</pre> <p>Example 2:</p> <pre>\nInput: nums = [[1,2,3],[4,5,6]]\nOutput: []\nExplanation: \nThere does not exist any integer present both in nums[0] and nums[1], so we return an empty list [].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= sum(nums[i].length) &lt;= 1000</code></li> <li><code>1 &lt;= nums[i][j] &lt;= 1000</code></li> <li>All the values of <code>nums[i]</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2249/","title":"2249. Count Lattice Points Inside a Circle","text":"Problem <p>Given a 2D integer array <code>circles</code> where <code>circles[i] = [x<sub>i</sub>, y<sub>i</sub>, r<sub>i</sub>]</code> represents the center <code>(x<sub>i</sub>, y<sub>i</sub>)</code> and radius <code>r<sub>i</sub></code> of the <code>i<sup>th</sup></code> circle drawn on a grid, return the number of lattice points that are present inside at least one circle.</p> <p>Note:</p> <ul> <li>A lattice point is a point with integer coordinates.</li> <li>Points that lie on the circumference of a circle are also considered to be inside it.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: circles = [[2,2,1]]\nOutput: 5\nExplanation:\nThe figure above shows the given circle.\nThe lattice points present inside the circle are (1, 2), (2, 1), (2, 2), (2, 3), and (3, 2) and are shown in green.\nOther points such as (1, 1) and (1, 3), which are shown in red, are not considered inside the circle.\nHence, the number of lattice points present inside at least one circle is 5.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: circles = [[2,2,2],[3,4,1]]\nOutput: 16\nExplanation:\nThe figure above shows the given circles.\nThere are exactly 16 lattice points which are present inside at least one circle. \nSome of them are (0, 2), (2, 0), (2, 4), (3, 2), and (4, 4).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= circles.length &lt;= 200</code></li> <li><code>circles[i].length == 3</code></li> <li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li> <li><code>1 &lt;= r<sub>i</sub> &lt;= min(x<sub>i</sub>, y<sub>i</sub>)</code></li> </ul>"},{"location":"LeetCode_Problems/2250/","title":"2250. Count Number of Rectangles Containing Each Point","text":"Problem <p>You are given a 2D integer array <code>rectangles</code> where <code>rectangles[i] = [l<sub>i</sub>, h<sub>i</sub>]</code> indicates that <code>i<sup>th</sup></code> rectangle has a length of <code>l<sub>i</sub></code> and a height of <code>h<sub>i</sub></code>. You are also given a 2D integer array <code>points</code> where <code>points[j] = [x<sub>j</sub>, y<sub>j</sub>]</code> is a point with coordinates <code>(x<sub>j</sub>, y<sub>j</sub>)</code>.</p> <p>The <code>i<sup>th</sup></code> rectangle has its bottom-left corner point at the coordinates <code>(0, 0)</code> and its top-right corner point at <code>(l<sub>i</sub>, h<sub>i</sub>)</code>.</p> <p>Return an integer array <code>count</code> of length <code>points.length</code> where <code>count[j]</code> is the number of rectangles that contain the <code>j<sup>th</sup></code> point.</p> <p>The <code>i<sup>th</sup></code> rectangle contains the <code>j<sup>th</sup></code> point if <code>0 &lt;= x<sub>j</sub> &lt;= l<sub>i</sub></code> and <code>0 &lt;= y<sub>j</sub> &lt;= h<sub>i</sub></code>. Note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]\nOutput: [2,1]\nExplanation: \nThe first rectangle contains no points.\nThe second rectangle contains only the point (2, 1).\nThe third rectangle contains the points (2, 1) and (1, 4).\nThe number of rectangles that contain the point (2, 1) is 2.\nThe number of rectangles that contain the point (1, 4) is 1.\nTherefore, we return [2, 1].\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]\nOutput: [1,3]\nExplanation:\nThe first rectangle contains only the point (1, 1).\nThe second rectangle contains only the point (1, 1).\nThe third rectangle contains the points (1, 3) and (1, 1).\nThe number of rectangles that contain the point (1, 3) is 1.\nThe number of rectangles that contain the point (1, 1) is 3.\nTherefore, we return [1, 3].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= rectangles.length, points.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>rectangles[i].length == points[j].length == 2</code></li> <li><code>1 &lt;= l<sub>i</sub>, x<sub>j</sub> &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= h<sub>i</sub>, y<sub>j</sub> &lt;= 100</code></li> <li>All the <code>rectangles</code> are unique.</li> <li>All the <code>points</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2251/","title":"2251. Number of Flowers in Full Bloom","text":"Problem <p>You are given a 0-indexed 2D integer array <code>flowers</code>, where <code>flowers[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> means the <code>i<sup>th</sup></code> flower will be in full bloom from <code>start<sub>i</sub></code> to <code>end<sub>i</sub></code> (inclusive). You are also given a 0-indexed integer array <code>people</code> of size <code>n</code>, where <code>people[i]</code> is the time that the <code>i<sup>th</sup></code> person will arrive to see the flowers.</p> <p>Return an integer array <code>answer</code> of size <code>n</code>, where <code>answer[i]</code> is the number of flowers that are in full bloom when the <code>i<sup>th</sup></code> person arrives.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: flowers = [[1,6],[3,7],[9,12],[4,13]], people = [2,3,7,11]\nOutput: [1,2,2,2]\nExplanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: flowers = [[1,10],[3,3]], people = [3,3,2]\nOutput: [2,2,1]\nExplanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= flowers.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>flowers[i].length == 2</code></li> <li><code>1 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= people.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= people[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2252/","title":"2252. Dynamic Pivoting of a Table","text":"Problem"},{"location":"LeetCode_Problems/2253/","title":"2253. Dynamic Unpivoting of a Table","text":"Problem"},{"location":"LeetCode_Problems/2254/","title":"2254. Design Video Sharing Platform","text":"Problem"},{"location":"LeetCode_Problems/2255/","title":"2255. Count Prefixes of a Given String","text":"Problem <p>You are given a string array <code>words</code> and a string <code>s</code>, where <code>words[i]</code> and <code>s</code> comprise only of lowercase English letters.</p> <p>Return the number of strings in <code>words</code> that are a prefix of <code>s</code>.</p> <p>A prefix of a string is a substring that occurs at the beginning of the string. A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"a\",\"b\",\"c\",\"ab\",\"bc\",\"abc\"], s = \"abc\"\nOutput: 3\nExplanation:\nThe strings in words which are a prefix of s = \"abc\" are:\n\"a\", \"ab\", and \"abc\".\nThus the number of strings in words which are a prefix of s is 3.</pre> <p>Example 2:</p> <pre>\nInput: words = [\"a\",\"a\"], s = \"aa\"\nOutput: 2\nExplanation:\nBoth of the strings are a prefix of s. \nNote that the same string can occur multiple times in words, and it should be counted each time.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length, s.length &lt;= 10</code></li> <li><code>words[i]</code> and <code>s</code> consist of lowercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/2256/","title":"2256. Minimum Average Difference","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of length <code>n</code>.</p> <p>The average difference of the index <code>i</code> is the absolute difference between the average of the first <code>i + 1</code> elements of <code>nums</code> and the average of the last <code>n - i - 1</code> elements. Both averages should be rounded down to the nearest integer.</p> <p>Return the index with the minimum average difference. If there are multiple such indices, return the smallest one.</p> <p>Note:</p> <ul> <li>The absolute difference of two numbers is the absolute value of their difference.</li> <li>The average of <code>n</code> elements is the sum of the <code>n</code> elements divided (integer division) by <code>n</code>.</li> <li>The average of <code>0</code> elements is considered to be <code>0</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,5,3,9,5,3]\nOutput: 3\nExplanation:\n- The average difference of index 0 is: |2 / 1 - (5 + 3 + 9 + 5 + 3) / 5| = |2 / 1 - 25 / 5| = |2 - 5| = 3.\n- The average difference of index 1 is: |(2 + 5) / 2 - (3 + 9 + 5 + 3) / 4| = |7 / 2 - 20 / 4| = |3 - 5| = 2.\n- The average difference of index 2 is: |(2 + 5 + 3) / 3 - (9 + 5 + 3) / 3| = |10 / 3 - 17 / 3| = |3 - 5| = 2.\n- The average difference of index 3 is: |(2 + 5 + 3 + 9) / 4 - (5 + 3) / 2| = |19 / 4 - 8 / 2| = |4 - 4| = 0.\n- The average difference of index 4 is: |(2 + 5 + 3 + 9 + 5) / 5 - 3 / 1| = |24 / 5 - 3 / 1| = |4 - 3| = 1.\n- The average difference of index 5 is: |(2 + 5 + 3 + 9 + 5 + 3) / 6 - 0| = |27 / 6 - 0| = |4 - 0| = 4.\nThe average difference of index 3 is the minimum average difference so return 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0]\nOutput: 0\nExplanation:\nThe only index is 0 so return 0.\nThe average difference of index 0 is: |0 / 1 - 0| = |0 - 0| = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2257/","title":"2257. Count Unguarded Cells in the Grid","text":"Problem <p>You are given two integers <code>m</code> and <code>n</code> representing a 0-indexed <code>m x n</code> grid. You are also given two 2D integer arrays <code>guards</code> and <code>walls</code> where <code>guards[i] = [row<sub>i</sub>, col<sub>i</sub>]</code> and <code>walls[j] = [row<sub>j</sub>, col<sub>j</sub>]</code> represent the positions of the <code>i<sup>th</sup></code> guard and <code>j<sup>th</sup></code> wall respectively.</p> <p>A guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. A cell is guarded if there is at least one guard that can see it.</p> <p>Return the number of unoccupied cells that are not guarded.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]\nOutput: 7\nExplanation: The guarded and unguarded cells are shown in red and green respectively in the above diagram.\nThere are a total of 7 unguarded cells, so we return 7.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]\nOutput: 4\nExplanation: The unguarded cells are shown in green in the above diagram.\nThere are a total of 4 unguarded cells, so we return 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>2 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= guards.length, walls.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>2 &lt;= guards.length + walls.length &lt;= m * n</code></li> <li><code>guards[i].length == walls[j].length == 2</code></li> <li><code>0 &lt;= row<sub>i</sub>, row<sub>j</sub> &lt; m</code></li> <li><code>0 &lt;= col<sub>i</sub>, col<sub>j</sub> &lt; n</code></li> <li>All the positions in <code>guards</code> and <code>walls</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2258/","title":"2258. Escape the Spreading Fire","text":"Problem <p>You are given a 0-indexed 2D integer array <code>grid</code> of size <code>m x n</code> which represents a field. Each cell has one of three values:</p> <ul> <li><code>0</code> represents grass,</li> <li><code>1</code> represents fire,</li> <li><code>2</code> represents a wall that you and fire cannot pass through.</li> </ul> <p>You are situated in the top-left cell, <code>(0, 0)</code>, and you want to travel to the safehouse at the bottom-right cell, <code>(m - 1, n - 1)</code>. Every minute, you may move to an adjacent grass cell. After your move, every fire cell will spread to all adjacent cells that are not walls.</p> <p>Return the maximum number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse. If this is impossible, return <code>-1</code>. If you can always reach the safehouse regardless of the minutes stayed, return <code>10<sup>9</sup></code>.</p> <p>Note that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse.</p> <p>A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]\nOutput: 3\nExplanation: The figure above shows the scenario where you stay in the initial position for 3 minutes.\nYou will still be able to safely reach the safehouse.\nStaying for more than 3 minutes will not allow you to safely reach the safehouse.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]\nOutput: -1\nExplanation: The figure above shows the scenario where you immediately move towards the safehouse.\nFire will spread to any cell you move towards and it is impossible to safely reach the safehouse.\nThus, -1 is returned.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[0,0,0],[2,2,0],[1,2,0]]\nOutput: 1000000000\nExplanation: The figure above shows the initial grid.\nNotice that the fire is contained by walls and you will always be able to safely reach the safehouse.\nThus, 10<sup>9</sup> is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>2 &lt;= m, n &lt;= 300</code></li> <li><code>4 &lt;= m * n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>grid[i][j]</code> is either <code>0</code>, <code>1</code>, or <code>2</code>.</li> <li><code>grid[0][0] == grid[m - 1][n - 1] == 0</code></li> </ul>"},{"location":"LeetCode_Problems/2259/","title":"2259. Remove Digit From Number to Maximize Result","text":"Problem <p>You are given a string <code>number</code> representing a positive integer and a character <code>digit</code>.</p> <p>Return the resulting string after removing exactly one occurrence of <code>digit</code> from <code>number</code> such that the value of the resulting string in decimal form is maximized. The test cases are generated such that <code>digit</code> occurs at least once in <code>number</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: number = \"123\", digit = \"3\"\nOutput: \"12\"\nExplanation: There is only one '3' in \"123\". After removing '3', the result is \"12\".\n</pre> <p>Example 2:</p> <pre>\nInput: number = \"1231\", digit = \"1\"\nOutput: \"231\"\nExplanation: We can remove the first '1' to get \"231\" or remove the second '1' to get \"123\".\nSince 231 &gt; 123, we return \"231\".\n</pre> <p>Example 3:</p> <pre>\nInput: number = \"551\", digit = \"5\"\nOutput: \"51\"\nExplanation: We can remove either the first or second '5' from \"551\".\nBoth result in the string \"51\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= number.length &lt;= 100</code></li> <li><code>number</code> consists of digits from <code>'1'</code> to <code>'9'</code>.</li> <li><code>digit</code> is a digit from <code>'1'</code> to <code>'9'</code>.</li> <li><code>digit</code> occurs at least once in <code>number</code>.</li> </ul>"},{"location":"LeetCode_Problems/2260/","title":"2260. Minimum Consecutive Cards to Pick Up","text":"Problem <p>You are given an integer array <code>cards</code> where <code>cards[i]</code> represents the value of the <code>i<sup>th</sup></code> card. A pair of cards are matching if the cards have the same value.</p> <p>Return the minimum number of consecutive cards you have to pick up to have a pair of matching cards among the picked cards. If it is impossible to have matching cards, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: cards = [3,4,2,3,4,7]\nOutput: 4\nExplanation: We can pick up the cards [3,4,2,3] which contain a matching pair of cards with value 3. Note that picking up the cards [4,2,3,4] is also optimal.\n</pre> <p>Example 2:</p> <pre>\nInput: cards = [1,0,5,3]\nOutput: -1\nExplanation: There is no way to pick up a set of consecutive cards that contain a pair of matching cards.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= cards.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= cards[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2261/","title":"2261. K Divisible Elements Subarrays","text":"Problem <p>Given an integer array <code>nums</code> and two integers <code>k</code> and <code>p</code>, return the number of distinct subarrays, which have at most <code>k</code> elements that are divisible by <code>p</code>.</p> <p>Two arrays <code>nums1</code> and <code>nums2</code> are said to be distinct if:</p> <ul> <li>They are of different lengths, or</li> <li>There exists at least one index <code>i</code> where <code>nums1[i] != nums2[i]</code>.</li> </ul> <p>A subarray is defined as a non-empty contiguous sequence of elements in an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,3,2,2], k = 2, p = 2\nOutput: 11\nExplanation:\nThe elements at indices 0, 3, and 4 are divisible by p = 2.\nThe 11 distinct subarrays which have at most k = 2 elements divisible by 2 are:\n[2], [2,3], [2,3,3], [2,3,3,2], [3], [3,3], [3,3,2], [3,3,2,2], [3,2], [3,2,2], and [2,2].\nNote that the subarrays [2] and [3] occur more than once in nums, but they should each be counted only once.\nThe subarray [2,3,3,2,2] should not be counted because it has 3 elements that are divisible by 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4], k = 4, p = 1\nOutput: 10\nExplanation:\nAll element of nums are divisible by p = 1.\nAlso, every subarray of nums will have at most 4 elements that are divisible by 1.\nSince all subarrays are distinct, the total number of subarrays satisfying all the constraints is 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i], p &lt;= 200</code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> </ul> <p> </p> <p>Follow up:</p> <p>Can you solve this problem in O(n<sup>2</sup>) time complexity?</p>"},{"location":"LeetCode_Problems/2262/","title":"2262. Total Appeal of A String","text":"Problem <p>The appeal of a string is the number of distinct characters found in the string.</p> <ul> <li>For example, the appeal of <code>\"abbca\"</code> is <code>3</code> because it has <code>3</code> distinct characters: <code>'a'</code>, <code>'b'</code>, and <code>'c'</code>.</li> </ul> <p>Given a string <code>s</code>, return the total appeal of all of its substrings.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abbca\"\nOutput: 28\nExplanation: The following are the substrings of \"abbca\":\n- Substrings of length 1: \"a\", \"b\", \"b\", \"c\", \"a\" have an appeal of 1, 1, 1, 1, and 1 respectively. The sum is 5.\n- Substrings of length 2: \"ab\", \"bb\", \"bc\", \"ca\" have an appeal of 2, 1, 2, and 2 respectively. The sum is 7.\n- Substrings of length 3: \"abb\", \"bbc\", \"bca\" have an appeal of 2, 2, and 3 respectively. The sum is 7.\n- Substrings of length 4: \"abbc\", \"bbca\" have an appeal of 3 and 3 respectively. The sum is 6.\n- Substrings of length 5: \"abbca\" has an appeal of 3. The sum is 3.\nThe total sum is 5 + 7 + 7 + 6 + 3 = 28.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"code\"\nOutput: 20\nExplanation: The following are the substrings of \"code\":\n- Substrings of length 1: \"c\", \"o\", \"d\", \"e\" have an appeal of 1, 1, 1, and 1 respectively. The sum is 4.\n- Substrings of length 2: \"co\", \"od\", \"de\" have an appeal of 2, 2, and 2 respectively. The sum is 6.\n- Substrings of length 3: \"cod\", \"ode\" have an appeal of 3 and 3 respectively. The sum is 6.\n- Substrings of length 4: \"code\" has an appeal of 4. The sum is 4.\nThe total sum is 4 + 6 + 6 + 4 = 20.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2263/","title":"2263. Make Array Non-decreasing or Non-increasing","text":"Problem"},{"location":"LeetCode_Problems/2264/","title":"2264. Largest 3-Same-Digit Number in String","text":"Problem <p>You are given a string <code>num</code> representing a large integer. An integer is good if it meets the following conditions:</p> <ul> <li>It is a substring of <code>num</code> with length <code>3</code>.</li> <li>It consists of only one unique digit.</li> </ul> <p>Return the maximum good integer as a string or an empty string <code>\"\"</code> if no such integer exists.</p> <p>Note:</p> <ul> <li>A substring is a contiguous sequence of characters within a string.</li> <li>There may be leading zeroes in <code>num</code> or a good integer.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"6777133339\"\nOutput: \"777\"\nExplanation: There are two distinct good integers: \"777\" and \"333\".\n\"777\" is the largest, so we return \"777\".\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"2300019\"\nOutput: \"000\"\nExplanation: \"000\" is the only good integer.\n</pre> <p>Example 3:</p> <pre>\nInput: num = \"42352338\"\nOutput: \"\"\nExplanation: No substring of length 3 consists of only one unique digit. Therefore, there are no good integers.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= num.length &lt;= 1000</code></li> <li><code>num</code> only consists of digits.</li> </ul>"},{"location":"LeetCode_Problems/2265/","title":"2265. Count Nodes Equal to Average of Subtree","text":"Problem <p>Given the <code>root</code> of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree.</p> <p>Note:</p> <ul> <li>The average of <code>n</code> elements is the sum of the <code>n</code> elements divided by <code>n</code> and rounded down to the nearest integer.</li> <li>A subtree of <code>root</code> is a tree consisting of <code>root</code> and all of its descendants.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [4,8,5,0,1,null,6]\nOutput: 5\nExplanation: \nFor the node with value 4: The average of its subtree is (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4.\nFor the node with value 5: The average of its subtree is (5 + 6) / 2 = 11 / 2 = 5.\nFor the node with value 0: The average of its subtree is 0 / 1 = 0.\nFor the node with value 1: The average of its subtree is 1 / 1 = 1.\nFor the node with value 6: The average of its subtree is 6 / 1 = 6.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1]\nOutput: 1\nExplanation: For the node with value 1: The average of its subtree is 1 / 1 = 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2266/","title":"2266. Count Number of Texts","text":"Problem <p>Alice is texting Bob using her phone. The mapping of digits to letters is shown in the figure below.</p> <p></p> <p>In order to add a letter, Alice has to press the key of the corresponding digit <code>i</code> times, where <code>i</code> is the position of the letter in the key.</p> <ul> <li>For example, to add the letter <code>'s'</code>, Alice has to press <code>'7'</code> four times. Similarly, to add the letter <code>'k'</code>, Alice has to press <code>'5'</code> twice.</li> <li>Note that the digits <code>'0'</code> and <code>'1'</code> do not map to any letters, so Alice does not use them.</li> </ul> <p>However, due to an error in transmission, Bob did not receive Alice's text message but received a string of pressed keys instead.</p> <ul> <li>For example, when Alice sent the message <code>\"bob\"</code>, Bob received the string <code>\"2266622\"</code>.</li> </ul> <p>Given a string <code>pressedKeys</code> representing the string received by Bob, return the total number of possible text messages Alice could have sent.</p> <p>Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: pressedKeys = \"22233\"\nOutput: 8\nExplanation:\nThe possible text messages Alice could have sent are:\n\"aaadd\", \"abdd\", \"badd\", \"cdd\", \"aaae\", \"abe\", \"bae\", and \"ce\".\nSince there are 8 possible messages, we return 8.\n</pre> <p>Example 2:</p> <pre>\nInput: pressedKeys = \"222222222222222222222222222222222222\"\nOutput: 82876089\nExplanation:\nThere are 2082876103 possible text messages Alice could have sent.\nSince we need to return the answer modulo 10<sup>9</sup> + 7, we return 2082876103 % (10<sup>9</sup> + 7) = 82876089.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= pressedKeys.length &lt;= 10<sup>5</sup></code></li> <li><code>pressedKeys</code> only consists of digits from <code>'2'</code> - <code>'9'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2267/","title":"2267.  Check if There Is a Valid Parentheses String Path","text":"Problem <p>A parentheses string is a non-empty string consisting only of <code>'('</code> and <code>')'</code>. It is valid if any of the following conditions is true:</p> <ul> <li>It is <code>()</code>.</li> <li>It can be written as <code>AB</code> (<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid parentheses strings.</li> <li>It can be written as <code>(A)</code>, where <code>A</code> is a valid parentheses string.</li> </ul> <p>You are given an <code>m x n</code> matrix of parentheses <code>grid</code>. A valid parentheses string path in the grid is a path satisfying all of the following conditions:</p> <ul> <li>The path starts from the upper left cell <code>(0, 0)</code>.</li> <li>The path ends at the bottom-right cell <code>(m - 1, n - 1)</code>.</li> <li>The path only ever moves down or right.</li> <li>The resulting parentheses string formed by the path is valid.</li> </ul> <p>Return <code>true</code> if there exists a valid parentheses string path in the grid. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[\"(\",\"(\",\"(\"],[\")\",\"(\",\")\"],[\"(\",\"(\",\")\"],[\"(\",\"(\",\")\"]]\nOutput: true\nExplanation: The above diagram shows two possible paths that form valid parentheses strings.\nThe first path shown results in the valid parentheses string \"()(())\".\nThe second path shown results in the valid parentheses string \"((()))\".\nNote that there may be other valid parentheses string paths.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[\")\",\")\"],[\"(\",\"(\"]]\nOutput: false\nExplanation: The two possible paths form the parentheses strings \"))(\" and \")((\". Since neither of them are valid parentheses strings, we return false.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100</code></li> <li><code>grid[i][j]</code> is either <code>'('</code> or <code>')'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2268/","title":"2268. Minimum Number of Keypresses","text":"Problem"},{"location":"LeetCode_Problems/2269/","title":"2269. Find the K-Beauty of a Number","text":"Problem <p>The k-beauty of an integer <code>num</code> is defined as the number of substrings of <code>num</code> when it is read as a string that meet the following conditions:</p> <ul> <li>It has a length of <code>k</code>.</li> <li>It is a divisor of <code>num</code>.</li> </ul> <p>Given integers <code>num</code> and <code>k</code>, return the k-beauty of <code>num</code>.</p> <p>Note:</p> <ul> <li>Leading zeros are allowed.</li> <li><code>0</code> is not a divisor of any value.</li> </ul> <p>A substring is a contiguous sequence of characters in a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 240, k = 2\nOutput: 2\nExplanation: The following are the substrings of num of length k:\n- \"24\" from \"240\": 24 is a divisor of 240.\n- \"40\" from \"240\": 40 is a divisor of 240.\nTherefore, the k-beauty is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 430043, k = 2\nOutput: 2\nExplanation: The following are the substrings of num of length k:\n- \"43\" from \"430043\": 43 is a divisor of 430043.\n- \"30\" from \"430043\": 30 is not a divisor of 430043.\n- \"00\" from \"430043\": 0 is not a divisor of 430043.\n- \"04\" from \"430043\": 4 is not a divisor of 430043.\n- \"43\" from \"430043\": 43 is a divisor of 430043.\nTherefore, the k-beauty is 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= num.length</code> (taking <code>num</code> as a string)</li> </ul>"},{"location":"LeetCode_Problems/2270/","title":"2270. Number of Ways to Split Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of length <code>n</code>.</p> <p><code>nums</code> contains a valid split at index <code>i</code> if the following are true:</p> <ul> <li>The sum of the first <code>i + 1</code> elements is greater than or equal to the sum of the last <code>n - i - 1</code> elements.</li> <li>There is at least one element to the right of <code>i</code>. That is, <code>0 &lt;= i &lt; n - 1</code>.</li> </ul> <p>Return the number of valid splits in <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [10,4,-8,7]\nOutput: 2\nExplanation: \nThere are three ways of splitting nums into two non-empty parts:\n- Split nums at index 0. Then, the first part is [10], and its sum is 10. The second part is [4,-8,7], and its sum is 3. Since 10 &gt;= 3, i = 0 is a valid split.\n- Split nums at index 1. Then, the first part is [10,4], and its sum is 14. The second part is [-8,7], and its sum is -1. Since 14 &gt;= -1, i = 1 is a valid split.\n- Split nums at index 2. Then, the first part is [10,4,-8], and its sum is 6. The second part is [7], and its sum is 7. Since 6 &lt; 7, i = 2 is not a valid split.\nThus, the number of valid splits in nums is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,1,0]\nOutput: 2\nExplanation: \nThere are two valid splits in nums:\n- Split nums at index 1. Then, the first part is [2,3], and its sum is 5. The second part is [1,0], and its sum is 1. Since 5 &gt;= 1, i = 1 is a valid split. \n- Split nums at index 2. Then, the first part is [2,3,1], and its sum is 6. The second part is [0], and its sum is 0. Since 6 &gt;= 0, i = 2 is a valid split.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2271/","title":"2271. Maximum White Tiles Covered by a Carpet","text":"Problem <p>You are given a 2D integer array <code>tiles</code> where <code>tiles[i] = [l<sub>i</sub>, r<sub>i</sub>]</code> represents that every tile <code>j</code> in the range <code>l<sub>i</sub> &lt;= j &lt;= r<sub>i</sub></code> is colored white.</p> <p>You are also given an integer <code>carpetLen</code>, the length of a single carpet that can be placed anywhere.</p> <p>Return the maximum number of white tiles that can be covered by the carpet.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetLen = 10\nOutput: 9\nExplanation: Place the carpet starting on tile 10. \nIt covers 9 white tiles, so we return 9.\nNote that there may be other places where the carpet covers 9 white tiles.\nIt can be shown that the carpet cannot cover more than 9 white tiles.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: tiles = [[10,11],[1,1]], carpetLen = 2\nOutput: 2\nExplanation: Place the carpet starting on tile 10. \nIt covers 2 white tiles, so we return 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= tiles.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>tiles[i].length == 2</code></li> <li><code>1 &lt;= l<sub>i</sub> &lt;= r<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= carpetLen &lt;= 10<sup>9</sup></code></li> <li>The <code>tiles</code> are non-overlapping.</li> </ul>"},{"location":"LeetCode_Problems/2272/","title":"2272. Substring With Largest Variance","text":"Problem <p>The variance of a string is defined as the largest difference between the number of occurrences of any <code>2</code> characters present in the string. Note the two characters may or may not be the same.</p> <p>Given a string <code>s</code> consisting of lowercase English letters only, return the largest variance possible among all substrings of <code>s</code>.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aababbb\"\nOutput: 3\nExplanation:\nAll possible variances along with their respective substrings are listed below:\n- Variance 0 for substrings \"a\", \"aa\", \"ab\", \"abab\", \"aababb\", \"ba\", \"b\", \"bb\", and \"bbb\".\n- Variance 1 for substrings \"aab\", \"aba\", \"abb\", \"aabab\", \"ababb\", \"aababbb\", and \"bab\".\n- Variance 2 for substrings \"aaba\", \"ababbb\", \"abbb\", and \"babb\".\n- Variance 3 for substring \"babbb\".\nSince the largest possible variance is 3, we return it.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcde\"\nOutput: 0\nExplanation:\nNo letter occurs more than once in s, so the variance of every substring is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2273/","title":"2273. Find Resultant Array After Removing Anagrams","text":"Problem <p>You are given a 0-indexed string array <code>words</code>, where <code>words[i]</code> consists of lowercase English letters.</p> <p>In one operation, select any index <code>i</code> such that <code>0 &lt; i &lt; words.length</code> and <code>words[i - 1]</code> and <code>words[i]</code> are anagrams, and delete <code>words[i]</code> from <code>words</code>. Keep performing this operation as long as you can select an index that satisfies the conditions.</p> <p>Return <code>words</code> after performing all operations. It can be shown that selecting the indices for each operation in any arbitrary order will lead to the same result.</p> <p>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, <code>\"dacb\"</code> is an anagram of <code>\"abdc\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"abba\",\"baba\",\"bbaa\",\"cd\",\"cd\"]\nOutput: [\"abba\",\"cd\"]\nExplanation:\nOne of the ways we can obtain the resultant array is by using the following operations:\n- Since words[2] = \"bbaa\" and words[1] = \"baba\" are anagrams, we choose index 2 and delete words[2].\n  Now words = [\"abba\",\"baba\",\"cd\",\"cd\"].\n- Since words[1] = \"baba\" and words[0] = \"abba\" are anagrams, we choose index 1 and delete words[1].\n  Now words = [\"abba\",\"cd\",\"cd\"].\n- Since words[2] = \"cd\" and words[1] = \"cd\" are anagrams, we choose index 2 and delete words[2].\n  Now words = [\"abba\",\"cd\"].\nWe can no longer perform any operations, so [\"abba\",\"cd\"] is the final answer.</pre> <p>Example 2:</p> <pre>\nInput: words = [\"a\",\"b\",\"c\",\"d\",\"e\"]\nOutput: [\"a\",\"b\",\"c\",\"d\",\"e\"]\nExplanation:\nNo two adjacent strings in words are anagrams of each other, so no operations are performed.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2274/","title":"2274. Maximum Consecutive Floors Without Special Floors","text":"Problem <p>Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be special floors, used for relaxation only.</p> <p>You are given two integers <code>bottom</code> and <code>top</code>, which denote that Alice has rented all the floors from <code>bottom</code> to <code>top</code> (inclusive). You are also given the integer array <code>special</code>, where <code>special[i]</code> denotes a special floor that Alice has designated for relaxation.</p> <p>Return the maximum number of consecutive floors without a special floor.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: bottom = 2, top = 9, special = [4,6]\nOutput: 3\nExplanation: The following are the ranges (inclusive) of consecutive floors without a special floor:\n- (2, 3) with a total amount of 2 floors.\n- (5, 5) with a total amount of 1 floor.\n- (7, 9) with a total amount of 3 floors.\nTherefore, we return the maximum number which is 3 floors.\n</pre> <p>Example 2:</p> <pre>\nInput: bottom = 6, top = 8, special = [7,6,8]\nOutput: 0\nExplanation: Every floor rented is a special floor, so we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= special.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= bottom &lt;= special[i] &lt;= top &lt;= 10<sup>9</sup></code></li> <li>All the values of <code>special</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2275/","title":"2275. Largest Combination With Bitwise AND Greater Than Zero","text":"Problem <p>The bitwise AND of an array <code>nums</code> is the bitwise AND of all integers in <code>nums</code>.</p> <ul> <li>For example, for <code>nums = [1, 5, 3]</code>, the bitwise AND is equal to <code>1 &amp; 5 &amp; 3 = 1</code>.</li> <li>Also, for <code>nums = [7]</code>, the bitwise AND is <code>7</code>.</li> </ul> <p>You are given an array of positive integers <code>candidates</code>. Evaluate the bitwise AND of every combination of numbers of <code>candidates</code>. Each number in <code>candidates</code> may only be used once in each combination.</p> <p>Return the size of the largest combination of <code>candidates</code> with a bitwise AND greater than <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: candidates = [16,17,71,62,12,24,14]\nOutput: 4\nExplanation: The combination [16,17,62,24] has a bitwise AND of 16 &amp; 17 &amp; 62 &amp; 24 = 16 &gt; 0.\nThe size of the combination is 4.\nIt can be shown that no combination with a size greater than 4 has a bitwise AND greater than 0.\nNote that more than one combination may have the largest size.\nFor example, the combination [62,12,24,14] has a bitwise AND of 62 &amp; 12 &amp; 24 &amp; 14 = 8 &gt; 0.\n</pre> <p>Example 2:</p> <pre>\nInput: candidates = [8,8]\nOutput: 2\nExplanation: The largest combination [8,8] has a bitwise AND of 8 &amp; 8 = 8 &gt; 0.\nThe size of the combination is 2, so we return 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= candidates.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= candidates[i] &lt;= 10<sup>7</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2276/","title":"2276. Count Integers in Intervals","text":"Problem <p>Given an empty set of intervals, implement a data structure that can:</p> <ul> <li>Add an interval to the set of intervals.</li> <li>Count the number of integers that are present in at least one interval.</li> </ul> <p>Implement the <code>CountIntervals</code> class:</p> <ul> <li><code>CountIntervals()</code> Initializes the object with an empty set of intervals.</li> <li><code>void add(int left, int right)</code> Adds the interval <code>[left, right]</code> to the set of intervals.</li> <li><code>int count()</code> Returns the number of integers that are present in at least one interval.</li> </ul> <p>Note that an interval <code>[left, right]</code> denotes all the integers <code>x</code> where <code>left &lt;= x &lt;= right</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"CountIntervals\", \"add\", \"add\", \"count\", \"add\", \"count\"]\n[[], [2, 3], [7, 10], [], [5, 8], []]\nOutput\n[null, null, null, 6, null, 8]\n\nExplanation\nCountIntervals countIntervals = new CountIntervals(); // initialize the object with an empty set of intervals. \ncountIntervals.add(2, 3);  // add [2, 3] to the set of intervals.\ncountIntervals.add(7, 10); // add [7, 10] to the set of intervals.\ncountIntervals.count();    // return 6\n                           // the integers 2 and 3 are present in the interval [2, 3].\n                           // the integers 7, 8, 9, and 10 are present in the interval [7, 10].\ncountIntervals.add(5, 8);  // add [5, 8] to the set of intervals.\ncountIntervals.count();    // return 8\n                           // the integers 2 and 3 are present in the interval [2, 3].\n                           // the integers 5 and 6 are present in the interval [5, 8].\n                           // the integers 7 and 8 are present in the intervals [5, 8] and [7, 10].\n                           // the integers 9 and 10 are present in the interval [7, 10].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= left &lt;= right &lt;= 10<sup>9</sup></code></li> <li>At most <code>10<sup>5</sup></code> calls in total will be made to <code>add</code> and <code>count</code>.</li> <li>At least one call will be made to <code>count</code>.</li> </ul>"},{"location":"LeetCode_Problems/2277/","title":"2277. Closest Node to Path in Tree","text":"Problem"},{"location":"LeetCode_Problems/2278/","title":"2278. Percentage of Letter in String","text":"Problem <p>Given a string <code>s</code> and a character <code>letter</code>, return the percentage of characters in <code>s</code> that equal <code>letter</code> rounded down to the nearest whole percent.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"foobar\", letter = \"o\"\nOutput: 33\nExplanation:\nThe percentage of characters in s that equal the letter 'o' is 2 / 6 * 100% = 33% when rounded down, so we return 33.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"jjjj\", letter = \"k\"\nOutput: 0\nExplanation:\nThe percentage of characters in s that equal the letter 'k' is 0%, so we return 0.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of lowercase English letters.</li> <li><code>letter</code> is a lowercase English letter.</li> </ul>"},{"location":"LeetCode_Problems/2279/","title":"2279. Maximum Bags With Full Capacity of Rocks","text":"Problem <p>You have <code>n</code> bags numbered from <code>0</code> to <code>n - 1</code>. You are given two 0-indexed integer arrays <code>capacity</code> and <code>rocks</code>. The <code>i<sup>th</sup></code> bag can hold a maximum of <code>capacity[i]</code> rocks and currently contains <code>rocks[i]</code> rocks. You are also given an integer <code>additionalRocks</code>, the number of additional rocks you can place in any of the bags.</p> <p>Return the maximum number of bags that could have full capacity after placing the additional rocks in some bags.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2\nOutput: 3\nExplanation:\nPlace 1 rock in bag 0 and 1 rock in bag 1.\nThe number of rocks in each bag are now [2,3,4,4].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that there may be other ways of placing the rocks that result in an answer of 3.\n</pre> <p>Example 2:</p> <pre>\nInput: capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100\nOutput: 3\nExplanation:\nPlace 8 rocks in bag 0 and 2 rocks in bag 2.\nThe number of rocks in each bag are now [10,2,2].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that we did not use all of the additional rocks.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == capacity.length == rocks.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= capacity[i] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= rocks[i] &lt;= capacity[i]</code></li> <li><code>1 &lt;= additionalRocks &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2280/","title":"2280. Minimum Lines to Represent a Line Chart","text":"Problem <p>You are given a 2D integer array <code>stockPrices</code> where <code>stockPrices[i] = [day<sub>i</sub>, price<sub>i</sub>]</code> indicates the price of the stock on day <code>day<sub>i</sub></code> is <code>price<sub>i</sub></code>. A line chart is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. One such example is shown below:</p> <p></p> <p>Return the minimum number of lines needed to represent the line chart.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]\nOutput: 3\nExplanation:\nThe diagram above represents the input, with the X-axis representing the day and Y-axis representing the price.\nThe following 3 lines can be drawn to represent the line chart:\n- Line 1 (in red) from (1,7) to (4,4) passing through (1,7), (2,6), (3,5), and (4,4).\n- Line 2 (in blue) from (4,4) to (5,4).\n- Line 3 (in green) from (5,4) to (8,1) passing through (5,4), (6,3), (7,2), and (8,1).\nIt can be shown that it is not possible to represent the line chart using less than 3 lines.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: stockPrices = [[3,4],[1,2],[7,8],[2,3]]\nOutput: 1\nExplanation:\nAs shown in the diagram above, the line chart can be represented with a single line.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= stockPrices.length &lt;= 10<sup>5</sup></code></li> <li><code>stockPrices[i].length == 2</code></li> <li><code>1 &lt;= day<sub>i</sub>, price<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li>All <code>day<sub>i</sub></code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/2281/","title":"2281. Sum of Total Strength of Wizards","text":"Problem <p>As the ruler of a kingdom, you have an army of wizards at your command.</p> <p>You are given a 0-indexed integer array <code>strength</code>, where <code>strength[i]</code> denotes the strength of the <code>i<sup>th</sup></code> wizard. For a contiguous group of wizards (i.e. the wizards' strengths form a subarray of <code>strength</code>), the total strength is defined as the product of the following two values:</p> <ul> <li>The strength of the weakest wizard in the group.</li> <li>The total of all the individual strengths of the wizards in the group.</li> </ul> <p>Return the sum of the total strengths of all contiguous groups of wizards. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: strength = [1,3,1,2]\nOutput: 44\nExplanation: The following are all the contiguous groups of wizards:\n- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [3] from [1,3,1,2] has a total strength of min([3]) * sum([3]) = 3 * 3 = 9\n- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1\n- [2] from [1,3,1,2] has a total strength of min([2]) * sum([2]) = 2 * 2 = 4\n- [1,3] from [1,3,1,2] has a total strength of min([1,3]) * sum([1,3]) = 1 * 4 = 4\n- [3,1] from [1,3,1,2] has a total strength of min([3,1]) * sum([3,1]) = 1 * 4 = 4\n- [1,2] from [1,3,1,2] has a total strength of min([1,2]) * sum([1,2]) = 1 * 3 = 3\n- [1,3,1] from [1,3,1,2] has a total strength of min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5\n- [3,1,2] from [1,3,1,2] has a total strength of min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6\n- [1,3,1,2] from [1,3,1,2] has a total strength of min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7\nThe sum of all the total strengths is 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44.\n</pre> <p>Example 2:</p> <pre>\nInput: strength = [5,4,6]\nOutput: 213\nExplanation: The following are all the contiguous groups of wizards: \n- [5] from [5,4,6] has a total strength of min([5]) * sum([5]) = 5 * 5 = 25\n- [4] from [5,4,6] has a total strength of min([4]) * sum([4]) = 4 * 4 = 16\n- [6] from [5,4,6] has a total strength of min([6]) * sum([6]) = 6 * 6 = 36\n- [5,4] from [5,4,6] has a total strength of min([5,4]) * sum([5,4]) = 4 * 9 = 36\n- [4,6] from [5,4,6] has a total strength of min([4,6]) * sum([4,6]) = 4 * 10 = 40\n- [5,4,6] from [5,4,6] has a total strength of min([5,4,6]) * sum([5,4,6]) = 4 * 15 = 60\nThe sum of all the total strengths is 25 + 16 + 36 + 36 + 40 + 60 = 213.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= strength.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= strength[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2282/","title":"2282. Number of People That Can Be Seen in a Grid","text":"Problem"},{"location":"LeetCode_Problems/2283/","title":"2283. Check if Number Has Equal Digit Count and Digit Value","text":"Problem <p>You are given a 0-indexed string <code>num</code> of length <code>n</code> consisting of digits.</p> <p>Return <code>true</code> if for every index <code>i</code> in the range <code>0 &lt;= i &lt; n</code>, the digit <code>i</code> occurs <code>num[i]</code> times in <code>num</code>, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"1210\"\nOutput: true\nExplanation:\nnum[0] = '1'. The digit 0 occurs once in num.\nnum[1] = '2'. The digit 1 occurs twice in num.\nnum[2] = '1'. The digit 2 occurs once in num.\nnum[3] = '0'. The digit 3 occurs zero times in num.\nThe condition holds true for every index in \"1210\", so return true.\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"030\"\nOutput: false\nExplanation:\nnum[0] = '0'. The digit 0 should occur zero times, but actually occurs twice in num.\nnum[1] = '3'. The digit 1 should occur three times, but actually occurs zero times in num.\nnum[2] = '0'. The digit 2 occurs zero times in num.\nThe indices 0 and 1 both violate the condition, so return false.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == num.length</code></li> <li><code>1 &lt;= n &lt;= 10</code></li> <li><code>num</code> consists of digits.</li> </ul>"},{"location":"LeetCode_Problems/2284/","title":"2284. Sender With Largest Word Count","text":"Problem <p>You have a chat log of <code>n</code> messages. You are given two string arrays <code>messages</code> and <code>senders</code> where <code>messages[i]</code> is a message sent by <code>senders[i]</code>.</p> <p>A message is list of words that are separated by a single space with no leading or trailing spaces. The word count of a sender is the total number of words sent by the sender. Note that a sender may send more than one message.</p> <p>Return the sender with the largest word count. If there is more than one sender with the largest word count, return the one with the lexicographically largest name.</p> <p>Note:</p> <ul> <li>Uppercase letters come before lowercase letters in lexicographical order.</li> <li><code>\"Alice\"</code> and <code>\"alice\"</code> are distinct.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: messages = [\"Hello userTwooo\",\"Hi userThree\",\"Wonderful day Alice\",\"Nice day userThree\"], senders = [\"Alice\",\"userTwo\",\"userThree\",\"Alice\"]\nOutput: \"Alice\"\nExplanation: Alice sends a total of 2 + 3 = 5 words.\nuserTwo sends a total of 2 words.\nuserThree sends a total of 3 words.\nSince Alice has the largest word count, we return \"Alice\".\n</pre> <p>Example 2:</p> <pre>\nInput: messages = [\"How is leetcode for everyone\",\"Leetcode is useful for practice\"], senders = [\"Bob\",\"Charlie\"]\nOutput: \"Charlie\"\nExplanation: Bob sends a total of 5 words.\nCharlie sends a total of 5 words.\nSince there is a tie for the largest word count, we return the sender with the lexicographically larger name, Charlie.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == messages.length == senders.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= messages[i].length &lt;= 100</code></li> <li><code>1 &lt;= senders[i].length &lt;= 10</code></li> <li><code>messages[i]</code> consists of uppercase and lowercase English letters and <code>' '</code>.</li> <li>All the words in <code>messages[i]</code> are separated by a single space.</li> <li><code>messages[i]</code> does not have leading or trailing spaces.</li> <li><code>senders[i]</code> consists of uppercase and lowercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/2285/","title":"2285. Maximum Total Importance of Roads","text":"Problem <p>You are given an integer <code>n</code> denoting the number of cities in a country. The cities are numbered from <code>0</code> to <code>n - 1</code>.</p> <p>You are also given a 2D integer array <code>roads</code> where <code>roads[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists a bidirectional road connecting cities <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p> <p>You need to assign each city with an integer value from <code>1</code> to <code>n</code>, where each value can only be used once. The importance of a road is then defined as the sum of the values of the two cities it connects.</p> <p>Return the maximum total importance of all roads possible after assigning the values optimally.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]\nOutput: 43\nExplanation: The figure above shows the country and the assigned values of [2,4,5,3,1].\n- The road (0,1) has an importance of 2 + 4 = 6.\n- The road (1,2) has an importance of 4 + 5 = 9.\n- The road (2,3) has an importance of 5 + 3 = 8.\n- The road (0,2) has an importance of 2 + 5 = 7.\n- The road (1,3) has an importance of 4 + 3 = 7.\n- The road (2,4) has an importance of 5 + 1 = 6.\nThe total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43.\nIt can be shown that we cannot obtain a greater total importance than 43.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 5, roads = [[0,3],[2,4],[1,3]]\nOutput: 20\nExplanation: The figure above shows the country and the assigned values of [4,3,2,5,1].\n- The road (0,3) has an importance of 4 + 5 = 9.\n- The road (2,4) has an importance of 2 + 1 = 3.\n- The road (1,3) has an importance of 3 + 5 = 8.\nThe total importance of all roads is 9 + 3 + 8 = 20.\nIt can be shown that we cannot obtain a greater total importance than 20.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= roads.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>roads[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>There are no duplicate roads.</li> </ul>"},{"location":"LeetCode_Problems/2286/","title":"2286. Booking Concert Tickets in Groups","text":"Problem <p>A concert hall has <code>n</code> rows numbered from <code>0</code> to <code>n - 1</code>, each with <code>m</code> seats, numbered from <code>0</code> to <code>m - 1</code>. You need to design a ticketing system that can allocate seats in the following cases:</p> <ul> <li>If a group of <code>k</code> spectators can sit together in a row.</li> <li>If every member of a group of <code>k</code> spectators can get a seat. They may or may not sit together.</li> </ul> <p>Note that the spectators are very picky. Hence:</p> <ul> <li>They will book seats only if each member of their group can get a seat with row number less than or equal to <code>maxRow</code>. <code>maxRow</code> can vary from group to group.</li> <li>In case there are multiple rows to choose from, the row with the smallest number is chosen. If there are multiple seats to choose in the same row, the seat with the smallest number is chosen.</li> </ul> <p>Implement the <code>BookMyShow</code> class:</p> <ul> <li><code>BookMyShow(int n, int m)</code> Initializes the object with <code>n</code> as number of rows and <code>m</code> as number of seats per row.</li> <li><code>int[] gather(int k, int maxRow)</code> Returns an array of length <code>2</code> denoting the row and seat number (respectively) of the first seat being allocated to the <code>k</code> members of the group, who must sit together. In other words, it returns the smallest possible <code>r</code> and <code>c</code> such that all <code>[c, c + k - 1]</code> seats are valid and empty in row <code>r</code>, and <code>r &lt;= maxRow</code>. Returns <code>[]</code> in case it is not possible to allocate seats to the group.</li> <li><code>boolean scatter(int k, int maxRow)</code> Returns <code>true</code> if all <code>k</code> members of the group can be allocated seats in rows <code>0</code> to <code>maxRow</code>, who may or may not sit together. If the seats can be allocated, it allocates <code>k</code> seats to the group with the smallest row numbers, and the smallest possible seat numbers in each row. Otherwise, returns <code>false</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"BookMyShow\", \"gather\", \"gather\", \"scatter\", \"scatter\"]\n[[2, 5], [4, 0], [2, 0], [5, 1], [5, 1]]\nOutput\n[null, [0, 0], [], true, false]\n\nExplanation\nBookMyShow bms = new BookMyShow(2, 5); // There are 2 rows with 5 seats each \nbms.gather(4, 0); // return [0, 0]\n                  // The group books seats [0, 3] of row 0. \nbms.gather(2, 0); // return []\n                  // There is only 1 seat left in row 0,\n                  // so it is not possible to book 2 consecutive seats. \nbms.scatter(5, 1); // return True\n                   // The group books seat 4 of row 0 and seats [0, 3] of row 1. \nbms.scatter(5, 1); // return False\n                   // There is only one seat left in the hall.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= m, k &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= maxRow &lt;= n - 1</code></li> <li>At most <code>5 * 10<sup>4</sup></code> calls in total will be made to <code>gather</code> and <code>scatter</code>.</li> </ul>"},{"location":"LeetCode_Problems/2287/","title":"2287. Rearrange Characters to Make Target String","text":"Problem <p>You are given two 0-indexed strings <code>s</code> and <code>target</code>. You can take some letters from <code>s</code> and rearrange them to form new strings.</p> <p>Return the maximum number of copies of <code>target</code> that can be formed by taking letters from <code>s</code> and rearranging them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ilovecodingonleetcode\", target = \"code\"\nOutput: 2\nExplanation:\nFor the first copy of \"code\", take the letters at indices 4, 5, 6, and 7.\nFor the second copy of \"code\", take the letters at indices 17, 18, 19, and 20.\nThe strings that are formed are \"ecod\" and \"code\" which can both be rearranged into \"code\".\nWe can make at most two copies of \"code\", so we return 2.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcba\", target = \"abc\"\nOutput: 1\nExplanation:\nWe can make one copy of \"abc\" by taking the letters at indices 0, 1, and 2.\nWe can make at most one copy of \"abc\", so we return 1.\nNote that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot reuse the letter 'c' at index 2, so we cannot make a second copy of \"abc\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"abbaccaddaeea\", target = \"aaaaa\"\nOutput: 1\nExplanation:\nWe can make one copy of \"aaaaa\" by taking the letters at indices 0, 3, 6, 9, and 12.\nWe can make at most one copy of \"aaaaa\", so we return 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>1 &lt;= target.length &lt;= 10</code></li> <li><code>s</code> and <code>target</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2288/","title":"2288. Apply Discount to Prices","text":"Problem <p>A sentence is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign <code>'$'</code>. A word represents a price if it is a sequence of digits preceded by a dollar sign.</p> <ul> <li>For example, <code>\"$100\"</code>, <code>\"$23\"</code>, and <code>\"$6\"</code> represent prices while <code>\"100\"</code>, <code>\"$\"</code>, and <code>\"$1e5\"</code> do not.</li> </ul> <p>You are given a string <code>sentence</code> representing a sentence and an integer <code>discount</code>. For each word representing a price, apply a discount of <code>discount%</code> on the price and update the word in the sentence. All updated prices should be represented with exactly two decimal places.</p> <p>Return a string representing the modified sentence.</p> <p>Note that all prices will contain at most <code>10</code> digits.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: sentence = \"there are $1 $2 and 5$ candies in the shop\", discount = 50\nOutput: \"there are $0.50 $1.00 and 5$ candies in the shop\"\nExplanation: \nThe words which represent prices are \"$1\" and \"$2\". \n- A 50% discount on \"$1\" yields \"$0.50\", so \"$1\" is replaced by \"$0.50\".\n- A 50% discount on \"$2\" yields \"$1\". Since we need to have exactly 2 decimal places after a price, we replace \"$2\" with \"$1.00\".\n</pre> <p>Example 2:</p> <pre>\nInput: sentence = \"1 2 $3 4 $5 $6 7 8$ $9 $10$\", discount = 100\nOutput: \"1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$\"\nExplanation: \nApplying a 100% discount on any price will result in 0.\nThe words representing prices are \"$3\", \"$5\", \"$6\", and \"$9\".\nEach of them is replaced by \"$0.00\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sentence.length &lt;= 10<sup>5</sup></code></li> <li><code>sentence</code> consists of lowercase English letters, digits, <code>' '</code>, and <code>'$'</code>.</li> <li><code>sentence</code> does not have leading or trailing spaces.</li> <li>All words in <code>sentence</code> are separated by a single space.</li> <li>All prices will be positive numbers without leading zeros.</li> <li>All prices will have at most <code>10</code> digits.</li> <li><code>0 &lt;= discount &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2289/","title":"2289. Steps to Make Array Non-decreasing","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. In one step, remove all elements <code>nums[i]</code> where <code>nums[i - 1] &gt; nums[i]</code> for all <code>0 &lt; i &lt; nums.length</code>.</p> <p>Return the number of steps performed until <code>nums</code> becomes a non-decreasing array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,3,4,4,7,3,6,11,8,5,11]\nOutput: 3\nExplanation: The following are the steps performed:\n- Step 1: [5,3,4,4,7,3,6,11,8,5,11] becomes [5,4,4,7,6,11,11]\n- Step 2: [5,4,4,7,6,11,11] becomes [5,4,7,11,11]\n- Step 3: [5,4,7,11,11] becomes [5,7,11,11]\n[5,7,11,11] is a non-decreasing array. Therefore, we return 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,5,7,7,13]\nOutput: 0\nExplanation: nums is already a non-decreasing array. Therefore, we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2290/","title":"2290. Minimum Obstacle Removal to Reach Corner","text":"Problem <p>You are given a 0-indexed 2D integer array <code>grid</code> of size <code>m x n</code>. Each cell has one of two values:</p> <ul> <li><code>0</code> represents an empty cell,</li> <li><code>1</code> represents an obstacle that may be removed.</li> </ul> <p>You can move up, down, left, or right from and to an empty cell.</p> <p>Return the minimum number of obstacles to remove so you can move from the upper left corner <code>(0, 0)</code> to the lower right corner <code>(m - 1, n - 1)</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,1,1],[1,1,0],[1,1,0]]\nOutput: 2\nExplanation: We can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2).\nIt can be shown that we need to remove at least 2 obstacles, so we return 2.\nNote that there may be other ways to remove 2 obstacles to create a path.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]\nOutput: 0\nExplanation: We can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>2 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>grid[0][0] == grid[m - 1][n - 1] == 0</code></li> </ul>"},{"location":"LeetCode_Problems/2291/","title":"2291. Maximum Profit From Trading Stocks","text":"Problem"},{"location":"LeetCode_Problems/2292/","title":"2292. Products With Three or More Orders in Two Consecutive Years","text":"Problem"},{"location":"LeetCode_Problems/2293/","title":"2293. Min Max Game","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> whose length is a power of <code>2</code>.</p> <p>Apply the following algorithm on <code>nums</code>:</p> <ol> <li>Let <code>n</code> be the length of <code>nums</code>. If <code>n == 1</code>, end the process. Otherwise, create a new 0-indexed integer array <code>newNums</code> of length <code>n / 2</code>.</li> <li>For every even index <code>i</code> where <code>0 &lt;= i &lt; n / 2</code>, assign the value of <code>newNums[i]</code> as <code>min(nums[2 * i], nums[2 * i + 1])</code>.</li> <li>For every odd index <code>i</code> where <code>0 &lt;= i &lt; n / 2</code>, assign the value of <code>newNums[i]</code> as <code>max(nums[2 * i], nums[2 * i + 1])</code>.</li> <li>Replace the array <code>nums</code> with <code>newNums</code>.</li> <li>Repeat the entire process starting from step 1.</li> </ol> <p>Return the last number that remains in <code>nums</code> after applying the algorithm.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [1,3,5,2,4,8,2,2]\nOutput: 1\nExplanation: The following arrays are the results of applying the algorithm repeatedly.\nFirst: nums = [1,5,4,2]\nSecond: nums = [1,4]\nThird: nums = [1]\n1 is the last remaining number, so we return 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3]\nOutput: 3\nExplanation: 3 is already the last remaining number, so we return 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1024</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>nums.length</code> is a power of <code>2</code>.</li> </ul>"},{"location":"LeetCode_Problems/2294/","title":"2294. Partition Array Such That Maximum Difference Is K","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You may partition <code>nums</code> into one or more subsequences such that each element in <code>nums</code> appears in exactly one of the subsequences.</p> <p>Return the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most <code>k</code>.</p> <p>A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,6,1,2,5], k = 2\nOutput: 2\nExplanation:\nWe can partition nums into the two subsequences [3,1,2] and [6,5].\nThe difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2.\nThe difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1.\nSince two subsequences were created, we return 2. It can be shown that 2 is the minimum number of subsequences needed.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3], k = 1\nOutput: 2\nExplanation:\nWe can partition nums into the two subsequences [1,2] and [3].\nThe difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1.\nThe difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0.\nSince two subsequences were created, we return 2. Note that another optimal solution is to partition nums into the two subsequences [1] and [2,3].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,2,4,5], k = 0\nOutput: 3\nExplanation:\nWe can partition nums into the three subsequences [2,2], [4], and [5].\nThe difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0.\nThe difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0.\nThe difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0.\nSince three subsequences were created, we return 3. It can be shown that 3 is the minimum number of subsequences needed.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2295/","title":"2295. Replace Elements in an Array","text":"Problem <p>You are given a 0-indexed array <code>nums</code> that consists of <code>n</code> distinct positive integers. Apply <code>m</code> operations to this array, where in the <code>i<sup>th</sup></code> operation you replace the number <code>operations[i][0]</code> with <code>operations[i][1]</code>.</p> <p>It is guaranteed that in the <code>i<sup>th</sup></code> operation:</p> <ul> <li><code>operations[i][0]</code> exists in <code>nums</code>.</li> <li><code>operations[i][1]</code> does not exist in <code>nums</code>.</li> </ul> <p>Return the array obtained after applying all the operations.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,4,6], operations = [[1,3],[4,7],[6,1]]\nOutput: [3,2,7,1]\nExplanation: We perform the following operations on nums:\n- Replace the number 1 with 3. nums becomes [3,2,4,6].\n- Replace the number 4 with 7. nums becomes [3,2,7,6].\n- Replace the number 6 with 1. nums becomes [3,2,7,1].\nWe return the final array [3,2,7,1].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2], operations = [[1,3],[2,1],[3,2]]\nOutput: [2,1]\nExplanation: We perform the following operations to nums:\n- Replace the number 1 with 3. nums becomes [3,2].\n- Replace the number 2 with 1. nums becomes [3,1].\n- Replace the number 3 with 2. nums becomes [2,1].\nWe return the array [2,1].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>m == operations.length</code></li> <li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li> <li>All the values of <code>nums</code> are distinct.</li> <li><code>operations[i].length == 2</code></li> <li><code>1 &lt;= nums[i], operations[i][0], operations[i][1] &lt;= 10<sup>6</sup></code></li> <li><code>operations[i][0]</code> will exist in <code>nums</code> when applying the <code>i<sup>th</sup></code> operation.</li> <li><code>operations[i][1]</code> will not exist in <code>nums</code> when applying the <code>i<sup>th</sup></code> operation.</li> </ul>"},{"location":"LeetCode_Problems/2296/","title":"2296. Design a Text Editor","text":"Problem <p>Design a text editor with a cursor that can do the following:</p> <ul> <li>Add text to where the cursor is.</li> <li>Delete text from where the cursor is (simulating the backspace key).</li> <li>Move the cursor either left or right.</li> </ul> <p>When deleting text, only characters to the left of the cursor will be deleted. The cursor will also remain within the actual text and cannot be moved beyond it. More formally, we have that <code>0 &lt;= cursor.position &lt;= currentText.length</code> always holds.</p> <p>Implement the <code>TextEditor</code> class:</p> <ul> <li><code>TextEditor()</code> Initializes the object with empty text.</li> <li><code>void addText(string text)</code> Appends <code>text</code> to where the cursor is. The cursor ends to the right of <code>text</code>.</li> <li><code>int deleteText(int k)</code> Deletes <code>k</code> characters to the left of the cursor. Returns the number of characters actually deleted.</li> <li><code>string cursorLeft(int k)</code> Moves the cursor to the left <code>k</code> times. Returns the last <code>min(10, len)</code> characters to the left of the cursor, where <code>len</code> is the number of characters to the left of the cursor.</li> <li><code>string cursorRight(int k)</code> Moves the cursor to the right <code>k</code> times. Returns the last <code>min(10, len)</code> characters to the left of the cursor, where <code>len</code> is the number of characters to the left of the cursor.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"TextEditor\", \"addText\", \"deleteText\", \"addText\", \"cursorRight\", \"cursorLeft\", \"deleteText\", \"cursorLeft\", \"cursorRight\"]\n[[], [\"leetcode\"], [4], [\"practice\"], [3], [8], [10], [2], [6]]\nOutput\n[null, null, 4, null, \"etpractice\", \"leet\", 4, \"\", \"practi\"]\n\nExplanation\nTextEditor textEditor = new TextEditor(); // The current text is \"|\". (The '|' character represents the cursor)\ntextEditor.addText(\"leetcode\"); // The current text is \"leetcode|\".\ntextEditor.deleteText(4); // return 4\n                          // The current text is \"leet|\". \n                          // 4 characters were deleted.\ntextEditor.addText(\"practice\"); // The current text is \"leetpractice|\". \ntextEditor.cursorRight(3); // return \"etpractice\"\n                           // The current text is \"leetpractice|\". \n                           // The cursor cannot be moved beyond the actual text and thus did not move.\n                           // \"etpractice\" is the last 10 characters to the left of the cursor.\ntextEditor.cursorLeft(8); // return \"leet\"\n                          // The current text is \"leet|practice\".\n                          // \"leet\" is the last min(10, 4) = 4 characters to the left of the cursor.\ntextEditor.deleteText(10); // return 4\n                           // The current text is \"|practice\".\n                           // Only 4 characters were deleted.\ntextEditor.cursorLeft(2); // return \"\"\n                          // The current text is \"|practice\".\n                          // The cursor cannot be moved beyond the actual text and thus did not move. \n                          // \"\" is the last min(10, 0) = 0 characters to the left of the cursor.\ntextEditor.cursorRight(6); // return \"practi\"\n                           // The current text is \"practi|ce\".\n                           // \"practi\" is the last min(10, 6) = 6 characters to the left of the cursor.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= text.length, k &lt;= 40</code></li> <li><code>text</code> consists of lowercase English letters.</li> <li>At most <code>2 * 10<sup>4</sup></code> calls in total will be made to <code>addText</code>, <code>deleteText</code>, <code>cursorLeft</code> and <code>cursorRight</code>.</li> </ul> <p> </p> <p>Follow-up: Could you find a solution with time complexity of <code>O(k)</code> per call?</p>"},{"location":"LeetCode_Problems/2297/","title":"2297. Jump Game VIII","text":"Problem"},{"location":"LeetCode_Problems/2298/","title":"2298. Tasks Count in the Weekend","text":"Problem"},{"location":"LeetCode_Problems/2299/","title":"2299. Strong Password Checker II","text":"Problem <p>A password is said to be strong if it satisfies all the following criteria:</p> <ul> <li>It has at least <code>8</code> characters.</li> <li>It contains at least one lowercase letter.</li> <li>It contains at least one uppercase letter.</li> <li>It contains at least one digit.</li> <li>It contains at least one special character. The special characters are the characters in the following string: <code>\"!@#$%^&amp;*()-+\"</code>.</li> <li>It does not contain <code>2</code> of the same character in adjacent positions (i.e., <code>\"aab\"</code> violates this condition, but <code>\"aba\"</code> does not).</li> </ul> <p>Given a string <code>password</code>, return <code>true</code> if it is a strong password. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: password = \"IloveLe3tcode!\"\nOutput: true\nExplanation: The password meets all the requirements. Therefore, we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: password = \"Me+You--IsMyDream\"\nOutput: false\nExplanation: The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false.\n</pre> <p>Example 3:</p> <pre>\nInput: password = \"1aB!\"\nOutput: false\nExplanation: The password does not meet the length requirement. Therefore, we return false.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= password.length &lt;= 100</code></li> <li><code>password</code> consists of letters, digits, and special characters: <code>\"!@#$%^&amp;*()-+\"</code>.</li> </ul>"},{"location":"LeetCode_Problems/2300/","title":"2300. Successful Pairs of Spells and Potions","text":"Problem <p>You are given two positive integer arrays <code>spells</code> and <code>potions</code>, of length <code>n</code> and <code>m</code> respectively, where <code>spells[i]</code> represents the strength of the <code>i<sup>th</sup></code> spell and <code>potions[j]</code> represents the strength of the <code>j<sup>th</sup></code> potion.</p> <p>You are also given an integer <code>success</code>. A spell and potion pair is considered successful if the product of their strengths is at least <code>success</code>.</p> <p>Return an integer array <code>pairs</code> of length <code>n</code> where <code>pairs[i]</code> is the number of potions that will form a successful pair with the <code>i<sup>th</sup></code> spell.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: spells = [5,1,3], potions = [1,2,3,4,5], success = 7\nOutput: [4,0,3]\nExplanation:\n- 0<sup>th</sup> spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.\n- 1<sup>st</sup> spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.\n- 2<sup>nd</sup> spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.\nThus, [4,0,3] is returned.\n</pre> <p>Example 2:</p> <pre>\nInput: spells = [3,1,2], potions = [8,5,8], success = 16\nOutput: [2,0,2]\nExplanation:\n- 0<sup>th</sup> spell: 3 * [8,5,8] = [24,15,24]. 2 pairs are successful.\n- 1<sup>st</sup> spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. \n- 2<sup>nd</sup> spell: 2 * [8,5,8] = [16,10,16]. 2 pairs are successful. \nThus, [2,0,2] is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == spells.length</code></li> <li><code>m == potions.length</code></li> <li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= spells[i], potions[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= success &lt;= 10<sup>10</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2301/","title":"2301. Match Substring After Replacement","text":"Problem <p>You are given two strings <code>s</code> and <code>sub</code>. You are also given a 2D character array <code>mappings</code> where <code>mappings[i] = [old<sub>i</sub>, new<sub>i</sub>]</code> indicates that you may perform the following operation any number of times:</p> <ul> <li>Replace a character <code>old<sub>i</sub></code> of <code>sub</code> with <code>new<sub>i</sub></code>.</li> </ul> <p>Each character in <code>sub</code> cannot be replaced more than once.</p> <p>Return <code>true</code> if it is possible to make <code>sub</code> a substring of <code>s</code> by replacing zero or more characters according to <code>mappings</code>. Otherwise, return <code>false</code>.</p> <p>A substring is a contiguous non-empty sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"fool3e7bar\", sub = \"leet\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"]]\nOutput: true\nExplanation: Replace the first 'e' in sub with '3' and 't' in sub with '7'.\nNow sub = \"l3e7\" is a substring of s, so we return true.</pre> <p>Example 2:</p> <pre>\nInput: s = \"fooleetbar\", sub = \"f00l\", mappings = [[\"o\",\"0\"]]\nOutput: false\nExplanation: The string \"f00l\" is not a substring of s and no replacements can be made.\nNote that we cannot replace '0' with 'o'.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"Fool33tbaR\", sub = \"leetd\", mappings = [[\"e\",\"3\"],[\"t\",\"7\"],[\"t\",\"8\"],[\"d\",\"b\"],[\"p\",\"b\"]]\nOutput: true\nExplanation: Replace the first and second 'e' in sub with '3' and 'd' in sub with 'b'.\nNow sub = \"l33tb\" is a substring of s, so we return true.\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sub.length &lt;= s.length &lt;= 5000</code></li> <li><code>0 &lt;= mappings.length &lt;= 1000</code></li> <li><code>mappings[i].length == 2</code></li> <li><code>old<sub>i</sub> != new<sub>i</sub></code></li> <li><code>s</code> and <code>sub</code> consist of uppercase and lowercase English letters and digits.</li> <li><code>old<sub>i</sub></code> and <code>new<sub>i</sub></code> are either uppercase or lowercase English letters or digits.</li> </ul>"},{"location":"LeetCode_Problems/2302/","title":"2302. Count Subarrays With Score Less Than K","text":"Problem <p>The score of an array is defined as the product of its sum and its length.</p> <ul> <li>For example, the score of <code>[1, 2, 3, 4, 5]</code> is <code>(1 + 2 + 3 + 4 + 5) * 5 = 75</code>.</li> </ul> <p>Given a positive integer array <code>nums</code> and an integer <code>k</code>, return the number of non-empty subarrays of <code>nums</code> whose score is strictly less than <code>k</code>.</p> <p>A subarray is a contiguous sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,4,3,5], k = 10\nOutput: 6\nExplanation:\nThe 6 subarrays having scores less than 10 are:\n- [2] with score 2 * 1 = 2.\n- [1] with score 1 * 1 = 1.\n- [4] with score 4 * 1 = 4.\n- [3] with score 3 * 1 = 3. \n- [5] with score 5 * 1 = 5.\n- [2,1] with score (2 + 1) * 2 = 6.\nNote that subarrays such as [1,4] and [4,3,5] are not considered because their scores are 10 and 36 respectively, while we need scores strictly less than 10.</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1], k = 5\nOutput: 5\nExplanation:\nEvery subarray except [1,1,1] has a score less than 5.\n[1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5.\nThus, there are 5 subarrays having scores less than 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>15</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2303/","title":"2303. Calculate Amount Paid in Taxes","text":"Problem <p>You are given a 0-indexed 2D integer array <code>brackets</code> where <code>brackets[i] = [upper<sub>i</sub>, percent<sub>i</sub>]</code> means that the <code>i<sup>th</sup></code> tax bracket has an upper bound of <code>upper<sub>i</sub></code> and is taxed at a rate of <code>percent<sub>i</sub></code>. The brackets are sorted by upper bound (i.e. <code>upper<sub>i-1</sub> &lt; upper<sub>i</sub></code> for <code>0 &lt; i &lt; brackets.length</code>).</p> <p>Tax is calculated as follows:</p> <ul> <li>The first <code>upper<sub>0</sub></code> dollars earned are taxed at a rate of <code>percent<sub>0</sub></code>.</li> <li>The next <code>upper<sub>1</sub> - upper<sub>0</sub></code> dollars earned are taxed at a rate of <code>percent<sub>1</sub></code>.</li> <li>The next <code>upper<sub>2</sub> - upper<sub>1</sub></code> dollars earned are taxed at a rate of <code>percent<sub>2</sub></code>.</li> <li>And so on.</li> </ul> <p>You are given an integer <code>income</code> representing the amount of money you earned. Return the amount of money that you have to pay in taxes. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: brackets = [[3,50],[7,10],[12,25]], income = 10\nOutput: 2.65000\nExplanation:\nBased on your income, you have 3 dollars in the 1<sup>st</sup> tax bracket, 4 dollars in the 2<sup>nd</sup> tax bracket, and 3 dollars in the 3<sup>rd</sup> tax bracket.\nThe tax rate for the three tax brackets is 50%, 10%, and 25%, respectively.\nIn total, you pay $3 * 50% + $4 * 10% + $3 * 25% = $2.65 in taxes.\n</pre> <p>Example 2:</p> <pre>\nInput: brackets = [[1,0],[4,25],[5,50]], income = 2\nOutput: 0.25000\nExplanation:\nBased on your income, you have 1 dollar in the 1<sup>st</sup> tax bracket and 1 dollar in the 2<sup>nd</sup> tax bracket.\nThe tax rate for the two tax brackets is 0% and 25%, respectively.\nIn total, you pay $1 * 0% + $1 * 25% = $0.25 in taxes.\n</pre> <p>Example 3:</p> <pre>\nInput: brackets = [[2,50]], income = 0\nOutput: 0.00000\nExplanation:\nYou have no income to tax, so you have to pay a total of $0 in taxes.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= brackets.length &lt;= 100</code></li> <li><code>1 &lt;= upper<sub>i</sub> &lt;= 1000</code></li> <li><code>0 &lt;= percent<sub>i</sub> &lt;= 100</code></li> <li><code>0 &lt;= income &lt;= 1000</code></li> <li><code>upper<sub>i</sub></code> is sorted in ascending order.</li> <li>All the values of <code>upper<sub>i</sub></code> are unique.</li> <li>The upper bound of the last tax bracket is greater than or equal to <code>income</code>.</li> </ul>"},{"location":"LeetCode_Problems/2304/","title":"2304. Minimum Path Cost in a Grid","text":"Problem <p>You are given a 0-indexed <code>m x n</code> integer matrix <code>grid</code> consisting of distinct integers from <code>0</code> to <code>m * n - 1</code>. You can move in this matrix from a cell to any other cell in the next row. That is, if you are in cell <code>(x, y)</code> such that <code>x &lt; m - 1</code>, you can move to any of the cells <code>(x + 1, 0)</code>, <code>(x + 1, 1)</code>, ..., <code>(x + 1, n - 1)</code>. Note that it is not possible to move from cells in the last row.</p> <p>Each possible move has a cost given by a 0-indexed 2D array <code>moveCost</code> of size <code>(m * n) x n</code>, where <code>moveCost[i][j]</code> is the cost of moving from a cell with value <code>i</code> to a cell in column <code>j</code> of the next row. The cost of moving from cells in the last row of <code>grid</code> can be ignored.</p> <p>The cost of a path in <code>grid</code> is the sum of all values of cells visited plus the sum of costs of all the moves made. Return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[5,3],[4,0],[2,1]], moveCost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]\nOutput: 17\nExplanation: The path with the minimum possible cost is the path 5 -&gt; 0 -&gt; 1.\n- The sum of the values of cells visited is 5 + 0 + 1 = 6.\n- The cost of moving from 5 to 0 is 3.\n- The cost of moving from 0 to 1 is 8.\nSo the total cost of the path is 6 + 3 + 8 = 17.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[5,1,2],[4,0,3]], moveCost = [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]]\nOutput: 6\nExplanation: The path with the minimum possible cost is the path 2 -&gt; 3.\n- The sum of the values of cells visited is 2 + 3 = 5.\n- The cost of moving from 2 to 3 is 1.\nSo the total cost of this path is 5 + 1 = 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>2 &lt;= m, n &lt;= 50</code></li> <li><code>grid</code> consists of distinct integers from <code>0</code> to <code>m * n - 1</code>.</li> <li><code>moveCost.length == m * n</code></li> <li><code>moveCost[i].length == n</code></li> <li><code>1 &lt;= moveCost[i][j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2305/","title":"2305. Fair Distribution of Cookies","text":"Problem <p>You are given an integer array <code>cookies</code>, where <code>cookies[i]</code> denotes the number of cookies in the <code>i<sup>th</sup></code> bag. You are also given an integer <code>k</code> that denotes the number of children to distribute all the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up.</p> <p>The unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution.</p> <p>Return the minimum unfairness of all distributions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: cookies = [8,15,10,20,8], k = 2\nOutput: 31\nExplanation: One optimal distribution is [8,15,8] and [10,20]\n- The 1<sup>st</sup> child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies.\n- The 2<sup>nd</sup> child receives [10,20] which has a total of 10 + 20 = 30 cookies.\nThe unfairness of the distribution is max(31,30) = 31.\nIt can be shown that there is no distribution with an unfairness less than 31.\n</pre> <p>Example 2:</p> <pre>\nInput: cookies = [6,1,3,2,2,4,1,2], k = 3\nOutput: 7\nExplanation: One optimal distribution is [6,1], [3,2,2], and [4,1,2]\n- The 1<sup>st</sup> child receives [6,1] which has a total of 6 + 1 = 7 cookies.\n- The 2<sup>nd</sup> child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies.\n- The 3<sup>rd</sup> child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies.\nThe unfairness of the distribution is max(7,7,7) = 7.\nIt can be shown that there is no distribution with an unfairness less than 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= cookies.length &lt;= 8</code></li> <li><code>1 &lt;= cookies[i] &lt;= 10<sup>5</sup></code></li> <li><code>2 &lt;= k &lt;= cookies.length</code></li> </ul>"},{"location":"LeetCode_Problems/2306/","title":"2306. Naming a Company","text":"Problem <p>You are given an array of strings <code>ideas</code> that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:</p> <ol> <li>Choose 2 distinct names from <code>ideas</code>, call them <code>idea<sub>A</sub></code> and <code>idea<sub>B</sub></code>.</li> <li>Swap the first letters of <code>idea<sub>A</sub></code> and <code>idea<sub>B</sub></code> with each other.</li> <li>If both of the new names are not found in the original <code>ideas</code>, then the name <code>idea<sub>A</sub> idea<sub>B</sub></code> (the concatenation of <code>idea<sub>A</sub></code> and <code>idea<sub>B</sub></code>, separated by a space) is a valid company name.</li> <li>Otherwise, it is not a valid name.</li> </ol> <p>Return the number of distinct valid names for the company.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: ideas = [\"coffee\",\"donuts\",\"time\",\"toffee\"]\nOutput: 6\nExplanation: The following selections are valid:\n- (\"coffee\", \"donuts\"): The company name created is \"doffee conuts\".\n- (\"donuts\", \"coffee\"): The company name created is \"conuts doffee\".\n- (\"donuts\", \"time\"): The company name created is \"tonuts dime\".\n- (\"donuts\", \"toffee\"): The company name created is \"tonuts doffee\".\n- (\"time\", \"donuts\"): The company name created is \"dime tonuts\".\n- (\"toffee\", \"donuts\"): The company name created is \"doffee tonuts\".\nTherefore, there are a total of 6 distinct company names.\n\nThe following are some examples of invalid selections:\n- (\"coffee\", \"time\"): The name \"toffee\" formed after swapping already exists in the original array.\n- (\"time\", \"toffee\"): Both names are still the same after swapping and exist in the original array.\n- (\"coffee\", \"toffee\"): Both names formed after swapping already exist in the original array.\n</pre> <p>Example 2:</p> <pre>\nInput: ideas = [\"lack\",\"back\"]\nOutput: 0\nExplanation: There are no valid selections. Therefore, 0 is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= ideas.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= ideas[i].length &lt;= 10</code></li> <li><code>ideas[i]</code> consists of lowercase English letters.</li> <li>All the strings in <code>ideas</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2307/","title":"2307. Check for Contradictions in Equations","text":"Problem"},{"location":"LeetCode_Problems/2308/","title":"2308. Arrange Table by Gender","text":"Problem"},{"location":"LeetCode_Problems/2309/","title":"2309. Greatest English Letter in Upper and Lower Case","text":"Problem <p>Given a string of English letters <code>s</code>, return the greatest English letter which occurs as both a lowercase and uppercase letter in <code>s</code>. The returned letter should be in uppercase. If no such letter exists, return an empty string.</p> <p>An English letter <code>b</code> is greater than another letter <code>a</code> if <code>b</code> appears after <code>a</code> in the English alphabet.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"lEeTcOdE\"\nOutput: \"E\"\nExplanation:\nThe letter 'E' is the only letter to appear in both lower and upper case.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"arRAzFif\"\nOutput: \"R\"\nExplanation:\nThe letter 'R' is the greatest letter to appear in both lower and upper case.\nNote that 'A' and 'F' also appear in both lower and upper case, but 'R' is greater than 'F' or 'A'.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"AbCdEfGhIjK\"\nOutput: \"\"\nExplanation:\nThere is no letter that appears in both lower and upper case.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists of lowercase and uppercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2310/","title":"2310. Sum of Numbers With Units Digit K","text":"Problem <p>Given two integers <code>num</code> and <code>k</code>, consider a set of positive integers with the following properties:</p> <ul> <li>The units digit of each integer is <code>k</code>.</li> <li>The sum of the integers is <code>num</code>.</li> </ul> <p>Return the minimum possible size of such a set, or <code>-1</code> if no such set exists.</p> <p>Note:</p> <ul> <li>The set can contain multiple instances of the same integer, and the sum of an empty set is considered <code>0</code>.</li> <li>The units digit of a number is the rightmost digit of the number.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 58, k = 9\nOutput: 2\nExplanation:\nOne valid set is [9,49], as the sum is 58 and each integer has a units digit of 9.\nAnother valid set is [19,39].\nIt can be shown that 2 is the minimum possible size of a valid set.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 37, k = 2\nOutput: -1\nExplanation: It is not possible to obtain a sum of 37 using only integers that have a units digit of 2.\n</pre> <p>Example 3:</p> <pre>\nInput: num = 0, k = 7\nOutput: 0\nExplanation: The sum of an empty set is considered 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num &lt;= 3000</code></li> <li><code>0 &lt;= k &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/2311/","title":"2311. Longest Binary Subsequence Less Than or Equal to K","text":"Problem <p>You are given a binary string <code>s</code> and a positive integer <code>k</code>.</p> <p>Return the length of the longest subsequence of <code>s</code> that makes up a binary number less than or equal to <code>k</code>.</p> <p>Note:</p> <ul> <li>The subsequence can contain leading zeroes.</li> <li>The empty string is considered to be equal to <code>0</code>.</li> <li>A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"1001010\", k = 5\nOutput: 5\nExplanation: The longest subsequence of s that makes up a binary number less than or equal to 5 is \"00010\", as this number is equal to 2 in decimal.\nNote that \"00100\" and \"00101\" are also possible, which are equal to 4 and 5 in decimal, respectively.\nThe length of this subsequence is 5, so 5 is returned.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"00101001\", k = 1\nOutput: 6\nExplanation: \"000001\" is the longest subsequence of s that makes up a binary number less than or equal to 1, as this number is equal to 1 in decimal.\nThe length of this subsequence is 6, so 6 is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2312/","title":"2312. Selling Pieces of Wood","text":"Problem <p>You are given two integers <code>m</code> and <code>n</code> that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array <code>prices</code>, where <code>prices[i] = [h<sub>i</sub>, w<sub>i</sub>, price<sub>i</sub>]</code> indicates you can sell a rectangular piece of wood of height <code>h<sub>i</sub></code> and width <code>w<sub>i</sub></code> for <code>price<sub>i</sub></code> dollars.</p> <p>To cut a piece of wood, you must make a vertical or horizontal cut across the entire height or width of the piece to split it into two smaller pieces. After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to <code>prices</code>. You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you cannot rotate a piece to swap its height and width.</p> <p>Return the maximum money you can earn after cutting an <code>m x n</code> piece of wood.</p> <p>Note that you can cut the piece of wood as many times as you want.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]]\nOutput: 19\nExplanation: The diagram above shows a possible scenario. It consists of:\n- 2 pieces of wood shaped 2 x 2, selling for a price of 2 * 7 = 14.\n- 1 piece of wood shaped 2 x 1, selling for a price of 1 * 3 = 3.\n- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.\nThis obtains a total of 14 + 3 + 2 = 19 money earned.\nIt can be shown that 19 is the maximum amount of money that can be earned.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]]\nOutput: 32\nExplanation: The diagram above shows a possible scenario. It consists of:\n- 3 pieces of wood shaped 3 x 2, selling for a price of 3 * 10 = 30.\n- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.\nThis obtains a total of 30 + 2 = 32 money earned.\nIt can be shown that 32 is the maximum amount of money that can be earned.\nNotice that we cannot rotate the 1 x 4 piece of wood to obtain a 4 x 1 piece of wood.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 200</code></li> <li><code>1 &lt;= prices.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>prices[i].length == 3</code></li> <li><code>1 &lt;= h<sub>i</sub> &lt;= m</code></li> <li><code>1 &lt;= w<sub>i</sub> &lt;= n</code></li> <li><code>1 &lt;= price<sub>i</sub> &lt;= 10<sup>6</sup></code></li> <li>All the shapes of wood <code>(h<sub>i</sub>, w<sub>i</sub>)</code> are pairwise distinct.</li> </ul>"},{"location":"LeetCode_Problems/2313/","title":"2313. Minimum Flips in Binary Tree to Get Result","text":"Problem"},{"location":"LeetCode_Problems/2314/","title":"2314. The First Day of the Maximum Recorded Degree in Each City","text":"Problem"},{"location":"LeetCode_Problems/2315/","title":"2315. Count Asterisks","text":"Problem <p>You are given a string <code>s</code>, where every two consecutive vertical bars <code>'|'</code> are grouped into a pair. In other words, the 1<sup>st</sup> and 2<sup>nd</sup> <code>'|'</code> make a pair, the 3<sup>rd</sup> and 4<sup>th</sup> <code>'|'</code> make a pair, and so forth.</p> <p>Return the number of <code>'*'</code> in <code>s</code>, excluding the <code>'*'</code> between each pair of <code>'|'</code>.</p> <p>Note that each <code>'|'</code> will belong to exactly one pair.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"l|*e*et|c**o|*de|\"\nOutput: 2\nExplanation: The considered characters are underlined: \"l|*e*et|c**o|*de|\".\nThe characters between the first and second '|' are excluded from the answer.\nAlso, the characters between the third and fourth '|' are excluded from the answer.\nThere are 2 asterisks considered. Therefore, we return 2.</pre> <p>Example 2:</p> <pre>\nInput: s = \"iamprogrammer\"\nOutput: 0\nExplanation: In this example, there are no asterisks in s. Therefore, we return 0.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"yo|uar|e**|b|e***au|tifu|l\"\nOutput: 5\nExplanation: The considered characters are underlined: \"yo|uar|e**|b|e***au|tifu|l\". There are 5 asterisks considered. Therefore, we return 5.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists of lowercase English letters, vertical bars <code>'|'</code>, and asterisks <code>'*'</code>.</li> <li><code>s</code> contains an even number of vertical bars <code>'|'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2316/","title":"2316. Count Unreachable Pairs of Nodes in an Undirected Graph","text":"Problem <p>You are given an integer <code>n</code>. There is an undirected graph with <code>n</code> nodes, numbered from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an undirected edge connecting nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p> <p>Return the number of pairs of different nodes that are unreachable from each other.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3, edges = [[0,1],[0,2],[1,2]]\nOutput: 0\nExplanation: There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]\nOutput: 14\nExplanation: There are 14 pairs of nodes that are unreachable from each other:\n[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].\nTherefore, we return 14.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= edges.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>There are no repeated edges.</li> </ul>"},{"location":"LeetCode_Problems/2317/","title":"2317. Maximum XOR After Operations","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. In one operation, select any non-negative integer <code>x</code> and an index <code>i</code>, then update <code>nums[i]</code> to be equal to <code>nums[i] AND (nums[i] XOR x)</code>.</p> <p>Note that <code>AND</code> is the bitwise AND operation and <code>XOR</code> is the bitwise XOR operation.</p> <p>Return the maximum possible bitwise XOR of all elements of <code>nums</code> after applying the operation any number of times.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,2,4,6]\nOutput: 7\nExplanation: Apply the operation with x = 4 and i = 3, num[3] = 6 AND (6 XOR 4) = 6 AND 2 = 2.\nNow, nums = [3, 2, 4, 2] and the bitwise XOR of all the elements = 3 XOR 2 XOR 4 XOR 2 = 7.\nIt can be shown that 7 is the maximum possible bitwise XOR.\nNote that other operations may be used to achieve a bitwise XOR of 7.</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,9,2]\nOutput: 11\nExplanation: Apply the operation zero times.\nThe bitwise XOR of all the elements = 1 XOR 2 XOR 3 XOR 9 XOR 2 = 11.\nIt can be shown that 11 is the maximum possible bitwise XOR.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2318/","title":"2318. Number of Distinct Roll Sequences","text":"Problem <p>You are given an integer <code>n</code>. You roll a fair 6-sided dice <code>n</code> times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:</p> <ol> <li>The greatest common divisor of any adjacent values in the sequence is equal to <code>1</code>.</li> <li>There is at least a gap of <code>2</code> rolls between equal valued rolls. More formally, if the value of the <code>i<sup>th</sup></code> roll is equal to the value of the <code>j<sup>th</sup></code> roll, then <code>abs(i - j) &gt; 2</code>.</li> </ol> <p>Return the total number of distinct sequences possible. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Two sequences are considered distinct if at least one element is different.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4\nOutput: 184\nExplanation: Some of the possible sequences are (1, 2, 3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc.\nSome invalid sequences are (1, 2, 1, 3), (1, 2, 3, 6).\n(1, 2, 1, 3) is invalid since the first and third roll have an equal value and abs(1 - 3) = 2 (i and j are 1-indexed).\n(1, 2, 3, 6) is invalid since the greatest common divisor of 3 and 6 = 3.\nThere are a total of 184 distinct sequences possible, so we return 184.</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: 22\nExplanation: Some of the possible sequences are (1, 2), (2, 1), (3, 2).\nSome invalid sequences are (3, 6), (2, 4) since the greatest common divisor is not equal to 1.\nThere are a total of 22 distinct sequences possible, so we return 22.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2319/","title":"2319. Check if Matrix Is X-Matrix","text":"Problem <p>A square matrix is said to be an X-Matrix if both of the following conditions hold:</p> <ol> <li>All the elements in the diagonals of the matrix are non-zero.</li> <li>All other elements are 0.</li> </ol> <p>Given a 2D integer array <code>grid</code> of size <code>n x n</code> representing a square matrix, return <code>true</code> if <code>grid</code> is an X-Matrix. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]\nOutput: true\nExplanation: Refer to the diagram above. \nAn X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.\nThus, grid is an X-Matrix.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[5,7,0],[0,3,1],[0,5,0]]\nOutput: false\nExplanation: Refer to the diagram above.\nAn X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.\nThus, grid is not an X-Matrix.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>3 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2320/","title":"2320. Count Number of Ways to Place Houses","text":"Problem <p>There is a street with <code>n * 2</code> plots, where there are <code>n</code> plots on each side of the street. The plots on each side are numbered from <code>1</code> to <code>n</code>. On each plot, a house can be placed.</p> <p>Return the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Note that if a house is placed on the <code>i<sup>th</sup></code> plot on one side of the street, a house can also be placed on the <code>i<sup>th</sup></code> plot on the other side of the street.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: 4\nExplanation: \nPossible arrangements:\n1. All plots are empty.\n2. A house is placed on one side of the street.\n3. A house is placed on the other side of the street.\n4. Two houses are placed, one on each side of the street.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 2\nOutput: 9\nExplanation: The 9 possible arrangements are shown in the diagram above.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2321/","title":"2321. Maximum Score Of Spliced Array","text":"Problem <p>You are given two 0-indexed integer arrays <code>nums1</code> and <code>nums2</code>, both of length <code>n</code>.</p> <p>You can choose two integers <code>left</code> and <code>right</code> where <code>0 &lt;= left &lt;= right &lt; n</code> and swap the subarray <code>nums1[left...right]</code> with the subarray <code>nums2[left...right]</code>.</p> <ul> <li>For example, if <code>nums1 = [1,2,3,4,5]</code> and <code>nums2 = [11,12,13,14,15]</code> and you choose <code>left = 1</code> and <code>right = 2</code>, <code>nums1</code> becomes <code>[1,12,13,4,5]</code> and <code>nums2</code> becomes <code>[11,2,3,14,15]</code>.</li> </ul> <p>You may choose to apply the mentioned operation once or not do anything.</p> <p>The score of the arrays is the maximum of <code>sum(nums1)</code> and <code>sum(nums2)</code>, where <code>sum(arr)</code> is the sum of all the elements in the array <code>arr</code>.</p> <p>Return the maximum possible score.</p> <p>A subarray is a contiguous sequence of elements within an array. <code>arr[left...right]</code> denotes the subarray that contains the elements of <code>nums</code> between indices <code>left</code> and <code>right</code> (inclusive).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [60,60,60], nums2 = [10,90,10]\nOutput: 210\nExplanation: Choosing left = 1 and right = 1, we have nums1 = [60,90,60] and nums2 = [10,60,10].\nThe score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210.</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]\nOutput: 220\nExplanation: Choosing left = 3, right = 4, we have nums1 = [20,40,20,40,20] and nums2 = [50,20,50,70,30].\nThe score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220.\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [7,11,13], nums2 = [1,1,1]\nOutput: 31\nExplanation: We choose not to swap any subarray.\nThe score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums1.length == nums2.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2322/","title":"2322. Minimum Score After Removals on a Tree","text":"Problem <p>There is an undirected connected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> edges.</p> <p>You are given a 0-indexed integer array <code>nums</code> of length <code>n</code> where <code>nums[i]</code> represents the value of the <code>i<sup>th</sup></code> node. You are also given a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p> <p>Remove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:</p> <ol> <li>Get the XOR of all the values of the nodes for each of the three components respectively.</li> <li>The difference between the largest XOR value and the smallest XOR value is the score of the pair.</li> </ol> <ul> <li>For example, say the three components have the node values: <code>[4,5,7]</code>, <code>[1,9]</code>, and <code>[3,3,3]</code>. The three XOR values are <code>4 ^ 5 ^ 7 = 6</code>, <code>1 ^ 9 = 8</code>, and <code>3 ^ 3 ^ 3 = 3</code>. The largest XOR value is <code>8</code> and the smallest XOR value is <code>3</code>. The score is then <code>8 - 3 = 5</code>.</li> </ul> <p>Return the minimum score of any possible pair of edge removals on the given tree.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]\nOutput: 9\nExplanation: The diagram above shows a way to make a pair of removals.\n- The 1<sup>st</sup> component has nodes [1,3,4] with values [5,4,11]. Its XOR value is 5 ^ 4 ^ 11 = 10.\n- The 2<sup>nd</sup> component has node [0] with value [1]. Its XOR value is 1 = 1.\n- The 3<sup>rd</sup> component has node [2] with value [5]. Its XOR value is 5 = 5.\nThe score is the difference between the largest and smallest XOR value which is 10 - 1 = 9.\nIt can be shown that no other pair of removals will obtain a smaller score than 9.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]\nOutput: 0\nExplanation: The diagram above shows a way to make a pair of removals.\n- The 1<sup>st</sup> component has nodes [3,4] with values [4,4]. Its XOR value is 4 ^ 4 = 0.\n- The 2<sup>nd</sup> component has nodes [1,0] with values [5,5]. Its XOR value is 5 ^ 5 = 0.\n- The 3<sup>rd</sup> component has nodes [2,5] with values [2,2]. Its XOR value is 2 ^ 2 = 0.\nThe score is the difference between the largest and smallest XOR value which is 0 - 0 = 0.\nWe cannot obtain a smaller score than 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>3 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>8</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>edges</code> represents a valid tree.</li> </ul>"},{"location":"LeetCode_Problems/2323/","title":"2323. Find Minimum Time to Finish All Jobs II","text":"Problem"},{"location":"LeetCode_Problems/2324/","title":"2324. Product Sales Analysis IV","text":"Problem"},{"location":"LeetCode_Problems/2325/","title":"2325. Decode the Message","text":"Problem <p>You are given the strings <code>key</code> and <code>message</code>, which represent a cipher key and a secret message, respectively. The steps to decode <code>message</code> are as follows:</p> <ol> <li>Use the first appearance of all 26 lowercase English letters in <code>key</code> as the order of the substitution table.</li> <li>Align the substitution table with the regular English alphabet.</li> <li>Each letter in <code>message</code> is then substituted using the table.</li> <li>Spaces <code>' '</code> are transformed to themselves.</li> </ol> <ul> <li>For example, given <code>key = \"happy boy\"</code> (actual key would have at least one instance of each letter in the alphabet), we have the partial substitution table of (<code>'h' -&gt; 'a'</code>, <code>'a' -&gt; 'b'</code>, <code>'p' -&gt; 'c'</code>, <code>'y' -&gt; 'd'</code>, <code>'b' -&gt; 'e'</code>, <code>'o' -&gt; 'f'</code>).</li> </ul> <p>Return the decoded message.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: key = \"the quick brown fox jumps over the lazy dog\", message = \"vkbs bs t suepuv\"\nOutput: \"this is a secret\"\nExplanation: The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in \"the quick brown fox jumps over the lazy dog\".\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: key = \"eljuxhpwnyrdgtqkviszcfmabo\", message = \"zwx hnfx lqantp mnoeius ycgk vcnjrdb\"\nOutput: \"the five boxing wizards jump quickly\"\nExplanation: The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in \"eljuxhpwnyrdgtqkviszcfmabo\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>26 &lt;= key.length &lt;= 2000</code></li> <li><code>key</code> consists of lowercase English letters and <code>' '</code>.</li> <li><code>key</code> contains every letter in the English alphabet (<code>'a'</code> to <code>'z'</code>) at least once.</li> <li><code>1 &lt;= message.length &lt;= 2000</code></li> <li><code>message</code> consists of lowercase English letters and <code>' '</code>.</li> </ul>"},{"location":"LeetCode_Problems/2326/","title":"2326. Spiral Matrix IV","text":"Problem <p>You are given two integers <code>m</code> and <code>n</code>, which represent the dimensions of a matrix.</p> <p>You are also given the <code>head</code> of a linked list of integers.</p> <p>Generate an <code>m x n</code> matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with <code>-1</code>.</p> <p>Return the generated matrix.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: m = 3, n = 5, head = [3,0,2,6,8,1,7,9,4,2,5,5,0]\nOutput: [[3,0,2,6,8],[5,0,-1,-1,1],[5,2,4,9,7]]\nExplanation: The diagram above shows how the values are printed in the matrix.\nNote that the remaining spaces in the matrix are filled with -1.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: m = 1, n = 4, head = [0,1,2]\nOutput: [[0,1,2,-1]]\nExplanation: The diagram above shows how the values are printed from left to right in the matrix.\nThe last space in the matrix is set to -1.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li>The number of nodes in the list is in the range <code>[1, m * n]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2327/","title":"2327. Number of People Aware of a Secret","text":"Problem <p>On day <code>1</code>, one person discovers a secret.</p> <p>You are given an integer <code>delay</code>, which means that each person will share the secret with a new person every day, starting from <code>delay</code> days after discovering the secret. You are also given an integer <code>forget</code>, which means that each person will forget the secret <code>forget</code> days after discovering it. A person cannot share the secret on the same day they forgot it, or on any day afterwards.</p> <p>Given an integer <code>n</code>, return the number of people who know the secret at the end of day <code>n</code>. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 6, delay = 2, forget = 4\nOutput: 5\nExplanation:\nDay 1: Suppose the first person is named A. (1 person)\nDay 2: A is the only person who knows the secret. (1 person)\nDay 3: A shares the secret with a new person, B. (2 people)\nDay 4: A shares the secret with a new person, C. (3 people)\nDay 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)\nDay 6: B shares the secret with E, and C shares the secret with F. (5 people)\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4, delay = 1, forget = 3\nOutput: 6\nExplanation:\nDay 1: The first person is named A. (1 person)\nDay 2: A shares the secret with B. (2 people)\nDay 3: A and B share the secret with 2 new people, C and D. (4 people)\nDay 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= delay &lt; forget &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2328/","title":"2328. Number of Increasing Paths in a Grid","text":"Problem <p>You are given an <code>m x n</code> integer matrix <code>grid</code>, where you can move from a cell to any adjacent cell in all <code>4</code> directions.</p> <p>Return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Two paths are considered different if they do not have exactly the same sequence of visited cells.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,1],[3,4]]\nOutput: 8\nExplanation: The strictly increasing paths are:\n- Paths with length 1: [1], [1], [3], [4].\n- Paths with length 2: [1 -&gt; 3], [1 -&gt; 4], [3 -&gt; 4].\n- Paths with length 3: [1 -&gt; 3 -&gt; 4].\nThe total number of paths is 4 + 3 + 1 = 8.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[1],[2]]\nOutput: 3\nExplanation: The strictly increasing paths are:\n- Paths with length 1: [1], [2].\n- Paths with length 2: [1 -&gt; 2].\nThe total number of paths is 2 + 1 = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 1000</code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2329/","title":"2329. Product Sales Analysis V","text":"Problem"},{"location":"LeetCode_Problems/2330/","title":"2330. Valid Palindrome IV","text":"Problem"},{"location":"LeetCode_Problems/2331/","title":"2331. Evaluate Boolean Binary Tree","text":"Problem <p>You are given the <code>root</code> of a full binary tree with the following properties:</p> <ul> <li>Leaf nodes have either the value <code>0</code> or <code>1</code>, where <code>0</code> represents <code>False</code> and <code>1</code> represents <code>True</code>.</li> <li>Non-leaf nodes have either the value <code>2</code> or <code>3</code>, where <code>2</code> represents the boolean <code>OR</code> and <code>3</code> represents the boolean <code>AND</code>.</li> </ul> <p>The evaluation of a node is as follows:</p> <ul> <li>If the node is a leaf node, the evaluation is the value of the node, i.e. <code>True</code> or <code>False</code>.</li> <li>Otherwise, evaluate the node's two children and apply the boolean operation of its value with the children's evaluations.</li> </ul> <p>Return the boolean result of evaluating the <code>root</code> node.</p> <p>A full binary tree is a binary tree where each node has either <code>0</code> or <code>2</code> children.</p> <p>A leaf node is a node that has zero children.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [2,1,3,null,null,0,1]\nOutput: true\nExplanation: The above diagram illustrates the evaluation process.\nThe AND node evaluates to False AND True = False.\nThe OR node evaluates to True OR False = True.\nThe root node evaluates to True, so we return true.</pre> <p>Example 2:</p> <pre>\nInput: root = [0]\nOutput: false\nExplanation: The root node is a leaf node and it evaluates to false, so we return false.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 3</code></li> <li>Every node has either <code>0</code> or <code>2</code> children.</li> <li>Leaf nodes have a value of <code>0</code> or <code>1</code>.</li> <li>Non-leaf nodes have a value of <code>2</code> or <code>3</code>.</li> </ul>"},{"location":"LeetCode_Problems/2332/","title":"2332. The Latest Time to Catch a Bus","text":"Problem <p>You are given a 0-indexed integer array <code>buses</code> of length <code>n</code>, where <code>buses[i]</code> represents the departure time of the <code>i<sup>th</sup></code> bus. You are also given a 0-indexed integer array <code>passengers</code> of length <code>m</code>, where <code>passengers[j]</code> represents the arrival time of the <code>j<sup>th</sup></code> passenger. All bus departure times are unique. All passenger arrival times are unique.</p> <p>You are given an integer <code>capacity</code>, which represents the maximum number of passengers that can get on each bus.</p> <p>When a passenger arrives, they will wait in line for the next available bus. You can get on a bus that departs at <code>x</code> minutes if you arrive at <code>y</code> minutes where <code>y &lt;= x</code>, and the bus is not full. Passengers with the earliest arrival times get on the bus first.</p> <p>More formally when a bus arrives, either:</p> <ul> <li>If <code>capacity</code> or fewer passengers are waiting for a bus, they will all get on the bus, or</li> <li>The <code>capacity</code> passengers with the earliest arrival times will get on the bus.</li> </ul> <p>Return the latest time you may arrive at the bus station to catch a bus. You cannot arrive at the same time as another passenger.</p> <p>Note: The arrays <code>buses</code> and <code>passengers</code> are not necessarily sorted.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: buses = [10,20], passengers = [2,17,18,19], capacity = 2\nOutput: 16\nExplanation: Suppose you arrive at time 16.\nAt time 10, the first bus departs with the 0<sup>th</sup> passenger. \nAt time 20, the second bus departs with you and the 1<sup>st</sup> passenger.\nNote that you may not arrive at the same time as another passenger, which is why you must arrive before the 1<sup>st</sup> passenger to catch the bus.</pre> <p>Example 2:</p> <pre>\nInput: buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2\nOutput: 20\nExplanation: Suppose you arrive at time 20.\nAt time 10, the first bus departs with the 3<sup>rd</sup> passenger. \nAt time 20, the second bus departs with the 5<sup>th</sup> and 1<sup>st</sup> passengers.\nAt time 30, the third bus departs with the 0<sup>th</sup> passenger and you.\nNotice if you had arrived any later, then the 6<sup>th</sup> passenger would have taken your seat on the third bus.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == buses.length</code></li> <li><code>m == passengers.length</code></li> <li><code>1 &lt;= n, m, capacity &lt;= 10<sup>5</sup></code></li> <li><code>2 &lt;= buses[i], passengers[i] &lt;= 10<sup>9</sup></code></li> <li>Each element in <code>buses</code> is unique.</li> <li>Each element in <code>passengers</code> is unique.</li> </ul>"},{"location":"LeetCode_Problems/2333/","title":"2333. Minimum Sum of Squared Difference","text":"Problem <p>You are given two positive 0-indexed integer arrays <code>nums1</code> and <code>nums2</code>, both of length <code>n</code>.</p> <p>The sum of squared difference of arrays <code>nums1</code> and <code>nums2</code> is defined as the sum of <code>(nums1[i] - nums2[i])<sup>2</sup></code> for each <code>0 &lt;= i &lt; n</code>.</p> <p>You are also given two positive integers <code>k1</code> and <code>k2</code>. You can modify any of the elements of <code>nums1</code> by <code>+1</code> or <code>-1</code> at most <code>k1</code> times. Similarly, you can modify any of the elements of <code>nums2</code> by <code>+1</code> or <code>-1</code> at most <code>k2</code> times.</p> <p>Return the minimum sum of squared difference after modifying array <code>nums1</code> at most <code>k1</code> times and modifying array <code>nums2</code> at most <code>k2</code> times.</p> <p>Note: You are allowed to modify the array elements to become negative integers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0\nOutput: 579\nExplanation: The elements in nums1 and nums2 cannot be modified because k1 = 0 and k2 = 0. \nThe sum of square difference will be: (1 - 2)<sup>2 </sup>+ (2 - 10)<sup>2 </sup>+ (3 - 20)<sup>2 </sup>+ (4 - 19)<sup>2</sup>\u00a0= 579.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1\nOutput: 43\nExplanation: One way to obtain the minimum sum of square difference is: \n- Increase nums1[0] once.\n- Increase nums2[2] once.\nThe minimum of the sum of square difference will be: \n(2 - 5)<sup>2 </sup>+ (4 - 8)<sup>2 </sup>+ (10 - 7)<sup>2 </sup>+ (12 - 9)<sup>2</sup>\u00a0= 43.\nNote that, there are other ways to obtain the minimum of the sum of square difference, but there is no way to obtain a sum smaller than 43.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums1.length == nums2.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= k1, k2 &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2334/","title":"2334. Subarray With Elements Greater Than Varying Threshold","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>threshold</code>.</p> <p>Find any subarray of <code>nums</code> of length <code>k</code> such that every element in the subarray is greater than <code>threshold / k</code>.</p> <p>Return the size of any such subarray. If there is no such subarray, return <code>-1</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,4,3,1], threshold = 6\nOutput: 3\nExplanation: The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2.\nNote that this is the only valid subarray.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [6,5,6,5,8], threshold = 7\nOutput: 1\nExplanation: The subarray [8] has a size of 1, and 8 &gt; 7 / 1 = 7. So 1 is returned.\nNote that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. \nSimilarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions.\nTherefore, 2, 3, 4, or 5 may also be returned.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i], threshold &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2335/","title":"2335. Minimum Amount of Time to Fill Cups","text":"Problem <p>You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up <code>2</code> cups with different types of water, or <code>1</code> cup of any type of water.</p> <p>You are given a 0-indexed integer array <code>amount</code> of length <code>3</code> where <code>amount[0]</code>, <code>amount[1]</code>, and <code>amount[2]</code> denote the number of cold, warm, and hot water cups you need to fill respectively. Return the minimum number of seconds needed to fill up all the cups.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: amount = [1,4,2]\nOutput: 4\nExplanation: One way to fill up the cups is:\nSecond 1: Fill up a cold cup and a warm cup.\nSecond 2: Fill up a warm cup and a hot cup.\nSecond 3: Fill up a warm cup and a hot cup.\nSecond 4: Fill up a warm cup.\nIt can be proven that 4 is the minimum number of seconds needed.\n</pre> <p>Example 2:</p> <pre>\nInput: amount = [5,4,4]\nOutput: 7\nExplanation: One way to fill up the cups is:\nSecond 1: Fill up a cold cup, and a hot cup.\nSecond 2: Fill up a cold cup, and a warm cup.\nSecond 3: Fill up a cold cup, and a warm cup.\nSecond 4: Fill up a warm cup, and a hot cup.\nSecond 5: Fill up a cold cup, and a hot cup.\nSecond 6: Fill up a cold cup, and a warm cup.\nSecond 7: Fill up a hot cup.\n</pre> <p>Example 3:</p> <pre>\nInput: amount = [5,0,0]\nOutput: 5\nExplanation: Every second, we fill up a cold cup.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>amount.length == 3</code></li> <li><code>0 &lt;= amount[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2336/","title":"2336. Smallest Number in Infinite Set","text":"Problem <p>You have a set which contains all positive integers <code>[1, 2, 3, 4, 5, ...]</code>.</p> <p>Implement the <code>SmallestInfiniteSet</code> class:</p> <ul> <li><code>SmallestInfiniteSet()</code> Initializes the SmallestInfiniteSet object to contain all positive integers.</li> <li><code>int popSmallest()</code> Removes and returns the smallest integer contained in the infinite set.</li> <li><code>void addBack(int num)</code> Adds a positive integer <code>num</code> back into the infinite set, if it is not already in the infinite set.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"SmallestInfiniteSet\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\", \"addBack\", \"popSmallest\", \"popSmallest\", \"popSmallest\"]\n[[], [2], [], [], [], [1], [], [], []]\nOutput\n[null, null, 1, 2, 3, null, 1, 4, 5]\n\nExplanation\nSmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();\nsmallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.\nsmallestInfiniteSet.addBack(1);    // 1 is added back to the set.\nsmallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and\n                                   // is the smallest number, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.\nsmallestInfiniteSet.popSmallest(); // return 5, and remove it from the set.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 1000</code></li> <li>At most <code>1000</code> calls will be made in total to <code>popSmallest</code> and <code>addBack</code>.</li> </ul>"},{"location":"LeetCode_Problems/2337/","title":"2337. Move Pieces to Obtain a String","text":"Problem <p>You are given two strings <code>start</code> and <code>target</code>, both of length <code>n</code>. Each string consists only of the characters <code>'L'</code>, <code>'R'</code>, and <code>'_'</code> where:</p> <ul> <li>The characters <code>'L'</code> and <code>'R'</code> represent pieces, where a piece <code>'L'</code> can move to the left only if there is a blank space directly to its left, and a piece <code>'R'</code> can move to the right only if there is a blank space directly to its right.</li> <li>The character <code>'_'</code> represents a blank space that can be occupied by any of the <code>'L'</code> or <code>'R'</code> pieces.</li> </ul> <p>Return <code>true</code> if it is possible to obtain the string <code>target</code> by moving the pieces of the string <code>start</code> any number of times. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: start = \"_L__R__R_\", target = \"L______RR\"\nOutput: true\nExplanation: We can obtain the string target from start by doing the following moves:\n- Move the first piece one step to the left, start becomes equal to \"L___R__R_\".\n- Move the last piece one step to the right, start becomes equal to \"L___R___R\".\n- Move the second piece three steps to the right, start becomes equal to \"L______RR\".\nSince it is possible to get the string target from start, we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: start = \"R_L_\", target = \"__LR\"\nOutput: false\nExplanation: The 'R' piece in the string start can move one step to the right to obtain \"_RL_\".\nAfter that, no pieces can move anymore, so it is impossible to obtain the string target from start.\n</pre> <p>Example 3:</p> <pre>\nInput: start = \"_R\", target = \"R_\"\nOutput: false\nExplanation: The piece in the string start can move only to the right, so it is impossible to obtain the string target from start.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == start.length == target.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>start</code> and <code>target</code> consist of the characters <code>'L'</code>, <code>'R'</code>, and <code>'_'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2338/","title":"2338. Count the Number of Ideal Arrays","text":"Problem <p>You are given two integers <code>n</code> and <code>maxValue</code>, which are used to describe an ideal array.</p> <p>A 0-indexed integer array <code>arr</code> of length <code>n</code> is considered ideal if the following conditions hold:</p> <ul> <li>Every <code>arr[i]</code> is a value from <code>1</code> to <code>maxValue</code>, for <code>0 &lt;= i &lt; n</code>.</li> <li>Every <code>arr[i]</code> is divisible by <code>arr[i - 1]</code>, for <code>0 &lt; i &lt; n</code>.</li> </ul> <p>Return the number of distinct ideal arrays of length <code>n</code>. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2, maxValue = 5\nOutput: 10\nExplanation: The following are the possible ideal arrays:\n- Arrays starting with the value 1 (5 arrays): [1,1], [1,2], [1,3], [1,4], [1,5]\n- Arrays starting with the value 2 (2 arrays): [2,2], [2,4]\n- Arrays starting with the value 3 (1 array): [3,3]\n- Arrays starting with the value 4 (1 array): [4,4]\n- Arrays starting with the value 5 (1 array): [5,5]\nThere are a total of 5 + 2 + 1 + 1 + 1 = 10 distinct ideal arrays.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5, maxValue = 3\nOutput: 11\nExplanation: The following are the possible ideal arrays:\n- Arrays starting with the value 1 (9 arrays): \n   - With no other distinct values (1 array): [1,1,1,1,1] \n   - With 2<sup>nd</sup> distinct value 2 (4 arrays): [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]\n   - With 2<sup>nd</sup> distinct value 3 (4 arrays): [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3]\n- Arrays starting with the value 2 (1 array): [2,2,2,2,2]\n- Arrays starting with the value 3 (1 array): [3,3,3,3,3]\nThere are a total of 9 + 1 + 1 = 11 distinct ideal arrays.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= maxValue &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2339/","title":"2339. All the Matches of the League","text":"Problem"},{"location":"LeetCode_Problems/2340/","title":"2340. Minimum Adjacent Swaps to Make a Valid Array","text":"Problem"},{"location":"LeetCode_Problems/2341/","title":"2341. Maximum Number of Pairs in Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. In one operation, you may do the following:</p> <ul> <li>Choose two integers in <code>nums</code> that are equal.</li> <li>Remove both integers from <code>nums</code>, forming a pair.</li> </ul> <p>The operation is done on <code>nums</code> as many times as possible.</p> <p>Return a 0-indexed integer array <code>answer</code> of size <code>2</code> where <code>answer[0]</code> is the number of pairs that are formed and <code>answer[1]</code> is the number of leftover integers in <code>nums</code> after doing the operation as many times as possible.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,2,1,3,2,2]\nOutput: [3,1]\nExplanation:\nForm a pair with nums[0] and nums[3] and remove them from nums. Now, nums = [3,2,3,2,2].\nForm a pair with nums[0] and nums[2] and remove them from nums. Now, nums = [2,2,2].\nForm a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [2].\nNo more pairs can be formed. A total of 3 pairs have been formed, and there is 1 number leftover in nums.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1]\nOutput: [1,0]\nExplanation: Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [].\nNo more pairs can be formed. A total of 1 pair has been formed, and there are 0 numbers leftover in nums.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [0]\nOutput: [0,1]\nExplanation: No pairs can be formed, and there is 1 number leftover in nums.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2342/","title":"2342. Max Sum of a Pair With Equal Sum of Digits","text":"Problem <p>You are given a 0-indexed array <code>nums</code> consisting of positive integers. You can choose two indices <code>i</code> and <code>j</code>, such that <code>i != j</code>, and the sum of digits of the number <code>nums[i]</code> is equal to that of <code>nums[j]</code>.</p> <p>Return the maximum value of <code>nums[i] + nums[j]</code> that you can obtain over all possible indices <code>i</code> and <code>j</code> that satisfy the conditions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [18,43,36,13,7]\nOutput: 54\nExplanation: The pairs (i, j) that satisfy the conditions are:\n- (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.\n- (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.\nSo the maximum sum that we can obtain is 54.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [10,12,19,14]\nOutput: -1\nExplanation: There are no two numbers that satisfy the conditions, so we return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2343/","title":"2343. Query Kth Smallest Trimmed Number","text":"Problem <p>You are given a 0-indexed array of strings <code>nums</code>, where each string is of equal length and consists of only digits.</p> <p>You are also given a 0-indexed 2D integer array <code>queries</code> where <code>queries[i] = [k<sub>i</sub>, trim<sub>i</sub>]</code>. For each <code>queries[i]</code>, you need to:</p> <ul> <li>Trim each number in <code>nums</code> to its rightmost <code>trim<sub>i</sub></code> digits.</li> <li>Determine the index of the <code>k<sub>i</sub><sup>th</sup></code> smallest trimmed number in <code>nums</code>. If two trimmed numbers are equal, the number with the lower index is considered to be smaller.</li> <li>Reset each number in <code>nums</code> to its original length.</li> </ul> <p>Return an array <code>answer</code> of the same length as <code>queries</code>, where <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p>Note:</p> <ul> <li>To trim to the rightmost <code>x</code> digits means to keep removing the leftmost digit, until only <code>x</code> digits remain.</li> <li>Strings in <code>nums</code> may contain leading zeros.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [\"102\",\"473\",\"251\",\"814\"], queries = [[1,1],[2,3],[4,2],[1,2]]\nOutput: [2,2,1,0]\nExplanation:\n1. After trimming to the last digit, nums = [\"2\",\"3\",\"1\",\"4\"]. The smallest number is 1 at index 2.\n2. Trimmed to the last 3 digits, nums is unchanged. The 2<sup>nd</sup> smallest number is 251 at index 2.\n3. Trimmed to the last 2 digits, nums = [\"02\",\"73\",\"51\",\"14\"]. The 4<sup>th</sup> smallest number is 73.\n4. Trimmed to the last 2 digits, the smallest number is 2 at index 0.\n   Note that the trimmed number \"02\" is evaluated as 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [\"24\",\"37\",\"96\",\"04\"], queries = [[2,1],[2,2]]\nOutput: [3,0]\nExplanation:\n1. Trimmed to the last digit, nums = [\"4\",\"7\",\"6\",\"4\"]. The 2<sup>nd</sup> smallest number is 4 at index 3.\n   There are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3.\n2. Trimmed to the last 2 digits, nums is unchanged. The 2<sup>nd</sup> smallest number is 24.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i].length &lt;= 100</code></li> <li><code>nums[i]</code> consists of only digits.</li> <li>All <code>nums[i].length</code> are equal.</li> <li><code>1 &lt;= queries.length &lt;= 100</code></li> <li><code>queries[i].length == 2</code></li> <li><code>1 &lt;= k<sub>i</sub> &lt;= nums.length</code></li> <li><code>1 &lt;= trim<sub>i</sub> &lt;= nums[i].length</code></li> </ul> <p> </p> <p>Follow up: Could you use the Radix Sort Algorithm to solve this problem? What will be the complexity of that solution?</p>"},{"location":"LeetCode_Problems/2344/","title":"2344. Minimum Deletions to Make Array Divisible","text":"Problem <p>You are given two positive integer arrays <code>nums</code> and <code>numsDivide</code>. You can delete any number of elements from <code>nums</code>.</p> <p>Return the minimum number of deletions such that the smallest element in <code>nums</code> divides all the elements of <code>numsDivide</code>. If this is not possible, return <code>-1</code>.</p> <p>Note that an integer <code>x</code> divides <code>y</code> if <code>y % x == 0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]\nOutput: 2\nExplanation: \nThe smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsDivide.\nWe use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3].\nThe smallest element in [3,4,3] is 3, which divides all the elements of numsDivide.\nIt can be shown that 2 is the minimum number of deletions needed.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,3,6], numsDivide = [8,2,6,10]\nOutput: -1\nExplanation: \nWe want the smallest element in nums to divide all the elements of numsDivide.\nThere is no way to delete elements from nums to allow this.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length, numsDivide.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i], numsDivide[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2345/","title":"2345. Finding the Number of Visible Mountains","text":"Problem"},{"location":"LeetCode_Problems/2346/","title":"2346. Compute the Rank as a Percentage","text":"Problem"},{"location":"LeetCode_Problems/2347/","title":"2347. Best Poker Hand","text":"Problem <p>You are given an integer array <code>ranks</code> and a character array <code>suits</code>. You have <code>5</code> cards where the <code>i<sup>th</sup></code> card has a rank of <code>ranks[i]</code> and a suit of <code>suits[i]</code>.</p> <p>The following are the types of poker hands you can make from best to worst:</p> <ol> <li><code>\"Flush\"</code>: Five cards of the same suit.</li> <li><code>\"Three of a Kind\"</code>: Three cards of the same rank.</li> <li><code>\"Pair\"</code>: Two cards of the same rank.</li> <li><code>\"High Card\"</code>: Any single card.</li> </ol> <p>Return a string representing the best type of poker hand you can make with the given cards.</p> <p>Note that the return values are case-sensitive.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: ranks = [13,2,3,1,9], suits = [\"a\",\"a\",\"a\",\"a\",\"a\"]\nOutput: \"Flush\"\nExplanation: The hand with all the cards consists of 5 cards with the same suit, so we have a \"Flush\".\n</pre> <p>Example 2:</p> <pre>\nInput: ranks = [4,4,2,4,4], suits = [\"d\",\"a\",\"a\",\"b\",\"c\"]\nOutput: \"Three of a Kind\"\nExplanation: The hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a \"Three of a Kind\".\nNote that we could also make a \"Pair\" hand but \"Three of a Kind\" is a better hand.\nAlso note that other cards could be used to make the \"Three of a Kind\" hand.</pre> <p>Example 3:</p> <pre>\nInput: ranks = [10,10,2,12,9], suits = [\"a\",\"b\",\"c\",\"a\",\"d\"]\nOutput: \"Pair\"\nExplanation: The hand with the first and second card consists of 2 cards with the same rank, so we have a \"Pair\".\nNote that we cannot make a \"Flush\" or a \"Three of a Kind\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>ranks.length == suits.length == 5</code></li> <li><code>1 &lt;= ranks[i] &lt;= 13</code></li> <li><code>'a' &lt;= suits[i] &lt;= 'd'</code></li> <li>No two cards have the same rank and suit.</li> </ul>"},{"location":"LeetCode_Problems/2348/","title":"2348. Number of Zero-Filled Subarrays","text":"Problem <p>Given an integer array <code>nums</code>, return the number of subarrays filled with <code>0</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,0,0,2,0,0,4]\nOutput: 6\nExplanation: \nThere are 4 occurrences of [0] as a subarray.\nThere are 2 occurrences of [0,0] as a subarray.\nThere is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,0,0,2,0,0]\nOutput: 9\nExplanation:\nThere are 5 occurrences of [0] as a subarray.\nThere are 3 occurrences of [0,0] as a subarray.\nThere is 1 occurrence of [0,0,0] as a subarray.\nThere is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,10,2019]\nOutput: 0\nExplanation: There is no subarray filled with 0. Therefore, we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2349/","title":"2349. Design a Number Container System","text":"Problem <p>Design a number container system that can do the following:</p> <ul> <li>Insert or Replace a number at the given index in the system.</li> <li>Return the smallest index for the given number in the system.</li> </ul> <p>Implement the <code>NumberContainers</code> class:</p> <ul> <li><code>NumberContainers()</code> Initializes the number container system.</li> <li><code>void change(int index, int number)</code> Fills the container at <code>index</code> with the <code>number</code>. If there is already a number at that <code>index</code>, replace it.</li> <li><code>int find(int number)</code> Returns the smallest index for the given <code>number</code>, or <code>-1</code> if there is no index that is filled by <code>number</code> in the system.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"NumberContainers\", \"find\", \"change\", \"change\", \"change\", \"change\", \"find\", \"change\", \"find\"]\n[[], [10], [2, 10], [1, 10], [3, 10], [5, 10], [10], [1, 20], [10]]\nOutput\n[null, -1, null, null, null, null, 1, null, 2]\n\nExplanation\nNumberContainers nc = new NumberContainers();\nnc.find(10); // There is no index that is filled with number 10. Therefore, we return -1.\nnc.change(2, 10); // Your container at index 2 will be filled with number 10.\nnc.change(1, 10); // Your container at index 1 will be filled with number 10.\nnc.change(3, 10); // Your container at index 3 will be filled with number 10.\nnc.change(5, 10); // Your container at index 5 will be filled with number 10.\nnc.find(10); // Number 10 is at the indices 1, 2, 3, and 5. Since the smallest index that is filled with 10 is 1, we return 1.\nnc.change(1, 20); // Your container at index 1 will be filled with number 20. Note that index 1 was filled with 10 and then replaced with 20. \nnc.find(10); // Number 10 is at the indices 2, 3, and 5. The smallest index that is filled with 10 is 2. Therefore, we return 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= index, number &lt;= 10<sup>9</sup></code></li> <li>At most <code>10<sup>5</sup></code> calls will be made in total to <code>change</code> and <code>find</code>.</li> </ul>"},{"location":"LeetCode_Problems/2350/","title":"2350. Shortest Impossible Sequence of Rolls","text":"Problem <p>You are given an integer array <code>rolls</code> of length <code>n</code> and an integer <code>k</code>. You roll a <code>k</code> sided dice numbered from <code>1</code> to <code>k</code>, <code>n</code> times, where the result of the <code>i<sup>th</sup></code> roll is <code>rolls[i]</code>.</p> <p>Return the length of the shortest sequence of rolls that cannot be taken from <code>rolls</code>.</p> <p>A sequence of rolls of length <code>len</code> is the result of rolling a <code>k</code> sided dice <code>len</code> times.</p> <p>Note that the sequence taken does not have to be consecutive as long as it is in order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: rolls = [4,2,1,2,3,3,2,4,1], k = 4\nOutput: 3\nExplanation: Every sequence of rolls of length 1, [1], [2], [3], [4], can be taken from rolls.\nEvery sequence of rolls of length 2, [1, 1], [1, 2], ..., [4, 4], can be taken from rolls.\nThe sequence [1, 4, 2] cannot be taken from rolls, so we return 3.\nNote that there are other sequences that cannot be taken from rolls.</pre> <p>Example 2:</p> <pre>\nInput: rolls = [1,1,2,2], k = 2\nOutput: 2\nExplanation: Every sequence of rolls of length 1, [1], [2], can be taken from rolls.\nThe sequence [2, 1] cannot be taken from rolls, so we return 2.\nNote that there are other sequences that cannot be taken from rolls but [2, 1] is the shortest.\n</pre> <p>Example 3:</p> <pre>\nInput: rolls = [1,1,3,2,2,2,3,3], k = 4\nOutput: 1\nExplanation: The sequence [4] cannot be taken from rolls, so we return 1.\nNote that there are other sequences that cannot be taken from rolls but [4] is the shortest.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == rolls.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= rolls[i] &lt;= k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2351/","title":"2351. First Letter to Appear Twice","text":"Problem <p>Given a string <code>s</code> consisting of lowercase English letters, return the first letter to appear twice.</p> <p>Note:</p> <ul> <li>A letter <code>a</code> appears twice before another letter <code>b</code> if the second occurrence of <code>a</code> is before the second occurrence of <code>b</code>.</li> <li><code>s</code> will contain at least one letter that appears twice.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abccbaacz\"\nOutput: \"c\"\nExplanation:\nThe letter 'a' appears on the indexes 0, 5 and 6.\nThe letter 'b' appears on the indexes 1 and 4.\nThe letter 'c' appears on the indexes 2, 3 and 7.\nThe letter 'z' appears on the index 8.\nThe letter 'c' is the first letter to appear twice, because out of all the letters the index of its second occurrence is the smallest.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcdd\"\nOutput: \"d\"\nExplanation:\nThe only letter that appears twice is 'd' so we return 'd'.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of lowercase English letters.</li> <li><code>s</code> has at least one repeated letter.</li> </ul>"},{"location":"LeetCode_Problems/2352/","title":"2352. Equal Row and Column Pairs","text":"Problem <p>Given a 0-indexed <code>n x n</code> integer matrix <code>grid</code>, return the number of pairs <code>(r<sub>i</sub>, c<sub>j</sub>)</code> such that row <code>r<sub>i</sub></code> and column <code>c<sub>j</sub></code> are equal.</p> <p>A row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[3,2,1],[1,7,6],[2,7,7]]\nOutput: 1\nExplanation: There is 1 equal row and column pair:\n- (Row 2, Column 1): [2,7,7]\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]\nOutput: 3\nExplanation: There are 3 equal row and column pairs:\n- (Row 0, Column 0): [3,1,2,2]\n- (Row 2, Column 2): [2,4,2,2]\n- (Row 3, Column 2): [2,4,2,2]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>1 &lt;= n &lt;= 200</code></li> <li><code>1 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2353/","title":"2353. Design a Food Rating System","text":"Problem <p>Design a food rating system that can do the following:</p> <ul> <li>Modify the rating of a food item listed in the system.</li> <li>Return the highest-rated food item for a type of cuisine in the system.</li> </ul> <p>Implement the <code>FoodRatings</code> class:</p> <ul> <li><code>FoodRatings(String[] foods, String[] cuisines, int[] ratings)</code> Initializes the system. The food items are described by <code>foods</code>, <code>cuisines</code> and <code>ratings</code>, all of which have a length of <code>n</code>.      <ul> <li><code>foods[i]</code> is the name of the <code>i<sup>th</sup></code> food,</li> <li><code>cuisines[i]</code> is the type of cuisine of the <code>i<sup>th</sup></code> food, and</li> <li><code>ratings[i]</code> is the initial rating of the <code>i<sup>th</sup></code> food.</li> </ul> </li> <li><code>void changeRating(String food, int newRating)</code> Changes the rating of the food item with the name <code>food</code>.</li> <li><code>String highestRated(String cuisine)</code> Returns the name of the food item that has the highest rating for the given type of <code>cuisine</code>. If there is a tie, return the item with the lexicographically smaller name.</li> </ul> <p>Note that a string <code>x</code> is lexicographically smaller than string <code>y</code> if <code>x</code> comes before <code>y</code> in dictionary order, that is, either <code>x</code> is a prefix of <code>y</code>, or if <code>i</code> is the first position such that <code>x[i] != y[i]</code>, then <code>x[i]</code> comes before <code>y[i]</code> in alphabetic order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"FoodRatings\", \"highestRated\", \"highestRated\", \"changeRating\", \"highestRated\", \"changeRating\", \"highestRated\"]\n[[[\"kimchi\", \"miso\", \"sushi\", \"moussaka\", \"ramen\", \"bulgogi\"], [\"korean\", \"japanese\", \"japanese\", \"greek\", \"japanese\", \"korean\"], [9, 12, 8, 15, 14, 7]], [\"korean\"], [\"japanese\"], [\"sushi\", 16], [\"japanese\"], [\"ramen\", 16], [\"japanese\"]]\nOutput\n[null, \"kimchi\", \"ramen\", null, \"sushi\", null, \"ramen\"]\n\nExplanation\nFoodRatings foodRatings = new FoodRatings([\"kimchi\", \"miso\", \"sushi\", \"moussaka\", \"ramen\", \"bulgogi\"], [\"korean\", \"japanese\", \"japanese\", \"greek\", \"japanese\", \"korean\"], [9, 12, 8, 15, 14, 7]);\nfoodRatings.highestRated(\"korean\"); // return \"kimchi\"\n                                    // \"kimchi\" is the highest rated korean food with a rating of 9.\nfoodRatings.highestRated(\"japanese\"); // return \"ramen\"\n                                      // \"ramen\" is the highest rated japanese food with a rating of 14.\nfoodRatings.changeRating(\"sushi\", 16); // \"sushi\" now has a rating of 16.\nfoodRatings.highestRated(\"japanese\"); // return \"sushi\"\n                                      // \"sushi\" is the highest rated japanese food with a rating of 16.\nfoodRatings.changeRating(\"ramen\", 16); // \"ramen\" now has a rating of 16.\nfoodRatings.highestRated(\"japanese\"); // return \"ramen\"\n                                      // Both \"sushi\" and \"ramen\" have a rating of 16.\n                                      // However, \"ramen\" is lexicographically smaller than \"sushi\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>n == foods.length == cuisines.length == ratings.length</code></li> <li><code>1 &lt;= foods[i].length, cuisines[i].length &lt;= 10</code></li> <li><code>foods[i]</code>, <code>cuisines[i]</code> consist of lowercase English letters.</li> <li><code>1 &lt;= ratings[i] &lt;= 10<sup>8</sup></code></li> <li>All the strings in <code>foods</code> are distinct.</li> <li><code>food</code> will be the name of a food item in the system across all calls to <code>changeRating</code>.</li> <li><code>cuisine</code> will be a type of cuisine of at least one food item in the system across all calls to <code>highestRated</code>.</li> <li>At most <code>2 * 10<sup>4</sup></code> calls in total will be made to <code>changeRating</code> and <code>highestRated</code>.</li> </ul>"},{"location":"LeetCode_Problems/2354/","title":"2354. Number of Excellent Pairs","text":"Problem <p>You are given a 0-indexed positive integer array <code>nums</code> and a positive integer <code>k</code>.</p> <p>A pair of numbers <code>(num1, num2)</code> is called excellent if the following conditions are satisfied:</p> <ul> <li>Both the numbers <code>num1</code> and <code>num2</code> exist in the array <code>nums</code>.</li> <li>The sum of the number of set bits in <code>num1 OR num2</code> and <code>num1 AND num2</code> is greater than or equal to <code>k</code>, where <code>OR</code> is the bitwise OR operation and <code>AND</code> is the bitwise AND operation.</li> </ul> <p>Return the number of distinct excellent pairs.</p> <p>Two pairs <code>(a, b)</code> and <code>(c, d)</code> are considered distinct if either <code>a != c</code> or <code>b != d</code>. For example, <code>(1, 2)</code> and <code>(2, 1)</code> are distinct.</p> <p>Note that a pair <code>(num1, num2)</code> such that <code>num1 == num2</code> can also be excellent if you have at least one occurrence of <code>num1</code> in the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,1], k = 3\nOutput: 5\nExplanation: The excellent pairs are the following:\n- (3, 3). (3 AND 3) and (3 OR 3) are both equal to (11) in binary. The total number of set bits is 2 + 2 = 4, which is greater than or equal to k = 3.\n- (2, 3) and (3, 2). (2 AND 3) is equal to (10) in binary, and (2 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\n- (1, 3) and (3, 1). (1 AND 3) is equal to (01) in binary, and (1 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\nSo the number of excellent pairs is 5.</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,1,1], k = 10\nOutput: 0\nExplanation: There are no excellent pairs for this array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= 60</code></li> </ul>"},{"location":"LeetCode_Problems/2355/","title":"2355. Maximum Number of Books You Can Take","text":"Problem"},{"location":"LeetCode_Problems/2356/","title":"2356. Number of Unique Subjects Taught by Each Teacher","text":"Problem <p>Table: <code>Teacher</code></p> <pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| teacher_id  | int  |\n| subject_id  | int  |\n| dept_id     | int  |\n+-------------+------+\n(subject_id, dept_id) is the primary key (combinations of columns with unique values) of this table.\nEach row in this table indicates that the teacher with teacher_id teaches the subject subject_id in the department dept_id.\n</pre> <p> </p> <p>Write a solution to calculate\u00a0the number of unique subjects each teacher teaches in the university.</p> <p>Return the result table in any order.</p> <p>The\u00a0result format is shown in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nTeacher table:\n+------------+------------+---------+\n| teacher_id | subject_id | dept_id |\n+------------+------------+---------+\n| 1          | 2          | 3       |\n| 1          | 2          | 4       |\n| 1          | 3          | 3       |\n| 2          | 1          | 1       |\n| 2          | 2          | 1       |\n| 2          | 3          | 1       |\n| 2          | 4          | 1       |\n+------------+------------+---------+\nOutput:  \n+------------+-----+\n| teacher_id | cnt |\n+------------+-----+\n| 1          | 2   |\n| 2          | 4   |\n+------------+-----+\nExplanation: \nTeacher 1:\n  - They teach subject 2 in departments 3 and 4.\n  - They teach subject 3 in department 3.\nTeacher 2:\n  - They teach subject 1 in department 1.\n  - They teach subject 2 in department 1.\n  - They teach subject 3 in department 1.\n  - They teach subject 4 in department 1.\n</pre>"},{"location":"LeetCode_Problems/2357/","title":"2357. Make Array Zero by Subtracting Equal Amounts","text":"Problem <p>You are given a non-negative integer array <code>nums</code>. In one operation, you must:</p> <ul> <li>Choose a positive integer <code>x</code> such that <code>x</code> is less than or equal to the smallest non-zero element in <code>nums</code>.</li> <li>Subtract <code>x</code> from every positive element in <code>nums</code>.</li> </ul> <p>Return the minimum number of operations to make every element in <code>nums</code> equal to <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,5,0,3,5]\nOutput: 3\nExplanation:\nIn the first operation, choose x = 1. Now, nums = [0,4,0,2,4].\nIn the second operation, choose x = 2. Now, nums = [0,2,0,0,2].\nIn the third operation, choose x = 2. Now, nums = [0,0,0,0,0].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0]\nOutput: 0\nExplanation: Each element in nums is already 0 so no operations are needed.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2358/","title":"2358. Maximum Number of Groups Entering a Competition","text":"Problem <p>You are given a positive integer array <code>grades</code> which represents the grades of students in a university. You would like to enter all these students into a competition in ordered non-empty groups, such that the ordering meets the following conditions:</p> <ul> <li>The sum of the grades of students in the <code>i<sup>th</sup></code> group is less than the sum of the grades of students in the <code>(i + 1)<sup>th</sup></code> group, for all groups (except the last).</li> <li>The total number of students in the <code>i<sup>th</sup></code> group is less than the total number of students in the <code>(i + 1)<sup>th</sup></code> group, for all groups (except the last).</li> </ul> <p>Return the maximum number of groups that can be formed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: grades = [10,6,12,7,3,5]\nOutput: 3\nExplanation: The following is a possible way to form 3 groups of students:\n- 1<sup>st</sup> group has the students with grades = [12]. Sum of grades: 12. Student count: 1\n- 2<sup>nd</sup> group has the students with grades = [6,7]. Sum of grades: 6 + 7 = 13. Student count: 2\n- 3<sup>rd</sup> group has the students with grades = [10,3,5]. Sum of grades: 10 + 3 + 5 = 18. Student count: 3\nIt can be shown that it is not possible to form more than 3 groups.\n</pre> <p>Example 2:</p> <pre>\nInput: grades = [8,8]\nOutput: 1\nExplanation: We can only form 1 group, since forming 2 groups would lead to an equal number of students in both groups.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= grades.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= grades[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2359/","title":"2359. Find Closest Node to Given Two Nodes","text":"Problem <p>You are given a directed graph of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>, where each node has at most one outgoing edge.</p> <p>The graph is represented with a given 0-indexed array <code>edges</code> of size <code>n</code>, indicating that there is a directed edge from node <code>i</code> to node <code>edges[i]</code>. If there is no outgoing edge from <code>i</code>, then <code>edges[i] == -1</code>.</p> <p>You are also given two integers <code>node1</code> and <code>node2</code>.</p> <p>Return the index of the node that can be reached from both <code>node1</code> and <code>node2</code>, such that the maximum between the distance from <code>node1</code> to that node, and from <code>node2</code> to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return <code>-1</code>.</p> <p>Note that <code>edges</code> may contain cycles.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: edges = [2,2,3,-1], node1 = 0, node2 = 1\nOutput: 2\nExplanation: The distance from node 0 to node 2 is 1, and the distance from node 1 to node 2 is 1.\nThe maximum of those two distances is 1. It can be proven that we cannot get a node with a smaller maximum distance than 1, so we return node 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: edges = [1,2,-1], node1 = 0, node2 = 2\nOutput: 2\nExplanation: The distance from node 0 to node 2 is 2, and the distance from node 2 to itself is 0.\nThe maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller maximum distance than 2, so we return node 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == edges.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-1 &lt;= edges[i] &lt; n</code></li> <li><code>edges[i] != i</code></li> <li><code>0 &lt;= node1, node2 &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/2360/","title":"2360. Longest Cycle in a Graph","text":"Problem <p>You are given a directed graph of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>, where each node has at most one outgoing edge.</p> <p>The graph is represented with a given 0-indexed array <code>edges</code> of size <code>n</code>, indicating that there is a directed edge from node <code>i</code> to node <code>edges[i]</code>. If there is no outgoing edge from node <code>i</code>, then <code>edges[i] == -1</code>.</p> <p>Return the length of the longest cycle in the graph. If no cycle exists, return <code>-1</code>.</p> <p>A cycle is a path that starts and ends at the same node.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: edges = [3,3,4,2,3]\nOutput: 3\nExplanation: The longest cycle in the graph is the cycle: 2 -&gt; 4 -&gt; 3 -&gt; 2.\nThe length of this cycle is 3, so 3 is returned.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: edges = [2,-1,3,1]\nOutput: -1\nExplanation: There are no cycles in this graph.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == edges.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-1 &lt;= edges[i] &lt; n</code></li> <li><code>edges[i] != i</code></li> </ul>"},{"location":"LeetCode_Problems/2361/","title":"2361. Minimum Costs Using the Train Line","text":"Problem"},{"location":"LeetCode_Problems/2362/","title":"2362. Generate the Invoice","text":"Problem"},{"location":"LeetCode_Problems/2363/","title":"2363. Merge Similar Items","text":"Problem <p>You are given two 2D integer arrays, <code>items1</code> and <code>items2</code>, representing two sets of items. Each array <code>items</code> has the following properties:</p> <ul> <li><code>items[i] = [value<sub>i</sub>, weight<sub>i</sub>]</code> where <code>value<sub>i</sub></code> represents the value and <code>weight<sub>i</sub></code> represents the weight of the <code>i<sup>th</sup></code> item.</li> <li>The value of each item in <code>items</code> is unique.</li> </ul> <p>Return a 2D integer array <code>ret</code> where <code>ret[i] = [value<sub>i</sub>, weight<sub>i</sub>]</code>, with <code>weight<sub>i</sub></code> being the sum of weights of all items with value <code>value<sub>i</sub></code>.</p> <p>Note: <code>ret</code> should be returned in ascending order by value.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: items1 = [[1,1],[4,5],[3,8]], items2 = [[3,1],[1,5]]\nOutput: [[1,6],[3,9],[4,5]]\nExplanation: \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 5, total weight = 1 + 5 = 6.\nThe item with value = 3 occurs in items1 with weight = 8 and in items2 with weight = 1, total weight = 8 + 1 = 9.\nThe item with value = 4 occurs in items1 with weight = 5, total weight = 5.  \nTherefore, we return [[1,6],[3,9],[4,5]].\n</pre> <p>Example 2:</p> <pre>\nInput: items1 = [[1,1],[3,2],[2,3]], items2 = [[2,1],[3,2],[1,3]]\nOutput: [[1,4],[2,4],[3,4]]\nExplanation: \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 3, total weight = 1 + 3 = 4.\nThe item with value = 2 occurs in items1 with weight = 3 and in items2 with weight = 1, total weight = 3 + 1 = 4.\nThe item with value = 3 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4.\nTherefore, we return [[1,4],[2,4],[3,4]].</pre> <p>Example 3:</p> <pre>\nInput: items1 = [[1,3],[2,2]], items2 = [[7,1],[2,2],[1,4]]\nOutput: [[1,7],[2,4],[7,1]]\nExplanation:\nThe item with value = 1 occurs in items1 with weight = 3 and in items2 with weight = 4, total weight = 3 + 4 = 7. \nThe item with value = 2 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4. \nThe item with value = 7 occurs in items2 with weight = 1, total weight = 1.\nTherefore, we return [[1,7],[2,4],[7,1]].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= items1.length, items2.length &lt;= 1000</code></li> <li><code>items1[i].length == items2[i].length == 2</code></li> <li><code>1 &lt;= value<sub>i</sub>, weight<sub>i</sub> &lt;= 1000</code></li> <li>Each <code>value<sub>i</sub></code> in <code>items1</code> is unique.</li> <li>Each <code>value<sub>i</sub></code> in <code>items2</code> is unique.</li> </ul>"},{"location":"LeetCode_Problems/2364/","title":"2364. Count Number of Bad Pairs","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. A pair of indices <code>(i, j)</code> is a bad pair if <code>i &lt; j</code> and <code>j - i != nums[j] - nums[i]</code>.</p> <p>Return the total number of bad pairs in <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,1,3,3]\nOutput: 5\nExplanation: The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.\nThe pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.\nThe pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.\nThe pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.\nThe pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.\nThere are a total of 5 bad pairs, so we return 5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4,5]\nOutput: 0\nExplanation: There are no bad pairs.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2365/","title":"2365. Task Scheduler II","text":"Problem <p>You are given a 0-indexed array of positive integers <code>tasks</code>, representing tasks that need to be completed in order, where <code>tasks[i]</code> represents the type of the <code>i<sup>th</sup></code> task.</p> <p>You are also given a positive integer <code>space</code>, which represents the minimum number of days that must pass after the completion of a task before another task of the same type can be performed.</p> <p>Each day, until all tasks have been completed, you must either:</p> <ul> <li>Complete the next task from <code>tasks</code>, or</li> <li>Take a break.</li> </ul> <p>Return the minimum number of days needed to complete all tasks.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tasks = [1,2,1,2,3,1], space = 3\nOutput: 9\nExplanation:\nOne way to complete all tasks in 9 days is as follows:\nDay 1: Complete the 0th task.\nDay 2: Complete the 1st task.\nDay 3: Take a break.\nDay 4: Take a break.\nDay 5: Complete the 2nd task.\nDay 6: Complete the 3rd task.\nDay 7: Take a break.\nDay 8: Complete the 4th task.\nDay 9: Complete the 5th task.\nIt can be shown that the tasks cannot be completed in less than 9 days.\n</pre> <p>Example 2:</p> <pre>\nInput: tasks = [5,8,8,5], space = 2\nOutput: 6\nExplanation:\nOne way to complete all tasks in 6 days is as follows:\nDay 1: Complete the 0th task.\nDay 2: Complete the 1st task.\nDay 3: Take a break.\nDay 4: Take a break.\nDay 5: Complete the 2nd task.\nDay 6: Complete the 3rd task.\nIt can be shown that the tasks cannot be completed in less than 6 days.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= tasks[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= space &lt;= tasks.length</code></li> </ul>"},{"location":"LeetCode_Problems/2366/","title":"2366. Minimum Replacements to Sort the Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. In one operation you can replace any element of the array with any two elements that sum to it.</p> <ul> <li>For example, consider <code>nums = [5,6,7]</code>. In one operation, we can replace <code>nums[1]</code> with <code>2</code> and <code>4</code> and convert <code>nums</code> to <code>[5,2,4,7]</code>.</li> </ul> <p>Return the minimum number of operations to make an array that is sorted in non-decreasing order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,9,3]\nOutput: 2\nExplanation: Here are the steps to sort the array in non-decreasing order:\n- From [3,9,3], replace the 9 with 3 and 6 so the array becomes [3,3,6,3]\n- From [3,3,6,3], replace the 6 with 3 and 3 so the array becomes [3,3,3,3,3]\nThere are 2 steps to sort the array in non-decreasing order. Therefore, we return 2.\n\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4,5]\nOutput: 0\nExplanation: The array is already in non-decreasing order. Therefore, we return 0. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2367/","title":"2367. Number of Arithmetic Triplets","text":"Problem <p>You are given a 0-indexed, strictly increasing integer array <code>nums</code> and a positive integer <code>diff</code>. A triplet <code>(i, j, k)</code> is an arithmetic triplet if the following conditions are met:</p> <ul> <li><code>i &lt; j &lt; k</code>,</li> <li><code>nums[j] - nums[i] == diff</code>, and</li> <li><code>nums[k] - nums[j] == diff</code>.</li> </ul> <p>Return the number of unique arithmetic triplets.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,4,6,7,10], diff = 3\nOutput: 2\nExplanation:\n(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.\n(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,5,6,7,8,9], diff = 2\nOutput: 2\nExplanation:\n(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.\n(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 200</code></li> <li><code>0 &lt;= nums[i] &lt;= 200</code></li> <li><code>1 &lt;= diff &lt;= 50</code></li> <li><code>nums</code> is strictly increasing.</li> </ul>"},{"location":"LeetCode_Problems/2368/","title":"2368. Reachable Nodes With Restrictions","text":"Problem <p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> edges.</p> <p>You are given a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree. You are also given an integer array <code>restricted</code> which represents restricted nodes.</p> <p>Return the maximum number of nodes you can reach from node <code>0</code> without visiting a restricted node.</p> <p>Note that node <code>0</code> will not be a restricted node.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]\nOutput: 4\nExplanation: The diagram above shows the tree.\nWe have that [0,1,2,3] are the only nodes that can be reached from node 0 without visiting a restricted node.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1]\nOutput: 3\nExplanation: The diagram above shows the tree.\nWe have that [0,5,6] are the only nodes that can be reached from node 0 without visiting a restricted node.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>edges</code> represents a valid tree.</li> <li><code>1 &lt;= restricted.length &lt; n</code></li> <li><code>1 &lt;= restricted[i] &lt; n</code></li> <li>All the values of <code>restricted</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2369/","title":"2369. Check if There is a Valid Partition For The Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. You have to partition the array into one or more contiguous subarrays.</p> <p>We call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions:</p> <ol> <li>The subarray consists of exactly <code>2,</code> equal elements. For example, the subarray <code>[2,2]</code> is good.</li> <li>The subarray consists of exactly <code>3,</code> equal elements. For example, the subarray <code>[4,4,4]</code> is good.</li> <li>The subarray consists of exactly <code>3</code> consecutive increasing elements, that is, the difference between adjacent elements is <code>1</code>. For example, the subarray <code>[3,4,5]</code> is good, but the subarray <code>[1,3,5]</code> is not.</li> </ol> <p>Return <code>true</code> if the array has at least one valid partition. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,4,4,5,6]\nOutput: true\nExplanation: The array can be partitioned into the subarrays [4,4] and [4,5,6].\nThis partition is valid, so we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1,2]\nOutput: false\nExplanation: There is no valid partition for this array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2370/","title":"2370. Longest Ideal Subsequence","text":"Problem <p>You are given a string <code>s</code> consisting of lowercase letters and an integer <code>k</code>. We call a string <code>t</code> ideal if the following conditions are satisfied:</p> <ul> <li><code>t</code> is a subsequence of the string <code>s</code>.</li> <li>The absolute difference in the alphabet order of every two adjacent letters in <code>t</code> is less than or equal to <code>k</code>.</li> </ul> <p>Return the length of the longest ideal string.</p> <p>A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p> <p>Note that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of <code>'a'</code> and <code>'z'</code> is <code>25</code>, not <code>1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"acfgbd\", k = 2\nOutput: 4\nExplanation: The longest ideal string is \"acbd\". The length of this string is 4, so 4 is returned.\nNote that \"acfgbd\" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order.</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcd\", k = 3\nOutput: 4\nExplanation: The longest ideal string is \"abcd\". The length of this string is 4, so 4 is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= k &lt;= 25</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2371/","title":"2371. Minimize Maximum Value in a Grid","text":"Problem"},{"location":"LeetCode_Problems/2372/","title":"2372. Calculate the Influence of Each Salesperson","text":"Problem"},{"location":"LeetCode_Problems/2373/","title":"2373. Largest Local Values in a Matrix","text":"Problem <p>You are given an <code>n x n</code> integer matrix <code>grid</code>.</p> <p>Generate an integer matrix <code>maxLocal</code> of size <code>(n - 2) x (n - 2)</code> such that:</p> <ul> <li><code>maxLocal[i][j]</code> is equal to the largest value of the <code>3 x 3</code> matrix in <code>grid</code> centered around row <code>i + 1</code> and column <code>j + 1</code>.</li> </ul> <p>In other words, we want to find the largest value in every contiguous <code>3 x 3</code> matrix in <code>grid</code>.</p> <p>Return the generated matrix.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]\nOutput: [[9,9],[8,6]]\nExplanation: The diagram above shows the original matrix and the generated matrix.\nNotice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]\nOutput: [[2,2,2],[2,2,2],[2,2,2]]\nExplanation: Notice that the 2 is contained within every contiguous 3 x 3 matrix in grid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>3 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= grid[i][j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2374/","title":"2374. Node With Highest Edge Score","text":"Problem <p>You are given a directed graph with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, where each node has exactly one outgoing edge.</p> <p>The graph is represented by a given 0-indexed integer array <code>edges</code> of length <code>n</code>, where <code>edges[i]</code> indicates that there is a directed edge from node <code>i</code> to node <code>edges[i]</code>.</p> <p>The edge score of a node <code>i</code> is defined as the sum of the labels of all the nodes that have an edge pointing to <code>i</code>.</p> <p>Return the node with the highest edge score. If multiple nodes have the same edge score, return the node with the smallest index.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: edges = [1,0,0,0,0,7,7,5]\nOutput: 7\nExplanation:\n- The nodes 1, 2, 3 and 4 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 + 3 + 4 = 10.\n- The node 0 has an edge pointing to node 1. The edge score of node 1 is 0.\n- The node 7 has an edge pointing to node 5. The edge score of node 5 is 7.\n- The nodes 5 and 6 have an edge pointing to node 7. The edge score of node 7 is 5 + 6 = 11.\nNode 7 has the highest edge score so return 7.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: edges = [2,0,0,2]\nOutput: 0\nExplanation:\n- The nodes 1 and 2 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 = 3.\n- The nodes 0 and 3 have an edge pointing to node 2. The edge score of node 2 is 0 + 3 = 3.\nNodes 0 and 2 both have an edge score of 3. Since node 0 has a smaller index, we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == edges.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= edges[i] &lt; n</code></li> <li><code>edges[i] != i</code></li> </ul>"},{"location":"LeetCode_Problems/2375/","title":"2375. Construct Smallest Number From DI String","text":"Problem <p>You are given a 0-indexed string <code>pattern</code> of length <code>n</code> consisting of the characters <code>'I'</code> meaning increasing and <code>'D'</code> meaning decreasing.</p> <p>A 0-indexed string <code>num</code> of length <code>n + 1</code> is created using the following conditions:</p> <ul> <li><code>num</code> consists of the digits <code>'1'</code> to <code>'9'</code>, where each digit is used at most once.</li> <li>If <code>pattern[i] == 'I'</code>, then <code>num[i] &lt; num[i + 1]</code>.</li> <li>If <code>pattern[i] == 'D'</code>, then <code>num[i] &gt; num[i + 1]</code>.</li> </ul> <p>Return the lexicographically smallest possible string <code>num</code> that meets the conditions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: pattern = \"IIIDIDDD\"\nOutput: \"123549876\"\nExplanation:\nAt indices 0, 1, 2, and 4 we must have that num[i] &lt; num[i+1].\nAt indices 3, 5, 6, and 7 we must have that num[i] &gt; num[i+1].\nSome possible values of num are \"245639871\", \"135749862\", and \"123849765\".\nIt can be proven that \"123549876\" is the smallest possible num that meets the conditions.\nNote that \"123414321\" is not possible because the digit '1' is used more than once.</pre> <p>Example 2:</p> <pre>\nInput: pattern = \"DDD\"\nOutput: \"4321\"\nExplanation:\nSome possible values of num are \"9876\", \"7321\", and \"8742\".\nIt can be proven that \"4321\" is the smallest possible num that meets the conditions.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= pattern.length &lt;= 8</code></li> <li><code>pattern</code> consists of only the letters <code>'I'</code> and <code>'D'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2376/","title":"2376. Count Special Integers","text":"Problem <p>We call a positive integer special if all of its digits are distinct.</p> <p>Given a positive integer <code>n</code>, return the number of special integers that belong to the interval <code>[1, n]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 20\nOutput: 19\nExplanation: All the integers from 1 to 20, except 11, are special. Thus, there are 19 special integers.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5\nOutput: 5\nExplanation: All the integers from 1 to 5 are special.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 135\nOutput: 110\nExplanation: There are 110 integers from 1 to 135 that are special.\nSome of the integers that are not special are: 22, 114, and 131.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2 * 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2377/","title":"2377. Sort the Olympic Table","text":"Problem"},{"location":"LeetCode_Problems/2378/","title":"2378. Choose Edges to Maximize Score in a Tree","text":"Problem"},{"location":"LeetCode_Problems/2379/","title":"2379. Minimum Recolors to Get K Consecutive Black Blocks","text":"Problem <p>You are given a 0-indexed string <code>blocks</code> of length <code>n</code>, where <code>blocks[i]</code> is either <code>'W'</code> or <code>'B'</code>, representing the color of the <code>i<sup>th</sup></code> block. The characters <code>'W'</code> and <code>'B'</code> denote the colors white and black, respectively.</p> <p>You are also given an integer <code>k</code>, which is the desired number of consecutive black blocks.</p> <p>In one operation, you can recolor a white block such that it becomes a black block.</p> <p>Return the minimum number of operations needed such that there is at least one occurrence of <code>k</code> consecutive black blocks.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: blocks = \"WBBWWBBWBW\", k = 7\nOutput: 3\nExplanation:\nOne way to achieve 7 consecutive black blocks is to recolor the 0th, 3rd, and 4th blocks\nso that blocks = \"BBBBBBBWBW\". \nIt can be shown that there is no way to achieve 7 consecutive black blocks in less than 3 operations.\nTherefore, we return 3.\n</pre> <p>Example 2:</p> <pre>\nInput: blocks = \"WBWBBBW\", k = 2\nOutput: 0\nExplanation:\nNo changes need to be made, since 2 consecutive black blocks already exist.\nTherefore, we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == blocks.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>blocks[i]</code> is either <code>'W'</code> or <code>'B'</code>.</li> <li><code>1 &lt;= k &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2380/","title":"2380. Time Needed to Rearrange a Binary String","text":"Problem <p>You are given a binary string <code>s</code>. In one second, all occurrences of <code>\"01\"</code> are simultaneously replaced with <code>\"10\"</code>. This process repeats until no occurrences of <code>\"01\"</code> exist.</p> <p>Return the number of seconds needed to complete this process.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"0110101\"\nOutput: 4\nExplanation: \nAfter one second, s becomes \"1011010\".\nAfter another second, s becomes \"1101100\".\nAfter the third second, s becomes \"1110100\".\nAfter the fourth second, s becomes \"1111000\".\nNo occurrence of \"01\" exists any longer, and the process needed 4 seconds to complete,\nso we return 4.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"11100\"\nOutput: 0\nExplanation:\nNo occurrence of \"01\" exists in s, and the processes needed 0 seconds to complete,\nso we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul> <p> </p> <p>Follow up:</p> <p>Can you solve this problem in O(n) time complexity?</p>"},{"location":"LeetCode_Problems/2381/","title":"2381. Shifting Letters II","text":"Problem <p>You are given a string <code>s</code> of lowercase English letters and a 2D integer array <code>shifts</code> where <code>shifts[i] = [start<sub>i</sub>, end<sub>i</sub>, direction<sub>i</sub>]</code>. For every <code>i</code>, shift the characters in <code>s</code> from the index <code>start<sub>i</sub></code> to the index <code>end<sub>i</sub></code> (inclusive) forward if <code>direction<sub>i</sub> = 1</code>, or shift the characters backward if <code>direction<sub>i</sub> = 0</code>.</p> <p>Shifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that <code>'z'</code> becomes <code>'a'</code>). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that <code>'a'</code> becomes <code>'z'</code>).</p> <p>Return the final string after all such shifts to <code>s</code> are applied.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abc\", shifts = [[0,1,0],[1,2,1],[0,2,1]]\nOutput: \"ace\"\nExplanation: Firstly, shift the characters from index 0 to index 1 backward. Now s = \"zac\".\nSecondly, shift the characters from index 1 to index 2 forward. Now s = \"zbd\".\nFinally, shift the characters from index 0 to index 2 forward. Now s = \"ace\".</pre> <p>Example 2:</p> <pre>\nInput: s = \"dztz\", shifts = [[0,0,0],[1,1,1]]\nOutput: \"catz\"\nExplanation: Firstly, shift the characters from index 0 to index 0 backward. Now s = \"cztz\".\nFinally, shift the characters from index 1 to index 1 forward. Now s = \"catz\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, shifts.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>shifts[i].length == 3</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt; s.length</code></li> <li><code>0 &lt;= direction<sub>i</sub> &lt;= 1</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2382/","title":"2382. Maximum Segment Sum After Removals","text":"Problem <p>You are given two 0-indexed integer arrays <code>nums</code> and <code>removeQueries</code>, both of length <code>n</code>. For the <code>i<sup>th</sup></code> query, the element in <code>nums</code> at the index <code>removeQueries[i]</code> is removed, splitting <code>nums</code> into different segments.</p> <p>A segment is a contiguous sequence of positive integers in <code>nums</code>. A segment sum is the sum of every element in a segment.</p> <p>Return an integer array <code>answer</code>, of length <code>n</code>, where <code>answer[i]</code> is the maximum segment sum after applying the <code>i<sup>th</sup></code> removal.</p> <p>Note: The same index will not be removed more than once.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]\nOutput: [14,7,2,2,0]\nExplanation: Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 0th element, nums becomes [0,2,5,6,1] and the maximum segment sum is 14 for segment [2,5,6,1].\nQuery 2: Remove the 3rd element, nums becomes [0,2,5,0,1] and the maximum segment sum is 7 for segment [2,5].\nQuery 3: Remove the 2nd element, nums becomes [0,2,0,0,1] and the maximum segment sum is 2 for segment [2]. \nQuery 4: Remove the 4th element, nums becomes [0,2,0,0,0] and the maximum segment sum is 2 for segment [2]. \nQuery 5: Remove the 1st element, nums becomes [0,0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [14,7,2,2,0].</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,2,11,1], removeQueries = [3,2,1,0]\nOutput: [16,5,3,0]\nExplanation: Using 0 to indicate a removed element, the answer is as follows:\nQuery 1: Remove the 3rd element, nums becomes [3,2,11,0] and the maximum segment sum is 16 for segment [3,2,11].\nQuery 2: Remove the 2nd element, nums becomes [3,2,0,0] and the maximum segment sum is 5 for segment [3,2].\nQuery 3: Remove the 1st element, nums becomes [3,0,0,0] and the maximum segment sum is 3 for segment [3].\nQuery 4: Remove the 0th element, nums becomes [0,0,0,0] and the maximum segment sum is 0, since there are no segments.\nFinally, we return [16,5,3,0].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length == removeQueries.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= removeQueries[i] &lt; n</code></li> <li>All the values of <code>removeQueries</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2383/","title":"2383. Minimum Hours of Training to Win a Competition","text":"Problem <p>You are entering a competition, and are given two positive integers <code>initialEnergy</code> and <code>initialExperience</code> denoting your initial energy and initial experience respectively.</p> <p>You are also given two 0-indexed integer arrays <code>energy</code> and <code>experience</code>, both of length <code>n</code>.</p> <p>You will face <code>n</code> opponents in order. The energy and experience of the <code>i<sup>th</sup></code> opponent is denoted by <code>energy[i]</code> and <code>experience[i]</code> respectively. When you face an opponent, you need to have both strictly greater experience and energy to defeat them and move to the next opponent if available.</p> <p>Defeating the <code>i<sup>th</sup></code> opponent increases your experience by <code>experience[i]</code>, but decreases your energy by <code>energy[i]</code>.</p> <p>Before starting the competition, you can train for some number of hours. After each hour of training, you can either choose to increase your initial experience by one, or increase your initial energy by one.</p> <p>Return the minimum number of training hours required to defeat all <code>n</code> opponents.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]\nOutput: 8\nExplanation: You can increase your energy to 11 after 6 hours of training, and your experience to 5 after 2 hours of training.\nYou face the opponents in the following order:\n- You have more energy and experience than the 0<sup>th</sup> opponent so you win.\n  Your energy becomes 11 - 1 = 10, and your experience becomes 5 + 2 = 7.\n- You have more energy and experience than the 1<sup>st</sup> opponent so you win.\n  Your energy becomes 10 - 4 = 6, and your experience becomes 7 + 6 = 13.\n- You have more energy and experience than the 2<sup>nd</sup> opponent so you win.\n  Your energy becomes 6 - 3 = 3, and your experience becomes 13 + 3 = 16.\n- You have more energy and experience than the 3<sup>rd</sup> opponent so you win.\n  Your energy becomes 3 - 2 = 1, and your experience becomes 16 + 1 = 17.\nYou did a total of 6 + 2 = 8 hours of training before the competition, so we return 8.\nIt can be proven that no smaller answer exists.\n</pre> <p>Example 2:</p> <pre>\nInput: initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]\nOutput: 0\nExplanation: You do not need any additional energy or experience to win the competition, so we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == energy.length == experience.length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= initialEnergy, initialExperience, energy[i], experience[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2384/","title":"2384. Largest Palindromic Number","text":"Problem <p>You are given a string <code>num</code> consisting of digits only.</p> <p>Return the largest palindromic integer (in the form of a string) that can be formed using digits taken from <code>num</code>. It should not contain leading zeroes.</p> <p>Notes:</p> <ul> <li>You do not need to use all the digits of <code>num</code>, but you must use at least one digit.</li> <li>The digits can be reordered.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"444947137\"\nOutput: \"7449447\"\nExplanation: \nUse the digits \"4449477\" from \"444947137\" to form the palindromic integer \"7449447\".\nIt can be shown that \"7449447\" is the largest palindromic integer that can be formed.\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"00009\"\nOutput: \"9\"\nExplanation: \nIt can be shown that \"9\" is the largest palindromic integer that can be formed.\nNote that the integer returned should not contain leading zeroes.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num.length &lt;= 10<sup>5</sup></code></li> <li><code>num</code> consists of digits.</li> </ul>"},{"location":"LeetCode_Problems/2385/","title":"2385. Amount of Time for Binary Tree to Be Infected","text":"Problem <p>You are given the <code>root</code> of a binary tree with unique values, and an integer <code>start</code>. At minute <code>0</code>, an infection starts from the node with value <code>start</code>.</p> <p>Each minute, a node becomes infected if:</p> <ul> <li>The node is currently uninfected.</li> <li>The node is adjacent to an infected node.</li> </ul> <p>Return the number of minutes needed for the entire tree to be infected.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,5,3,null,4,10,6,9,2], start = 3\nOutput: 4\nExplanation: The following nodes are infected during:\n- Minute 0: Node 3\n- Minute 1: Nodes 1, 10 and 6\n- Minute 2: Node 5\n- Minute 3: Node 4\n- Minute 4: Nodes 9 and 2\nIt takes 4 minutes for the whole tree to be infected so we return 4.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1], start = 1\nOutput: 0\nExplanation: At minute 0, the only node in the tree is infected so we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> <li>Each node has a unique value.</li> <li>A node with a value of <code>start</code> exists in the tree.</li> </ul>"},{"location":"LeetCode_Problems/2386/","title":"2386. Find the K-Sum of an Array","text":"Problem <p>You are given an integer array <code>nums</code> and a positive integer <code>k</code>. You can choose any subsequence of the array and sum all of its elements together.</p> <p>We define the K-Sum of the array as the <code>k<sup>th</sup></code> largest subsequence sum that can be obtained (not necessarily distinct).</p> <p>Return the K-Sum of the array.</p> <p>A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p> <p>Note that the empty subsequence is considered to have a sum of <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,4,-2], k = 5\nOutput: 2\nExplanation: All the possible subsequence sums that we can obtain are the following sorted in decreasing order:\n- 6, 4, 4, 2, 2, 0, 0, -2.\nThe 5-Sum of the array is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,-2,3,4,-10,12], k = 16\nOutput: 10\nExplanation: The 16-Sum of the array is 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= min(2000, 2<sup>n</sup>)</code></li> </ul>"},{"location":"LeetCode_Problems/2387/","title":"2387. Median of a Row Wise Sorted Matrix","text":"Problem"},{"location":"LeetCode_Problems/2388/","title":"2388. Change Null Values in a Table to the Previous Value","text":"Problem"},{"location":"LeetCode_Problems/2389/","title":"2389. Longest Subsequence With Limited Sum","text":"Problem <p>You are given an integer array <code>nums</code> of length <code>n</code>, and an integer array <code>queries</code> of length <code>m</code>.</p> <p>Return an array <code>answer</code> of length <code>m</code> where <code>answer[i]</code> is the maximum size of a subsequence that you can take from <code>nums</code> such that the sum of its elements is less than or equal to <code>queries[i]</code>.</p> <p>A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,5,2,1], queries = [3,10,21]\nOutput: [2,3,4]\nExplanation: We answer the queries as follows:\n- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.\n- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.\n- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,4,5], queries = [1]\nOutput: [0]\nExplanation: The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>m == queries.length</code></li> <li><code>1 &lt;= n, m &lt;= 1000</code></li> <li><code>1 &lt;= nums[i], queries[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2390/","title":"2390. Removing Stars From a String","text":"Problem <p>You are given a string <code>s</code>, which contains stars <code>*</code>.</p> <p>In one operation, you can:</p> <ul> <li>Choose a star in <code>s</code>.</li> <li>Remove the closest non-star character to its left, as well as remove the star itself.</li> </ul> <p>Return the string after all stars have been removed.</p> <p>Note:</p> <ul> <li>The input will be generated such that the operation is always possible.</li> <li>It can be shown that the resulting string will always be unique.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"leet**cod*e\"\nOutput: \"lecoe\"\nExplanation: Performing the removals from left to right:\n- The closest character to the 1<sup>st</sup> star is 't' in \"leet**cod*e\". s becomes \"lee*cod*e\".\n- The closest character to the 2<sup>nd</sup> star is 'e' in \"lee*cod*e\". s becomes \"lecod*e\".\n- The closest character to the 3<sup>rd</sup> star is 'd' in \"lecod*e\". s becomes \"lecoe\".\nThere are no more stars, so we return \"lecoe\".</pre> <p>Example 2:</p> <pre>\nInput: s = \"erase*****\"\nOutput: \"\"\nExplanation: The entire string is removed, so we return an empty string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters and stars <code>*</code>.</li> <li>The operation above can be performed on <code>s</code>.</li> </ul>"},{"location":"LeetCode_Problems/2391/","title":"2391. Minimum Amount of Time to Collect Garbage","text":"Problem <p>You are given a 0-indexed array of strings <code>garbage</code> where <code>garbage[i]</code> represents the assortment of garbage at the <code>i<sup>th</sup></code> house. <code>garbage[i]</code> consists only of the characters <code>'M'</code>, <code>'P'</code> and <code>'G'</code> representing one unit of metal, paper and glass garbage respectively. Picking up one unit of any type of garbage takes <code>1</code> minute.</p> <p>You are also given a 0-indexed integer array <code>travel</code> where <code>travel[i]</code> is the number of minutes needed to go from house <code>i</code> to house <code>i + 1</code>.</p> <p>There are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house <code>0</code> and must visit each house in order; however, they do not need to visit every house.</p> <p>Only one garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks cannot do anything.</p> <p>Return the minimum number of minutes needed to pick up all the garbage.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: garbage = [\"G\",\"P\",\"GP\",\"GG\"], travel = [2,4,3]\nOutput: 21\nExplanation:\nThe paper garbage truck:\n1. Travels from house 0 to house 1\n2. Collects the paper garbage at house 1\n3. Travels from house 1 to house 2\n4. Collects the paper garbage at house 2\nAltogether, it takes 8 minutes to pick up all the paper garbage.\nThe glass garbage truck:\n1. Collects the glass garbage at house 0\n2. Travels from house 0 to house 1\n3. Travels from house 1 to house 2\n4. Collects the glass garbage at house 2\n5. Travels from house 2 to house 3\n6. Collects the glass garbage at house 3\nAltogether, it takes 13 minutes to pick up all the glass garbage.\nSince there is no metal garbage, we do not need to consider the metal garbage truck.\nTherefore, it takes a total of 8 + 13 = 21 minutes to collect all the garbage.\n</pre> <p>Example 2:</p> <pre>\nInput: garbage = [\"MMM\",\"PGM\",\"GP\"], travel = [3,10]\nOutput: 37\nExplanation:\nThe metal garbage truck takes 7 minutes to pick up all the metal garbage.\nThe paper garbage truck takes 15 minutes to pick up all the paper garbage.\nThe glass garbage truck takes 15 minutes to pick up all the glass garbage.\nIt takes a total of 7 + 15 + 15 = 37 minutes to collect all the garbage.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= garbage.length &lt;= 10<sup>5</sup></code></li> <li><code>garbage[i]</code> consists of only the letters <code>'M'</code>, <code>'P'</code>, and <code>'G'</code>.</li> <li><code>1 &lt;= garbage[i].length &lt;= 10</code></li> <li><code>travel.length == garbage.length - 1</code></li> <li><code>1 &lt;= travel[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2392/","title":"2392. Build a Matrix With Conditions","text":"Problem <p>You are given a positive integer <code>k</code>. You are also given:</p> <ul> <li>a 2D integer array <code>rowConditions</code> of size <code>n</code> where <code>rowConditions[i] = [above<sub>i</sub>, below<sub>i</sub>]</code>, and</li> <li>a 2D integer array <code>colConditions</code> of size <code>m</code> where <code>colConditions[i] = [left<sub>i</sub>, right<sub>i</sub>]</code>.</li> </ul> <p>The two arrays contain integers from <code>1</code> to <code>k</code>.</p> <p>You have to build a <code>k x k</code> matrix that contains each of the numbers from <code>1</code> to <code>k</code> exactly once. The remaining cells should have the value <code>0</code>.</p> <p>The matrix should also satisfy the following conditions:</p> <ul> <li>The number <code>above<sub>i</sub></code> should appear in a row that is strictly above the row at which the number <code>below<sub>i</sub></code> appears for all <code>i</code> from <code>0</code> to <code>n - 1</code>.</li> <li>The number <code>left<sub>i</sub></code> should appear in a column that is strictly left of the column at which the number <code>right<sub>i</sub></code> appears for all <code>i</code> from <code>0</code> to <code>m - 1</code>.</li> </ul> <p>Return any matrix that satisfies the conditions. If no answer exists, return an empty matrix.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: k = 3, rowConditions = [[1,2],[3,2]], colConditions = [[2,1],[3,2]]\nOutput: [[3,0,0],[0,0,1],[0,2,0]]\nExplanation: The diagram above shows a valid example of a matrix that satisfies all the conditions.\nThe row conditions are the following:\n- Number 1 is in row 1, and number 2 is in row 2, so 1 is above 2 in the matrix.\n- Number 3 is in row 0, and number 2 is in row 2, so 3 is above 2 in the matrix.\nThe column conditions are the following:\n- Number 2 is in column 1, and number 1 is in column 2, so 2 is left of 1 in the matrix.\n- Number 3 is in column 0, and number 2 is in column 1, so 3 is left of 2 in the matrix.\nNote that there may be multiple correct answers.\n</pre> <p>Example 2:</p> <pre>\nInput: k = 3, rowConditions = [[1,2],[2,3],[3,1],[2,3]], colConditions = [[2,1]]\nOutput: []\nExplanation: From the first two conditions, 3 has to be below 1 but the third conditions needs 3 to be above 1 to be satisfied.\nNo matrix can satisfy all the conditions, so we return the empty matrix.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= k &lt;= 400</code></li> <li><code>1 &lt;= rowConditions.length, colConditions.length &lt;= 10<sup>4</sup></code></li> <li><code>rowConditions[i].length == colConditions[i].length == 2</code></li> <li><code>1 &lt;= above<sub>i</sub>, below<sub>i</sub>, left<sub>i</sub>, right<sub>i</sub> &lt;= k</code></li> <li><code>above<sub>i</sub> != below<sub>i</sub></code></li> <li><code>left<sub>i</sub> != right<sub>i</sub></code></li> </ul>"},{"location":"LeetCode_Problems/2393/","title":"2393. Count Strictly Increasing Subarrays","text":"Problem"},{"location":"LeetCode_Problems/2394/","title":"2394. Employees With Deductions","text":"Problem"},{"location":"LeetCode_Problems/2395/","title":"2395. Find Subarrays With Equal Sum","text":"Problem <p>Given a 0-indexed integer array <code>nums</code>, determine whether there exist two subarrays of length <code>2</code> with equal sum. Note that the two subarrays must begin at different indices.</p> <p>Return <code>true</code> if these subarrays exist, and <code>false</code> otherwise.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,2,4]\nOutput: true\nExplanation: The subarrays with elements [4,2] and [2,4] have the same sum of 6.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4,5]\nOutput: false\nExplanation: No two subarrays of size 2 have the same sum.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [0,0,0]\nOutput: true\nExplanation: The subarrays [nums[0],nums[1]] and [nums[1],nums[2]] have the same sum of 0. \nNote that even though the subarrays have the same content, the two subarrays are considered different because they are in different positions in the original array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 1000</code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2396/","title":"2396. Strictly Palindromic Number","text":"Problem <p>An integer <code>n</code> is strictly palindromic if, for every base <code>b</code> between <code>2</code> and <code>n - 2</code> (inclusive), the string representation of the integer <code>n</code> in base <code>b</code> is palindromic.</p> <p>Given an integer <code>n</code>, return <code>true</code> if <code>n</code> is strictly palindromic and <code>false</code> otherwise.</p> <p>A string is palindromic if it reads the same forward and backward.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 9\nOutput: false\nExplanation: In base 2: 9 = 1001 (base 2), which is palindromic.\nIn base 3: 9 = 100 (base 3), which is not palindromic.\nTherefore, 9 is not strictly palindromic so we return false.\nNote that in bases 4, 5, 6, and 7, n = 9 is also not palindromic.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4\nOutput: false\nExplanation: We only consider base 2: 4 = 100 (base 2), which is not palindromic.\nTherefore, we return false.\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>4 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2397/","title":"2397. Maximum Rows Covered by Columns","text":"Problem <p>You are given a 0-indexed <code>m x n</code> binary matrix <code>matrix</code> and an integer <code>numSelect</code>, which denotes the number of distinct columns you must select from <code>matrix</code>.</p> <p>Let us consider <code>s = {c<sub>1</sub>, c<sub>2</sub>, ...., c<sub>numSelect</sub>}</code> as the set of columns selected by you. A row <code>row</code> is covered by <code>s</code> if:</p> <ul> <li>For each cell <code>matrix[row][col]</code> (<code>0 &lt;= col &lt;= n - 1</code>) where <code>matrix[row][col] == 1</code>, <code>col</code> is present in <code>s</code> or,</li> <li>No cell in <code>row</code> has a value of <code>1</code>.</li> </ul> <p>You need to choose <code>numSelect</code> columns such that the number of rows that are covered is maximized.</p> <p>Return the maximum number of rows that can be covered by a set of <code>numSelect</code> columns.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: matrix = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], numSelect = 2\nOutput: 3\nExplanation: One possible way to cover 3 rows is shown in the diagram above.\nWe choose s = {0, 2}.\n- Row 0 is covered because it has no occurrences of 1.\n- Row 1 is covered because the columns with value 1, i.e. 0 and 2 are present in s.\n- Row 2 is not covered because matrix[2][1] == 1 but 1 is not present in s.\n- Row 3 is covered because matrix[2][2] == 1 and 2 is present in s.\nThus, we can cover three rows.\nNote that s = {1, 2} will also cover 3 rows, but it can be shown that no more than three rows can be covered.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: matrix = [[1],[0]], numSelect = 1\nOutput: 2\nExplanation: Selecting the only column will result in both rows being covered since the entire matrix is selected.\nTherefore, we return 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == matrix.length</code></li> <li><code>n == matrix[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 12</code></li> <li><code>matrix[i][j]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>1 &lt;= numSelect\u00a0&lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2398/","title":"2398. Maximum Number of Robots Within Budget","text":"Problem <p>You have <code>n</code> robots. You are given two 0-indexed integer arrays, <code>chargeTimes</code> and <code>runningCosts</code>, both of length <code>n</code>. The <code>i<sup>th</sup></code> robot costs <code>chargeTimes[i]</code> units to charge and costs <code>runningCosts[i]</code> units to run. You are also given an integer <code>budget</code>.</p> <p>The total cost of running <code>k</code> chosen robots is equal to <code>max(chargeTimes) + k * sum(runningCosts)</code>, where <code>max(chargeTimes)</code> is the largest charge cost among the <code>k</code> robots and <code>sum(runningCosts)</code> is the sum of running costs among the <code>k</code> robots.</p> <p>Return the maximum number of consecutive robots you can run such that the total cost does not exceed <code>budget</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25\nOutput: 3\nExplanation: \nIt is possible to run all individual and consecutive pairs of robots within budget.\nTo obtain answer 3, consider the first 3 robots. The total cost will be max(3,6,1) + 3 * sum(2,1,3) = 6 + 3 * 6 = 24 which is less than 25.\nIt can be shown that it is not possible to run more than 3 consecutive robots within budget, so we return 3.\n</pre> <p>Example 2:</p> <pre>\nInput: chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19\nOutput: 0\nExplanation: No robot can be run that does not exceed the budget, so we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>chargeTimes.length == runningCosts.length == n</code></li> <li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= chargeTimes[i], runningCosts[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= budget &lt;= 10<sup>15</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2399/","title":"2399. Check Distances Between Same Letters","text":"Problem <p>You are given a 0-indexed string <code>s</code> consisting of only lowercase English letters, where each letter in <code>s</code> appears exactly twice. You are also given a 0-indexed integer array <code>distance</code> of length <code>26</code>.</p> <p>Each letter in the alphabet is numbered from <code>0</code> to <code>25</code> (i.e. <code>'a' -&gt; 0</code>, <code>'b' -&gt; 1</code>, <code>'c' -&gt; 2</code>, ... , <code>'z' -&gt; 25</code>).</p> <p>In a well-spaced string, the number of letters between the two occurrences of the <code>i<sup>th</sup></code> letter is <code>distance[i]</code>. If the <code>i<sup>th</sup></code> letter does not appear in <code>s</code>, then <code>distance[i]</code> can be ignored.</p> <p>Return <code>true</code> if <code>s</code> is a well-spaced string, otherwise return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abaccb\", distance = [1,3,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nOutput: true\nExplanation:\n- 'a' appears at indices 0 and 2 so it satisfies distance[0] = 1.\n- 'b' appears at indices 1 and 5 so it satisfies distance[1] = 3.\n- 'c' appears at indices 3 and 4 so it satisfies distance[2] = 0.\nNote that distance[3] = 5, but since 'd' does not appear in s, it can be ignored.\nReturn true because s is a well-spaced string.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aa\", distance = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nOutput: false\nExplanation:\n- 'a' appears at indices 0 and 1 so there are zero letters between them.\nBecause distance[0] = 1, s is not a well-spaced string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 52</code></li> <li><code>s</code> consists only of lowercase English letters.</li> <li>Each letter appears in <code>s</code> exactly twice.</li> <li><code>distance.length == 26</code></li> <li><code>0 &lt;= distance[i] &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2400/","title":"2400. Number of Ways to Reach a Position After Exactly k Steps","text":"Problem <p>You are given two positive integers <code>startPos</code> and <code>endPos</code>. Initially, you are standing at position <code>startPos</code> on an infinite number line. With one step, you can move either one position to the left, or one position to the right.</p> <p>Given a positive integer <code>k</code>, return the number of different ways to reach the position <code>endPos</code> starting from <code>startPos</code>, such that you perform exactly <code>k</code> steps. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Two ways are considered different if the order of the steps made is not exactly the same.</p> <p>Note that the number line includes negative integers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: startPos = 1, endPos = 2, k = 3\nOutput: 3\nExplanation: We can reach position 2 from 1 in exactly 3 steps in three ways:\n- 1 -&gt; 2 -&gt; 3 -&gt; 2.\n- 1 -&gt; 2 -&gt; 1 -&gt; 2.\n- 1 -&gt; 0 -&gt; 1 -&gt; 2.\nIt can be proven that no other way is possible, so we return 3.</pre> <p>Example 2:</p> <pre>\nInput: startPos = 2, endPos = 5, k = 10\nOutput: 0\nExplanation: It is impossible to reach position 5 from position 2 in exactly 10 steps.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= startPos, endPos, k &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2401/","title":"2401. Longest Nice Subarray","text":"Problem <p>You are given an array <code>nums</code> consisting of positive integers.</p> <p>We call a subarray of <code>nums</code> nice if the bitwise AND of every pair of elements that are in different positions in the subarray is equal to <code>0</code>.</p> <p>Return the length of the longest nice subarray.</p> <p>A subarray is a contiguous part of an array.</p> <p>Note that subarrays of length <code>1</code> are always considered nice.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,8,48,10]\nOutput: 3\nExplanation: The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:\n- 3 AND 8 = 0.\n- 3 AND 48 = 0.\n- 8 AND 48 = 0.\nIt can be proven that no longer nice subarray can be obtained, so we return 3.</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,1,5,11,13]\nOutput: 1\nExplanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2402/","title":"2402. Meeting Rooms III","text":"Problem <p>You are given an integer <code>n</code>. There are <code>n</code> rooms numbered from <code>0</code> to <code>n - 1</code>.</p> <p>You are given a 2D integer array <code>meetings</code> where <code>meetings[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> means that a meeting will be held during the half-closed time interval <code>[start<sub>i</sub>, end<sub>i</sub>)</code>. All the values of <code>start<sub>i</sub></code> are unique.</p> <p>Meetings are allocated to rooms in the following manner:</p> <ol> <li>Each meeting will take place in the unused room with the lowest number.</li> <li>If there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the same duration as the original meeting.</li> <li>When a room becomes unused, meetings that have an earlier original start time should be given the room.</li> </ol> <p>Return the number of the room that held the most meetings. If there are multiple rooms, return the room with the lowest number.</p> <p>A half-closed interval <code>[a, b)</code> is the interval between <code>a</code> and <code>b</code> including <code>a</code> and not including <code>b</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]\nOutput: 0\nExplanation:\n- At time 0, both rooms are not being used. The first meeting starts in room 0.\n- At time 1, only room 1 is not being used. The second meeting starts in room 1.\n- At time 2, both rooms are being used. The third meeting is delayed.\n- At time 3, both rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 1 finishes. The third meeting starts in room 1 for the time period [5,10).\n- At time 10, the meetings in both rooms finish. The fourth meeting starts in room 0 for the time period [10,11).\nBoth rooms 0 and 1 held 2 meetings, so we return 0. \n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]\nOutput: 1\nExplanation:\n- At time 1, all three rooms are not being used. The first meeting starts in room 0.\n- At time 2, rooms 1 and 2 are not being used. The second meeting starts in room 1.\n- At time 3, only room 2 is not being used. The third meeting starts in room 2.\n- At time 4, all three rooms are being used. The fourth meeting is delayed.\n- At time 5, the meeting in room 2 finishes. The fourth meeting starts in room 2 for the time period [5,10).\n- At time 6, all three rooms are being used. The fifth meeting is delayed.\n- At time 10, the meetings in rooms 1 and 2 finish. The fifth meeting starts in room 1 for the time period [10,12).\nRoom 0 held 1 meeting while rooms 1 and 2 each held 2 meetings, so we return 1. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li> <li><code>meetings[i].length == 2</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>5</sup></code></li> <li>All the values of <code>start<sub>i</sub></code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2403/","title":"2403. Minimum Time to Kill All Monsters","text":"Problem"},{"location":"LeetCode_Problems/2404/","title":"2404. Most Frequent Even Element","text":"Problem <p>Given an integer array <code>nums</code>, return the most frequent even element.</p> <p>If there is a tie, return the smallest one. If there is no such element, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,2,2,4,4,1]\nOutput: 2\nExplanation:\nThe even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.\nWe return the smallest one, which is 2.</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,4,4,9,2,4]\nOutput: 4\nExplanation: 4 is the even element appears the most.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [29,47,21,41,13,37,25,7]\nOutput: -1\nExplanation: There is no even element.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2000</code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2405/","title":"2405. Optimal Partition of String","text":"Problem <p>Given a string <code>s</code>, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.</p> <p>Return the minimum number of substrings in such a partition.</p> <p>Note that each character should belong to exactly one substring in a partition.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abacaba\"\nOutput: 4\nExplanation:\nTwo possible partitions are (\"a\",\"ba\",\"cab\",\"a\") and (\"ab\",\"a\",\"ca\",\"ba\").\nIt can be shown that 4 is the minimum number of substrings needed.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"ssssss\"\nOutput: 6\nExplanation:\nThe only valid partition is (\"s\",\"s\",\"s\",\"s\",\"s\",\"s\").\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only English lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/2406/","title":"2406. Divide Intervals Into Minimum Number of Groups","text":"Problem <p>You are given a 2D integer array <code>intervals</code> where <code>intervals[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> represents the inclusive interval <code>[left<sub>i</sub>, right<sub>i</sub>]</code>.</p> <p>You have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other.</p> <p>Return the minimum number of groups you need to make.</p> <p>Two intervals intersect if there is at least one common number between them. For example, the intervals <code>[1, 5]</code> and <code>[5, 8]</code> intersect.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]\nOutput: 3\nExplanation: We can divide the intervals into the following groups:\n- Group 1: [1, 5], [6, 8].\n- Group 2: [2, 3], [5, 10].\n- Group 3: [1, 10].\nIt can be proven that it is not possible to divide the intervals into fewer than 3 groups.\n</pre> <p>Example 2:</p> <pre>\nInput: intervals = [[1,3],[5,6],[8,10],[11,13]]\nOutput: 1\nExplanation: None of the intervals overlap, so we can put all of them in one group.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li> <li><code>intervals[i].length == 2</code></li> <li><code>1 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2407/","title":"2407. Longest Increasing Subsequence II","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p> <p>Find the longest subsequence of <code>nums</code> that meets the following requirements:</p> <ul> <li>The subsequence is strictly increasing and</li> <li>The difference between adjacent elements in the subsequence is at most <code>k</code>.</li> </ul> <p>Return the length of the longest subsequence that meets the requirements.</p> <p>A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,2,1,4,3,4,5,8,15], k = 3\nOutput: 5\nExplanation:\nThe longest subsequence that meets the requirements is [1,3,4,5,8].\nThe subsequence has a length of 5, so we return 5.\nNote that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [7,4,5,1,8,12,4,7], k = 5\nOutput: 4\nExplanation:\nThe longest subsequence that meets the requirements is [4,5,8,12].\nThe subsequence has a length of 4, so we return 4.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,5], k = 1\nOutput: 1\nExplanation:\nThe longest subsequence that meets the requirements is [1].\nThe subsequence has a length of 1, so we return 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i], k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2408/","title":"2408. Design SQL","text":"Problem"},{"location":"LeetCode_Problems/2409/","title":"2409. Count Days Spent Together","text":"Problem <p>Alice and Bob are traveling to Rome for separate business meetings.</p> <p>You are given 4 strings <code>arriveAlice</code>, <code>leaveAlice</code>, <code>arriveBob</code>, and <code>leaveBob</code>. Alice will be in the city from the dates <code>arriveAlice</code> to <code>leaveAlice</code> (inclusive), while Bob will be in the city from the dates <code>arriveBob</code> to <code>leaveBob</code> (inclusive). Each will be a 5-character string in the format <code>\"MM-DD\"</code>, corresponding to the month and day of the date.</p> <p>Return the total number of days that Alice and Bob are in Rome together.</p> <p>You can assume that all dates occur in the same calendar year, which is not a leap year. Note that the number of days per month can be represented as: <code>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arriveAlice = \"08-15\", leaveAlice = \"08-18\", arriveBob = \"08-16\", leaveBob = \"08-19\"\nOutput: 3\nExplanation: Alice will be in Rome from August 15 to August 18. Bob will be in Rome from August 16 to August 19. They are both in Rome together on August 16th, 17th, and 18th, so the answer is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: arriveAlice = \"10-01\", leaveAlice = \"10-31\", arriveBob = \"11-01\", leaveBob = \"12-31\"\nOutput: 0\nExplanation: There is no day when Alice and Bob are in Rome together, so we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>All dates are provided in the format <code>\"MM-DD\"</code>.</li> <li>Alice and Bob's arrival dates are earlier than or equal to their leaving dates.</li> <li>The given dates are valid dates of a non-leap year.</li> </ul>"},{"location":"LeetCode_Problems/2410/","title":"2410. Maximum Matching of Players With Trainers","text":"Problem <p>You are given a 0-indexed integer array <code>players</code>, where <code>players[i]</code> represents the ability of the <code>i<sup>th</sup></code> player. You are also given a 0-indexed integer array <code>trainers</code>, where <code>trainers[j]</code> represents the training capacity of the <code>j<sup>th</sup></code> trainer.</p> <p>The <code>i<sup>th</sup></code> player can match with the <code>j<sup>th</sup></code> trainer if the player's ability is less than or equal to the trainer's training capacity. Additionally, the <code>i<sup>th</sup></code> player can be matched with at most one trainer, and the <code>j<sup>th</sup></code> trainer can be matched with at most one player.</p> <p>Return the maximum number of matchings between <code>players</code> and <code>trainers</code> that satisfy these conditions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: players = [4,7,9], trainers = [8,2,5,8]\nOutput: 2\nExplanation:\nOne of the ways we can form two matchings is as follows:\n- players[0] can be matched with trainers[0] since 4 &lt;= 8.\n- players[1] can be matched with trainers[3] since 7 &lt;= 8.\nIt can be proven that 2 is the maximum number of matchings that can be formed.\n</pre> <p>Example 2:</p> <pre>\nInput: players = [1,1,1], trainers = [10]\nOutput: 1\nExplanation:\nThe trainer can be matched with any of the 3 players.\nEach player can only be matched with one trainer, so the maximum answer is 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= players.length, trainers.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= players[i], trainers[j] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2411/","title":"2411. Smallest Subarrays With Maximum Bitwise OR","text":"Problem <p>You are given a 0-indexed array <code>nums</code> of length <code>n</code>, consisting of non-negative integers. For each index <code>i</code> from <code>0</code> to <code>n - 1</code>, you must determine the size of the minimum sized non-empty subarray of <code>nums</code> starting at <code>i</code> (inclusive) that has the maximum possible bitwise OR.</p> <ul> <li>In other words, let <code>B<sub>ij</sub></code> be the bitwise OR of the subarray <code>nums[i...j]</code>. You need to find the smallest subarray starting at <code>i</code>, such that bitwise OR of this subarray is equal to <code>max(B<sub>ik</sub>)</code> where <code>i &lt;= k &lt;= n - 1</code>.</li> </ul> <p>The bitwise OR of an array is the bitwise OR of all the numbers in it.</p> <p>Return an integer array <code>answer</code> of size <code>n</code> where <code>answer[i]</code> is the length of the minimum sized subarray starting at <code>i</code> with maximum bitwise OR.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,0,2,1,3]\nOutput: [3,3,2,2,1]\nExplanation:\nThe maximum possible bitwise OR starting at any index is 3. \n- Starting at index 0, the shortest subarray that yields it is [1,0,2].\n- Starting at index 1, the shortest subarray that yields the maximum bitwise OR is [0,2,1].\n- Starting at index 2, the shortest subarray that yields the maximum bitwise OR is [2,1].\n- Starting at index 3, the shortest subarray that yields the maximum bitwise OR is [1,3].\n- Starting at index 4, the shortest subarray that yields the maximum bitwise OR is [3].\nTherefore, we return [3,3,2,2,1]. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2]\nOutput: [2,1]\nExplanation:\nStarting at index 0, the shortest subarray that yields the maximum bitwise OR is of length 2.\nStarting at index 1, the shortest subarray that yields the maximum bitwise OR is of length 1.\nTherefore, we return [2,1].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2412/","title":"2412. Minimum Money Required Before Transactions","text":"Problem <p>You are given a 0-indexed 2D integer array <code>transactions</code>, where <code>transactions[i] = [cost<sub>i</sub>, cashback<sub>i</sub>]</code>.</p> <p>The array describes transactions, where each transaction must be completed exactly once in some order. At any given moment, you have a certain amount of <code>money</code>. In order to complete transaction <code>i</code>, <code>money &gt;= cost<sub>i</sub></code> must hold true. After performing a transaction, <code>money</code> becomes <code>money - cost<sub>i</sub> + cashback<sub>i</sub></code>.</p> <p>Return the minimum amount of <code>money</code> required before any transaction so that all of the transactions can be completed regardless of the order of the transactions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: transactions = [[2,1],[5,0],[4,2]]\nOutput: 10\nExplanation:\nStarting with money = 10, the transactions can be performed in any order.\nIt can be shown that starting with money &lt; 10 will fail to complete all transactions in some order.\n</pre> <p>Example 2:</p> <pre>\nInput: transactions = [[3,0],[0,3]]\nOutput: 3\nExplanation:\n- If transactions are in the order [[3,0],[0,3]], the minimum money required to complete the transactions is 3.\n- If transactions are in the order [[0,3],[3,0]], the minimum money required to complete the transactions is 0.\nThus, starting with money = 3, the transactions can be performed in any order.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= transactions.length &lt;= 10<sup>5</sup></code></li> <li><code>transactions[i].length == 2</code></li> <li><code>0 &lt;= cost<sub>i</sub>, cashback<sub>i</sub> &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2413/","title":"2413. Smallest Even Multiple","text":"Problem <p>Given a positive integer <code>n</code>, return the smallest positive integer that is a multiple of both <code>2</code> and <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5\nOutput: 10\nExplanation: The smallest multiple of both 5 and 2 is 10.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 6\nOutput: 6\nExplanation: The smallest multiple of both 6 and 2 is 6. Note that a number is a multiple of itself.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 150</code></li> </ul>"},{"location":"LeetCode_Problems/2414/","title":"2414. Length of the Longest Alphabetical Continuous Substring","text":"Problem <p>An alphabetical continuous string is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string <code>\"abcdefghijklmnopqrstuvwxyz\"</code>.</p> <ul> <li>For example, <code>\"abc\"</code> is an alphabetical continuous string, while <code>\"acb\"</code> and <code>\"za\"</code> are not.</li> </ul> <p>Given a string <code>s</code> consisting of lowercase letters only, return the length of the longest alphabetical continuous substring.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abacaba\"\nOutput: 2\nExplanation: There are 4 distinct continuous substrings: \"a\", \"b\", \"c\" and \"ab\".\n\"ab\" is the longest continuous substring.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcde\"\nOutput: 5\nExplanation: \"abcde\" is the longest continuous substring.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only English lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/2415/","title":"2415. Reverse Odd Levels of Binary Tree","text":"Problem <p>Given the <code>root</code> of a perfect binary tree, reverse the node values at each odd level of the tree.</p> <ul> <li>For example, suppose the node values at level 3 are <code>[2,1,3,4,7,11,29,18]</code>, then it should become <code>[18,29,11,7,4,3,1,2]</code>.</li> </ul> <p>Return the root of the reversed tree.</p> <p>A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.</p> <p>The level of a node is the number of edges along the path between it and the root node.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [2,3,5,8,13,21,34]\nOutput: [2,5,3,8,13,21,34]\nExplanation: \nThe tree has only one odd level.\nThe nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [7,13,11]\nOutput: [7,11,13]\nExplanation: \nThe nodes at level 1 are 13, 11, which are reversed and become 11, 13.\n</pre> <p>Example 3:</p> <pre>\nInput: root = [0,1,2,0,0,0,0,1,1,1,1,2,2,2,2]\nOutput: [0,2,1,0,0,0,0,2,2,2,2,1,1,1,1]\nExplanation: \nThe odd levels have non-zero values.\nThe nodes at level 1 were 1, 2, and are 2, 1 after the reversal.\nThe nodes at level 3 were 1, 1, 1, 1, 2, 2, 2, 2, and are 2, 2, 2, 2, 1, 1, 1, 1 after the reversal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 2<sup>14</sup>]</code>.</li> <li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> <li><code>root</code> is a perfect binary tree.</li> </ul>"},{"location":"LeetCode_Problems/2416/","title":"2416. Sum of Prefix Scores of Strings","text":"Problem <p>You are given an array <code>words</code> of size <code>n</code> consisting of non-empty strings.</p> <p>We define the score of a string <code>word</code> as the number of strings <code>words[i]</code> such that <code>word</code> is a prefix of <code>words[i]</code>.</p> <ul> <li>For example, if <code>words = [\"a\", \"ab\", \"abc\", \"cab\"]</code>, then the score of <code>\"ab\"</code> is <code>2</code>, since <code>\"ab\"</code> is a prefix of both <code>\"ab\"</code> and <code>\"abc\"</code>.</li> </ul> <p>Return an array <code>answer</code> of size <code>n</code> where <code>answer[i]</code> is the sum of scores of every non-empty prefix of <code>words[i]</code>.</p> <p>Note that a string is considered as a prefix of itself.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"abc\",\"ab\",\"bc\",\"b\"]\nOutput: [5,4,3,2]\nExplanation: The answer for each string is the following:\n- \"abc\" has 3 prefixes: \"a\", \"ab\", and \"abc\".\n- There are 2 strings with the prefix \"a\", 2 strings with the prefix \"ab\", and 1 string with the prefix \"abc\".\nThe total is answer[0] = 2 + 2 + 1 = 5.\n- \"ab\" has 2 prefixes: \"a\" and \"ab\".\n- There are 2 strings with the prefix \"a\", and 2 strings with the prefix \"ab\".\nThe total is answer[1] = 2 + 2 = 4.\n- \"bc\" has 2 prefixes: \"b\" and \"bc\".\n- There are 2 strings with the prefix \"b\", and 1 string with the prefix \"bc\".\nThe total is answer[2] = 2 + 1 = 3.\n- \"b\" has 1 prefix: \"b\".\n- There are 2 strings with the prefix \"b\".\nThe total is answer[3] = 2.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"abcd\"]\nOutput: [4]\nExplanation:\n\"abcd\" has 4 prefixes: \"a\", \"ab\", \"abc\", and \"abcd\".\nEach prefix has a score of one, so the total is answer[0] = 1 + 1 + 1 + 1 = 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 1000</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2417/","title":"2417. Closest Fair Integer","text":"Problem"},{"location":"LeetCode_Problems/2418/","title":"2418. Sort the People","text":"Problem <p>You are given an array of strings <code>names</code>, and an array <code>heights</code> that consists of distinct positive integers. Both arrays are of length <code>n</code>.</p> <p>For each index <code>i</code>, <code>names[i]</code> and <code>heights[i]</code> denote the name and height of the <code>i<sup>th</sup></code> person.</p> <p>Return <code>names</code> sorted in descending order by the people's heights.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]\nOutput: [\"Mary\",\"Emma\",\"John\"]\nExplanation: Mary is the tallest, followed by Emma and John.\n</pre> <p>Example 2:</p> <pre>\nInput: names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]\nOutput: [\"Bob\",\"Alice\",\"Bob\"]\nExplanation: The first Bob is the tallest, followed by Alice and the second Bob.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == names.length == heights.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>3</sup></code></li> <li><code>1 &lt;= names[i].length &lt;= 20</code></li> <li><code>1 &lt;= heights[i] &lt;= 10<sup>5</sup></code></li> <li><code>names[i]</code> consists of lower and upper case English letters.</li> <li>All the values of <code>heights</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/2419/","title":"2419. Longest Subarray With Maximum Bitwise AND","text":"Problem <p>You are given an integer array <code>nums</code> of size <code>n</code>.</p> <p>Consider a non-empty subarray from <code>nums</code> that has the maximum possible bitwise AND.</p> <ul> <li>In other words, let <code>k</code> be the maximum value of the bitwise AND of any subarray of <code>nums</code>. Then, only subarrays with a bitwise AND equal to <code>k</code> should be considered.</li> </ul> <p>Return the length of the longest such subarray.</p> <p>The bitwise AND of an array is the bitwise AND of all the numbers in it.</p> <p>A subarray is a contiguous sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,3,2,2]\nOutput: 2\nExplanation:\nThe maximum possible bitwise AND of a subarray is 3.\nThe longest subarray with that value is [3,3], so we return 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: 1\nExplanation:\nThe maximum possible bitwise AND of a subarray is 4.\nThe longest subarray with that value is [4], so we return 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2420/","title":"2420. Find All Good Indices","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of size <code>n</code> and a positive integer <code>k</code>.</p> <p>We call an index <code>i</code> in the range <code>k &lt;= i &lt; n - k</code> good if the following conditions are satisfied:</p> <ul> <li>The <code>k</code> elements that are just before the index <code>i</code> are in non-increasing order.</li> <li>The <code>k</code> elements that are just after the index <code>i</code> are in non-decreasing order.</li> </ul> <p>Return an array of all good indices sorted in increasing order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,1,1,3,4,1], k = 2\nOutput: [2,3]\nExplanation: There are two good indices in the array:\n- Index 2. The subarray [2,1] is in non-increasing order, and the subarray [1,3] is in non-decreasing order.\n- Index 3. The subarray [1,1] is in non-increasing order, and the subarray [3,4] is in non-decreasing order.\nNote that the index 4 is not good because [4,1] is not non-decreasing.</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,1,1,2], k = 2\nOutput: []\nExplanation: There are no good indices in this array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= k &lt;= n / 2</code></li> </ul>"},{"location":"LeetCode_Problems/2421/","title":"2421. Number of Good Paths","text":"Problem <p>There is a tree (i.e. a connected, undirected graph with no cycles) consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> and exactly <code>n - 1</code> edges.</p> <p>You are given a 0-indexed integer array <code>vals</code> of length <code>n</code> where <code>vals[i]</code> denotes the value of the <code>i<sup>th</sup></code> node. You are also given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an undirected edge connecting nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p> <p>A good path is a simple path that satisfies the following conditions:</p> <ol> <li>The starting node and the ending node have the same value.</li> <li>All nodes between the starting node and the ending node have values less than or equal to the starting node (i.e. the starting node's value should be the maximum value along the path).</li> </ol> <p>Return the number of distinct good paths.</p> <p>Note that a path and its reverse are counted as the same path. For example, <code>0 -&gt; 1</code> is considered to be the same as <code>1 -&gt; 0</code>. A single node is also considered as a valid path.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]\nOutput: 6\nExplanation: There are 5 good paths consisting of a single node.\nThere is 1 additional good path: 1 -&gt; 0 -&gt; 2 -&gt; 4.\n(The reverse path 4 -&gt; 2 -&gt; 0 -&gt; 1 is treated as the same as 1 -&gt; 0 -&gt; 2 -&gt; 4.)\nNote that 0 -&gt; 2 -&gt; 3 is not a good path because vals[2] &gt; vals[0].\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]\nOutput: 7\nExplanation: There are 5 good paths consisting of a single node.\nThere are 2 additional good paths: 0 -&gt; 1 and 2 -&gt; 3.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: vals = [1], edges = []\nOutput: 1\nExplanation: The tree consists of only one node, so there is one good path.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == vals.length</code></li> <li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li> <li><code>0 &lt;= vals[i] &lt;= 10<sup>5</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>edges</code> represents a valid tree.</li> </ul>"},{"location":"LeetCode_Problems/2422/","title":"2422. Merge Operations to Turn Array Into a Palindrome","text":"Problem"},{"location":"LeetCode_Problems/2423/","title":"2423. Remove Letter To Equalize Frequency","text":"Problem <p>You are given a 0-indexed string <code>word</code>, consisting of lowercase English letters. You need to select one index and remove the letter at that index from <code>word</code> so that the frequency of every letter present in <code>word</code> is equal.</p> <p>Return <code>true</code> if it is possible to remove one letter so that the frequency of all letters in <code>word</code> are equal, and <code>false</code> otherwise.</p> <p>Note:</p> <ul> <li>The frequency of a letter <code>x</code> is the number of times it occurs in the string.</li> <li>You must remove exactly one letter and cannot choose to do nothing.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"abcc\"\nOutput: true\nExplanation: Select index 3 and delete it: word becomes \"abc\" and each character has a frequency of 1.\n</pre> <p>Example 2:</p> <pre>\nInput: word = \"aazz\"\nOutput: false\nExplanation: We must delete a character, so either the frequency of \"a\" is 1 and the frequency of \"z\" is 2, or vice versa. It is impossible to make all present letters have equal frequency.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= word.length &lt;= 100</code></li> <li><code>word</code> consists of lowercase English letters only.</li> </ul>"},{"location":"LeetCode_Problems/2424/","title":"2424. Longest Uploaded Prefix","text":"Problem <p>You are given a stream of <code>n</code> videos, each represented by a distinct number from <code>1</code> to <code>n</code> that you need to \"upload\" to a server. You need to implement a data structure that calculates the length of the longest uploaded prefix at various points in the upload process.</p> <p>We consider <code>i</code> to be an uploaded prefix if all videos in the range <code>1</code> to <code>i</code> (inclusive) have been uploaded to the server. The longest uploaded prefix is the maximum value of <code>i</code> that satisfies this definition.  Implement the <code>LUPrefix </code>class:</p> <ul> <li><code>LUPrefix(int n)</code> Initializes the object for a stream of <code>n</code> videos.</li> <li><code>void upload(int video)</code> Uploads <code>video</code> to the server.</li> <li><code>int longest()</code> Returns the length of the longest uploaded prefix defined above.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"LUPrefix\", \"upload\", \"longest\", \"upload\", \"longest\", \"upload\", \"longest\"]\n[[4], [3], [], [1], [], [2], []]\nOutput\n[null, null, 0, null, 1, null, 3]\n\nExplanation\nLUPrefix server = new LUPrefix(4);   // Initialize a stream of 4 videos.\nserver.upload(3);                    // Upload video 3.\nserver.longest();                    // Since video 1 has not been uploaded yet, there is no prefix.\n                                     // So, we return 0.\nserver.upload(1);                    // Upload video 1.\nserver.longest();                    // The prefix [1] is the longest uploaded prefix, so we return 1.\nserver.upload(2);                    // Upload video 2.\nserver.longest();                    // The prefix [1,2,3] is the longest uploaded prefix, so we return 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= video &lt;= n</code></li> <li>All values of <code>video</code> are distinct.</li> <li>At most <code>2 * 10<sup>5</sup></code> calls in total will be made to <code>upload</code> and <code>longest</code>.</li> <li>At least one call will be made to <code>longest</code>.</li> </ul>"},{"location":"LeetCode_Problems/2425/","title":"2425. Bitwise XOR of All Pairings","text":"Problem <p>You are given two 0-indexed arrays, <code>nums1</code> and <code>nums2</code>, consisting of non-negative integers. There exists another array, <code>nums3</code>, which contains the bitwise XOR of all pairings of integers between <code>nums1</code> and <code>nums2</code> (every integer in <code>nums1</code> is paired with every integer in <code>nums2</code> exactly once).</p> <p>Return the bitwise XOR of all integers in <code>nums3</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [2,1,3], nums2 = [10,2,5,0]\nOutput: 13\nExplanation:\nA possible nums3 array is [8,0,7,2,11,3,4,1,9,1,6,3].\nThe bitwise XOR of all these numbers is 13, so we return 13.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 0\nExplanation:\nAll possible pairs of bitwise XORs are nums1[0] ^ nums2[0], nums1[0] ^ nums2[1], nums1[1] ^ nums2[0],\nand nums1[1] ^ nums2[1].\nThus, one possible nums3 array is [2,5,1,6].\n2 ^ 5 ^ 1 ^ 6 = 0, so we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2426/","title":"2426. Number of Pairs Satisfying Inequality","text":"Problem <p>You are given two 0-indexed integer arrays <code>nums1</code> and <code>nums2</code>, each of size <code>n</code>, and an integer <code>diff</code>. Find the number of pairs <code>(i, j)</code> such that:</p> <ul> <li><code>0 &lt;= i &lt; j &lt;= n - 1</code> and</li> <li><code>nums1[i] - nums1[j] &lt;= nums2[i] - nums2[j] + diff</code>.</li> </ul> <p>Return the number of pairs that satisfy the conditions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [3,2,5], nums2 = [2,2,1], diff = 1\nOutput: 3\nExplanation:\nThere are 3 pairs that satisfy the conditions:\n1. i = 0, j = 1: 3 - 2 &lt;= 2 - 2 + 1. Since i &lt; j and 1 &lt;= 1, this pair satisfies the conditions.\n2. i = 0, j = 2: 3 - 5 &lt;= 2 - 1 + 1. Since i &lt; j and -2 &lt;= 2, this pair satisfies the conditions.\n3. i = 1, j = 2: 2 - 5 &lt;= 2 - 1 + 1. Since i &lt; j and -3 &lt;= 2, this pair satisfies the conditions.\nTherefore, we return 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [3,-1], nums2 = [-2,2], diff = -1\nOutput: 0\nExplanation:\nSince there does not exist any pair that satisfies the conditions, we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums1.length == nums2.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup></code></li> <li><code>-10<sup>4</sup> &lt;= diff &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2427/","title":"2427. Number of Common Factors","text":"Problem <p>Given two positive integers <code>a</code> and <code>b</code>, return the number of common factors of <code>a</code> and <code>b</code>.</p> <p>An integer <code>x</code> is a common factor of <code>a</code> and <code>b</code> if <code>x</code> divides both <code>a</code> and <code>b</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: a = 12, b = 6\nOutput: 4\nExplanation: The common factors of 12 and 6 are 1, 2, 3, 6.\n</pre> <p>Example 2:</p> <pre>\nInput: a = 25, b = 30\nOutput: 2\nExplanation: The common factors of 25 and 30 are 1, 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a, b &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2428/","title":"2428. Maximum Sum of an Hourglass","text":"Problem <p>You are given an <code>m x n</code> integer matrix <code>grid</code>.</p> <p>We define an hourglass as a part of the matrix with the following form:</p> <p></p> <p>Return the maximum sum of the elements of an hourglass.</p> <p>Note that an hourglass cannot be rotated and must be entirely contained within the matrix.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]\nOutput: 30\nExplanation: The cells shown above represent the hourglass with the maximum sum: 6 + 2 + 1 + 2 + 9 + 2 + 8 = 30.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 35\nExplanation: There is only one hourglass in the matrix, with the sum: 1 + 2 + 3 + 5 + 7 + 8 + 9 = 35.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>3 &lt;= m, n &lt;= 150</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2429/","title":"2429. Minimize XOR","text":"Problem <p>Given two positive integers <code>num1</code> and <code>num2</code>, find the positive integer <code>x</code> such that:</p> <ul> <li><code>x</code> has the same number of set bits as <code>num2</code>, and</li> <li>The value <code>x XOR num1</code> is minimal.</li> </ul> <p>Note that <code>XOR</code> is the bitwise XOR operation.</p> <p>Return the integer <code>x</code>. The test cases are generated such that <code>x</code> is uniquely determined.</p> <p>The number of set bits of an integer is the number of <code>1</code>'s in its binary representation.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num1 = 3, num2 = 5\nOutput: 3\nExplanation:\nThe binary representations of num1 and num2 are 0011 and 0101, respectively.\nThe integer 3 has the same number of set bits as num2, and the value <code>3 XOR 3 = 0</code> is minimal.\n</pre> <p>Example 2:</p> <pre>\nInput: num1 = 1, num2 = 12\nOutput: 3\nExplanation:\nThe binary representations of num1 and num2 are 0001 and 1100, respectively.\nThe integer 3 has the same number of set bits as num2, and the value <code>3 XOR 1 = 2</code> is minimal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num1, num2 &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2430/","title":"2430. Maximum Deletions on a String","text":"Problem <p>You are given a string <code>s</code> consisting of only lowercase English letters. In one operation, you can:</p> <ul> <li>Delete the entire string <code>s</code>, or</li> <li>Delete the first <code>i</code> letters of <code>s</code> if the first <code>i</code> letters of <code>s</code> are equal to the following <code>i</code> letters in <code>s</code>, for any <code>i</code> in the range <code>1 &lt;= i &lt;= s.length / 2</code>.</li> </ul> <p>For example, if <code>s = \"ababc\"</code>, then in one operation, you could delete the first two letters of <code>s</code> to get <code>\"abc\"</code>, since the first two letters of <code>s</code> and the following two letters of <code>s</code> are both equal to <code>\"ab\"</code>.</p> <p>Return the maximum number of operations needed to delete all of <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcabcdabc\"\nOutput: 2\nExplanation:\n- Delete the first 3 letters (\"abc\") since the next 3 letters are equal. Now, s = \"abcdabc\".\n- Delete all the letters.\nWe used 2 operations so return 2. It can be proven that 2 is the maximum number of operations needed.\nNote that in the second operation we cannot delete \"abc\" again because the next occurrence of \"abc\" does not happen in the next 3 letters.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aaabaab\"\nOutput: 4\nExplanation:\n- Delete the first letter (\"a\") since the next letter is equal. Now, s = \"aabaab\".\n- Delete the first 3 letters (\"aab\") since the next 3 letters are equal. Now, s = \"aab\".\n- Delete the first letter (\"a\") since the next letter is equal. Now, s = \"ab\".\n- Delete all the letters.\nWe used 4 operations so return 4. It can be proven that 4 is the maximum number of operations needed.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"aaaaa\"\nOutput: 5\nExplanation: In each operation, we can delete the first letter of s.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 4000</code></li> <li><code>s</code> consists only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2431/","title":"2431. Maximize Total Tastiness of Purchased Fruits","text":"Problem"},{"location":"LeetCode_Problems/2432/","title":"2432. The Employee That Worked on the Longest Task","text":"Problem <p>There are <code>n</code> employees, each with a unique id from <code>0</code> to <code>n - 1</code>.</p> <p>You are given a 2D integer array <code>logs</code> where <code>logs[i] = [id<sub>i</sub>, leaveTime<sub>i</sub>]</code> where:</p> <ul> <li><code>id<sub>i</sub></code> is the id of the employee that worked on the <code>i<sup>th</sup></code> task, and</li> <li><code>leaveTime<sub>i</sub></code> is the time at which the employee finished the <code>i<sup>th</sup></code> task. All the values <code>leaveTime<sub>i</sub></code> are unique.</li> </ul> <p>Note that the <code>i<sup>th</sup></code> task starts the moment right after the <code>(i - 1)<sup>th</sup></code> task ends, and the <code>0<sup>th</sup></code> task starts at time <code>0</code>.</p> <p>Return the id of the employee that worked the task with the longest time. If there is a tie between two or more employees, return the smallest id among them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10, logs = [[0,3],[2,5],[0,9],[1,15]]\nOutput: 1\nExplanation: \nTask 0 started at 0 and ended at 3 with 3 units of times.\nTask 1 started at 3 and ended at 5 with 2 units of times.\nTask 2 started at 5 and ended at 9 with 4 units of times.\nTask 3 started at 9 and ended at 15 with 6 units of times.\nThe task with the longest time is task 3 and the employee with id 1 is the one that worked on it, so we return 1.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 26, logs = [[1,1],[3,7],[2,12],[7,17]]\nOutput: 3\nExplanation: \nTask 0 started at 0 and ended at 1 with 1 unit of times.\nTask 1 started at 1 and ended at 7 with 6 units of times.\nTask 2 started at 7 and ended at 12 with 5 units of times.\nTask 3 started at 12 and ended at 17 with 5 units of times.\nThe tasks with the longest time is task 1. The employee that worked on it is 3, so we return 3.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 2, logs = [[0,10],[1,20]]\nOutput: 0\nExplanation: \nTask 0 started at 0 and ended at 10 with 10 units of times.\nTask 1 started at 10 and ended at 20 with 10 units of times.\nThe tasks with the longest time are tasks 0 and 1. The employees that worked on them are 0 and 1, so we return the smallest id 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 500</code></li> <li><code>1 &lt;= logs.length &lt;= 500</code></li> <li><code>logs[i].length == 2</code></li> <li><code>0 &lt;= id<sub>i</sub> &lt;= n - 1</code></li> <li><code>1 &lt;= leaveTime<sub>i</sub> &lt;= 500</code></li> <li><code>id<sub>i</sub> != id<sub>i+1</sub></code></li> <li><code>leaveTime<sub>i</sub></code> are sorted in a strictly increasing order.</li> </ul>"},{"location":"LeetCode_Problems/2433/","title":"2433. Find The Original Array of Prefix Xor","text":"Problem <p>You are given an integer array <code>pref</code> of size <code>n</code>. Find and return the array <code>arr</code> of size <code>n</code> that satisfies:</p> <ul> <li><code>pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i]</code>.</li> </ul> <p>Note that <code>^</code> denotes the bitwise-xor operation.</p> <p>It can be proven that the answer is unique.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: pref = [5,2,0,3,1]\nOutput: [5,7,2,3,2]\nExplanation: From the array [5,7,2,3,2] we have the following:\n- pref[0] = 5.\n- pref[1] = 5 ^ 7 = 2.\n- pref[2] = 5 ^ 7 ^ 2 = 0.\n- pref[3] = 5 ^ 7 ^ 2 ^ 3 = 3.\n- pref[4] = 5 ^ 7 ^ 2 ^ 3 ^ 2 = 1.\n</pre> <p>Example 2:</p> <pre>\nInput: pref = [13]\nOutput: [13]\nExplanation: We have pref[0] = arr[0] = 13.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= pref.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= pref[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2434/","title":"2434. Using a Robot to Print the Lexicographically Smallest String","text":"Problem <p>You are given a string <code>s</code> and a robot that currently holds an empty string <code>t</code>. Apply one of the following operations until <code>s</code> and <code>t</code> are both empty:</p> <ul> <li>Remove the first character of a string <code>s</code> and give it to the robot. The robot will append this character to the string <code>t</code>.</li> <li>Remove the last character of a string <code>t</code> and give it to the robot. The robot will write this character on paper.</li> </ul> <p>Return the lexicographically smallest string that can be written on the paper.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"zza\"\nOutput: \"azz\"\nExplanation: Let p denote the written string.\nInitially p=\"\", s=\"zza\", t=\"\".\nPerform first operation three times p=\"\", s=\"\", t=\"zza\".\nPerform second operation three times p=\"azz\", s=\"\", t=\"\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"bac\"\nOutput: \"abc\"\nExplanation: Let p denote the written string.\nPerform first operation twice p=\"\", s=\"c\", t=\"ba\". \nPerform second operation twice p=\"ab\", s=\"c\", t=\"\". \nPerform first operation p=\"ab\", s=\"\", t=\"c\". \nPerform second operation p=\"abc\", s=\"\", t=\"\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"bdda\"\nOutput: \"addb\"\nExplanation: Let p denote the written string.\nInitially p=\"\", s=\"bdda\", t=\"\".\nPerform first operation four times p=\"\", s=\"\", t=\"bdda\".\nPerform second operation four times p=\"addb\", s=\"\", t=\"\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only English lowercase letters.</li> </ul>"},{"location":"LeetCode_Problems/2435/","title":"2435. Paths in Matrix Whose Sum Is Divisible by K","text":"Problem <p>You are given a 0-indexed <code>m x n</code> integer matrix <code>grid</code> and an integer <code>k</code>. You are currently at position <code>(0, 0)</code> and you want to reach position <code>(m - 1, n - 1)</code> moving only down or right.</p> <p>Return the number of paths where the sum of the elements on the path is divisible by <code>k</code>. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3\nOutput: 2\nExplanation: There are two paths where the sum of the elements on the path is divisible by k.\nThe first path highlighted in red has a sum of 5 + 2 + 4 + 5 + 2 = 18 which is divisible by 3.\nThe second path highlighted in blue has a sum of 5 + 3 + 0 + 5 + 2 = 15 which is divisible by 3.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,0]], k = 5\nOutput: 1\nExplanation: The path highlighted in red has a sum of 0 + 0 = 0 which is divisible by 5.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1\nOutput: 10\nExplanation: Every integer is divisible by 1 so the sum of the elements on every possible path is divisible by k.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>1 &lt;= m * n &lt;= 5 * 10<sup>4</sup></code></li> <li><code>0 &lt;= grid[i][j] &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2436/","title":"2436. Minimum Split Into Subarrays With GCD Greater Than One","text":"Problem"},{"location":"LeetCode_Problems/2437/","title":"2437. Number of Valid Clock Times","text":"Problem <p>You are given a string of length <code>5</code> called <code>time</code>, representing the current time on a digital clock in the format <code>\"hh:mm\"</code>. The earliest possible time is <code>\"00:00\"</code> and the latest possible time is <code>\"23:59\"</code>.</p> <p>In the string <code>time</code>, the digits represented by the <code>?</code>\u00a0symbol are unknown, and must be replaced with a digit from <code>0</code> to <code>9</code>.</p> <p>Return an integer <code>answer</code>, the number of valid clock times that can be created by replacing every <code>?</code>\u00a0with a digit from <code>0</code> to <code>9</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: time = \"?5:00\"\nOutput: 2\nExplanation: We can replace the ? with either a 0 or 1, producing \"05:00\" or \"15:00\". Note that we cannot replace it with a 2, since the time \"25:00\" is invalid. In total, we have two choices.\n</pre> <p>Example 2:</p> <pre>\nInput: time = \"0?:0?\"\nOutput: 100\nExplanation: Each ? can be replaced by any digit from 0 to 9, so we have 100 total choices.\n</pre> <p>Example 3:</p> <pre>\nInput: time = \"??:??\"\nOutput: 1440\nExplanation: There are 24 possible choices for the hours, and 60 possible choices for the minutes. In total, we have 24 * 60 = 1440 choices.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>time</code> is a valid string of length <code>5</code> in the format <code>\"hh:mm\"</code>.</li> <li><code>\"00\" &lt;= hh &lt;= \"23\"</code></li> <li><code>\"00\" &lt;= mm &lt;= \"59\"</code></li> <li>Some of the digits might be replaced with <code>'?'</code> and need to be replaced with digits from <code>0</code> to <code>9</code>.</li> </ul>"},{"location":"LeetCode_Problems/2438/","title":"2438. Range Product Queries of Powers","text":"Problem <p>Given a positive integer <code>n</code>, there exists a 0-indexed array called <code>powers</code>, composed of the minimum number of powers of <code>2</code> that sum to <code>n</code>. The array is sorted in non-decreasing order, and there is only one way to form the array.</p> <p>You are also given a 0-indexed 2D integer array <code>queries</code>, where <code>queries[i] = [left<sub>i</sub>, right<sub>i</sub>]</code>. Each <code>queries[i]</code> represents a query where you have to find the product of all <code>powers[j]</code> with <code>left<sub>i</sub> &lt;= j &lt;= right<sub>i</sub></code>.</p> <p>Return an array <code>answers</code>, equal in length to <code>queries</code>, where <code>answers[i]</code> is the answer to the <code>i<sup>th</sup></code> query. Since the answer to the <code>i<sup>th</sup></code> query may be too large, each <code>answers[i]</code> should be returned modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 15, queries = [[0,1],[2,2],[0,3]]\nOutput: [2,4,64]\nExplanation:\nFor n = 15, powers = [1,2,4,8]. It can be shown that powers cannot be a smaller size.\nAnswer to 1st query: powers[0] * powers[1] = 1 * 2 = 2.\nAnswer to 2nd query: powers[2] = 4.\nAnswer to 3rd query: powers[0] * powers[1] * powers[2] * powers[3] = 1 * 2 * 4 * 8 = 64.\nEach answer modulo 10<sup>9</sup> + 7 yields the same answer, so [2,4,64] is returned.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, queries = [[0,0]]\nOutput: [2]\nExplanation:\nFor n = 2, powers = [2].\nThe answer to the only query is powers[0] = 2. The answer modulo 10<sup>9</sup> + 7 is the same, so [2] is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt; powers.length</code></li> </ul>"},{"location":"LeetCode_Problems/2439/","title":"2439. Minimize Maximum of Array","text":"Problem <p>You are given a 0-indexed array <code>nums</code> comprising of <code>n</code> non-negative integers.</p> <p>In one operation, you must:</p> <ul> <li>Choose an integer <code>i</code> such that <code>1 &lt;= i &lt; n</code> and <code>nums[i] &gt; 0</code>.</li> <li>Decrease <code>nums[i]</code> by 1.</li> <li>Increase <code>nums[i - 1]</code> by 1.</li> </ul> <p>Return the minimum possible value of the maximum integer of <code>nums</code> after performing any number of operations.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,7,1,6]\nOutput: 5\nExplanation:\nOne set of optimal operations is as follows:\n1. Choose i = 1, and nums becomes [4,6,1,6].\n2. Choose i = 3, and nums becomes [4,6,2,5].\n3. Choose i = 1, and nums becomes [5,5,2,5].\nThe maximum integer of nums is 5. It can be shown that the maximum number cannot be less than 5.\nTherefore, we return 5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [10,1]\nOutput: 10\nExplanation:\nIt is optimal to leave nums as is, and since 10 is the maximum value, we return 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2440/","title":"2440. Create Components With Same Value","text":"Problem <p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>.</p> <p>You are given a 0-indexed integer array <code>nums</code> of length <code>n</code> where <code>nums[i]</code> represents the value of the <code>i<sup>th</sup></code> node. You are also given a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p> <p>You are allowed to delete some edges, splitting the tree into multiple connected components. Let the value of a component be the sum of all <code>nums[i]</code> for which node <code>i</code> is in the component.</p> <p>Return the maximum number of edges you can delete, such that every connected component in the tree has the same value.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]] \nOutput: 2 \nExplanation: The above figure shows how we can delete the edges [0,1] and [3,4]. The created components are nodes [0], [1,2,3] and [4]. The sum of the values in each component equals 6. It can be proven that no better deletion exists, so the answer is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2], edges = []\nOutput: 0\nExplanation: There are no edges to be deleted.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li> <li><code>nums.length == n</code></li> <li><code>1 &lt;= nums[i] &lt;= 50</code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li> <li><code>edges</code> represents a valid tree.</li> </ul>"},{"location":"LeetCode_Problems/2441/","title":"2441. Largest Positive Integer That Exists With Its Negative","text":"Problem <p>Given an integer array <code>nums</code> that does not contain any zeros, find the largest positive integer <code>k</code> such that <code>-k</code> also exists in the array.</p> <p>Return the positive integer <code>k</code>. If there is no such integer, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-1,2,-3,3]\nOutput: 3\nExplanation: 3 is the only valid k we can find in the array.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-1,10,6,7,-7,1]\nOutput: 7\nExplanation: Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [-10,8,6,7,-2,-3]\nOutput: -1\nExplanation: There is no a single valid k, we return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li> <li><code>nums[i] != 0</code></li> </ul>"},{"location":"LeetCode_Problems/2442/","title":"2442. Count Number of Distinct Integers After Reverse Operations","text":"Problem <p>You are given an array <code>nums</code> consisting of positive integers.</p> <p>You have to take each integer in the array, reverse its digits, and add it to the end of the array. You should apply this operation to the original integers in <code>nums</code>.</p> <p>Return the number of distinct integers in the final array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,13,10,12,31]\nOutput: 6\nExplanation: After including the reverse of each number, the resulting array is [1,13,10,12,31,1,31,1,21,13].\nThe reversed integers that were added to the end of the array are underlined. Note that for the integer 10, after reversing it, it becomes 01 which is just 1.\nThe number of distinct integers in this array is 6 (The numbers 1, 10, 12, 13, 21, and 31).</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,2]\nOutput: 1\nExplanation: After including the reverse of each number, the resulting array is [2,2,2,2,2,2].\nThe number of distinct integers in this array is 1 (The number 2).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2443/","title":"2443. Sum of Number and Its Reverse","text":"Problem <p>Given a non-negative integer <code>num</code>, return <code>true</code> if <code>num</code> can be expressed as the sum of any non-negative integer and its reverse, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 443\nOutput: true\nExplanation: 172 + 271 = 443 so we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 63\nOutput: false\nExplanation: 63 cannot be expressed as the sum of a non-negative integer and its reverse so we return false.\n</pre> <p>Example 3:</p> <pre>\nInput: num = 181\nOutput: true\nExplanation: 140 + 041 = 181 so we return true. Note that when a number is reversed, there may be leading zeros.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= num &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2444/","title":"2444. Count Subarrays With Fixed Bounds","text":"Problem <p>You are given an integer array <code>nums</code> and two integers <code>minK</code> and <code>maxK</code>.</p> <p>A fixed-bound subarray of <code>nums</code> is a subarray that satisfies the following conditions:</p> <ul> <li>The minimum value in the subarray is equal to <code>minK</code>.</li> <li>The maximum value in the subarray is equal to <code>maxK</code>.</li> </ul> <p>Return the number of fixed-bound subarrays.</p> <p>A subarray is a contiguous part of an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,5,2,7,5], minK = 1, maxK = 5\nOutput: 2\nExplanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1,1], minK = 1, maxK = 1\nOutput: 10\nExplanation: Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i], minK, maxK &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2445/","title":"2445. Number of Nodes With Value One","text":"Problem"},{"location":"LeetCode_Problems/2446/","title":"2446. Determine if Two Events Have Conflict","text":"Problem <p>You are given two arrays of strings that represent two inclusive events that happened on the same day, <code>event1</code> and <code>event2</code>, where:</p> <ul> <li><code>event1 = [startTime<sub>1</sub>, endTime<sub>1</sub>]</code> and</li> <li><code>event2 = [startTime<sub>2</sub>, endTime<sub>2</sub>]</code>.</li> </ul> <p>Event times are valid 24 hours format in the form of <code>HH:MM</code>.</p> <p>A conflict happens when two events have some non-empty intersection (i.e., some moment is common to both events).</p> <p>Return <code>true</code> if there is a conflict between two events. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: event1 = [\"01:15\",\"02:00\"], event2 = [\"02:00\",\"03:00\"]\nOutput: true\nExplanation: The two events intersect at time 2:00.\n</pre> <p>Example 2:</p> <pre>\nInput: event1 = [\"01:00\",\"02:00\"], event2 = [\"01:20\",\"03:00\"]\nOutput: true\nExplanation: The two events intersect starting from 01:20 to 02:00.\n</pre> <p>Example 3:</p> <pre>\nInput: event1 = [\"10:00\",\"11:00\"], event2 = [\"14:00\",\"15:00\"]\nOutput: false\nExplanation: The two events do not intersect.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>evnet1.length == event2.length == 2.</code></li> <li><code>event1[i].length == event2[i].length == 5</code></li> <li><code>startTime<sub>1</sub> &lt;= endTime<sub>1</sub></code></li> <li><code>startTime<sub>2</sub> &lt;= endTime<sub>2</sub></code></li> <li>All the event times follow the <code>HH:MM</code> format.</li> </ul>"},{"location":"LeetCode_Problems/2447/","title":"2447. Number of Subarrays With GCD Equal to K","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the number of subarrays of <code>nums</code> where the greatest common divisor of the subarray's elements is <code>k</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p>The greatest common divisor of an array is the largest integer that evenly divides all the array elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [9,3,1,2,6,3], k = 3\nOutput: 4\nExplanation: The subarrays of nums where 3 is the greatest common divisor of all the subarray's elements are:\n- [9,3,1,2,6,3]\n- [9,3,1,2,6,3]\n- [9,3,1,2,6,3]\n- [9,3,1,2,6,3]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4], k = 7\nOutput: 0\nExplanation: There are no subarrays of nums where 7 is the greatest common divisor of all the subarray's elements.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2448/","title":"2448. Minimum Cost to Make Array Equal","text":"Problem <p>You are given two 0-indexed arrays <code>nums</code> and <code>cost</code> consisting each of <code>n</code> positive integers.</p> <p>You can do the following operation any number of times:</p> <ul> <li>Increase or decrease any element of the array <code>nums</code> by <code>1</code>.</li> </ul> <p>The cost of doing one operation on the <code>i<sup>th</sup></code> element is <code>cost[i]</code>.</p> <p>Return the minimum total cost such that all the elements of the array <code>nums</code> become equal.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,5,2], cost = [2,3,1,14]\nOutput: 8\nExplanation: We can make all the elements equal to 2 in the following way:\n- Increase the 0<sup>th</sup> element one time. The cost is 2.\n- Decrease the 1<sup>st</sup> element one time. The cost is 3.\n- Decrease the 2<sup>nd</sup> element three times. The cost is 1 + 1 + 1 = 3.\nThe total cost is 2 + 3 + 3 = 8.\nIt can be shown that we cannot make the array equal with a smaller cost.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,2,2,2,2], cost = [4,2,8,1,3]\nOutput: 0\nExplanation: All the elements are already equal, so no operations are needed.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length == cost.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i], cost[i] &lt;= 10<sup>6</sup></code></li> <li>Test cases are generated in a way that the output doesn't exceed\u00a02<sup>53</sup>-1</li> </ul>"},{"location":"LeetCode_Problems/2449/","title":"2449. Minimum Number of Operations to Make Arrays Similar","text":"Problem <p>You are given two positive integer arrays <code>nums</code> and <code>target</code>, of the same length.</p> <p>In one operation, you can choose any two distinct indices <code>i</code> and <code>j</code> where <code>0 &lt;= i, j &lt; nums.length</code> and:</p> <ul> <li>set <code>nums[i] = nums[i] + 2</code> and</li> <li>set <code>nums[j] = nums[j] - 2</code>.</li> </ul> <p>Two arrays are considered to be similar if the frequency of each element is the same.</p> <p>Return the minimum number of operations required to make <code>nums</code> similar to <code>target</code>. The test cases are generated such that <code>nums</code> can always be similar to <code>target</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [8,12,6], target = [2,14,10]\nOutput: 2\nExplanation: It is possible to make nums similar to target in two operations:\n- Choose i = 0 and j = 2, nums = [10,12,4].\n- Choose i = 1 and j = 2, nums = [10,14,2].\nIt can be shown that 2 is the minimum number of operations needed.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,5], target = [4,1,3]\nOutput: 1\nExplanation: We can make nums similar to target in one operation:\n- Choose i = 1 and j = 2, nums = [1,4,3].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,1,1,1], target = [1,1,1,1,1]\nOutput: 0\nExplanation: The array nums is already similiar to target.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length == target.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i], target[i] &lt;= 10<sup>6</sup></code></li> <li>It is possible to make <code>nums</code> similar to <code>target</code>.</li> </ul>"},{"location":"LeetCode_Problems/2450/","title":"2450. Number of Distinct Binary Strings After Applying Operations","text":"Problem"},{"location":"LeetCode_Problems/2451/","title":"2451. Odd String Difference","text":"Problem <p>You are given an array of equal-length strings <code>words</code>. Assume that the length of each string is <code>n</code>.</p> <p>Each string <code>words[i]</code> can be converted into a difference integer array <code>difference[i]</code> of length <code>n - 1</code> where <code>difference[i][j] = words[i][j+1] - words[i][j]</code> where <code>0 &lt;= j &lt;= n - 2</code>. Note that the difference between two letters is the difference between their positions in the alphabet i.e.\u00a0the position of <code>'a'</code> is <code>0</code>, <code>'b'</code> is <code>1</code>, and <code>'z'</code> is <code>25</code>.</p> <ul> <li>For example, for the string <code>\"acb\"</code>, the difference integer array is <code>[2 - 0, 1 - 2] = [2, -1]</code>.</li> </ul> <p>All the strings in words have the same difference integer array, except one. You should find that string.</p> <p>Return the string in <code>words</code> that has different difference integer array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"adc\",\"wzy\",\"abc\"]\nOutput: \"abc\"\nExplanation: \n- The difference integer array of \"adc\" is [3 - 0, 2 - 3] = [3, -1].\n- The difference integer array of \"wzy\" is [25 - 22, 24 - 25]= [3, -1].\n- The difference integer array of \"abc\" is [1 - 0, 2 - 1] = [1, 1]. \nThe odd array out is [1, 1], so we return the corresponding string, \"abc\".\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"aaa\",\"bob\",\"ccc\",\"ddd\"]\nOutput: \"bob\"\nExplanation: All the integer arrays are [0, 0] except for \"bob\", which corresponds to [13, -13].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= words.length &lt;= 100</code></li> <li><code>n == words[i].length</code></li> <li><code>2 &lt;= n &lt;= 20</code></li> <li><code>words[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2452/","title":"2452. Words Within Two Edits of Dictionary","text":"Problem <p>You are given two string arrays, <code>queries</code> and <code>dictionary</code>. All words in each array comprise of lowercase English letters and have the same length.</p> <p>In one edit you can take a word from <code>queries</code>, and change any letter in it to any other letter. Find all words from <code>queries</code> that, after a maximum of two edits, equal some word from <code>dictionary</code>.</p> <p>Return a list of all words from <code>queries</code>, that match with some word from <code>dictionary</code> after a maximum of two edits. Return the words in the same order they appear in <code>queries</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: queries = [\"word\",\"note\",\"ants\",\"wood\"], dictionary = [\"wood\",\"joke\",\"moat\"]\nOutput: [\"word\",\"note\",\"wood\"]\nExplanation:\n- Changing the 'r' in \"word\" to 'o' allows it to equal the dictionary word \"wood\".\n- Changing the 'n' to 'j' and the 't' to 'k' in \"note\" changes it to \"joke\".\n- It would take more than 2 edits for \"ants\" to equal a dictionary word.\n- \"wood\" can remain unchanged (0 edits) and match the corresponding dictionary word.\nThus, we return [\"word\",\"note\",\"wood\"].\n</pre> <p>Example 2:</p> <pre>\nInput: queries = [\"yes\"], dictionary = [\"not\"]\nOutput: []\nExplanation:\nApplying any two edits to \"yes\" cannot make it equal to \"not\". Thus, we return an empty array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= queries.length, dictionary.length &lt;= 100</code></li> <li><code>n == queries[i].length == dictionary[j].length</code></li> <li><code>1 &lt;= n &lt;= 100</code></li> <li>All <code>queries[i]</code> and <code>dictionary[j]</code> are composed of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2453/","title":"2453. Destroy Sequential Targets","text":"Problem <p>You are given a 0-indexed array <code>nums</code> consisting of positive integers, representing targets on a number line. You are also given an integer <code>space</code>.</p> <p>You have a machine which can destroy targets. Seeding the machine with some <code>nums[i]</code> allows it to destroy all targets with values that can be represented as <code>nums[i] + c * space</code>, where <code>c</code> is any non-negative integer. You want to destroy the maximum number of targets in <code>nums</code>.</p> <p>Return the minimum value of <code>nums[i]</code> you can seed the machine with to destroy the maximum number of targets.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,7,8,1,1,5], space = 2\nOutput: 1\nExplanation: If we seed the machine with nums[3], then we destroy all targets equal to 1,3,5,7,9,... \nIn this case, we would destroy 5 total targets (all except for nums[2]). \nIt is impossible to destroy more than 5 targets, so we return nums[3].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,5,2,4,6], space = 2\nOutput: 1\nExplanation: Seeding the machine with nums[0], or nums[3] destroys 3 targets. \nIt is not possible to destroy more than 3 targets.\nSince nums[0] is the minimal integer that can destroy 3 targets, we return 1.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [6,2,5], space = 100\nOutput: 2\nExplanation: Whatever initial seed we select, we can only destroy 1 target. The minimal seed is nums[1].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= space &lt;=\u00a010<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2454/","title":"2454. Next Greater Element IV","text":"Problem <p>You are given a 0-indexed array of non-negative integers <code>nums</code>. For each integer in <code>nums</code>, you must find its respective second greater integer.</p> <p>The second greater integer of <code>nums[i]</code> is <code>nums[j]</code> such that:</p> <ul> <li><code>j &gt; i</code></li> <li><code>nums[j] &gt; nums[i]</code></li> <li>There exists exactly one index <code>k</code> such that <code>nums[k] &gt; nums[i]</code> and <code>i &lt; k &lt; j</code>.</li> </ul> <p>If there is no such <code>nums[j]</code>, the second greater integer is considered to be <code>-1</code>.</p> <ul> <li>For example, in the array <code>[1, 2, 4, 3]</code>, the second greater integer of <code>1</code> is <code>4</code>, <code>2</code> is <code>3</code>,\u00a0and that of <code>3</code> and <code>4</code> is <code>-1</code>.</li> </ul> <p>Return an integer array <code>answer</code>, where <code>answer[i]</code> is the second greater integer of <code>nums[i]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,4,0,9,6]\nOutput: [9,6,6,-1,-1]\nExplanation:\n0th index: 4 is the first integer greater than 2, and 9 is the second integer greater than 2, to the right of 2.\n1st index: 9 is the first, and 6 is the second integer greater than 4, to the right of 4.\n2nd index: 9 is the first, and 6 is the second integer greater than 0, to the right of 0.\n3rd index: There is no integer greater than 9 to its right, so the second greater integer is considered to be -1.\n4th index: There is no integer greater than 6 to its right, so the second greater integer is considered to be -1.\nThus, we return [9,6,6,-1,-1].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,3]\nOutput: [-1,-1]\nExplanation:\nWe return [-1,-1] since neither integer has any integer greater than it.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2455/","title":"2455. Average Value of Even Numbers That Are Divisible by Three","text":"Problem <p>Given an integer array <code>nums</code> of positive integers, return the average value of all even integers that are divisible by <code>3</code>.</p> <p>Note that the average of <code>n</code> elements is the sum of the <code>n</code> elements divided by <code>n</code> and rounded down to the nearest integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,6,10,12,15]\nOutput: 9\nExplanation: 6 and 12 are even numbers that are divisible by 3. (6 + 12) / 2 = 9.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,4,7,10]\nOutput: 0\nExplanation: There is no single number that satisfies the requirement, so return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2456/","title":"2456. Most Popular Video Creator","text":"Problem <p>You are given two string arrays <code>creators</code> and <code>ids</code>, and an integer array <code>views</code>, all of length <code>n</code>. The <code>i<sup>th</sup></code> video on a platform was created by <code>creator[i]</code>, has an id of <code>ids[i]</code>, and has <code>views[i]</code> views.</p> <p>The popularity of a creator is the sum of the number of views on all of the creator's videos. Find the creator with the highest popularity and the id of their most viewed video.</p> <ul> <li>If multiple creators have the highest popularity, find all of them.</li> <li>If multiple videos have the highest view count for a creator, find the lexicographically smallest id.</li> </ul> <p>Return a 2D array of strings <code>answer</code> where <code>answer[i] = [creator<sub>i</sub>, id<sub>i</sub>]</code> means that <code>creator<sub>i</sub></code> has the highest popularity and <code>id<sub>i</sub></code> is the id of their most popular video. The answer can be returned in any order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: creators = [\"alice\",\"bob\",\"alice\",\"chris\"], ids = [\"one\",\"two\",\"three\",\"four\"], views = [5,10,5,4]\nOutput: [[\"alice\",\"one\"],[\"bob\",\"two\"]]\nExplanation:\nThe popularity of alice is 5 + 5 = 10.\nThe popularity of bob is 10.\nThe popularity of chris is 4.\nalice and bob are the most popular creators.\nFor bob, the video with the highest view count is \"two\".\nFor alice, the videos with the highest view count are \"one\" and \"three\". Since \"one\" is lexicographically smaller than \"three\", it is included in the answer.\n</pre> <p>Example 2:</p> <pre>\nInput: creators = [\"alice\",\"alice\",\"alice\"], ids = [\"a\",\"b\",\"c\"], views = [1,2,2]\nOutput: [[\"alice\",\"b\"]]\nExplanation:\nThe videos with id \"b\" and \"c\" have the highest view count.\nSince \"b\" is lexicographically smaller than \"c\", it is included in the answer.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == creators.length == ids.length == views.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= creators[i].length, ids[i].length &lt;= 5</code></li> <li><code>creators[i]</code> and <code>ids[i]</code> consist only of lowercase English letters.</li> <li><code>0 &lt;= views[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2457/","title":"2457. Minimum Addition to Make Integer Beautiful","text":"Problem <p>You are given two positive integers <code>n</code> and <code>target</code>.</p> <p>An integer is considered beautiful if the sum of its digits is less than or equal to <code>target</code>.</p> <p>Return the minimum non-negative integer <code>x</code> such that <code>n + x</code> is beautiful. The input will be generated such that it is always possible to make <code>n</code> beautiful.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 16, target = 6\nOutput: 4\nExplanation: Initially n is 16 and its digit sum is 1 + 6 = 7. After adding 4, n becomes 20 and digit sum becomes 2 + 0 = 2. It can be shown that we can not make n beautiful with adding non-negative integer less than 4.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 467, target = 6\nOutput: 33\nExplanation: Initially n is 467 and its digit sum is 4 + 6 + 7 = 17. After adding 33, n becomes 500 and digit sum becomes 5 + 0 + 0 = 5. It can be shown that we can not make n beautiful with adding non-negative integer less than 33.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 1, target = 1\nOutput: 0\nExplanation: Initially n is 1 and its digit sum is 1, which is already smaller than or equal to target.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>12</sup></code></li> <li><code>1 &lt;= target &lt;= 150</code></li> <li>The input will be generated such that it is always possible to make <code>n</code> beautiful.</li> </ul>"},{"location":"LeetCode_Problems/2458/","title":"2458. Height of Binary Tree After Subtree Removal Queries","text":"Problem <p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes. Each node is assigned a unique value from <code>1</code> to <code>n</code>. You are also given an array <code>queries</code> of size <code>m</code>.</p> <p>You have to perform <code>m</code> independent queries on the tree where in the <code>i<sup>th</sup></code> query you do the following:</p> <ul> <li>Remove the subtree rooted at the node with the value <code>queries[i]</code> from the tree. It is guaranteed that <code>queries[i]</code> will not be equal to the value of the root.</li> </ul> <p>Return an array <code>answer</code> of size <code>m</code> where <code>answer[i]</code> is the height of the tree after performing the <code>i<sup>th</sup></code> query.</p> <p>Note:</p> <ul> <li>The queries are independent, so the tree returns to its initial state after each query.</li> <li>The height of a tree is the number of edges in the longest simple path from the root to some node in the tree.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]\nOutput: [2]\nExplanation: The diagram above shows the tree after removing the subtree rooted at node with value 4.\nThe height of the tree is 2 (The path 1 -&gt; 3 -&gt; 2).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]\nOutput: [3,2,3,2]\nExplanation: We have the following queries:\n- Removing the subtree rooted at node with value 3. The height of the tree becomes 3 (The path 5 -&gt; 8 -&gt; 2 -&gt; 4).\n- Removing the subtree rooted at node with value 2. The height of the tree becomes 2 (The path 5 -&gt; 8 -&gt; 1).\n- Removing the subtree rooted at node with value 4. The height of the tree becomes 3 (The path 5 -&gt; 8 -&gt; 2 -&gt; 6).\n- Removing the subtree rooted at node with value 8. The height of the tree becomes 2 (The path 5 -&gt; 9 -&gt; 3).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is <code>n</code>.</li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= Node.val &lt;= n</code></li> <li>All the values in the tree are unique.</li> <li><code>m == queries.length</code></li> <li><code>1 &lt;= m &lt;= min(n, 10<sup>4</sup>)</code></li> <li><code>1 &lt;= queries[i] &lt;= n</code></li> <li><code>queries[i] != root.val</code></li> </ul>"},{"location":"LeetCode_Problems/2459/","title":"2459. Sort Array by Moving Items to Empty Space","text":"Problem"},{"location":"LeetCode_Problems/2460/","title":"2460. Apply Operations to an Array","text":"Problem <p>You are given a 0-indexed array <code>nums</code> of size <code>n</code> consisting of non-negative integers.</p> <p>You need to apply <code>n - 1</code> operations to this array where, in the <code>i<sup>th</sup></code> operation (0-indexed), you will apply the following on the <code>i<sup>th</sup></code> element of <code>nums</code>:</p> <ul> <li>If <code>nums[i] == nums[i + 1]</code>, then multiply <code>nums[i]</code> by <code>2</code> and set <code>nums[i + 1]</code> to <code>0</code>. Otherwise, you skip this operation.</li> </ul> <p>After performing all the operations, shift all the <code>0</code>'s to the end of the array.</p> <ul> <li>For example, the array <code>[1,0,2,0,0,1]</code> after shifting all its <code>0</code>'s to the end, is <code>[1,2,1,0,0,0]</code>.</li> </ul> <p>Return the resulting array.</p> <p>Note that the operations are applied sequentially, not all at once.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,2,1,1,0]\nOutput: [1,4,2,0,0,0]\nExplanation: We do the following operations:\n- i = 0: nums[0] and nums[1] are not equal, so we skip this operation.\n- i = 1: nums[1] and nums[2] are equal, we multiply nums[1] by 2 and change nums[2] to 0. The array becomes [1,4,0,1,1,0].\n- i = 2: nums[2] and nums[3] are not equal, so we skip this operation.\n- i = 3: nums[3] and nums[4] are equal, we multiply nums[3] by 2 and change nums[4] to 0. The array becomes [1,4,0,2,0,0].\n- i = 4: nums[4] and nums[5] are equal, we multiply nums[4] by 2 and change nums[5] to 0. The array becomes [1,4,0,2,0,0].\nAfter that, we shift the 0's to the end, which gives the array [1,4,2,0,0,0].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1]\nOutput: [1,0]\nExplanation: No operation can be applied, we just shift the 0 to the end.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 2000</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2461/","title":"2461. Maximum Sum of Distinct Subarrays With Length K","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>k</code>. Find the maximum subarray sum of all the subarrays of <code>nums</code> that meet the following conditions:</p> <ul> <li>The length of the subarray is <code>k</code>, and</li> <li>All the elements of the subarray are distinct.</li> </ul> <p>Return the maximum subarray sum of all the subarrays that meet the conditions. If no subarray meets the conditions, return <code>0</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,5,4,2,9,9,9], k = 3\nOutput: 15\nExplanation: The subarrays of nums with length 3 are:\n- [1,5,4] which meets the requirements and has a sum of 10.\n- [5,4,2] which meets the requirements and has a sum of 11.\n- [4,2,9] which meets the requirements and has a sum of 15.\n- [2,9,9] which does not meet the requirements because the element 9 is repeated.\n- [9,9,9] which does not meet the requirements because the element 9 is repeated.\nWe return 15 because it is the maximum subarray sum of all the subarrays that meet the conditions\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,4,4], k = 3\nOutput: 0\nExplanation: The subarrays of nums with length 3 are:\n- [4,4,4] which does not meet the requirements because the element 4 is repeated.\nWe return 0 because no subarrays meet the conditions.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2462/","title":"2462. Total Cost to Hire K Workers","text":"Problem <p>You are given a 0-indexed integer array <code>costs</code> where <code>costs[i]</code> is the cost of hiring the <code>i<sup>th</sup></code> worker.</p> <p>You are also given two integers <code>k</code> and <code>candidates</code>. We want to hire exactly <code>k</code> workers according to the following rules:</p> <ul> <li>You will run <code>k</code> sessions and hire exactly one worker in each session.</li> <li>In each hiring session, choose the worker with the lowest cost from either the first <code>candidates</code> workers or the last <code>candidates</code> workers. Break the tie by the smallest index.     <ul> <li>For example, if <code>costs = [3,2,7,7,1,2]</code> and <code>candidates = 2</code>, then in the first hiring session, we will choose the <code>4<sup>th</sup></code> worker because they have the lowest cost <code>[3,2,7,7,1,2]</code>.</li> <li>In the second hiring session, we will choose <code>1<sup>st</sup></code> worker because they have the same lowest cost as <code>4<sup>th</sup></code> worker but they have the smallest index <code>[3,2,7,7,2]</code>. Please note that the indexing may be changed in the process.</li> </ul> </li> <li>If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.</li> <li>A worker can only be chosen once.</li> </ul> <p>Return the total cost to hire exactly <code>k</code> workers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4\nOutput: 11\nExplanation: We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [17,12,10,2,7,2,11,20,8]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2.\n- In the second hiring round we choose the worker from [17,12,10,7,2,11,20,8]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.\n- In the third hiring round we choose the worker from [17,12,10,7,11,20,8]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.\nThe total hiring cost is 11.\n</pre> <p>Example 2:</p> <pre>\nInput: costs = [1,2,4,1], k = 3, candidates = 3\nOutput: 4\nExplanation: We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [1,2,4,1]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers.\n- In the second hiring round we choose the worker from [2,4,1]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2.\n- In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [2,4]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.\nThe total hiring cost is 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= costs.length &lt;= 10<sup>5 </sup></code></li> <li><code>1 &lt;= costs[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k, candidates &lt;= costs.length</code></li> </ul>"},{"location":"LeetCode_Problems/2463/","title":"2463. Minimum Total Distance Traveled","text":"Problem <p>There are some robots and factories on the X-axis. You are given an integer array <code>robot</code> where <code>robot[i]</code> is the position of the <code>i<sup>th</sup></code> robot. You are also given a 2D integer array <code>factory</code> where <code>factory[j] = [position<sub>j</sub>, limit<sub>j</sub>]</code> indicates that <code>position<sub>j</sub></code> is the position of the <code>j<sup>th</sup></code> factory and that the <code>j<sup>th</sup></code> factory can repair at most <code>limit<sub>j</sub></code> robots.</p> <p>The positions of each robot are unique. The positions of each factory are also unique. Note that a robot can be in the same position as a factory initially.</p> <p>All the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.</p> <p>At any moment, you can set the initial direction of moving for some robot. Your target is to minimize the total distance traveled by all the robots.</p> <p>Return the minimum total distance traveled by all the robots. The test cases are generated such that all the robots can be repaired.</p> <p>Note that</p> <ul> <li>All robots move at the same speed.</li> <li>If two robots move in the same direction, they will never collide.</li> <li>If two robots move in opposite directions and they meet at some point, they do not collide. They cross each other.</li> <li>If a robot passes by a factory that reached its limits, it crosses it as if it does not exist.</li> <li>If the robot moved from a position <code>x</code> to a position <code>y</code>, the distance it moved is <code>|y - x|</code>.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: robot = [0,4,6], factory = [[2,2],[6,2]]\nOutput: 4\nExplanation: As shown in the figure:\n- The first robot at position 0 moves in the positive direction. It will be repaired at the first factory.\n- The second robot at position 4 moves in the negative direction. It will be repaired at the first factory.\n- The third robot at position 6 will be repaired at the second factory. It does not need to move.\nThe limit of the first factory is 2, and it fixed 2 robots.\nThe limit of the second factory is 2, and it fixed 1 robot.\nThe total distance is |2 - 0| + |2 - 4| + |6 - 6| = 4. It can be shown that we cannot achieve a better total distance than 4.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: robot = [1,-1], factory = [[-2,1],[2,1]]\nOutput: 2\nExplanation: As shown in the figure:\n- The first robot at position 1 moves in the positive direction. It will be repaired at the second factory.\n- The second robot at position -1 moves in the negative direction. It will be repaired at the first factory.\nThe limit of the first factory is 1, and it fixed 1 robot.\nThe limit of the second factory is 1, and it fixed 1 robot.\nThe total distance is |2 - 1| + |(-2) - (-1)| = 2. It can be shown that we cannot achieve a better total distance than 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= robot.length, factory.length &lt;= 100</code></li> <li><code>factory[j].length == 2</code></li> <li><code>-10<sup>9</sup> &lt;= robot[i], position<sub>j</sub> &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= limit<sub>j</sub> &lt;= robot.length</code></li> <li>The input will be generated such that it is always possible to repair every robot.</li> </ul>"},{"location":"LeetCode_Problems/2464/","title":"2464. Minimum Subarrays in a Valid Split","text":"Problem"},{"location":"LeetCode_Problems/2465/","title":"2465. Number of Distinct Averages","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of even length.</p> <p>As long as <code>nums</code> is not empty, you must repetitively:</p> <ul> <li>Find the minimum number in <code>nums</code> and remove it.</li> <li>Find the maximum number in <code>nums</code> and remove it.</li> <li>Calculate the average of the two removed numbers.</li> </ul> <p>The average of two numbers <code>a</code> and <code>b</code> is <code>(a + b) / 2</code>.</p> <ul> <li>For example, the average of <code>2</code> and <code>3</code> is <code>(2 + 3) / 2 = 2.5</code>.</li> </ul> <p>Return the number of distinct averages calculated using the above process.</p> <p>Note that when there is a tie for a minimum or maximum number, any can be removed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,1,4,0,3,5]\nOutput: 2\nExplanation:\n1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].\n2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].\n3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,100]\nOutput: 1\nExplanation:\nThere is only one average to be calculated after removing 1 and 100, so we return 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 100</code></li> <li><code>nums.length</code> is even.</li> <li><code>0 &lt;= nums[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2466/","title":"2466. Count Ways To Build Good Strings","text":"Problem <p>Given the integers <code>zero</code>, <code>one</code>, <code>low</code>, and <code>high</code>, we can construct a string by starting with an empty string, and then at each step perform either of the following:</p> <ul> <li>Append the character <code>'0'</code> <code>zero</code> times.</li> <li>Append the character <code>'1'</code> <code>one</code> times.</li> </ul> <p>This can be performed any number of times.</p> <p>A good string is a string constructed by the above process having a length between <code>low</code> and <code>high</code> (inclusive).</p> <p>Return the number of different good strings that can be constructed satisfying these properties. Since the answer can be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: low = 3, high = 3, zero = 1, one = 1\nOutput: 8\nExplanation: \nOne possible valid good string is \"011\". \nIt can be constructed as follows: \"\" -&gt; \"0\" -&gt; \"01\" -&gt; \"011\". \nAll binary strings from \"000\" to \"111\" are good strings in this example.\n</pre> <p>Example 2:</p> <pre>\nInput: low = 2, high = 3, zero = 1, one = 2\nOutput: 5\nExplanation: The good strings are \"00\", \"11\", \"000\", \"110\", and \"011\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= low\u00a0&lt;= high\u00a0&lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= zero, one &lt;= low</code></li> </ul>"},{"location":"LeetCode_Problems/2467/","title":"2467. Most Profitable Path in a Tree","text":"Problem <p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, rooted at node <code>0</code>. You are given a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p> <p>At every node <code>i</code>, there is a gate. You are also given an array of even integers <code>amount</code>, where <code>amount[i]</code> represents:</p> <ul> <li>the price needed to open the gate at node <code>i</code>, if <code>amount[i]</code> is negative, or,</li> <li>the cash reward obtained on opening the gate at node <code>i</code>, otherwise.</li> </ul> <p>The game goes on as follows:</p> <ul> <li>Initially, Alice is at node <code>0</code> and Bob is at node <code>bob</code>.</li> <li>At every second, Alice and Bob each move to an adjacent node. Alice moves towards some leaf node, while Bob moves towards node <code>0</code>.</li> <li>For every node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that:     <ul> <li>If the gate is already open, no price will be required, nor will there be any cash reward.</li> <li>If Alice and Bob reach the node simultaneously, they share the price/reward for opening the gate there. In other words, if the price to open the gate is <code>c</code>, then both Alice and Bob pay\u00a0<code>c / 2</code> each. Similarly, if the reward at the gate is <code>c</code>, both of them receive <code>c / 2</code> each.</li> </ul> </li> <li>If Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node <code>0</code>, he stops moving. Note that these events are independent of each other.</li> </ul> <p>Return the maximum net income Alice can have if she travels towards the optimal leaf node.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6]\nOutput: 6\nExplanation: \nThe above diagram represents the given tree. The game goes as follows:\n- Alice is initially on node 0, Bob on node 3. They open the gates of their respective nodes.\n  Alice's net income is now -2.\n- Both Alice and Bob move to node 1. \n\u00a0 Since they reach here simultaneously, they open the gate together and share the reward.\n\u00a0 Alice's net income becomes -2 + (4 / 2) = 0.\n- Alice moves on to node 3. Since Bob already opened its gate, Alice's income remains unchanged.\n\u00a0 Bob moves on to node 0, and stops moving.\n- Alice moves on to node 4 and opens the gate there. Her net income becomes 0 + 6 = 6.\nNow, neither Alice nor Bob can make any further moves, and the game ends.\nIt is not possible for Alice to get a higher net income.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: edges = [[0,1]], bob = 1, amount = [-7280,2350]\nOutput: -7280\nExplanation: \nAlice follows the path 0-&gt;1 whereas Bob follows the path 1-&gt;0.\nThus, Alice opens the gate at node 0 only. Hence, her net income is -7280. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>edges</code> represents a valid tree.</li> <li><code>1 &lt;= bob &lt; n</code></li> <li><code>amount.length == n</code></li> <li><code>amount[i]</code> is an even integer in the range <code>[-10<sup>4</sup>, 10<sup>4</sup>]</code>.</li> </ul>"},{"location":"LeetCode_Problems/2468/","title":"2468. Split Message Based on Limit","text":"Problem <p>You are given a string, <code>message</code>, and a positive integer, <code>limit</code>.</p> <p>You must split <code>message</code> into one or more parts based on <code>limit</code>. Each resulting part should have the suffix <code>\"&lt;a/b&gt;\"</code>, where <code>\"b\"</code> is to be replaced with the total number of parts and <code>\"a\"</code> is to be replaced with the index of the part, starting from <code>1</code> and going up to <code>b</code>. Additionally, the length of each resulting part (including its suffix) should be equal to <code>limit</code>, except for the last part whose length can be at most <code>limit</code>.</p> <p>The resulting parts should be formed such that when their suffixes are removed and they are all concatenated in order, they should be equal to <code>message</code>. Also, the result should contain as few parts as possible.</p> <p>Return the parts <code>message</code> would be split into as an array of strings. If it is impossible to split <code>message</code> as required, return an empty array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: message = \"this is really a very awesome message\", limit = 9\nOutput: [\"thi&lt;1/14&gt;\",\"s i&lt;2/14&gt;\",\"s r&lt;3/14&gt;\",\"eal&lt;4/14&gt;\",\"ly &lt;5/14&gt;\",\"a v&lt;6/14&gt;\",\"ery&lt;7/14&gt;\",\" aw&lt;8/14&gt;\",\"eso&lt;9/14&gt;\",\"me&lt;10/14&gt;\",\" m&lt;11/14&gt;\",\"es&lt;12/14&gt;\",\"sa&lt;13/14&gt;\",\"ge&lt;14/14&gt;\"]\nExplanation:\nThe first 9 parts take 3 characters each from the beginning of message.\nThe next 5 parts take 2 characters each to finish splitting message. \nIn this example, each part, including the last, has length 9. \nIt can be shown it is not possible to split message into less than 14 parts.\n</pre> <p>Example 2:</p> <pre>\nInput: message = \"short message\", limit = 15\nOutput: [\"short mess&lt;1/2&gt;\",\"age&lt;2/2&gt;\"]\nExplanation:\nUnder the given constraints, the string can be split into two parts: \n- The first part comprises of the first 10 characters, and has a length 15.\n- The next part comprises of the last 3 characters, and has a length 8.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= message.length &lt;= 10<sup>4</sup></code></li> <li><code>message</code> consists only of lowercase English letters and <code>' '</code>.</li> <li><code>1 &lt;= limit &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2469/","title":"2469. Convert the Temperature","text":"Problem <p>You are given a non-negative floating point number rounded to two decimal places <code>celsius</code>, that denotes the temperature in Celsius.</p> <p>You should convert Celsius into Kelvin and Fahrenheit and return it as an array <code>ans = [kelvin, fahrenheit]</code>.</p> <p>Return the array <code>ans</code>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p> <p>Note that:</p> <ul> <li><code>Kelvin = Celsius + 273.15</code></li> <li><code>Fahrenheit = Celsius * 1.80 + 32.00</code></li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: celsius = 36.50\nOutput: [309.65000,97.70000]\nExplanation: Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70.\n</pre> <p>Example 2:</p> <pre>\nInput: celsius = 122.11\nOutput: [395.26000,251.79800]\nExplanation: Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= celsius &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2470/","title":"2470. Number of Subarrays With LCM Equal to K","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the number of subarrays of <code>nums</code> where the least common multiple of the subarray's elements is <code>k</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p>The least common multiple of an array is the smallest positive integer that is divisible by all the array elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,6,2,7,1], k = 6\nOutput: 4\nExplanation: The subarrays of nums where 6 is the least common multiple of all the subarray's elements are:\n- [3,6,2,7,1]\n- [3,6,2,7,1]\n- [3,6,2,7,1]\n- [3,6,2,7,1]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3], k = 2\nOutput: 0\nExplanation: There are no subarrays of nums where 2 is the least common multiple of all the subarray's elements.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i], k &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2471/","title":"2471. Minimum Number of Operations to Sort a Binary Tree by Level","text":"Problem <p>You are given the <code>root</code> of a binary tree with unique values.</p> <p>In one operation, you can choose any two nodes at the same level and swap their values.</p> <p>Return the minimum number of operations needed to make the values at each level sorted in a strictly increasing order.</p> <p>The level of a node is the number of edges along the path between it and the root node.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [1,4,3,7,6,8,5,null,null,null,null,9,null,10]\nOutput: 3\nExplanation:\n- Swap 4 and 3. The 2<sup>nd</sup> level becomes [3,4].\n- Swap 7 and 5. The 3<sup>rd</sup> level becomes [5,6,8,7].\n- Swap 8 and 7. The 3<sup>rd</sup> level becomes [5,6,7,8].\nWe used 3 operations so return 3.\nIt can be proven that 3 is the minimum number of operations needed.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,3,2,7,6,5,4]\nOutput: 3\nExplanation:\n- Swap 3 and 2. The 2<sup>nd</sup> level becomes [2,3].\n- Swap 7 and 4. The 3<sup>rd</sup> level becomes [4,6,5,7].\n- Swap 6 and 5. The 3<sup>rd</sup> level becomes [4,5,6,7].\nWe used 3 operations so return 3.\nIt can be proven that 3 is the minimum number of operations needed.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: root = [1,2,3,4,5,6]\nOutput: 0\nExplanation: Each level is already sorted in increasing order so return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> <li>All the values of the tree are unique.</li> </ul>"},{"location":"LeetCode_Problems/2472/","title":"2472. Maximum Number of Non-overlapping Palindrome Substrings","text":"Problem <p>You are given a string <code>s</code> and a positive integer <code>k</code>.</p> <p>Select a set of non-overlapping substrings from the string <code>s</code> that satisfy the following conditions:</p> <ul> <li>The length of each substring is at least <code>k</code>.</li> <li>Each substring is a palindrome.</li> </ul> <p>Return the maximum number of substrings in an optimal selection.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abaccdbbd\", k = 3\nOutput: 2\nExplanation: We can select the substrings underlined in s = \"abaccdbbd\". Both \"aba\" and \"dbbd\" are palindromes and have a length of at least k = 3.\nIt can be shown that we cannot find a selection with more than two valid substrings.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"adbcda\", k = 2\nOutput: 0\nExplanation: There is no palindrome substring of length at least 2 in the string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= s.length &lt;= 2000</code></li> <li><code>s</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2473/","title":"2473. Minimum Cost to Buy Apples","text":"Problem"},{"location":"LeetCode_Problems/2474/","title":"2474. Customers With Strictly Increasing Purchases","text":"Problem"},{"location":"LeetCode_Problems/2475/","title":"2475. Number of Unequal Triplets in Array","text":"Problem <p>You are given a 0-indexed array of positive integers <code>nums</code>. Find the number of triplets <code>(i, j, k)</code> that meet the following conditions:</p> <ul> <li><code>0 &lt;= i &lt; j &lt; k &lt; nums.length</code></li> <li><code>nums[i]</code>, <code>nums[j]</code>, and <code>nums[k]</code> are pairwise distinct.     <ul> <li>In other words, <code>nums[i] != nums[j]</code>, <code>nums[i] != nums[k]</code>, and <code>nums[j] != nums[k]</code>.</li> </ul> </li> </ul> <p>Return the number of triplets that meet the conditions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,4,2,4,3]\nOutput: 3\nExplanation: The following triplets meet the conditions:\n- (0, 2, 4) because 4 != 2 != 3\n- (1, 2, 4) because 4 != 2 != 3\n- (2, 3, 4) because 2 != 4 != 3\nSince there are 3 triplets, we return 3.\nNote that (2, 0, 4) is not a valid triplet because 2 &gt; 0.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1,1,1]\nOutput: 0\nExplanation: No triplets meet the conditions so we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2476/","title":"2476. Closest Nodes Queries in a Binary Search Tree","text":"Problem <p>You are given the <code>root</code> of a binary search tree and an array <code>queries</code> of size <code>n</code> consisting of positive integers.</p> <p>Find a 2D array <code>answer</code> of size <code>n</code> where <code>answer[i] = [min<sub>i</sub>, max<sub>i</sub>]</code>:</p> <ul> <li><code>min<sub>i</sub></code> is the largest value in the tree that is smaller than or equal to <code>queries[i]</code>. If a such value does not exist, add <code>-1</code> instead.</li> <li><code>max<sub>i</sub></code> is the smallest value in the tree that is greater than or equal to <code>queries[i]</code>. If a such value does not exist, add <code>-1</code> instead.</li> </ul> <p>Return the array <code>answer</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [6,2,13,1,4,9,15,null,null,null,null,null,null,14], queries = [2,5,16]\nOutput: [[2,2],[4,6],[15,-1]]\nExplanation: We answer the queries in the following way:\n- The largest number that is smaller or equal than 2 in the tree is 2, and the smallest number that is greater or equal than 2 is still 2. So the answer for the first query is [2,2].\n- The largest number that is smaller or equal than 5 in the tree is 4, and the smallest number that is greater or equal than 5 is 6. So the answer for the second query is [4,6].\n- The largest number that is smaller or equal than 16 in the tree is 15, and the smallest number that is greater or equal than 16 does not exist. So the answer for the third query is [15,-1].\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [4,null,9], queries = [3]\nOutput: [[-1,4]]\nExplanation: The largest number that is smaller or equal to 3 in the tree does not exist, and the smallest number that is greater or equal to 3 is 4. So the answer for the query is [-1,4].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>6</sup></code></li> <li><code>n == queries.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= queries[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2477/","title":"2477. Minimum Fuel Cost to Report to the Capital","text":"Problem <p>There is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code> and exactly <code>n - 1</code> roads. The capital city is city <code>0</code>. You are given a 2D integer array <code>roads</code> where <code>roads[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists a bidirectional road connecting cities <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p> <p>There is a meeting for the representatives of each city. The meeting is in the capital city.</p> <p>There is a car in each city. You are given an integer <code>seats</code> that indicates the number of seats in each car.</p> <p>A representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel.</p> <p>Return the minimum number of liters of fuel to reach the capital city.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: roads = [[0,1],[0,2],[0,3]], seats = 5\nOutput: 3\nExplanation: \n- Representative<sub>1</sub> goes directly to the capital with 1 liter of fuel.\n- Representative<sub>2</sub> goes directly to the capital with 1 liter of fuel.\n- Representative<sub>3</sub> goes directly to the capital with 1 liter of fuel.\nIt costs 3 liters of fuel at minimum. \nIt can be proven that 3 is the minimum number of liters of fuel needed.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2\nOutput: 7\nExplanation: \n- Representative<sub>2</sub> goes directly to city 3 with 1 liter of fuel.\n- Representative<sub>2</sub> and representative<sub>3</sub> go together to city 1 with 1 liter of fuel.\n- Representative<sub>2</sub> and representative<sub>3</sub> go together to the capital with 1 liter of fuel.\n- Representative<sub>1</sub> goes directly to the capital with 1 liter of fuel.\n- Representative<sub>5</sub> goes directly to the capital with 1 liter of fuel.\n- Representative<sub>6</sub> goes directly to city 4 with 1 liter of fuel.\n- Representative<sub>4</sub> and representative<sub>6</sub> go together to the capital with 1 liter of fuel.\nIt costs 7 liters of fuel at minimum. \nIt can be proven that 7 is the minimum number of liters of fuel needed.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: roads = [], seats = 1\nOutput: 0\nExplanation: No representatives need to travel to the capital city.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>roads.length == n - 1</code></li> <li><code>roads[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>roads</code> represents a valid tree.</li> <li><code>1 &lt;= seats &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2478/","title":"2478. Number of Beautiful Partitions","text":"Problem <p>You are given a string <code>s</code> that consists of the digits <code>'1'</code> to <code>'9'</code> and two integers <code>k</code> and <code>minLength</code>.</p> <p>A partition of <code>s</code> is called beautiful if:</p> <ul> <li><code>s</code> is partitioned into <code>k</code> non-intersecting substrings.</li> <li>Each substring has a length of at least <code>minLength</code>.</li> <li>Each substring starts with a prime digit and ends with a non-prime digit. Prime digits are <code>'2'</code>, <code>'3'</code>, <code>'5'</code>, and <code>'7'</code>, and the rest of the digits are non-prime.</li> </ul> <p>Return the number of beautiful partitions of <code>s</code>. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"23542185131\", k = 3, minLength = 2\nOutput: 3\nExplanation: There exists three ways to create a beautiful partition:\n\"2354 | 218 | 5131\"\n\"2354 | 21851 | 31\"\n\"2354218 | 51 | 31\"\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"23542185131\", k = 3, minLength = 3\nOutput: 1\nExplanation: There exists one way to create a beautiful partition: \"2354 | 218 | 5131\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"3312958\", k = 3, minLength = 1\nOutput: 1\nExplanation: There exists one way to create a beautiful partition: \"331 | 29 | 58\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k, minLength &lt;= s.length &lt;= 1000</code></li> <li><code>s</code> consists of the digits <code>'1'</code> to <code>'9'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2479/","title":"2479. Maximum XOR of Two Non-Overlapping Subtrees","text":"Problem"},{"location":"LeetCode_Problems/2480/","title":"2480. Form a Chemical Bond","text":"Problem"},{"location":"LeetCode_Problems/2481/","title":"2481. Minimum Cuts to Divide a Circle","text":"Problem <p>A valid cut in a circle can be:</p> <ul> <li>A cut that is represented by a straight line that touches two points on the edge of the circle and passes through its center, or</li> <li>A cut that is represented by a straight line that touches one point on the edge of the circle and its center.</li> </ul> <p>Some valid and invalid cuts are shown in the figures below.</p> <p></p> <p>Given the integer <code>n</code>, return the minimum number of cuts needed to divide a circle into <code>n</code> equal slices.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4\nOutput: 2\nExplanation: \nThe above figure shows how cutting the circle twice through the middle divides it into 4 equal slices.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 3\nOutput: 3\nExplanation:\nAt least 3 cuts are needed to divide the circle into 3 equal slices. \nIt can be shown that less than 3 cuts cannot result in 3 slices of equal size and shape.\nAlso note that the first cut will not divide the circle into distinct parts.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2482/","title":"2482. Difference Between Ones and Zeros in Row and Column","text":"Problem <p>You are given a 0-indexed <code>m x n</code> binary matrix <code>grid</code>.</p> <p>A 0-indexed <code>m x n</code> difference matrix <code>diff</code> is created with the following procedure:</p> <ul> <li>Let the number of ones in the <code>i<sup>th</sup></code> row be <code>onesRow<sub>i</sub></code>.</li> <li>Let the number of ones in the <code>j<sup>th</sup></code> column be <code>onesCol<sub>j</sub></code>.</li> <li>Let the number of zeros in the <code>i<sup>th</sup></code> row be <code>zerosRow<sub>i</sub></code>.</li> <li>Let the number of zeros in the <code>j<sup>th</sup></code> column be <code>zerosCol<sub>j</sub></code>.</li> <li><code>diff[i][j] = onesRow<sub>i</sub> + onesCol<sub>j</sub> - zerosRow<sub>i</sub> - zerosCol<sub>j</sub></code></li> </ul> <p>Return the difference matrix <code>diff</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,1,1],[1,0,1],[0,0,1]]\nOutput: [[0,0,4],[0,0,4],[-2,-2,2]]\nExplanation:\n- diff[0][0] = <code>onesRow<sub>0</sub> + onesCol<sub>0</sub> - zerosRow<sub>0</sub> - zerosCol<sub>0</sub></code> = 2 + 1 - 1 - 2 = 0 \n- diff[0][1] = <code>onesRow<sub>0</sub> + onesCol<sub>1</sub> - zerosRow<sub>0</sub> - zerosCol<sub>1</sub></code> = 2 + 1 - 1 - 2 = 0 \n- diff[0][2] = <code>onesRow<sub>0</sub> + onesCol<sub>2</sub> - zerosRow<sub>0</sub> - zerosCol<sub>2</sub></code> = 2 + 3 - 1 - 0 = 4 \n- diff[1][0] = <code>onesRow<sub>1</sub> + onesCol<sub>0</sub> - zerosRow<sub>1</sub> - zerosCol<sub>0</sub></code> = 2 + 1 - 1 - 2 = 0 \n- diff[1][1] = <code>onesRow<sub>1</sub> + onesCol<sub>1</sub> - zerosRow<sub>1</sub> - zerosCol<sub>1</sub></code> = 2 + 1 - 1 - 2 = 0 \n- diff[1][2] = <code>onesRow<sub>1</sub> + onesCol<sub>2</sub> - zerosRow<sub>1</sub> - zerosCol<sub>2</sub></code> = 2 + 3 - 1 - 0 = 4 \n- diff[2][0] = <code>onesRow<sub>2</sub> + onesCol<sub>0</sub> - zerosRow<sub>2</sub> - zerosCol<sub>0</sub></code> = 1 + 1 - 2 - 2 = -2\n- diff[2][1] = <code>onesRow<sub>2</sub> + onesCol<sub>1</sub> - zerosRow<sub>2</sub> - zerosCol<sub>1</sub></code> = 1 + 1 - 2 - 2 = -2\n- diff[2][2] = <code>onesRow<sub>2</sub> + onesCol<sub>2</sub> - zerosRow<sub>2</sub> - zerosCol<sub>2</sub></code> = 1 + 3 - 2 - 0 = 2\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,1,1],[1,1,1]]\nOutput: [[5,5,5],[5,5,5]]\nExplanation:\n- diff[0][0] = onesRow<sub>0</sub> + onesCol<sub>0</sub> - zerosRow<sub>0</sub> - zerosCol<sub>0</sub> = 3 + 2 - 0 - 0 = 5\n- diff[0][1] = onesRow<sub>0</sub> + onesCol<sub>1</sub> - zerosRow<sub>0</sub> - zerosCol<sub>1</sub> = 3 + 2 - 0 - 0 = 5\n- diff[0][2] = onesRow<sub>0</sub> + onesCol<sub>2</sub> - zerosRow<sub>0</sub> - zerosCol<sub>2</sub> = 3 + 2 - 0 - 0 = 5\n- diff[1][0] = onesRow<sub>1</sub> + onesCol<sub>0</sub> - zerosRow<sub>1</sub> - zerosCol<sub>0</sub> = 3 + 2 - 0 - 0 = 5\n- diff[1][1] = onesRow<sub>1</sub> + onesCol<sub>1</sub> - zerosRow<sub>1</sub> - zerosCol<sub>1</sub> = 3 + 2 - 0 - 0 = 5\n- diff[1][2] = onesRow<sub>1</sub> + onesCol<sub>2</sub> - zerosRow<sub>1</sub> - zerosCol<sub>2</sub> = 3 + 2 - 0 - 0 = 5\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/2483/","title":"2483. Minimum Penalty for a Shop","text":"Problem <p>You are given the customer visit log of a shop represented by a 0-indexed string <code>customers</code> consisting only of characters <code>'N'</code> and <code>'Y'</code>:</p> <ul> <li>if the <code>i<sup>th</sup></code> character is <code>'Y'</code>, it means that customers come at the <code>i<sup>th</sup></code> hour</li> <li>whereas <code>'N'</code> indicates that no customers come at the <code>i<sup>th</sup></code> hour.</li> </ul> <p>If the shop closes at the <code>j<sup>th</sup></code> hour (<code>0 &lt;= j &lt;= n</code>), the penalty is calculated as follows:</p> <ul> <li>For every hour when the shop is open and no customers come, the penalty increases by <code>1</code>.</li> <li>For every hour when the shop is closed and customers come, the penalty increases by <code>1</code>.</li> </ul> <p>Return the earliest hour at which the shop must be closed to incur a minimum penalty.</p> <p>Note that if a shop closes at the <code>j<sup>th</sup></code> hour, it means the shop is closed at the hour <code>j</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: customers = \"YYNY\"\nOutput: 2\nExplanation: \n- Closing the shop at the 0<sup>th</sup> hour incurs in 1+1+0+1 = 3 penalty.\n- Closing the shop at the 1<sup>st</sup> hour incurs in 0+1+0+1 = 2 penalty.\n- Closing the shop at the 2<sup>nd</sup> hour incurs in 0+0+0+1 = 1 penalty.\n- Closing the shop at the 3<sup>rd</sup> hour incurs in 0+0+1+1 = 2 penalty.\n- Closing the shop at the 4<sup>th</sup> hour incurs in 0+0+1+0 = 1 penalty.\nClosing the shop at 2<sup>nd</sup> or 4<sup>th</sup> hour gives a minimum penalty. Since 2 is earlier, the optimal closing time is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: customers = \"NNNNN\"\nOutput: 0\nExplanation: It is best to close the shop at the 0<sup>th</sup> hour as no customers arrive.</pre> <p>Example 3:</p> <pre>\nInput: customers = \"YYYY\"\nOutput: 4\nExplanation: It is best to close the shop at the 4<sup>th</sup> hour as customers arrive at each hour.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= customers.length &lt;= 10<sup>5</sup></code></li> <li><code>customers</code> consists only of characters <code>'Y'</code> and <code>'N'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2484/","title":"2484. Count Palindromic Subsequences","text":"Problem <p>Given a string of digits <code>s</code>, return the number of palindromic subsequences of <code>s</code> having length <code>5</code>. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Note:</p> <ul> <li>A string is palindromic if it reads the same forward and backward.</li> <li>A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"103301\"\nOutput: 2\nExplanation: \nThere are 6 possible subsequences of length 5: \"10330\",\"10331\",\"10301\",\"10301\",\"13301\",\"03301\". \nTwo of them (both equal to \"10301\") are palindromic.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"0000000\"\nOutput: 21\nExplanation: All 21 subsequences are \"00000\", which is palindromic.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"9999900000\"\nOutput: 2\nExplanation: The only two palindromic subsequences are \"99999\" and \"00000\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s</code> consists of digits.</li> </ul>"},{"location":"LeetCode_Problems/2485/","title":"2485. Find the Pivot Integer","text":"Problem <p>Given a positive integer <code>n</code>, find the pivot integer <code>x</code> such that:</p> <ul> <li>The sum of all elements between <code>1</code> and <code>x</code> inclusively equals the sum of all elements between <code>x</code> and <code>n</code> inclusively.</li> </ul> <p>Return the pivot integer <code>x</code>. If no such integer exists, return <code>-1</code>. It is guaranteed that there will be at most one pivot index for the given input.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 8\nOutput: 6\nExplanation: 6 is the pivot integer since: 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1\nOutput: 1\nExplanation: 1 is the pivot integer since: 1 = 1.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 4\nOutput: -1\nExplanation: It can be proved that no such integer exist.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2486/","title":"2486. Append Characters to String to Make Subsequence","text":"Problem <p>You are given two strings <code>s</code> and <code>t</code> consisting of only lowercase English letters.</p> <p>Return the minimum number of characters that need to be appended to the end of <code>s</code> so that <code>t</code> becomes a subsequence of <code>s</code>.</p> <p>A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"coaching\", t = \"coding\"\nOutput: 4\nExplanation: Append the characters \"ding\" to the end of s so that s = \"coachingding\".\nNow, t is a subsequence of s (\"coachingding\").\nIt can be shown that appending any 3 characters to the end of s will never make t a subsequence.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcde\", t = \"a\"\nOutput: 0\nExplanation: t is already a subsequence of s (\"abcde\").\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"z\", t = \"abcde\"\nOutput: 5\nExplanation: Append the characters \"abcde\" to the end of s so that s = \"zabcde\".\nNow, t is a subsequence of s (\"zabcde\").\nIt can be shown that appending any 4 characters to the end of s will never make t a subsequence.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> and <code>t</code> consist only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2487/","title":"2487. Remove Nodes From Linked List","text":"Problem <p>You are given the <code>head</code> of a linked list.</p> <p>Remove every node which has a node with a greater value anywhere to the right side of it.</p> <p>Return the <code>head</code> of the modified linked list.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [5,2,13,3,8]\nOutput: [13,8]\nExplanation: The nodes that should be removed are 5, 2 and 3.\n- Node 13 is to the right of node 5.\n- Node 13 is to the right of node 2.\n- Node 8 is to the right of node 3.\n</pre> <p>Example 2:</p> <pre>\nInput: head = [1,1,1,1]\nOutput: [1,1,1,1]\nExplanation: Every node has value 1, so no nodes are removed.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of the nodes in the given list is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2488/","title":"2488. Count Subarrays With Median K","text":"Problem <p>You are given an array <code>nums</code> of size <code>n</code> consisting of distinct integers from <code>1</code> to <code>n</code> and a positive integer <code>k</code>.</p> <p>Return the number of non-empty subarrays in <code>nums</code> that have a median equal to <code>k</code>.</p> <p>Note:</p> <ul> <li>The median of an array is the middle element after sorting the array in ascending order. If the array is of even length, the median is the left middle element.      <ul> <li>For example, the median of <code>[2,3,1,4]</code> is <code>2</code>, and the median of <code>[8,4,3,5,1]</code> is <code>4</code>.</li> </ul> </li> <li>A subarray is a contiguous part of an array.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,2,1,4,5], k = 4\nOutput: 3\nExplanation: The subarrays that have a median equal to 4 are: [4], [4,5] and [1,4,5].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,1], k = 3\nOutput: 1\nExplanation: [3] is the only subarray that has a median equal to 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i], k &lt;= n</code></li> <li>The integers in <code>nums</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/2489/","title":"2489. Number of Substrings With Fixed Ratio","text":"Problem"},{"location":"LeetCode_Problems/2490/","title":"2490. Circular Sentence","text":"Problem <p>A sentence is a list of words that are separated by a single space with no leading or trailing spaces.</p> <ul> <li>For example, <code>\"Hello World\"</code>, <code>\"HELLO\"</code>, <code>\"hello world hello world\"</code> are all sentences.</li> </ul> <p>Words consist of only uppercase and lowercase English letters. Uppercase and lowercase English letters are considered different.</p> <p>A sentence is circular if:</p> <ul> <li>The last character of a word is equal to the first character of the next word.</li> <li>The last character of the last word is equal to the first character of the first word.</li> </ul> <p>For example, <code>\"leetcode exercises sound delightful\"</code>, <code>\"eetcode\"</code>, <code>\"leetcode eats soul\" </code>are all circular sentences. However, <code>\"Leetcode is cool\"</code>, <code>\"happy Leetcode\"</code>, <code>\"Leetcode\"</code> and <code>\"I like Leetcode\"</code> are not circular sentences.</p> <p>Given a string <code>sentence</code>, return <code>true</code> if it is circular. Otherwise, return <code>false</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: sentence = \"leetcode exercises sound delightful\"\nOutput: true\nExplanation: The words in sentence are [\"leetcode\", \"exercises\", \"sound\", \"delightful\"].\n- leetcode's\u00a0last character is equal to exercises's first character.\n- exercises's\u00a0last character is equal to sound's first character.\n- sound's\u00a0last character is equal to delightful's first character.\n- delightful's\u00a0last character is equal to leetcode's first character.\nThe sentence is circular.</pre> <p>Example 2:</p> <pre>\nInput: sentence = \"eetcode\"\nOutput: true\nExplanation: The words in sentence are [\"eetcode\"].\n- eetcode's\u00a0last character is equal to eetcode's first character.\nThe sentence is circular.</pre> <p>Example 3:</p> <pre>\nInput: sentence = \"Leetcode is cool\"\nOutput: false\nExplanation: The words in sentence are [\"Leetcode\", \"is\", \"cool\"].\n- Leetcode's\u00a0last character is not equal to is's first character.\nThe sentence is not circular.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sentence.length &lt;= 500</code></li> <li><code>sentence</code> consist of only lowercase and uppercase English letters and spaces.</li> <li>The words in <code>sentence</code> are separated by a single space.</li> <li>There are no leading or trailing spaces.</li> </ul>"},{"location":"LeetCode_Problems/2491/","title":"2491. Divide Players Into Teams of Equal Skill","text":"Problem <p>You are given a positive integer array <code>skill</code> of even length <code>n</code> where <code>skill[i]</code> denotes the skill of the <code>i<sup>th</sup></code> player. Divide the players into <code>n / 2</code> teams of size <code>2</code> such that the total skill of each team is equal.</p> <p>The chemistry of a team is equal to the product of the skills of the players on that team.</p> <p>Return the sum of the chemistry of all the teams, or return <code>-1</code> if there is no way to divide the players into teams such that the total skill of each team is equal.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: skill = [3,2,5,1,3,4]\nOutput: 22\nExplanation: \nDivide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.\nThe sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.\n</pre> <p>Example 2:</p> <pre>\nInput: skill = [3,4]\nOutput: 12\nExplanation: \nThe two players form a team with a total skill of 7.\nThe chemistry of the team is 3 * 4 = 12.\n</pre> <p>Example 3:</p> <pre>\nInput: skill = [1,1,2,3]\nOutput: -1\nExplanation: \nThere is no way to divide the players into teams such that the total skill of each team is equal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= skill.length &lt;= 10<sup>5</sup></code></li> <li><code>skill.length</code> is even.</li> <li><code>1 &lt;= skill[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2492/","title":"2492. Minimum Score of a Path Between Two Cities","text":"Problem <p>You are given a positive integer <code>n</code> representing <code>n</code> cities numbered from <code>1</code> to <code>n</code>. You are also given a 2D array <code>roads</code> where <code>roads[i] = [a<sub>i</sub>, b<sub>i</sub>, distance<sub>i</sub>]</code> indicates that there is a bidirectional road between cities <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> with a distance equal to <code>distance<sub>i</sub></code>. The cities graph is not necessarily connected.</p> <p>The score of a path between two cities is defined as the minimum distance of a road in this path.</p> <p>Return the minimum possible score of a path between cities <code>1</code> and <code>n</code>.</p> <p>Note:</p> <ul> <li>A path is a sequence of roads between two cities.</li> <li>It is allowed for a path to contain the same road multiple times, and you can visit cities <code>1</code> and <code>n</code> multiple times along the path.</li> <li>The test cases are generated such that there is at least one path between <code>1</code> and <code>n</code>.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]\nOutput: 5\nExplanation: The path from city 1 to 4 with the minimum score is: 1 -&gt; 2 -&gt; 4. The score of this path is min(9,5) = 5.\nIt can be shown that no other path has less score.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]]\nOutput: 2\nExplanation: The path from city 1 to 4 with the minimum score is: 1 -&gt; 2 -&gt; 1 -&gt; 3 -&gt; 4. The score of this path is min(2,2,4,7) = 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= roads.length &lt;= 10<sup>5</sup></code></li> <li><code>roads[i].length == 3</code></li> <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>1 &lt;= distance<sub>i</sub> &lt;= 10<sup>4</sup></code></li> <li>There are no repeated edges.</li> <li>There is at least one path between <code>1</code> and <code>n</code>.</li> </ul>"},{"location":"LeetCode_Problems/2493/","title":"2493. Divide Nodes Into the Maximum Number of Groups","text":"Problem <p>You are given a positive integer <code>n</code> representing the number of nodes in an undirected graph. The nodes are labeled from <code>1</code> to <code>n</code>.</p> <p>You are also given a 2D integer array <code>edges</code>, where <code>edges[i] = [a<sub>i, </sub>b<sub>i</sub>]</code> indicates that there is a bidirectional edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>. Notice that the given graph may be disconnected.</p> <p>Divide the nodes of the graph into <code>m</code> groups (1-indexed) such that:</p> <ul> <li>Each node in the graph belongs to exactly one group.</li> <li>For every pair of nodes in the graph that are connected by an edge <code>[a<sub>i, </sub>b<sub>i</sub>]</code>, if <code>a<sub>i</sub></code> belongs to the group with index <code>x</code>, and <code>b<sub>i</sub></code> belongs to the group with index <code>y</code>, then <code>|y - x| = 1</code>.</li> </ul> <p>Return the maximum number of groups (i.e., maximum <code>m</code>) into which you can divide the nodes. Return <code>-1</code> if it is impossible to group the nodes with the given conditions.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]\nOutput: 4\nExplanation: As shown in the image we:\n- Add node 5 to the first group.\n- Add node 1 to the second group.\n- Add nodes 2 and 4 to the third group.\n- Add nodes 3 and 6 to the fourth group.\nWe can see that every edge is satisfied.\nIt can be shown that that if we create a fifth group and move any node from the third or fourth group to it, at least on of the edges will not be satisfied.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, edges = [[1,2],[2,3],[3,1]]\nOutput: -1\nExplanation: If we add node 1 to the first group, node 2 to the second group, and node 3 to the third group to satisfy the first two edges, we can see that the third edge will not be satisfied.\nIt can be shown that no grouping is possible.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>1 &lt;= edges.length &lt;= 10<sup>4</sup></code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>There is at most one edge between any pair of vertices.</li> </ul>"},{"location":"LeetCode_Problems/2494/","title":"2494. Merge Overlapping Events in the Same Hall","text":"Problem"},{"location":"LeetCode_Problems/2495/","title":"2495. Number of Subarrays Having Even Product","text":"Problem"},{"location":"LeetCode_Problems/2496/","title":"2496. Maximum Value of a String in an Array","text":"Problem <p>The value of an alphanumeric string can be defined as:</p> <ul> <li>The numeric representation of the string in base <code>10</code>, if it comprises of digits only.</li> <li>The length of the string, otherwise.</li> </ul> <p>Given an array <code>strs</code> of alphanumeric strings, return the maximum value of any string in <code>strs</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: strs = [\"alic3\",\"bob\",\"3\",\"4\",\"00000\"]\nOutput: 5\nExplanation: \n- \"alic3\" consists of both letters and digits, so its value is its length, i.e. 5.\n- \"bob\" consists only of letters, so its value is also its length, i.e. 3.\n- \"3\" consists only of digits, so its value is its numeric equivalent, i.e. 3.\n- \"4\" also consists only of digits, so its value is 4.\n- \"00000\" consists only of digits, so its value is 0.\nHence, the maximum value is 5, of \"alic3\".\n</pre> <p>Example 2:</p> <pre>\nInput: strs = [\"1\",\"01\",\"001\",\"0001\"]\nOutput: 1\nExplanation: \nEach string in the array has value 1. Hence, we return 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= strs.length &lt;= 100</code></li> <li><code>1 &lt;= strs[i].length &lt;= 9</code></li> <li><code>strs[i]</code> consists of only lowercase English letters and digits.</li> </ul>"},{"location":"LeetCode_Problems/2497/","title":"2497. Maximum Star Sum of a Graph","text":"Problem <p>There is an undirected graph consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. You are given a 0-indexed integer array <code>vals</code> of length <code>n</code> where <code>vals[i]</code> denotes the value of the <code>i<sup>th</sup></code> node.</p> <p>You are also given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an undirected edge connecting nodes <code>a<sub>i</sub></code> and <code>b<sub>i.</sub></code></p> <p>A star graph is a subgraph of the given graph having a center node containing <code>0</code> or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges.</p> <p>The image below shows star graphs with <code>3</code> and <code>4</code> neighbors respectively, centered at the blue node.</p> <p></p> <p>The star sum is the sum of the values of all the nodes present in the star graph.</p> <p>Given an integer <code>k</code>, return the maximum star sum of a star graph containing at most <code>k</code> edges.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2\nOutput: 16\nExplanation: The above diagram represents the input graph.\nThe star graph with the maximum star sum is denoted by blue. It is centered at 3 and includes its neighbors 1 and 4.\nIt can be shown it is not possible to get a star graph with a sum greater than 16.\n</pre> <p>Example 2:</p> <pre>\nInput: vals = [-5], edges = [], k = 0\nOutput: -5\nExplanation: There is only one possible star graph, which is node 0 itself.\nHence, we return -5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == vals.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>4</sup> &lt;= vals[i] &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= edges.length &lt;= min(n * (n - 1) / 2</code><code>, 10<sup>5</sup>)</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>0 &lt;= k &lt;= n - 1</code></li> </ul>"},{"location":"LeetCode_Problems/2498/","title":"2498. Frog Jump II","text":"Problem <p>You are given a 0-indexed integer array <code>stones</code> sorted in strictly increasing order representing the positions of stones in a river.</p> <p>A frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. However, it can jump to any stone at most once.</p> <p>The length of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps.</p> <ul> <li>More formally, if the frog is at <code>stones[i]</code> and is jumping to <code>stones[j]</code>, the length of the jump is <code>|stones[i] - stones[j]|</code>.</li> </ul> <p>The cost of a path is the maximum length of a jump among all jumps in the path.</p> <p>Return the minimum cost of a path for the frog.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: stones = [0,2,5,6,7]\nOutput: 5\nExplanation: The above figure represents one of the optimal paths the frog can take.\nThe cost of this path is 5, which is the maximum length of a jump.\nSince it is not possible to achieve a cost of less than 5, we return it.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: stones = [0,3,9]\nOutput: 9\nExplanation: \nThe frog can jump directly to the last stone and come back to the first stone. \nIn this case, the length of each jump will be 9. The cost for the path will be max(9, 9) = 9.\nIt can be shown that this is the minimum achievable cost.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= stones.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= stones[i] &lt;= 10<sup>9</sup></code></li> <li><code>stones[0] == 0</code></li> <li><code>stones</code> is sorted in a strictly increasing order.</li> </ul>"},{"location":"LeetCode_Problems/2499/","title":"2499. Minimum Total Cost to Make Arrays Unequal","text":"Problem <p>You are given two 0-indexed integer arrays <code>nums1</code> and <code>nums2</code>, of equal length <code>n</code>.</p> <p>In one operation, you can swap the values of any two indices of <code>nums1</code>. The cost of this operation is the sum of the indices.</p> <p>Find the minimum total cost of performing the given operation any number of times such that <code>nums1[i] != nums2[i]</code> for all <code>0 &lt;= i &lt;= n - 1</code> after performing all the operations.</p> <p>Return the minimum total cost such that <code>nums1</code> and <code>nums2</code> satisfy the above condition. In case it is not possible, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]\nOutput: 10\nExplanation: \nOne of the ways we can perform the operations is:\n- Swap values at indices 0 and 3, incurring cost = 0 + 3 = 3. Now, nums1 = [4,2,3,1,5]\n- Swap values at indices 1 and 2, incurring cost = 1 + 2 = 3. Now, nums1 = [4,3,2,1,5].\n- Swap values at indices 0 and 4, incurring cost = 0 + 4 = 4. Now, nums1 =[5,3,2,1,4].\nWe can see that for each index i, nums1[i] != nums2[i]. The cost required here is 10.\nNote that there are other ways to swap values, but it can be proven that it is not possible to obtain a cost less than 10.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]\nOutput: 10\nExplanation: \nOne of the ways we can perform the operations is:\n- Swap values at indices 2 and 3, incurring cost = 2 + 3 = 5. Now, nums1 = [2,2,1,2,3].\n- Swap values at indices 1 and 4, incurring cost = 1 + 4 = 5. Now, nums1 = [2,3,1,2,2].\nThe total cost needed here is 10, which is the minimum possible.\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [1,2,2], nums2 = [1,2,2]\nOutput: -1\nExplanation: \nIt can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform.\nHence, we return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums1.length == nums2.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums1[i], nums2[i] &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2500/","title":"2500. Delete Greatest Value in Each Row","text":"Problem <p>You are given an <code>m x n</code> matrix <code>grid</code> consisting of positive integers.</p> <p>Perform the following operation until <code>grid</code> becomes empty:</p> <ul> <li>Delete the element with the greatest value from each row. If multiple such elements exist, delete any of them.</li> <li>Add the maximum of deleted elements to the answer.</li> </ul> <p>Note that the number of columns decreases by one after each operation.</p> <p>Return the answer after performing the operations described above.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,2,4],[3,3,1]]\nOutput: 8\nExplanation: The diagram above shows the removed values in each step.\n- In the first operation, we remove 4 from the first row and 3 from the second row (notice that, there are two cells with value 3 and we can remove any of them). We add 4 to the answer.\n- In the second operation, we remove 2 from the first row and 3 from the second row. We add 3 to the answer.\n- In the third operation, we remove 1 from the first row and 1 from the second row. We add 1 to the answer.\nThe final answer = 4 + 3 + 1 = 8.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[10]]\nOutput: 10\nExplanation: The diagram above shows the removed values in each step.\n- In the first operation, we remove 10 from the first row. We add 10 to the answer.\nThe final answer = 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 50</code></li> <li><code>1 &lt;= grid[i][j] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2501/","title":"2501. Longest Square Streak in an Array","text":"Problem <p>You are given an integer array <code>nums</code>. A subsequence of <code>nums</code> is called a square streak if:</p> <ul> <li>The length of the subsequence is at least <code>2</code>, and</li> <li>after sorting the subsequence, each element (except the first element) is the square of the previous number.</li> </ul> <p>Return the length of the longest square streak in <code>nums</code>, or return <code>-1</code> if there is no square streak.</p> <p>A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,3,6,16,8,2]\nOutput: 3\nExplanation: Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16].\n- 4 = 2 * 2.\n- 16 = 4 * 4.\nTherefore, [4,16,2] is a square streak.\nIt can be shown that every subsequence of length 4 is not a square streak.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,5,6,7]\nOutput: -1\nExplanation: There is no square streak in nums so return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>2 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2502/","title":"2502. Design Memory Allocator","text":"Problem <p>You are given an integer <code>n</code> representing the size of a 0-indexed memory array. All memory units are initially free.</p> <p>You have a memory allocator with the following functionalities:</p> <ol> <li>Allocate a block of <code>size</code> consecutive free memory units and assign it the id <code>mID</code>.</li> <li>Free all memory units with the given id <code>mID</code>.</li> </ol> <p>Note that:</p> <ul> <li>Multiple blocks can be allocated to the same <code>mID</code>.</li> <li>You should free all the memory units with <code>mID</code>, even if they were allocated in different blocks.</li> </ul> <p>Implement the <code>Allocator</code> class:</p> <ul> <li><code>Allocator(int n)</code> Initializes an <code>Allocator</code> object with a memory array of size <code>n</code>.</li> <li><code>int allocate(int size, int mID)</code> Find the leftmost block of <code>size</code> consecutive free memory units and allocate it with the id <code>mID</code>. Return the block's first index. If such a block does not exist, return <code>-1</code>.</li> <li><code>int free(int mID)</code> Free all memory units with the id <code>mID</code>. Return the number of memory units you have freed.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"Allocator\", \"allocate\", \"allocate\", \"allocate\", \"free\", \"allocate\", \"allocate\", \"allocate\", \"free\", \"allocate\", \"free\"]\n[[10], [1, 1], [1, 2], [1, 3], [2], [3, 4], [1, 1], [1, 1], [1], [10, 2], [7]]\nOutput\n[null, 0, 1, 2, 1, 3, 1, 6, 3, -1, 0]\n\nExplanation\nAllocator loc = new Allocator(10); // Initialize a memory array of size 10. All memory units are initially free.\nloc.allocate(1, 1); // The leftmost block's first index is 0. The memory array becomes [1,_,_,_,_,_,_,_,_,_]. We return 0.\nloc.allocate(1, 2); // The leftmost block's first index is 1. The memory array becomes [1,2,_,_,_,_,_,_,_,_]. We return 1.\nloc.allocate(1, 3); // The leftmost block's first index is 2. The memory array becomes [1,2,3,_,_,_,_,_,_,_]. We return 2.\nloc.free(2); // Free all memory units with mID 2. The memory array becomes [1,_, 3,_,_,_,_,_,_,_]. We return 1 since there is only 1 unit with mID 2.\nloc.allocate(3, 4); // The leftmost block's first index is 3. The memory array becomes [1,_,3,4,4,4,_,_,_,_]. We return 3.\nloc.allocate(1, 1); // The leftmost block's first index is 1. The memory array becomes [1,1,3,4,4,4,_,_,_,_]. We return 1.\nloc.allocate(1, 1); // The leftmost block's first index is 6. The memory array becomes [1,1,3,4,4,4,1,_,_,_]. We return 6.\nloc.free(1); // Free all memory units with mID 1. The memory array becomes [_,_,3,4,4,4,_,_,_,_]. We return 3 since there are 3 units with mID 1.\nloc.allocate(10, 2); // We can not find any free block with 10 consecutive free memory units, so we return -1.\nloc.free(7); // Free all memory units with mID 7. The memory array remains the same since there is no memory unit with mID 7. We return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n, size, mID &lt;= 1000</code></li> <li>At most <code>1000</code> calls will be made to <code>allocate</code> and <code>free</code>.</li> </ul>"},{"location":"LeetCode_Problems/2503/","title":"2503. Maximum Number of Points From Grid Queries","text":"Problem <p>You are given an <code>m x n</code> integer matrix <code>grid</code> and an array <code>queries</code> of size <code>k</code>.</p> <p>Find an array <code>answer</code> of size <code>k</code> such that for each integer <code>queries[i]</code> you start in the top left cell of the matrix and repeat the following process:</p> <ul> <li>If <code>queries[i]</code> is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all <code>4</code> directions: up, down, left, and right.</li> <li>Otherwise, you do not get any points, and you end this process.</li> </ul> <p>After the process, <code>answer[i]</code> is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times.</p> <p>Return the resulting array <code>answer</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2]\nOutput: [5,8,1]\nExplanation: The diagrams above show which cells we visit to get points for each query.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[5,2,1],[1,1,2]], queries = [3]\nOutput: [0]\nExplanation: We can not get any points because the value of the top left cell is already greater than or equal to 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>2 &lt;= m, n &lt;= 1000</code></li> <li><code>4 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>k == queries.length</code></li> <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= grid[i][j], queries[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2504/","title":"2504. Concatenate the Name and the Profession","text":"Problem"},{"location":"LeetCode_Problems/2505/","title":"2505. Bitwise OR of All Subsequence Sums","text":"Problem"},{"location":"LeetCode_Problems/2506/","title":"2506. Count Pairs Of Similar Strings","text":"Problem <p>You are given a 0-indexed string array <code>words</code>.</p> <p>Two strings are similar if they consist of the same characters.</p> <ul> <li>For example, <code>\"abca\"</code> and <code>\"cba\"</code> are similar since both consist of characters <code>'a'</code>, <code>'b'</code>, and <code>'c'</code>.</li> <li>However, <code>\"abacba\"</code> and <code>\"bcfd\"</code> are not similar since they do not consist of the same characters.</li> </ul> <p>Return the number of pairs <code>(i, j)</code> such that <code>0 &lt;= i &lt; j &lt;= word.length - 1</code> and the two strings <code>words[i]</code> and <code>words[j]</code> are similar.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"aba\",\"aabb\",\"abcd\",\"bac\",\"aabc\"]\nOutput: 2\nExplanation: There are 2 pairs that satisfy the conditions:\n- i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'. \n- i = 3 and j = 4 : both words[3] and words[4] only consist of characters 'a', 'b', and 'c'. \n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"aabb\",\"ab\",\"ba\"]\nOutput: 3\nExplanation: There are 3 pairs that satisfy the conditions:\n- i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'. \n- i = 0 and j = 2 : both words[0] and words[2] only consist of characters 'a' and 'b'.\n- i = 1 and j = 2 : both words[1] and words[2] only consist of characters 'a' and 'b'.\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"nba\",\"cba\",\"dba\"]\nOutput: 0\nExplanation: Since there does not exist any pair that satisfies the conditions, we return 0.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 100</code></li> <li><code>words[i]</code> consist of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2507/","title":"2507. Smallest Value After Replacing With Sum of Prime Factors","text":"Problem <p>You are given a positive integer <code>n</code>.</p> <p>Continuously replace <code>n</code> with the sum of its prime factors.</p> <ul> <li>Note that if a prime factor divides <code>n</code> multiple times, it should be included in the sum as many times as it divides <code>n</code>.</li> </ul> <p>Return the smallest value <code>n</code> will take on.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 15\nOutput: 5\nExplanation: Initially, n = 15.\n15 = 3 * 5, so replace n with 3 + 5 = 8.\n8 = 2 * 2 * 2, so replace n with 2 + 2 + 2 = 6.\n6 = 2 * 3, so replace n with 2 + 3 = 5.\n5 is the smallest value n will take on.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3\nOutput: 3\nExplanation: Initially, n = 3.\n3 is the smallest value n will take on.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2508/","title":"2508. Add Edges to Make Degrees of All Nodes Even","text":"Problem <p>There is an undirected graph consisting of <code>n</code> nodes numbered from <code>1</code> to <code>n</code>. You are given the integer <code>n</code> and a 2D array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>. The graph can be disconnected.</p> <p>You can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.</p> <p>Return <code>true</code> if it is possible to make the degree of each node in the graph even, otherwise return <code>false</code>.</p> <p>The degree of a node is the number of edges connected to it.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, edges = [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]\nOutput: true\nExplanation: The above diagram shows a valid way of adding an edge.\nEvery node in the resulting graph is connected to an even number of edges.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 4, edges = [[1,2],[3,4]]\nOutput: true\nExplanation: The above diagram shows a valid way of adding two edges.</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 4, edges = [[1,2],[1,3],[1,4]]\nOutput: false\nExplanation: It is not possible to obtain a valid graph with adding at most 2 edges.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>2 &lt;= edges.length &lt;= 10<sup>5</sup></code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>There are no repeated edges.</li> </ul>"},{"location":"LeetCode_Problems/2509/","title":"2509. Cycle Length Queries in a Tree","text":"Problem <p>You are given an integer <code>n</code>. There is a complete binary tree with <code>2<sup>n</sup> - 1</code> nodes. The root of that tree is the node with the value <code>1</code>, and every node with a value <code>val</code> in the range <code>[1, 2<sup>n - 1</sup> - 1]</code> has two children where:</p> <ul> <li>The left node has the value <code>2 * val</code>, and</li> <li>The right node has the value <code>2 * val + 1</code>.</li> </ul> <p>You are also given a 2D integer array <code>queries</code> of length <code>m</code>, where <code>queries[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>. For each query, solve the following problem:</p> <ol> <li>Add an edge between the nodes with values <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</li> <li>Find the length of the cycle in the graph.</li> <li>Remove the added edge between nodes with values <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</li> </ol> <p>Note that:</p> <ul> <li>A cycle is a path that starts and ends at the same node, and each edge in the path is visited only once.</li> <li>The length of a cycle is the number of edges visited in the cycle.</li> <li>There could be multiple edges between two nodes in the tree after adding the edge of the query.</li> </ul> <p>Return an array <code>answer</code> of length <code>m</code> where <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3, queries = [[5,3],[4,7],[2,3]]\nOutput: [4,5,3]\nExplanation: The diagrams above show the tree of 2<sup>3</sup> - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge.\n- After adding the edge between nodes 3 and 5, the graph contains a cycle of nodes [5,2,1,3]. Thus answer to the first query is 4. We delete the added edge and process the next query.\n- After adding the edge between nodes 4 and 7, the graph contains a cycle of nodes [4,2,1,3,7]. Thus answer to the second query is 5. We delete the added edge and process the next query.\n- After adding the edge between nodes 2 and 3, the graph contains a cycle of nodes [2,1,3]. Thus answer to the third query is 3. We delete the added edge.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 2, queries = [[1,2]]\nOutput: [2]\nExplanation: The diagram above shows the tree of 2<sup>2</sup> - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge.\n- After adding the edge between nodes 1 and 2, the graph contains a cycle of nodes [2,1]. Thus answer for the first query is 2. We delete the added edge.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 30</code></li> <li><code>m == queries.length</code></li> <li><code>1 &lt;= m &lt;= 10<sup>5</sup></code></li> <li><code>queries[i].length == 2</code></li> <li><code>1 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= 2<sup>n</sup> - 1</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> </ul>"},{"location":"LeetCode_Problems/2510/","title":"2510. Check if There is a Path With Equal Number of 0's And 1's","text":"Problem"},{"location":"LeetCode_Problems/2511/","title":"2511. Maximum Enemy Forts That Can Be Captured","text":"Problem <p>You are given a 0-indexed integer array <code>forts</code> of length <code>n</code> representing the positions of several forts. <code>forts[i]</code> can be <code>-1</code>, <code>0</code>, or <code>1</code> where:</p> <ul> <li><code>-1</code> represents there is no fort at the <code>i<sup>th</sup></code> position.</li> <li><code>0</code> indicates there is an enemy fort at the <code>i<sup>th</sup></code> position.</li> <li><code>1</code> indicates the fort at the <code>i<sup>th</sup></code> the position is under your command.</li> </ul> <p>Now you have decided to move your army from one of your forts at position <code>i</code> to an empty position <code>j</code> such that:</p> <ul> <li><code>0 &lt;= i, j &lt;= n - 1</code></li> <li>The army travels over enemy forts only. Formally, for all <code>k</code> where <code>min(i,j) &lt; k &lt; max(i,j)</code>, <code>forts[k] == 0.</code></li> </ul> <p>While moving the army, all the enemy forts that come in the way are captured.</p> <p>Return the maximum number of enemy forts that can be captured. In case it is impossible to move your army, or you do not have any fort under your command, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: forts = [1,0,0,-1,0,0,0,0,1]\nOutput: 4\nExplanation:\n- Moving the army from position 0 to position 3 captures 2 enemy forts, at 1 and 2.\n- Moving the army from position 8 to position 3 captures 4 enemy forts.\nSince 4 is the maximum number of enemy forts that can be captured, we return 4.\n</pre> <p>Example 2:</p> <pre>\nInput: forts = [0,0,1,-1]\nOutput: 0\nExplanation: Since no enemy fort can be captured, 0 is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= forts.length &lt;= 1000</code></li> <li><code>-1 &lt;= forts[i] &lt;= 1</code></li> </ul>"},{"location":"LeetCode_Problems/2512/","title":"2512. Reward Top K Students","text":"Problem <p>You are given two string arrays <code>positive_feedback</code> and <code>negative_feedback</code>, containing the words denoting positive and negative feedback, respectively. Note that no word is both positive and negative.</p> <p>Initially every student has <code>0</code> points. Each positive word in a feedback report increases the points of a student by <code>3</code>, whereas each negative word decreases the points by <code>1</code>.</p> <p>You are given <code>n</code> feedback reports, represented by a 0-indexed string array <code>report</code>\u00a0and a 0-indexed integer array <code>student_id</code>, where <code>student_id[i]</code> represents the ID of the student who has received the feedback report <code>report[i]</code>. The ID of each student is unique.</p> <p>Given an integer <code>k</code>, return the top <code>k</code> students after ranking them in non-increasing order by their points. In case more than one student has the same points, the one with the lower ID ranks higher.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is studious\",\"the student is smart\"], student_id = [1,2], k = 2\nOutput: [1,2]\nExplanation: \nBoth the students have 1 positive feedback and 3 points but since student 1 has a lower ID he ranks higher.\n</pre> <p>Example 2:</p> <pre>\nInput: positive_feedback = [\"smart\",\"brilliant\",\"studious\"], negative_feedback = [\"not\"], report = [\"this student is not studious\",\"the student is smart\"], student_id = [1,2], k = 2\nOutput: [2,1]\nExplanation: \n- The student with ID 1 has 1 positive feedback and 1 negative feedback, so he has 3-1=2 points. \n- The student with ID 2 has 1 positive feedback, so he has 3 points. \nSince student 2 has more points, [2,1] is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= positive_feedback.length, negative_feedback.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= positive_feedback[i].length, negative_feedback[j].length &lt;= 100</code></li> <li>Both <code>positive_feedback[i]</code> and <code>negative_feedback[j]</code> consists of lowercase English letters.</li> <li>No word is present in both <code>positive_feedback</code> and <code>negative_feedback</code>.</li> <li><code>n == report.length == student_id.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>report[i]</code> consists of lowercase English letters and spaces <code>' '</code>.</li> <li>There is a single space between consecutive words of <code>report[i]</code>.</li> <li><code>1 &lt;= report[i].length &lt;= 100</code></li> <li><code>1 &lt;= student_id[i] &lt;= 10<sup>9</sup></code></li> <li>All the values of <code>student_id[i]</code> are unique.</li> <li><code>1 &lt;= k &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2513/","title":"2513. Minimize the Maximum of Two Arrays","text":"Problem <p>We have two arrays <code>arr1</code> and <code>arr2</code> which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:</p> <ul> <li><code>arr1</code> contains <code>uniqueCnt1</code> distinct positive integers, each of which is not divisible by <code>divisor1</code>.</li> <li><code>arr2</code> contains <code>uniqueCnt2</code> distinct positive integers, each of which is not divisible by <code>divisor2</code>.</li> <li>No integer is present in both <code>arr1</code> and <code>arr2</code>.</li> </ul> <p>Given <code>divisor1</code>, <code>divisor2</code>, <code>uniqueCnt1</code>, and <code>uniqueCnt2</code>, return the minimum possible maximum integer that can be present in either array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3\nOutput: 4\nExplanation: \nWe can distribute the first 4 natural numbers into arr1 and arr2.\narr1 = [1] and arr2 = [2,3,4].\nWe can see that both arrays satisfy all the conditions.\nSince the maximum value is 4, we return it.\n</pre> <p>Example 2:</p> <pre>\nInput: divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1\nOutput: 3\nExplanation: \nHere arr1 = [1,2], and arr2 = [3] satisfy all conditions.\nSince the maximum value is 3, we return it.</pre> <p>Example 3:</p> <pre>\nInput: divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2\nOutput: 15\nExplanation: \nHere, the final possible arrays can be arr1 = [1,3,5,7,9,11,13,15], and arr2 = [2,6].\nIt can be shown that it is not possible to obtain a lower maximum satisfying all conditions. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= divisor1, divisor2 &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= uniqueCnt1, uniqueCnt2 &lt; 10<sup>9</sup></code></li> <li><code>2 &lt;= uniqueCnt1 + uniqueCnt2 &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2514/","title":"2514. Count Anagrams","text":"Problem <p>You are given a string <code>s</code> containing one or more words. Every consecutive pair of words is separated by a single space <code>' '</code>.</p> <p>A string <code>t</code> is an anagram of string <code>s</code> if the <code>i<sup>th</sup></code> word of <code>t</code> is a permutation of the <code>i<sup>th</sup></code> word of <code>s</code>.</p> <ul> <li>For example, <code>\"acb dfe\"</code> is an anagram of <code>\"abc def\"</code>, but <code>\"def cab\"</code>\u00a0and <code>\"adc bef\"</code> are not.</li> </ul> <p>Return the number of distinct anagrams of <code>s</code>. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"too hot\"\nOutput: 18\nExplanation: Some of the anagrams of the given string are \"too hot\", \"oot hot\", \"oto toh\", \"too toh\", and \"too oht\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"aa\"\nOutput: 1\nExplanation: There is only one anagram possible for the given string.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters and spaces <code>' '</code>.</li> <li>There is single space between consecutive words.</li> </ul>"},{"location":"LeetCode_Problems/2515/","title":"2515. Shortest Distance to Target String in a Circular Array","text":"Problem <p>You are given a 0-indexed circular string array <code>words</code> and a string <code>target</code>. A circular array means that the array's end connects to the array's beginning.</p> <ul> <li>Formally, the next element of <code>words[i]</code> is <code>words[(i + 1) % n]</code> and the previous element of <code>words[i]</code> is <code>words[(i - 1 + n) % n]</code>, where <code>n</code> is the length of <code>words</code>.</li> </ul> <p>Starting from <code>startIndex</code>, you can move to either the next word or the previous word with <code>1</code> step at a time.</p> <p>Return the shortest distance needed to reach the string <code>target</code>. If the string <code>target</code> does not exist in <code>words</code>, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"hello\",\"i\",\"am\",\"leetcode\",\"hello\"], target = \"hello\", startIndex = 1\nOutput: 1\nExplanation: We start from index 1 and can reach \"hello\" by\n- moving 3 units to the right to reach index 4.\n- moving 2 units to the left to reach index 4.\n- moving 4 units to the right to reach index 0.\n- moving 1 unit to the left to reach index 0.\nThe shortest distance to reach \"hello\" is 1.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"a\",\"b\",\"leetcode\"], target = \"leetcode\", startIndex = 0\nOutput: 1\nExplanation: We start from index 0 and can reach \"leetcode\" by\n- moving 2 units to the right to reach index 3.\n- moving 1 unit to the left to reach index 3.\nThe shortest distance to reach \"leetcode\" is 1.</pre> <p>Example 3:</p> <pre>\nInput: words = [\"i\",\"eat\",\"leetcode\"], target = \"ate\", startIndex = 0\nOutput: -1\nExplanation: Since \"ate\" does not exist in <code>words</code>, we return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 100</code></li> <li><code>words[i]</code> and <code>target</code> consist of only lowercase English letters.</li> <li><code>0 &lt;= startIndex &lt; words.length</code></li> </ul>"},{"location":"LeetCode_Problems/2516/","title":"2516. Take K of Each Character From Left and Right","text":"Problem <p>You are given a string <code>s</code> consisting of the characters <code>'a'</code>, <code>'b'</code>, and <code>'c'</code> and a non-negative integer <code>k</code>. Each minute, you may take either the leftmost character of <code>s</code>, or the rightmost character of <code>s</code>.</p> <p>Return the minimum number of minutes needed for you to take at least <code>k</code> of each character, or return <code>-1</code> if it is not possible to take <code>k</code> of each character.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aabaaaacaabc\", k = 2\nOutput: 8\nExplanation: \nTake three characters from the left of s. You now have two 'a' characters, and one 'b' character.\nTake five characters from the right of s. You now have four 'a' characters, two 'b' characters, and two 'c' characters.\nA total of 3 + 5 = 8 minutes is needed.\nIt can be proven that 8 is the minimum number of minutes needed.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"a\", k = 1\nOutput: -1\nExplanation: It is not possible to take one 'b' or 'c' so return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists of only the letters <code>'a'</code>, <code>'b'</code>, and <code>'c'</code>.</li> <li><code>0 &lt;= k &lt;= s.length</code></li> </ul>"},{"location":"LeetCode_Problems/2517/","title":"2517. Maximum Tastiness of Candy Basket","text":"Problem <p>You are given an array of positive integers <code>price</code> where <code>price[i]</code> denotes the price of the <code>i<sup>th</sup></code> candy and a positive integer <code>k</code>.</p> <p>The store sells baskets of <code>k</code> distinct candies. The tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket.</p> <p>Return the maximum tastiness of a candy basket.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: price = [13,5,1,8,21,2], k = 3\nOutput: 8\nExplanation: Choose the candies with the prices [13,5,21].\nThe tastiness of the candy basket is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8.\nIt can be proven that 8 is the maximum tastiness that can be achieved.\n</pre> <p>Example 2:</p> <pre>\nInput: price = [1,3,1], k = 2\nOutput: 2\nExplanation: Choose the candies with the prices [1,3].\nThe tastiness of the candy basket is: min(|1 - 3|) = min(2) = 2.\nIt can be proven that 2 is the maximum tastiness that can be achieved.\n</pre> <p>Example 3:</p> <pre>\nInput: price = [7,7,7,7], k = 2\nOutput: 0\nExplanation: Choosing any two distinct candies from the candies we have will result in a tastiness of 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= k &lt;= price.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= price[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2518/","title":"2518. Number of Great Partitions","text":"Problem <p>You are given an array <code>nums</code> consisting of positive integers and an integer <code>k</code>.</p> <p>Partition the array into two ordered groups such that each element is in exactly one group. A partition is called great if the sum of elements of each group is greater than or equal to <code>k</code>.</p> <p>Return the number of distinct great partitions. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Two partitions are considered distinct if some element <code>nums[i]</code> is in different groups in the two partitions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4], k = 4\nOutput: 6\nExplanation: The great partitions are: ([1,2,3], [4]), ([1,3], [2,4]), ([1,4], [2,3]), ([2,3], [1,4]), ([2,4], [1,3]) and ([4], [1,2,3]).\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,3,3], k = 4\nOutput: 0\nExplanation: There are no great partitions for this array.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [6,6], k = 2\nOutput: 2\nExplanation: We can either put nums[0] in the first partition or in the second partition.\nThe great partitions will be ([6], [6]) and ([6], [6]).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length, k &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2519/","title":"2519. Count the Number of K-Big Indices","text":"Problem"},{"location":"LeetCode_Problems/2520/","title":"2520. Count the Digits That Divide a Number","text":"Problem <p>Given an integer <code>num</code>, return the number of digits in <code>num</code> that divide <code>num</code>.</p> <p>An integer <code>val</code> divides <code>nums</code> if <code>nums % val == 0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 7\nOutput: 1\nExplanation: 7 divides itself, hence the answer is 1.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 121\nOutput: 2\nExplanation: 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2.\n</pre> <p>Example 3:</p> <pre>\nInput: num = 1248\nOutput: 4\nExplanation: 1248 is divisible by all of its digits, hence the answer is 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 10<sup>9</sup></code></li> <li><code>num</code> does not contain <code>0</code> as one of its digits.</li> </ul>"},{"location":"LeetCode_Problems/2521/","title":"2521. Distinct Prime Factors of Product of Array","text":"Problem <p>Given an array of positive integers <code>nums</code>, return the number of distinct prime factors in the product of the elements of <code>nums</code>.</p> <p>Note that:</p> <ul> <li>A number greater than <code>1</code> is called prime if it is divisible by only <code>1</code> and itself.</li> <li>An integer <code>val1</code> is a factor of another integer <code>val2</code> if <code>val2 / val1</code> is an integer.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,4,3,7,10,6]\nOutput: 4\nExplanation:\nThe product of all the elements in nums is: 2 * 4 * 3 * 7 * 10 * 6 = 10080 = 2<sup>5</sup> * 3<sup>2</sup> * 5 * 7.\nThere are 4 distinct prime factors so we return 4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,4,8,16]\nOutput: 1\nExplanation:\nThe product of all the elements in nums is: 2 * 4 * 8 * 16 = 1024 = 2<sup>10</sup>.\nThere is 1 distinct prime factor so we return 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li> <li><code>2 &lt;= nums[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2522/","title":"2522. Partition String Into Substrings With Values at Most K","text":"Problem <p>You are given a string <code>s</code> consisting of digits from <code>1</code> to <code>9</code> and an integer <code>k</code>.</p> <p>A partition of a string <code>s</code> is called good if:</p> <ul> <li>Each digit of <code>s</code> is part of exactly one substring.</li> <li>The value of each substring is less than or equal to <code>k</code>.</li> </ul> <p>Return the minimum number of substrings in a good partition of <code>s</code>. If no good partition of <code>s</code> exists, return <code>-1</code>.</p> <p>Note that:</p> <ul> <li>The value of a string is its result when interpreted as an integer. For example, the value of <code>\"123\"</code> is <code>123</code> and the value of <code>\"1\"</code> is <code>1</code>.</li> <li>A substring is a contiguous sequence of characters within a string.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"165462\", k = 60\nOutput: 4\nExplanation: We can partition the string into substrings \"16\", \"54\", \"6\", and \"2\". Each substring has a value less than or equal to k = 60.\nIt can be shown that we cannot partition the string into less than 4 substrings.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"238182\", k = 5\nOutput: -1\nExplanation: There is no good partition for this string.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is a digit from <code>'1'</code> to <code>'9'</code>.</li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul> <p> </p>"},{"location":"LeetCode_Problems/2523/","title":"2523. Closest Prime Numbers in Range","text":"Problem <p>Given two positive integers <code>left</code> and <code>right</code>, find the two integers <code>num1</code> and <code>num2</code> such that:</p> <ul> <li><code>left &lt;= nums1 &lt; nums2 &lt;= right </code>.</li> <li><code>nums1</code> and <code>nums2</code> are both prime numbers.</li> <li><code>nums2 - nums1</code> is the minimum amongst all other pairs satisfying the above conditions.</li> </ul> <p>Return the positive integer array <code>ans = [nums1, nums2]</code>. If there are multiple pairs satisfying these conditions, return the one with the minimum <code>nums1</code> value or <code>[-1, -1]</code> if such numbers do not exist.</p> <p>A number greater than <code>1</code> is called prime if it is only divisible by <code>1</code> and itself.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: left = 10, right = 19\nOutput: [11,13]\nExplanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.\nThe closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].\nSince 11 is smaller than 17, we return the first pair.\n</pre> <p>Example 2:</p> <pre>\nInput: left = 4, right = 6\nOutput: [-1,-1]\nExplanation: There exists only one prime number in the given range, so the conditions cannot be satisfied.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= left &lt;= right &lt;= 10<sup>6</sup></code></li> </ul> <p> </p>"},{"location":"LeetCode_Problems/2524/","title":"2524. Maximum Frequency Score of a Subarray","text":"Problem"},{"location":"LeetCode_Problems/2525/","title":"2525. Categorize Box According to Criteria","text":"Problem <p>Given four integers <code>length</code>, <code>width</code>, <code>height</code>, and <code>mass</code>, representing the dimensions and mass of a box, respectively, return a string representing the category of the box.</p> <ul> <li>The box is <code>\"Bulky\"</code> if:      <ul> <li>Any of the dimensions of the box is greater or equal to <code>10<sup>4</sup></code>.</li> <li>Or, the volume of the box is greater or equal to <code>10<sup>9</sup></code>.</li> </ul> </li> <li>If the mass of the box is greater or equal to <code>100</code>, it is <code>\"Heavy\".</code></li> <li>If the box is both <code>\"Bulky\"</code> and <code>\"Heavy\"</code>, then its category is <code>\"Both\"</code>.</li> <li>If the box is neither <code>\"Bulky\"</code> nor <code>\"Heavy\"</code>, then its category is <code>\"Neither\"</code>.</li> <li>If the box is <code>\"Bulky\"</code> but not <code>\"Heavy\"</code>, then its category is <code>\"Bulky\"</code>.</li> <li>If the box is <code>\"Heavy\"</code> but not <code>\"Bulky\"</code>, then its category is <code>\"Heavy\"</code>.</li> </ul> <p>Note that the volume of the box is the product of its length, width and height.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: length = 1000, width = 35, height = 700, mass = 300\nOutput: \"Heavy\"\nExplanation: \nNone of the dimensions of the box is greater or equal to 10<sup>4</sup>. \nIts volume = 24500000 &lt;= 10<sup>9</sup>. So it cannot be categorized as \"Bulky\".\nHowever mass &gt;= 100, so the box is \"Heavy\".\nSince the box is not \"Bulky\" but \"Heavy\", we return \"Heavy\".</pre> <p>Example 2:</p> <pre>\nInput: length = 200, width = 50, height = 800, mass = 50\nOutput: \"Neither\"\nExplanation: \nNone of the dimensions of the box is greater or equal to 10<sup>4</sup>.\nIts volume = 8 * 10<sup>6</sup> &lt;= 10<sup>9</sup>. So it cannot be categorized as \"Bulky\".\nIts mass is also less than 100, so it cannot be categorized as \"Heavy\" either. \nSince its neither of the two above categories, we return \"Neither\".</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= length, width, height &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= mass &lt;= 10<sup>3</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2526/","title":"2526. Find Consecutive Integers from a Data Stream","text":"Problem <p>For a stream of integers, implement a data structure that checks if the last <code>k</code> integers parsed in the stream are equal to <code>value</code>.</p> <p>Implement the DataStream class:</p> <ul> <li><code>DataStream(int value, int k)</code> Initializes the object with an empty integer stream and the two integers <code>value</code> and <code>k</code>.</li> <li><code>boolean consec(int num)</code> Adds <code>num</code> to the stream of integers. Returns <code>true</code> if the last <code>k</code> integers are equal to <code>value</code>, and <code>false</code> otherwise. If there are less than <code>k</code> integers, the condition does not hold true, so returns <code>false</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"DataStream\", \"consec\", \"consec\", \"consec\", \"consec\"]\n[[4, 3], [4], [4], [4], [3]]\nOutput\n[null, false, false, true, false]\n\nExplanation\nDataStream dataStream = new DataStream(4, 3); //value = 4, k = 3 \ndataStream.consec(4); // Only 1 integer is parsed, so returns False. \ndataStream.consec(4); // Only 2 integers are parsed.\n                      // Since 2 is less than k, returns False. \ndataStream.consec(4); // The 3 integers parsed are all equal to value, so returns True. \ndataStream.consec(3); // The last k integers parsed in the stream are [4,4,3].\n                      // Since 3 is not equal to value, it returns False.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= value, num &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li> <li>At most <code>10<sup>5</sup></code> calls will be made to <code>consec</code>.</li> </ul>"},{"location":"LeetCode_Problems/2527/","title":"2527. Find Xor-Beauty of Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>.</p> <p>The effective value of three indices <code>i</code>, <code>j</code>, and <code>k</code> is defined as <code>((nums[i] | nums[j]) &amp; nums[k])</code>.</p> <p>The xor-beauty of the array is the XORing of the effective values of all the possible triplets of indices <code>(i, j, k)</code> where <code>0 &lt;= i, j, k &lt; n</code>.</p> <p>Return the xor-beauty of <code>nums</code>.</p> <p>Note that:</p> <ul> <li><code>val1 | val2</code> is bitwise OR of <code>val1</code> and <code>val2</code>.</li> <li><code>val1 &amp; val2</code> is bitwise AND of <code>val1</code> and <code>val2</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,4]\nOutput: 5\nExplanation: \nThe triplets and their corresponding effective values are listed below:\n- (0,0,0) with effective value ((1 | 1) &amp; 1) = 1\n- (0,0,1) with effective value ((1 | 1) &amp; 4) = 0\n- (0,1,0) with effective value ((1 | 4) &amp; 1) = 1\n- (0,1,1) with effective value ((1 | 4) &amp; 4) = 4\n- (1,0,0) with effective value ((4 | 1) &amp; 1) = 1\n- (1,0,1) with effective value ((4 | 1) &amp; 4) = 4\n- (1,1,0) with effective value ((4 | 4) &amp; 1) = 0\n- (1,1,1) with effective value ((4 | 4) &amp; 4) = 4 \nXor-beauty of array will be bitwise XOR of all beauties = 1 ^ 0 ^ 1 ^ 4 ^ 1 ^ 4 ^ 0 ^ 4 = 5.</pre> <p>Example 2:</p> <pre>\nInput: nums = [15,45,20,2,34,35,5,44,32,30]\nOutput: 34\nExplanation: <code>The xor-beauty of the given array is 34.</code>\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length\u00a0&lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2528/","title":"2528. Maximize the Minimum Powered City","text":"Problem <p>You are given a 0-indexed integer array <code>stations</code> of length <code>n</code>, where <code>stations[i]</code> represents the number of power stations in the <code>i<sup>th</sup></code> city.</p> <p>Each power station can provide power to every city in a fixed range. In other words, if the range is denoted by <code>r</code>, then a power station at city <code>i</code> can provide power to all cities <code>j</code> such that <code>|i - j| &lt;= r</code> and <code>0 &lt;= i, j &lt;= n - 1</code>.</p> <ul> <li>Note that <code>|x|</code> denotes absolute value. For example, <code>|7 - 5| = 2</code> and <code>|3 - 10| = 7</code>.</li> </ul> <p>The power of a city is the total number of power stations it is being provided power from.</p> <p>The government has sanctioned building <code>k</code> more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.</p> <p>Given the two integers <code>r</code> and <code>k</code>, return the maximum possible minimum power of a city, if the additional power stations are built optimally.</p> <p>Note that you can build the <code>k</code> power stations in multiple cities.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: stations = [1,2,4,5,0], r = 1, k = 2\nOutput: 5\nExplanation: \nOne of the optimal ways is to install both the power stations at city 1. \nSo stations will become [1,4,4,5,0].\n- City 0 is provided by 1 + 4 = 5 power stations.\n- City 1 is provided by 1 + 4 + 4 = 9 power stations.\n- City 2 is provided by 4 + 4 + 5 = 13 power stations.\n- City 3 is provided by 5 + 4 = 9 power stations.\n- City 4 is provided by 5 + 0 = 5 power stations.\nSo the minimum power of a city is 5.\nSince it is not possible to obtain a larger power, we return 5.\n</pre> <p>Example 2:</p> <pre>\nInput: stations = [4,4,4,4], r = 0, k = 3\nOutput: 4\nExplanation: \nIt can be proved that we cannot make the minimum power of a city greater than 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == stations.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= stations[i] &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= r\u00a0&lt;= n - 1</code></li> <li><code>0 &lt;= k\u00a0&lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2529/","title":"2529. Maximum Count of Positive Integer and Negative Integer","text":"Problem <p>Given an array <code>nums</code> sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers.</p> <ul> <li>In other words, if the number of positive integers in <code>nums</code> is <code>pos</code> and the number of negative integers is <code>neg</code>, then return the maximum of <code>pos</code> and <code>neg</code>.</li> </ul> <p>Note that <code>0</code> is neither positive nor negative.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-2,-1,-1,1,2,3]\nOutput: 3\nExplanation: There are 3 positive integers and 3 negative integers. The maximum count among them is 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-3,-2,-1,0,0,1,2]\nOutput: 3\nExplanation: There are 2 positive integers and 3 negative integers. The maximum count among them is 3.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [5,20,66,1314]\nOutput: 4\nExplanation: There are 4 positive integers and 0 negative integers. The maximum count among them is 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2000</code></li> <li><code>-2000 &lt;= nums[i] &lt;= 2000</code></li> <li><code>nums</code> is sorted in a non-decreasing order.</li> </ul> <p> </p> <p>Follow up: Can you solve the problem in <code>O(log(n))</code> time complexity?</p>"},{"location":"LeetCode_Problems/2530/","title":"2530. Maximal Score After Applying K Operations","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and an integer <code>k</code>. You have a starting score of <code>0</code>.</p> <p>In one operation:</p> <ol> <li>choose an index <code>i</code> such that <code>0 &lt;= i &lt; nums.length</code>,</li> <li>increase your score by <code>nums[i]</code>, and</li> <li>replace <code>nums[i]</code> with <code>ceil(nums[i] / 3)</code>.</li> </ol> <p>Return the maximum possible score you can attain after applying exactly <code>k</code> operations.</p> <p>The ceiling function <code>ceil(val)</code> is the least integer greater than or equal to <code>val</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [10,10,10,10,10], k = 5\nOutput: 50\nExplanation: Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,10,3,3,3], k = 3\nOutput: 17\nExplanation: You can do the following operations:\nOperation 1: Select i = 1, so nums becomes [1,4,3,3,3]. Your score increases by 10.\nOperation 2: Select i = 1, so nums becomes [1,2,3,3,3]. Your score increases by 4.\nOperation 3: Select i = 2, so nums becomes [1,1,1,3,3]. Your score increases by 3.\nThe final score is 10 + 4 + 3 = 17.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length, k &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2531/","title":"2531. Make Number of Distinct Characters Equal","text":"Problem <p>You are given two 0-indexed strings <code>word1</code> and <code>word2</code>.</p> <p>A move consists of choosing two indices <code>i</code> and <code>j</code> such that <code>0 &lt;= i &lt; word1.length</code> and <code>0 &lt;= j &lt; word2.length</code> and swapping <code>word1[i]</code> with <code>word2[j]</code>.</p> <p>Return <code>true</code> if it is possible to get the number of distinct characters in <code>word1</code> and <code>word2</code> to be equal with exactly one move. Return <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word1 = \"ac\", word2 = \"b\"\nOutput: false\nExplanation: Any pair of swaps would yield two distinct characters in the first string, and one in the second string.\n</pre> <p>Example 2:</p> <pre>\nInput: word1 = \"abcc\", word2 = \"aab\"\nOutput: true\nExplanation: We swap index 2 of the first string with index 0 of the second string. The resulting strings are word1 = \"abac\" and word2 = \"cab\", which both have 3 distinct characters.\n</pre> <p>Example 3:</p> <pre>\nInput: word1 = \"abcde\", word2 = \"fghij\"\nOutput: true\nExplanation: Both resulting strings will have 5 distinct characters, regardless of which indices we swap.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word1.length, word2.length &lt;= 10<sup>5</sup></code></li> <li><code>word1</code> and <code>word2</code> consist of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2532/","title":"2532. Time to Cross a Bridge","text":"Problem <p>There are <code>k</code> workers who want to move <code>n</code> boxes from an old warehouse to a new one. You are given the two integers <code>n</code> and <code>k</code>, and a 2D integer array <code>time</code> of size <code>k x 4</code> where <code>time[i] = [leftToRight<sub>i</sub>, pickOld<sub>i</sub>, rightToLeft<sub>i</sub>, putNew<sub>i</sub>]</code>.</p> <p>The warehouses are separated by a river and connected by a bridge. The old warehouse is on the right bank of the river, and the new warehouse is on the left bank of the river. Initially, all <code>k</code> workers are waiting on the left side of the bridge. To move the boxes, the <code>i<sup>th</sup></code> worker (0-indexed) can :</p> <ul> <li>Cross the bridge from the left bank (new warehouse) to the right bank (old warehouse) in <code>leftToRight<sub>i</sub></code> minutes.</li> <li>Pick a box from the old warehouse and return to the bridge in <code>pickOld<sub>i</sub></code> minutes. Different workers can pick up their boxes simultaneously.</li> <li>Cross the bridge from the right bank (old warehouse) to the left bank (new warehouse) in <code>rightToLeft<sub>i</sub></code> minutes.</li> <li>Put the box in the new warehouse and return to the bridge in <code>putNew<sub>i</sub></code> minutes. Different workers can put their boxes simultaneously.</li> </ul> <p>A worker <code>i</code> is less efficient than a worker <code>j</code> if either condition is met:</p> <ul> <li><code>leftToRight<sub>i</sub> + rightToLeft<sub>i</sub> &gt; leftToRight<sub>j</sub> + rightToLeft<sub>j</sub></code></li> <li><code>leftToRight<sub>i</sub> + rightToLeft<sub>i</sub> == leftToRight<sub>j</sub> + rightToLeft<sub>j</sub></code> and <code>i &gt; j</code></li> </ul> <p>The following rules regulate the movement of the workers through the bridge :</p> <ul> <li>If a worker <code>x</code> reaches the bridge while another worker <code>y</code> is crossing the bridge, <code>x</code> waits at their side of the bridge.</li> <li>If the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. If more than one worker is waiting on the right side, the one with the lowest efficiency crosses first.</li> <li>If the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. If more than one worker is waiting on the left side, the one with the lowest efficiency crosses first.</li> </ul> <p>Return the instance of time at which the last worker reaches the left bank of the river after all n boxes have been put in the new warehouse.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1, k = 3, time = [[1,1,2,1],[1,1,3,1],[1,1,4,1]]\nOutput: 6\nExplanation: \nFrom 0 to 1: worker 2 crosses the bridge from the left bank to the right bank.\nFrom 1 to 2: worker 2 picks up a box from the old warehouse.\nFrom 2 to 6: worker 2 crosses the bridge from the right bank to the left bank.\nFrom 6 to 7: worker 2 puts a box at the new warehouse.\nThe whole process ends after 7 minutes. We return 6 because the problem asks for the instance of time at which the last worker reaches the left bank.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, k = 2, time = [[1,9,1,8],[10,10,10,10]]\nOutput: 50\nExplanation: \nFrom 0 \u00a0to 10: worker 1 crosses the bridge from the left bank to the right bank.\nFrom 10 to 20: worker 1 picks up a box from the old warehouse.\nFrom 10 to 11: worker 0 crosses the bridge from the left bank to the right bank.\nFrom 11 to 20: worker 0 picks up a box from the old warehouse.\nFrom 20 to 30: worker 1 crosses the bridge from the right bank to the left bank.\nFrom 30 to 40: worker 1 puts a box at the new warehouse.\nFrom 30 to 31: worker 0 crosses the bridge from the right bank to the left bank.\nFrom 31 to 39: worker 0 puts a box at the new warehouse.\nFrom 39 to 40: worker 0 crosses the bridge from the left bank to the right bank.\nFrom 40 to 49: worker 0 picks up a box from the old warehouse.\nFrom 49 to 50: worker 0 crosses the bridge from the right bank to the left bank.\nFrom 50 to 58: worker 0 puts a box at the new warehouse.\nThe whole process ends after 58 minutes. We return 50 because the problem asks for the instance of time at which the last worker reaches the left bank.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n, k &lt;= 10<sup>4</sup></code></li> <li><code>time.length == k</code></li> <li><code>time[i].length == 4</code></li> <li><code>1 &lt;= leftToRight<sub>i</sub>, pickOld<sub>i</sub>, rightToLeft<sub>i</sub>, putNew<sub>i</sub> &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2533/","title":"2533. Number of Good Binary Strings","text":"Problem"},{"location":"LeetCode_Problems/2534/","title":"2534. Time Taken to Cross the Door","text":"Problem"},{"location":"LeetCode_Problems/2535/","title":"2535. Difference Between Element Sum and Digit Sum of an Array","text":"Problem <p>You are given a positive integer array <code>nums</code>.</p> <ul> <li>The element sum is the sum of all the elements in <code>nums</code>.</li> <li>The digit sum is the sum of all the digits (not necessarily distinct) that appear in <code>nums</code>.</li> </ul> <p>Return the absolute difference between the element sum and digit sum of <code>nums</code>.</p> <p>Note that the absolute difference between two integers <code>x</code> and <code>y</code> is defined as <code>|x - y|</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,15,6,3]\nOutput: 9\nExplanation: \nThe element sum of nums is 1 + 15 + 6 + 3 = 25.\nThe digit sum of nums is 1 + 1 + 5 + 6 + 3 = 16.\nThe absolute difference between the element sum and digit sum is |25 - 16| = 9.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: 0\nExplanation:\nThe element sum of nums is 1 + 2 + 3 + 4 = 10.\nThe digit sum of nums is 1 + 2 + 3 + 4 = 10.\nThe absolute difference between the element sum and digit sum is |10 - 10| = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2000</code></li> <li><code>1 &lt;= nums[i] &lt;= 2000</code></li> </ul>"},{"location":"LeetCode_Problems/2536/","title":"2536. Increment Submatrices by One","text":"Problem <p>You are given a positive integer <code>n</code>, indicating that we initially have an <code>n x n</code> 0-indexed integer matrix <code>mat</code> filled with zeroes.</p> <p>You are also given a 2D integer array <code>query</code>. For each <code>query[i] = [row1<sub>i</sub>, col1<sub>i</sub>, row2<sub>i</sub>, col2<sub>i</sub>]</code>, you should do the following operation:</p> <ul> <li>Add <code>1</code> to every element in the submatrix with the top left corner <code>(row1<sub>i</sub>, col1<sub>i</sub>)</code> and the bottom right corner <code>(row2<sub>i</sub>, col2<sub>i</sub>)</code>. That is, add <code>1</code> to <code>mat[x][y]</code> for all <code>row1<sub>i</sub> &lt;= x &lt;= row2<sub>i</sub></code> and <code>col1<sub>i</sub> &lt;= y &lt;= col2<sub>i</sub></code>.</li> </ul> <p>Return the matrix <code>mat</code> after performing every query.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3, queries = [[1,1,2,2],[0,0,1,1]]\nOutput: [[1,1,0],[1,2,1],[0,1,1]]\nExplanation: The diagram above shows the initial matrix, the matrix after the first query, and the matrix after the second query.\n- In the first query, we add 1 to every element in the submatrix with the top left corner (1, 1) and bottom right corner (2, 2).\n- In the second query, we add 1 to every element in the submatrix with the top left corner (0, 0) and bottom right corner (1, 1).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 2, queries = [[0,0,1,1]]\nOutput: [[1,1],[1,1]]\nExplanation: The diagram above shows the initial matrix and the matrix after the first query.\n- In the first query we add 1 to every element in the matrix.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 500</code></li> <li><code>1 &lt;= queries.length &lt;= 10<sup>4</sup></code></li> <li><code>0 &lt;= row1<sub>i</sub> &lt;= row2<sub>i</sub> &lt; n</code></li> <li><code>0 &lt;= col1<sub>i</sub> &lt;= col2<sub>i</sub> &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/2537/","title":"2537. Count the Number of Good Subarrays","text":"Problem <p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the number of good subarrays of <code>nums</code>.</p> <p>A subarray <code>arr</code> is good if it there are at least <code>k</code> pairs of indices <code>(i, j)</code> such that <code>i &lt; j</code> and <code>arr[i] == arr[j]</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1,1,1,1], k = 10\nOutput: 1\nExplanation: The only good subarray is the array nums itself.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,1,4,3,2,2,4], k = 2\nOutput: 4\nExplanation: There are 4 different good subarrays:\n- [3,1,4,3,2,2] that has 2 pairs.\n- [3,1,4,3,2,2,4] that has 3 pairs.\n- [1,4,3,2,2,4] that has 2 pairs.\n- [4,3,2,2,4] that has 2 pairs.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2538/","title":"2538. Difference Between Maximum and Minimum Price Sum","text":"Problem <p>There exists an undirected and initially unrooted tree with <code>n</code> nodes indexed from <code>0</code> to <code>n - 1</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p> <p>Each node has an associated price. You are given an integer array <code>price</code>, where <code>price[i]</code> is the price of the <code>i<sup>th</sup></code> node.</p> <p>The price sum of a given path is the sum of the prices of all nodes lying on that path.</p> <p>The tree can be rooted at any node <code>root</code> of your choice. The incurred cost after choosing <code>root</code> is the difference between the maximum and minimum price sum amongst all paths starting at <code>root</code>.</p> <p>Return the maximum possible cost amongst all possible root choices.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 6, edges = [[0,1],[1,2],[1,3],[3,4],[3,5]], price = [9,8,7,6,10,5]\nOutput: 24\nExplanation: The diagram above denotes the tree after rooting it at node 2. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.\n- The first path contains nodes [2,1,3,4]: the prices are [7,8,6,10], and the sum of the prices is 31.\n- The second path contains the node [2] with the price [7].\nThe difference between the maximum and minimum price sum is 24. It can be proved that 24 is the maximum cost.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 3, edges = [[0,1],[1,2]], price = [1,1,1]\nOutput: 2\nExplanation: The diagram above denotes the tree after rooting it at node 0. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.\n- The first path contains nodes [0,1,2]: the prices are [1,1,1], and the sum of the prices is 3.\n- The second path contains node [0] with a price [1].\nThe difference between the maximum and minimum price sum is 2. It can be proved that 2 is the maximum cost.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> <li><code>edges</code> represents a valid tree.</li> <li><code>price.length == n</code></li> <li><code>1 &lt;= price[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2539/","title":"2539. Count the Number of Good Subsequences","text":"Problem"},{"location":"LeetCode_Problems/2540/","title":"2540. Minimum Common Value","text":"Problem <p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in non-decreasing order, return the minimum integer common to both arrays. If there is no common integer amongst <code>nums1</code> and <code>nums2</code>, return <code>-1</code>.</p> <p>Note that an integer is said to be common to <code>nums1</code> and <code>nums2</code> if both arrays have at least one occurrence of that integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2,3], nums2 = [2,4]\nOutput: 2\nExplanation: The smallest element common to both arrays is 2, so we return 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,2,3,6], nums2 = [2,3,4,5]\nOutput: 2\nExplanation: There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li> <li>Both <code>nums1</code> and <code>nums2</code> are sorted in non-decreasing order.</li> </ul>"},{"location":"LeetCode_Problems/2541/","title":"2541. Minimum Operations to Make Array Equal II","text":"Problem <p>You are given two integer arrays <code>nums1</code> and <code>nums2</code> of equal length <code>n</code> and an integer <code>k</code>. You can perform the following operation on <code>nums1</code>:</p> <ul> <li>Choose two indexes <code>i</code> and <code>j</code> and increment <code>nums1[i]</code> by <code>k</code> and decrement <code>nums1[j]</code> by <code>k</code>. In other words, <code>nums1[i] = nums1[i] + k</code> and <code>nums1[j] = nums1[j] - k</code>.</li> </ul> <p><code>nums1</code> is said to be equal to <code>nums2</code> if for all indices <code>i</code> such that <code>0 &lt;= i &lt; n</code>, <code>nums1[i] == nums2[i]</code>.</p> <p>Return the minimum number of operations required to make <code>nums1</code> equal to <code>nums2</code>. If it is impossible to make them equal, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3\nOutput: 2\nExplanation: In 2 operations, we can transform nums1 to nums2.\n1<sup>st</sup> operation: i = 2, j = 0. After applying the operation, nums1 = [1,3,4,4].\n2<sup>nd</sup> operation: i = 2, j = 3. After applying the operation, nums1 = [1,3,7,1].\nOne can prove that it is impossible to make arrays equal in fewer operations.</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1\nOutput: -1\nExplanation: It can be proved that it is impossible to make the two arrays equal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums1.length == nums2.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2542/","title":"2542. Maximum Subsequence Score","text":"Problem <p>You are given two 0-indexed integer arrays <code>nums1</code> and <code>nums2</code> of equal length <code>n</code> and a positive integer <code>k</code>. You must choose a subsequence of indices from <code>nums1</code> of length <code>k</code>.</p> <p>For chosen indices <code>i<sub>0</sub></code>, <code>i<sub>1</sub></code>, ..., <code>i<sub>k - 1</sub></code>, your score is defined as:</p> <ul> <li>The sum of the selected elements from <code>nums1</code> multiplied with the minimum of the selected elements from <code>nums2</code>.</li> <li>It can defined simply as: <code>(nums1[i<sub>0</sub>] + nums1[i<sub>1</sub>] +...+ nums1[i<sub>k - 1</sub>]) * min(nums2[i<sub>0</sub>] , nums2[i<sub>1</sub>], ... ,nums2[i<sub>k - 1</sub>])</code>.</li> </ul> <p>Return the maximum possible score.</p> <p>A subsequence of indices of an array is a set that can be derived from the set <code>{0, 1, ..., n-1}</code> by deleting some or no elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3\nOutput: 12\nExplanation: \nThe four possible subsequence scores are:\n- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.\n- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. \n- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. \n- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.\nTherefore, we return the max score, which is 12.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1\nOutput: 30\nExplanation: \nChoosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums1.length == nums2.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums1[i], nums2[j] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2543/","title":"2543. Check if Point Is Reachable","text":"Problem <p>There exists an infinitely large grid. You are currently at point <code>(1, 1)</code>, and you need to reach the point <code>(targetX, targetY)</code> using a finite number of steps.</p> <p>In one step, you can move from point <code>(x, y)</code> to any one of the following points:</p> <ul> <li><code>(x, y - x)</code></li> <li><code>(x - y, y)</code></li> <li><code>(2 * x, y)</code></li> <li><code>(x, 2 * y)</code></li> </ul> <p>Given two integers <code>targetX</code> and <code>targetY</code> representing the X-coordinate and Y-coordinate of your final position, return <code>true</code> if you can reach the point from <code>(1, 1)</code> using some number of steps, and <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: targetX = 6, targetY = 9\nOutput: false\nExplanation: It is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned.\n</pre> <p>Example 2:</p> <pre>\nInput: targetX = 4, targetY = 7\nOutput: true\nExplanation: You can follow the path (1,1) -&gt; (1,2) -&gt; (1,4) -&gt; (1,8) -&gt; (1,7) -&gt; (2,7) -&gt; (4,7).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= targetX, targetY\u00a0&lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2544/","title":"2544. Alternating Digit Sum","text":"Problem <p>You are given a positive integer <code>n</code>. Each digit of <code>n</code> has a sign according to the following rules:</p> <ul> <li>The most significant digit is assigned a positive sign.</li> <li>Each other digit has an opposite sign to its adjacent digits.</li> </ul> <p>Return the sum of all digits with their corresponding sign.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 521\nOutput: 4\nExplanation: (+5) + (-2) + (+1) = 4.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 111\nOutput: 1\nExplanation: (+1) + (-1) + (+1) = 1.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 886996\nOutput: 0\nExplanation: (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul> <p> </p>"},{"location":"LeetCode_Problems/2545/","title":"2545. Sort the Students by Their Kth Score","text":"Problem <p>There is a class with <code>m</code> students and <code>n</code> exams. You are given a 0-indexed <code>m x n</code> integer matrix <code>score</code>, where each row represents one student and <code>score[i][j]</code> denotes the score the <code>i<sup>th</sup></code> student got in the <code>j<sup>th</sup></code> exam. The matrix <code>score</code> contains distinct integers only.</p> <p>You are also given an integer <code>k</code>. Sort the students (i.e., the rows of the matrix) by their scores in the <code>k<sup>th</sup></code>\u00a0(0-indexed) exam from the highest to the lowest.</p> <p>Return the matrix after sorting it.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2\nOutput: [[7,5,11,2],[10,6,9,1],[4,8,3,15]]\nExplanation: In the above diagram, S denotes the student, while E denotes the exam.\n- The student with index 1 scored 11 in exam 2, which is the highest score, so they got first place.\n- The student with index 0 scored 9 in exam 2, which is the second highest score, so they got second place.\n- The student with index 2 scored 3 in exam 2, which is the lowest score, so they got third place.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: score = [[3,4],[5,6]], k = 0\nOutput: [[5,6],[3,4]]\nExplanation: In the above diagram, S denotes the student, while E denotes the exam.\n- The student with index 1 scored 5 in exam 0, which is the highest score, so they got first place.\n- The student with index 0 scored 3 in exam 0, which is the lowest score, so they got second place.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == score.length</code></li> <li><code>n == score[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 250</code></li> <li><code>1 &lt;= score[i][j] &lt;= 10<sup>5</sup></code></li> <li><code>score</code> consists of distinct integers.</li> <li><code>0 &lt;= k &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/2546/","title":"2546. Apply Bitwise Operations to Make Strings Equal","text":"Problem <p>You are given two 0-indexed binary strings <code>s</code> and <code>target</code> of the same length <code>n</code>. You can do the following operation on <code>s</code> any number of times:</p> <ul> <li>Choose two different indices <code>i</code> and <code>j</code> where <code>0 &lt;= i, j &lt; n</code>.</li> <li>Simultaneously, replace <code>s[i]</code> with (<code>s[i]</code> OR <code>s[j]</code>) and <code>s[j]</code> with (<code>s[i]</code> XOR <code>s[j]</code>).</li> </ul> <p>For example, if <code>s = \"0110\"</code>, you can choose <code>i = 0</code> and <code>j = 2</code>, then simultaneously replace <code>s[0]</code> with (<code>s[0]</code> OR <code>s[2]</code> = <code>0</code> OR <code>1</code> = <code>1</code>), and <code>s[2]</code> with (<code>s[0]</code> XOR <code>s[2]</code> = <code>0</code> XOR <code>1</code> = <code>1</code>), so we will have <code>s = \"1110\"</code>.</p> <p>Return <code>true</code> if you can make the string <code>s</code> equal to <code>target</code>, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"1010\", target = \"0110\"\nOutput: true\nExplanation: We can do the following operations:\n- Choose i = 2 and j = 0. We have now s = \"0010\".\n- Choose i = 2 and j = 1. We have now s = \"0110\".\nSince we can make s equal to target, we return true.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"11\", target = \"00\"\nOutput: false\nExplanation: It is not possible to make s equal to target with any number of operations.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == s.length == target.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>s</code> and <code>target</code> consist of only the digits <code>0</code> and <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/2547/","title":"2547. Minimum Cost to Split an Array","text":"Problem <p>You are given an integer array <code>nums</code> and an integer <code>k</code>.</p> <p>Split the array into some number of non-empty subarrays. The cost of a split is the sum of the importance value of each subarray in the split.</p> <p>Let <code>trimmed(subarray)</code> be the version of the subarray where all numbers which appear only once are removed.</p> <ul> <li>For example, <code>trimmed([3,1,2,4,3,4]) = [3,4,3,4].</code></li> </ul> <p>The importance value of a subarray is <code>k + trimmed(subarray).length</code>.</p> <ul> <li>For example, if a subarray is <code>[1,2,3,3,3,4,4]</code>, then trimmed(<code>[1,2,3,3,3,4,4]) = [3,3,3,4,4].</code>The importance value of this subarray will be <code>k + 5</code>.</li> </ul> <p>Return the minimum possible cost of a split of <code>nums</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,1,2,1,3,3], k = 2\nOutput: 8\nExplanation: We split nums to have two subarrays: [1,2], [1,2,1,3,3].\nThe importance value of [1,2] is 2 + (0) = 2.\nThe importance value of [1,2,1,3,3] is 2 + (2 + 2) = 6.\nThe cost of the split is 2 + 6 = 8. It can be shown that this is the minimum possible cost among all the possible splits.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,1,2,1], k = 2\nOutput: 6\nExplanation: We split nums to have two subarrays: [1,2], [1,2,1].\nThe importance value of [1,2] is 2 + (0) = 2.\nThe importance value of [1,2,1] is 2 + (2) = 4.\nThe cost of the split is 2 + 4 = 6. It can be shown that this is the minimum possible cost among all the possible splits.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,1,2,1], k = 5\nOutput: 10\nExplanation: We split nums to have one subarray: [1,2,1,2,1].\nThe importance value of [1,2,1,2,1] is 5 + (3 + 2) = 10.\nThe cost of the split is 10. It can be shown that this is the minimum possible cost among all the possible splits.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt; nums.length</code></li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> </ul> <p> </p>"},{"location":"LeetCode_Problems/2548/","title":"2548. Maximum Price to Fill a Bag","text":"Problem"},{"location":"LeetCode_Problems/2549/","title":"2549. Count Distinct Numbers on Board","text":"Problem <p>You are given a positive integer <code>n</code>, that is initially placed on a board. Every day, for <code>10<sup>9</sup></code> days, you perform the following procedure:</p> <ul> <li>For each number <code>x</code> present on the board, find all numbers <code>1 &lt;= i &lt;= n</code> such that <code>x % i == 1</code>.</li> <li>Then, place those numbers on the board.</li> </ul> <p>Return the number of distinct integers present on the board after <code>10<sup>9</sup></code> days have elapsed.</p> <p>Note:</p> <ul> <li>Once a number is placed on the board, it will remain on it until the end.</li> <li><code>%</code>\u00a0stands\u00a0for the modulo operation. For example,\u00a0<code>14 % 3</code> is <code>2</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5\nOutput: 4\nExplanation: Initially, 5 is present on the board. \nThe next day, 2 and 4 will be added since 5 % 2 == 1 and 5 % 4 == 1. \nAfter that day, 3 will be added to the board because 4 % 3 == 1. \nAt the end of a billion days, the distinct numbers on the board will be 2, 3, 4, and 5. \n</pre> <p>Example 2:</p> <pre>\nInput: n = 3\nOutput: 2\nExplanation: \nSince 3 % 2 == 1, 2 will be added to the board. \nAfter a billion days, the only two distinct numbers on the board are 2 and 3. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2550/","title":"2550. Count Collisions of Monkeys on a Polygon","text":"Problem <p>There is a regular convex polygon with <code>n</code> vertices. The vertices are labeled from <code>0</code> to <code>n - 1</code> in a clockwise direction, and each vertex has exactly one monkey. The following figure shows a convex polygon of <code>6</code> vertices.</p> <p></p> <p>Each monkey moves simultaneously to a neighboring vertex. A neighboring vertex for a vertex <code>i</code> can be:</p> <ul> <li>the vertex <code>(i + 1) % n</code> in the clockwise direction, or</li> <li>the vertex <code>(i - 1 + n) % n</code> in the counter-clockwise direction.</li> </ul> <p>A collision happens if at least two monkeys reside on the same vertex after the movement or intersect\u00a0on an edge.</p> <p>Return the number of ways the monkeys can move so that at least one collision  happens. Since the answer may be very large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p> <p>Note that each monkey can only move once.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3\nOutput: 6\nExplanation: There are 8 total possible movements.\nTwo ways such that they collide at some point are:\n- Monkey 1 moves in a clockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 2 collide.\n- Monkey 1 moves in an anticlockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 3 collide.\nIt can be shown 6 total movements result in a collision.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4\nOutput: 14\nExplanation: It can be shown that there are 14 ways for the monkeys to collide.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= n &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2551/","title":"2551. Put Marbles in Bags","text":"Problem <p>You have <code>k</code> bags. You are given a 0-indexed integer array <code>weights</code> where <code>weights[i]</code> is the weight of the <code>i<sup>th</sup></code> marble. You are also given the integer <code>k.</code></p> <p>Divide the marbles into the <code>k</code> bags according to the following rules:</p> <ul> <li>No bag is empty.</li> <li>If the <code>i<sup>th</sup></code> marble and <code>j<sup>th</sup></code> marble are in a bag, then all marbles with an index between the <code>i<sup>th</sup></code> and <code>j<sup>th</sup></code> indices should also be in that same bag.</li> <li>If a bag consists of all the marbles with an index from <code>i</code> to <code>j</code> inclusively, then the cost of the bag is <code>weights[i] + weights[j]</code>.</li> </ul> <p>The score after distributing the marbles is the sum of the costs of all the <code>k</code> bags.</p> <p>Return the difference between the maximum and minimum scores among marble distributions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: weights = [1,3,5,1], k = 2\nOutput: 4\nExplanation: \nThe distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6. \nThe distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10. \nThus, we return their difference 10 - 6 = 4.\n</pre> <p>Example 2:</p> <pre>\nInput: weights = [1, 3], k = 2\nOutput: 0\nExplanation: The only distribution possible is [1],[3]. \nSince both the maximal and minimal score are the same, we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= weights.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= weights[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2552/","title":"2552. Count Increasing Quadruplets","text":"Problem <p>Given a 0-indexed integer array <code>nums</code> of size <code>n</code> containing all numbers from <code>1</code> to <code>n</code>, return the number of increasing quadruplets.</p> <p>A quadruplet <code>(i, j, k, l)</code> is increasing if:</p> <ul> <li><code>0 &lt;= i &lt; j &lt; k &lt; l &lt; n</code>, and</li> <li><code>nums[i] &lt; nums[k] &lt; nums[j] &lt; nums[l]</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,2,4,5]\nOutput: 2\nExplanation: \n- When i = 0, j = 1, k = 2, and l = 3, nums[i] &lt; nums[k] &lt; nums[j] &lt; nums[l].\n- When i = 0, j = 1, k = 2, and l = 4, nums[i] &lt; nums[k] &lt; nums[j] &lt; nums[l]. \nThere are no other quadruplets, so we return 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: 0\nExplanation: There exists only one quadruplet with i = 0, j = 1, k = 2, l = 3, but since nums[j] &lt; nums[k], we return 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>4 &lt;= nums.length &lt;= 4000</code></li> <li><code>1 &lt;= nums[i] &lt;= nums.length</code></li> <li>All the integers of <code>nums</code> are unique. <code>nums</code> is a permutation.</li> </ul>"},{"location":"LeetCode_Problems/2553/","title":"2553. Separate the Digits in an Array","text":"Problem <p>Given an array of positive integers <code>nums</code>, return an array <code>answer</code> that consists of the digits of each integer in <code>nums</code> after separating them in the same order they appear in <code>nums</code>.</p> <p>To separate the digits of an integer is to get all the digits it has in the same order.</p> <ul> <li>For example, for the integer <code>10921</code>, the separation of its digits is <code>[1,0,9,2,1]</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [13,25,83,77]\nOutput: [1,3,2,5,8,3,7,7]\nExplanation: \n- The separation of 13 is [1,3].\n- The separation of 25 is [2,5].\n- The separation of 83 is [8,3].\n- The separation of 77 is [7,7].\nanswer = [1,3,2,5,8,3,7,7]. Note that answer contains the separations in the same order.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [7,1,3,9]\nOutput: [7,1,3,9]\nExplanation: The separation of each integer in nums is itself.\nanswer = [7,1,3,9].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2554/","title":"2554. Maximum Number of Integers to Choose From a Range I","text":"Problem <p>You are given an integer array <code>banned</code> and two integers <code>n</code> and <code>maxSum</code>. You are choosing some number of integers following the below rules:</p> <ul> <li>The chosen integers have to be in the range <code>[1, n]</code>.</li> <li>Each integer can be chosen at most once.</li> <li>The chosen integers should not be in the array <code>banned</code>.</li> <li>The sum of the chosen integers should not exceed <code>maxSum</code>.</li> </ul> <p>Return the maximum number of integers you can choose following the mentioned rules.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: banned = [1,6,5], n = 5, maxSum = 6\nOutput: 2\nExplanation: You can choose the integers 2 and 4.\n2 and 4 are from the range [1, 5], both did not appear in banned, and their sum is 6, which did not exceed maxSum.\n</pre> <p>Example 2:</p> <pre>\nInput: banned = [1,2,3,4,5,6,7], n = 8, maxSum = 1\nOutput: 0\nExplanation: You cannot choose any integer while following the mentioned conditions.\n</pre> <p>Example 3:</p> <pre>\nInput: banned = [11], n = 7, maxSum = 50\nOutput: 7\nExplanation: You can choose the integers 1, 2, 3, 4, 5, 6, and 7.\nThey are from the range [1, 7], all did not appear in banned, and their sum is 28, which did not exceed maxSum.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= banned.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= banned[i], n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= maxSum &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2555/","title":"2555. Maximize Win From Two Segments","text":"Problem <p>There are some prizes on the X-axis. You are given an integer array <code>prizePositions</code> that is sorted in non-decreasing order, where <code>prizePositions[i]</code> is the position of the <code>i<sup>th</sup></code> prize. There could be different prizes at the same position on the line. You are also given an integer <code>k</code>.</p> <p>You are allowed to select two segments with integer endpoints. The length of each segment must be <code>k</code>. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.</p> <ul> <li>For example if <code>k = 2</code>, you can choose segments <code>[1, 3]</code> and <code>[2, 4]</code>, and you will win any prize i that satisfies <code>1 &lt;= prizePositions[i] &lt;= 3</code> or <code>2 &lt;= prizePositions[i] &lt;= 4</code>.</li> </ul> <p>Return the maximum number of prizes you can win if you choose the two segments optimally.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: prizePositions = [1,1,2,2,3,3,5], k = 2\nOutput: 7\nExplanation: In this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5].\n</pre> <p>Example 2:</p> <pre>\nInput: prizePositions = [1,2,3,4], k = 0\nOutput: 2\nExplanation: For this example, one choice for the segments is <code>[3, 3]</code> and <code>[4, 4],</code> and you will be able to get <code>2</code> prizes. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= prizePositions.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= prizePositions[i] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= k &lt;= 10<sup>9</sup> </code></li> <li><code>prizePositions</code> is sorted in non-decreasing order.</li> </ul> <p> </p>"},{"location":"LeetCode_Problems/2556/","title":"2556. Disconnect Path in a Binary Matrix by at Most One Flip","text":"Problem <p>You are given a 0-indexed <code>m x n</code> binary matrix <code>grid</code>. You can move from a cell <code>(row, col)</code> to any of the cells <code>(row + 1, col)</code> or <code>(row, col + 1)</code> that has the value <code>1</code>.\u00a0The matrix is disconnected if there is no path from <code>(0, 0)</code> to <code>(m - 1, n - 1)</code>.</p> <p>You can flip the value of at most one (possibly none) cell. You cannot flip the cells <code>(0, 0)</code> and <code>(m - 1, n - 1)</code>.</p> <p>Return <code>true</code> if it is possible to make the matrix disconnect or <code>false</code> otherwise.</p> <p>Note that flipping a cell changes its value from <code>0</code> to <code>1</code> or from <code>1</code> to <code>0</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,1,1],[1,0,0],[1,1,1]]\nOutput: true\nExplanation: We can change the cell shown in the diagram above. There is no path from (0, 0) to (2, 2) in the resulting grid.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: false\nExplanation: It is not possible to change at most one cell such that there is not path from (0, 0) to (2, 2).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 1000</code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> <li><code>grid[0][0] == grid[m - 1][n - 1] == 1</code></li> </ul>"},{"location":"LeetCode_Problems/2557/","title":"2557. Maximum Number of Integers to Choose From a Range II","text":"Problem"},{"location":"LeetCode_Problems/2558/","title":"2558. Take Gifts From the Richest Pile","text":"Problem <p>You are given an integer array <code>gifts</code> denoting the number of gifts in various piles. Every second, you do the following:</p> <ul> <li>Choose the pile with the maximum number of gifts.</li> <li>If there is more than one pile with the maximum number of gifts, choose any.</li> <li>Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.</li> </ul> <p>Return the number of gifts remaining after <code>k</code> seconds.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: gifts = [25,64,9,4,100], k = 4\nOutput: 29\nExplanation: \nThe gifts are taken in the following way:\n- In the first second, the last pile is chosen and 10 gifts are left behind.\n- Then the second pile is chosen and 8 gifts are left behind.\n- After that the first pile is chosen and 5 gifts are left behind.\n- Finally, the last pile is chosen again and 3 gifts are left behind.\nThe final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29.\n</pre> <p>Example 2:</p> <pre>\nInput: gifts = [1,1,1,1], k = 4\nOutput: 4\nExplanation: \nIn this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. \nThat is, you can't take any pile with you. \nSo, the total gifts remaining are 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= gifts.length &lt;= 10<sup>3</sup></code></li> <li><code>1 &lt;= gifts[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>3</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2559/","title":"2559. Count Vowel Strings in Ranges","text":"Problem <p>You are given a 0-indexed array of strings <code>words</code> and a 2D array of integers <code>queries</code>.</p> <p>Each query <code>queries[i] = [l<sub>i</sub>, r<sub>i</sub>]</code> asks us to find the number of strings present in the range <code>l<sub>i</sub></code> to <code>r<sub>i</sub></code> (both inclusive) of <code>words</code> that start and end with a vowel.</p> <p>Return an array <code>ans</code> of size <code>queries.length</code>, where <code>ans[i]</code> is the answer to the <code>i</code><sup>th</sup> query.</p> <p>Note that the vowel letters are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"aba\",\"bcb\",\"ece\",\"aa\",\"e\"], queries = [[0,2],[1,4],[1,1]]\nOutput: [2,3,0]\nExplanation: The strings starting and ending with a vowel are \"aba\", \"ece\", \"aa\" and \"e\".\nThe answer to the query [0,2] is 2 (strings \"aba\" and \"ece\").\nto query [1,4] is 3 (strings \"ece\", \"aa\", \"e\").\nto query [1,1] is 0.\nWe return [2,3,0].\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"a\",\"e\",\"i\"], queries = [[0,2],[0,1],[2,2]]\nOutput: [3,2,1]\nExplanation: Every string satisfies the conditions, so we return [3,2,1].</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= words[i].length &lt;= 40</code></li> <li><code>words[i]</code> consists only of lowercase English letters.</li> <li><code>sum(words[i].length) &lt;= 3 * 10<sup>5</sup></code></li> <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= l<sub>i</sub> &lt;= r<sub>i</sub> &lt;\u00a0words.length</code></li> </ul>"},{"location":"LeetCode_Problems/2560/","title":"2560. House Robber IV","text":"Problem <p>There are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he refuses to steal from adjacent homes.</p> <p>The capability of the robber is the maximum amount of money he steals from one house of all the houses he robbed.</p> <p>You are given an integer array <code>nums</code> representing how much money is stashed in each house. More formally, the <code>i<sup>th</sup></code> house from the left has <code>nums[i]</code> dollars.</p> <p>You are also given an integer <code>k</code>, representing the minimum number of houses the robber will steal from. It is always possible to steal at least <code>k</code> houses.</p> <p>Return the minimum capability of the robber out of all the possible ways to steal at least <code>k</code> houses.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,5,9], k = 2\nOutput: 5\nExplanation: \nThere are three ways to rob at least 2 houses:\n- Rob the houses at indices 0 and 2. Capability is max(nums[0], nums[2]) = 5.\n- Rob the houses at indices 0 and 3. Capability is max(nums[0], nums[3]) = 9.\n- Rob the houses at indices 1 and 3. Capability is max(nums[1], nums[3]) = 9.\nTherefore, we return min(5, 9, 9) = 5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,7,9,3,1], k = 2\nOutput: 2\nExplanation: There are 7 ways to rob the houses. The way which leads to minimum capability is to rob the house at index 0 and 4. Return max(nums[0], nums[4]) = 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= (nums.length + 1)/2</code></li> </ul>"},{"location":"LeetCode_Problems/2561/","title":"2561. Rearranging Fruits","text":"Problem <p>You have two fruit baskets containing <code>n</code> fruits each. You are given two 0-indexed integer arrays <code>basket1</code> and <code>basket2</code> representing the cost of fruit in each basket. You want to make both baskets equal. To do so, you can use the following operation as many times as you want:</p> <ul> <li>Chose two indices <code>i</code> and <code>j</code>, and swap the <code>ith </code>fruit of <code>basket1</code> with the <code>jth</code>\u00a0fruit of <code>basket2</code>.</li> <li>The cost of the swap is <code>min(basket1[i],basket2[j])</code>.</li> </ul> <p>Two baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.</p> <p>Return the minimum cost to make both the baskets equal or <code>-1</code> if impossible.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: basket1 = [4,2,2,2], basket2 = [1,4,1,2]\nOutput: 1\nExplanation: Swap index 1 of basket1 with index 0 of basket2, which has cost 1. Now basket1 = [4,1,2,2] and basket2 = [2,4,1,2]. Rearranging both the arrays makes them equal.\n</pre> <p>Example 2:</p> <pre>\nInput: basket1 = [2,3,4,1], basket2 = [3,2,5,1]\nOutput: -1\nExplanation: It can be shown that it is impossible to make both the baskets equal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>basket1.length == </code>basket2<code>.length</code></li> <li><code>1 &lt;= basket1.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= basket1[i],basket2[i]\u00a0&lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2562/","title":"2562. Find the Array Concatenation Value","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>.</p> <p>The concatenation of two numbers is the number formed by concatenating their numerals.</p> <ul> <li>For example, the concatenation of <code>15</code>, <code>49</code> is <code>1549</code>.</li> </ul> <p>The concatenation value of <code>nums</code> is initially equal to <code>0</code>. Perform this operation until <code>nums</code> becomes empty:</p> <ul> <li>If there exists more than one number in <code>nums</code>, pick the first element and last element in <code>nums</code> respectively and add the value of their concatenation to the concatenation value of <code>nums</code>, then delete the first and last element from <code>nums</code>.</li> <li>If one element exists, add its value to the concatenation value of <code>nums</code>, then delete it.</li> </ul> <p>Return the concatenation value of the <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [7,52,2,4]\nOutput: 596\nExplanation: Before performing any operation, nums is [7,52,2,4] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 7, and the last element, 4.\nTheir concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74.\nThen we delete them from nums, so nums becomes equal to [52,2].\n - In the second operation:\nWe pick the first element, 52, and the last element, 2.\nTheir concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596.\nThen we delete them from the nums, so nums becomes empty.\nSince the concatenation value is 596 so the answer is 596.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,14,13,8,12]\nOutput: 673\nExplanation: Before performing any operation, nums is [5,14,13,8,12] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 5, and the last element, 12.\nTheir concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512.\nThen we delete them from the nums, so nums becomes equal to [14,13,8].\n - In the second operation:\nWe pick the first element, 14, and the last element, 8.\nTheir concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660.\nThen we delete them from the nums, so nums becomes equal to [13].\n - In the third operation:\nnums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673.\nThen we delete it from nums, so nums become empty.\nSince the concatenation value is 673 so the answer is 673.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul> <p> </p>"},{"location":"LeetCode_Problems/2563/","title":"2563. Count the Number of Fair Pairs","text":"Problem <p>Given a 0-indexed integer array <code>nums</code> of size <code>n</code> and two integers <code>lower</code> and <code>upper</code>, return the number of fair pairs.</p> <p>A pair <code>(i, j)</code> is fair if:</p> <ul> <li><code>0 &lt;= i &lt; j &lt; n</code>, and</li> <li><code>lower &lt;= nums[i] + nums[j] &lt;= upper</code></li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,7,4,4,5], lower = 3, upper = 6\nOutput: 6\nExplanation: There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,7,9,2,5], lower = 11, upper = 11\nOutput: 1\nExplanation: There is a single fair pair: (2,3).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>nums.length == n</code></li> <li><code>-10<sup>9</sup>\u00a0&lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>-10<sup>9</sup>\u00a0&lt;= lower &lt;= upper &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2564/","title":"2564. Substring XOR Queries","text":"Problem <p>You are given a binary string <code>s</code>, and a 2D integer array <code>queries</code> where <code>queries[i] = [first<sub>i</sub>, second<sub>i</sub>]</code>.</p> <p>For the <code>i<sup>th</sup></code> query, find the shortest substring of <code>s</code> whose decimal value, <code>val</code>, yields <code>second<sub>i</sub></code> when bitwise XORed with <code>first<sub>i</sub></code>. In other words, <code>val ^ first<sub>i</sub> == second<sub>i</sub></code>.</p> <p>The answer to the <code>i<sup>th</sup></code> query is the endpoints (0-indexed) of the substring <code>[left<sub>i</sub>, right<sub>i</sub>]</code> or <code>[-1, -1]</code> if no such substring exists. If there are multiple answers, choose the one with the minimum <code>left<sub>i</sub></code>.</p> <p>Return an array <code>ans</code> where <code>ans[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p>A substring is a contiguous non-empty sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"101101\", queries = [[0,5],[1,2]]\nOutput: [[0,2],[2,3]]\nExplanation: For the first query the substring in range <code>[0,2]</code> is \"101\" which has a decimal value of <code>5</code>, and <code>5 ^ 0 = 5</code>, hence the answer to the first query is <code>[0,2]</code>. In the second query, the substring in range <code>[2,3]</code> is \"11\", and has a decimal value of 3, and 3<code> ^ 1 = 2</code>.\u00a0So, <code>[2,3]</code> is returned for the second query. \n\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"0101\", queries = [[12,8]]\nOutput: [[-1,-1]]\nExplanation: In this example there is no substring that answers the query, hence <code>[-1,-1] is returned</code>.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"1\", queries = [[4,5]]\nOutput: [[0,0]]\nExplanation: For this example, the substring in range <code>[0,0]</code> has a decimal value of <code>1</code>, and <code>1 ^ 4 = 5</code>. So, the answer is <code>[0,0]</code>.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= first<sub>i</sub>, second<sub>i</sub> &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2565/","title":"2565. Subsequence With the Minimum Score","text":"Problem <p>You are given two strings <code>s</code> and <code>t</code>.</p> <p>You are allowed to remove any number of characters from the string <code>t</code>.</p> <p>The score of the string is <code>0</code> if no characters are removed from the string <code>t</code>, otherwise:</p> <ul> <li>Let <code>left</code> be the minimum index among all removed characters.</li> <li>Let <code>right</code> be the maximum index among all removed characters.</li> </ul> <p>Then the score of the string is <code>right - left + 1</code>.</p> <p>Return the minimum possible score to make <code>t</code>\u00a0a subsequence of <code>s</code>.</p> <p>A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code> while <code>\"aec\"</code> is not).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abacaba\", t = \"bzaa\"\nOutput: 1\nExplanation: In this example, we remove the character \"z\" at index 1 (0-indexed).\nThe string t becomes \"baa\" which is a subsequence of the string \"abacaba\" and the score is 1 - 1 + 1 = 1.\nIt can be proven that 1 is the minimum score that we can achieve.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"cde\", t = \"xyz\"\nOutput: 3\nExplanation: In this example, we remove characters \"x\", \"y\" and \"z\" at indices 0, 1, and 2 (0-indexed).\nThe string t becomes \"\" which is a subsequence of the string \"cde\" and the score is 2 - 0 + 1 = 3.\nIt can be proven that 3 is the minimum score that we can achieve.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length, t.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> and <code>t</code> consist of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2566/","title":"2566. Maximum Difference by Remapping a Digit","text":"Problem <p>You are given an integer <code>num</code>. You know that Danny Mittal will sneakily remap one of the <code>10</code> possible digits (<code>0</code> to <code>9</code>) to another digit.</p> <p>Return the difference between the maximum and minimum\u00a0values Danny can make by remapping\u00a0exactly one digit in <code>num</code>.</p> <p>Notes:</p> <ul> <li>When Danny remaps a digit d1\u00a0to another digit d2, Danny replaces all occurrences of <code>d1</code>\u00a0in <code>num</code>\u00a0with <code>d2</code>.</li> <li>Danny can remap a digit to itself, in which case <code>num</code>\u00a0does not change.</li> <li>Danny can remap different digits for obtaining minimum and maximum values respectively.</li> <li>The resulting number after remapping can contain leading zeroes.</li> <li>We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 11891\nOutput: 99009\nExplanation: \nTo achieve the maximum value, Danny can remap the digit 1 to the digit 9 to yield 99899.\nTo achieve the minimum value, Danny can remap the digit 1 to the digit 0, yielding 890.\nThe difference between these two numbers is 99009.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 90\nOutput: 99\nExplanation:\nThe maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0).\nThus, we return 99.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num &lt;= 10<sup>8</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2567/","title":"2567. Minimum Score by Changing Two Elements","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>.</p> <ul> <li>The low score of <code>nums</code> is the minimum value of <code>|nums[i]\u00a0- nums[j]|</code> over all <code>0 &lt;= i &lt; j &lt; nums.length</code>.</li> <li>The high score of\u00a0<code>nums</code> is the maximum value of <code>|nums[i]\u00a0- nums[j]|</code> over all <code>0 &lt;= i &lt; j &lt; nums.length</code>.</li> <li>The score of <code>nums</code> is the sum of the high and low scores of nums.</li> </ul> <p>To minimize the score of <code>nums</code>, we can change the value of at most two elements of <code>nums</code>.</p> <p>Return the minimum possible score after changing\u00a0the value of at most two elements of <code>nums</code>.</p> <p>Note that <code>|x|</code> denotes the absolute value of <code>x</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,4,3]\nOutput: 0\nExplanation: Change value of nums[1] and nums[2] to 1 so that nums becomes [1,1,1]. Now, the value of <code>|nums[i] - nums[j]|</code> is always equal to 0, so we return 0 + 0 = 0.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,4,7,8,5]\nOutput: 3\nExplanation: Change nums[0] and nums[1] to be 6. Now nums becomes [6,6,7,8,5].\nOur low score is achieved when i = 0 and j = 1, in which case |<code>nums[i] - nums[j]</code>| = |6 - 6| = 0.\nOur high score is achieved when i = 3 and j = 4, in which case |<code>nums[i] - nums[j]</code>| = |8 - 5| = 3.\nThe sum of our high and low score is 3, which we can prove to be minimal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2568/","title":"2568. Minimum Impossible OR","text":"Problem <p>You are given a 0-indexed\u00a0integer array <code>nums</code>.</p> <p>We say that an integer x is expressible from <code>nums</code> if there exist some integers <code>0 &lt;= index<sub>1</sub> &lt; index<sub>2</sub> &lt; ... &lt; index<sub>k</sub> &lt; nums.length</code> for which <code>nums[index<sub>1</sub>] | nums[index<sub>2</sub>] | ... | nums[index<sub>k</sub>] = x</code>. In other words, an integer is expressible if it can be written as the bitwise OR of some subsequence of <code>nums</code>.</p> <p>Return the minimum positive non-zero integer\u00a0that is not expressible from <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1]\nOutput: 4\nExplanation: 1 and 2 are already present in the array. We know that 3 is expressible, since nums[0] | nums[1] = 2 | 1 = 3. Since 4 is not expressible, we return 4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,3,2]\nOutput: 1\nExplanation: We can show that 1 is the smallest number that is not expressible.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2569/","title":"2569. Handling Sum Queries After Update","text":"Problem <p>You are given two 0-indexed arrays <code>nums1</code> and <code>nums2</code> and a 2D array <code>queries</code> of queries. There are three types of queries:</p> <ol> <li>For a query of type 1, <code>queries[i]\u00a0= [1, l, r]</code>. Flip the values from <code>0</code> to <code>1</code> and from <code>1</code> to <code>0</code> in <code>nums1</code>\u00a0from index <code>l</code> to index <code>r</code>. Both <code>l</code> and <code>r</code> are 0-indexed.</li> <li>For a query of type 2, <code>queries[i]\u00a0= [2, p, 0]</code>. For every index <code>0 &lt;= i &lt; n</code>, set\u00a0<code>nums2[i] =\u00a0nums2[i]\u00a0+ nums1[i]\u00a0* p</code>.</li> <li>For a query of type 3, <code>queries[i]\u00a0= [3, 0, 0]</code>. Find the sum of the elements in <code>nums2</code>.</li> </ol> <p>Return an array containing all the answers to the third type\u00a0queries.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,0,1], nums2 = [0,0,0], queries = [[1,1,1],[2,1,0],[3,0,0]]\nOutput: [3]\nExplanation: After the first query nums1 becomes [1,1,1]. After the second query, nums2 becomes [1,1,1], so the answer to the third query is 3. Thus, [3] is returned.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1], nums2 = [5], queries = [[2,0,0],[3,0,0]]\nOutput: [5]\nExplanation: After the first query, nums2 remains [5], so the answer to the second query is 5. Thus, [5] is returned.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length,nums2.length &lt;= 10<sup>5</sup></code></li> <li><code>nums1.length = nums2.length</code></li> <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> <li><code>queries[i].length = 3</code></li> <li><code>0 &lt;= l &lt;= r &lt;= nums1.length - 1</code></li> <li><code>0 &lt;= p &lt;= 10<sup>6</sup></code></li> <li><code>0 &lt;= nums1[i] &lt;= 1</code></li> <li><code>0 &lt;= nums2[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2570/","title":"2570. Merge Two 2D Arrays by Summing Values","text":"Problem <p>You are given two 2D integer arrays <code>nums1</code> and <code>nums2.</code></p> <ul> <li><code>nums1[i] = [id<sub>i</sub>, val<sub>i</sub>]</code>\u00a0indicate that the number with the id <code>id<sub>i</sub></code> has a value equal to <code>val<sub>i</sub></code>.</li> <li><code>nums2[i] = [id<sub>i</sub>, val<sub>i</sub>]</code>\u00a0indicate that the number with the id <code>id<sub>i</sub></code> has a value equal to <code>val<sub>i</sub></code>.</li> </ul> <p>Each array contains unique ids and is sorted in ascending order by id.</p> <p>Merge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:</p> <ul> <li>Only ids that appear in at least one of the two arrays should be included in the resulting array.</li> <li>Each id should be included only once and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays then its value in that array is considered to be <code>0</code>.</li> </ul> <p>Return the resulting array. The returned array must be sorted in ascending order by id.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]\nOutput: [[1,6],[2,3],[3,2],[4,6]]\nExplanation: The resulting array contains the following:\n- id = 1, the value of this id is 2 + 4 = 6.\n- id = 2, the value of this id is 3.\n- id = 3, the value of this id is 2.\n- id = 4, the value of this id is 5 + 1 = 6.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]\nOutput: [[1,3],[2,4],[3,6],[4,3],[5,5]]\nExplanation: There are no common ids, so we just include each id with its value in the resulting list.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 200</code></li> <li><code>nums1[i].length == nums2[j].length == 2</code></li> <li><code>1 &lt;= id<sub>i</sub>, val<sub>i</sub> &lt;= 1000</code></li> <li>Both arrays contain unique ids.</li> <li>Both arrays are in\u00a0strictly ascending order by id.</li> </ul>"},{"location":"LeetCode_Problems/2571/","title":"2571. Minimum Operations to Reduce an Integer to 0","text":"Problem <p>You are given a positive integer <code>n</code>, you can do the following operation any number of times:</p> <ul> <li>Add or subtract a power of <code>2</code> from <code>n</code>.</li> </ul> <p>Return the minimum number of operations to make <code>n</code> equal to <code>0</code>.</p> <p>A number <code>x</code> is power of <code>2</code> if <code>x == 2<sup>i</sup></code>\u00a0where <code>i &gt;= 0</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 39\nOutput: 3\nExplanation: We can do the following operations:\n- Add 2<sup>0</sup> = 1 to n, so now n = 40.\n- Subtract 2<sup>3</sup> = 8 from n, so now n = 32.\n- Subtract 2<sup>5</sup> = 32 from n, so now n = 0.\nIt can be shown that 3 is the minimum number of operations we need to make n equal to 0.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 54\nOutput: 3\nExplanation: We can do the following operations:\n- Add 2<sup>1</sup> = 2 to n, so now n = 56.\n- Add 2<sup>3</sup> = 8 to n, so now n = 64.\n- Subtract 2<sup>6</sup> = 64 from n, so now n = 0.\nSo the minimum number of operations is 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2572/","title":"2572. Count the Number of Square-Free Subsets","text":"Problem <p>You are given a positive integer 0-indexed\u00a0array <code>nums</code>.</p> <p>A subset of the array <code>nums</code> is square-free if the product of its elements is a square-free integer.</p> <p>A square-free integer is an integer that is divisible by no square number other than <code>1</code>.</p> <p>Return the number of square-free non-empty subsets of the array nums. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A non-empty subset of <code>nums</code> is an array that can be obtained by deleting some (possibly none but not all) elements from <code>nums</code>. Two subsets are different if and only if the chosen indices to delete are different.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,4,4,5]\nOutput: 3\nExplanation: There are 3 square-free subsets in this example:\n- The subset consisting of the 0<sup>th</sup> element [3]. The product of its elements is 3, which is a square-free integer.\n- The subset consisting of the 3<sup>rd</sup> element [5]. The product of its elements is 5, which is a square-free integer.\n- The subset consisting of 0<sup>th</sup> and 3<sup>rd</sup> elements [3,5]. The product of its elements is 15, which is a square-free integer.\nIt can be proven that there are no more than 3 square-free subsets in the given array.</pre> <p>Example 2:</p> <pre>\nInput: nums = [1]\nOutput: 1\nExplanation: There is 1 square-free subset in this example:\n- The subset consisting of the 0<sup>th</sup> element [1]. The product of its elements is 1, which is a square-free integer.\nIt can be proven that there is no more than 1 square-free subset in the given array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length\u00a0&lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 30</code></li> </ul>"},{"location":"LeetCode_Problems/2573/","title":"2573. Find the String with LCP","text":"Problem <p>We define the <code>lcp</code> matrix of any 0-indexed string <code>word</code> of <code>n</code> lowercase English letters as an <code>n x n</code> grid such that:</p> <ul> <li><code>lcp[i][j]</code> is equal to the length of the longest common prefix between the substrings <code>word[i,n-1]</code> and <code>word[j,n-1]</code>.</li> </ul> <p>Given an\u00a0<code>n x n</code> matrix <code>lcp</code>, return the alphabetically smallest string <code>word</code> that corresponds to <code>lcp</code>. If there is no such string, return an empty string.</p> <p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>. For example, <code>\"aabd\"</code> is lexicographically smaller than <code>\"aaca\"</code> because the first position they differ is at the third letter, and <code>'b'</code> comes before <code>'c'</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]\nOutput: \"abab\"\nExplanation: lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is \"abab\".\n</pre> <p>Example 2:</p> <pre>\nInput: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]\nOutput: \"aaaa\"\nExplanation: lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is \"aaaa\". \n</pre> <p>Example 3:</p> <pre>\nInput: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]\nOutput: \"\"\nExplanation: lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; Thus, no answer exists.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n ==\u00a0</code><code>lcp.length == </code><code>lcp[i].length</code> <code>&lt;= 1000</code></li> <li><code>0 &lt;= lcp[i][j] &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2574/","title":"2574. Left and Right Sum Differences","text":"Problem <p>Given a 0-indexed integer array <code>nums</code>, find a 0-indexed integer array <code>answer</code> where:</p> <ul> <li><code>answer.length == nums.length</code>.</li> <li><code>answer[i] = |leftSum[i] - rightSum[i]|</code>.</li> </ul> <p>Where:</p> <ul> <li><code>leftSum[i]</code> is the sum of elements to the left of the index <code>i</code> in the array <code>nums</code>. If there is no such element, <code>leftSum[i] = 0</code>.</li> <li><code>rightSum[i]</code> is the sum of elements to the right of the index <code>i</code> in the array <code>nums</code>. If there is no such element, <code>rightSum[i] = 0</code>.</li> </ul> <p>Return the array <code>answer</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [10,4,8,3]\nOutput: [15,1,11,22]\nExplanation: The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].\nThe array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1]\nOutput: [0]\nExplanation: The array leftSum is [0] and the array rightSum is [0].\nThe array answer is [|0 - 0|] = [0].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2575/","title":"2575. Find the Divisibility Array of a String","text":"Problem <p>You are given a 0-indexed string <code>word</code> of length <code>n</code>\u00a0consisting of digits, and a positive integer\u00a0<code>m</code>.</p> <p>The divisibility array <code>div</code> of <code>word</code> is an integer array of length <code>n</code> such that:</p> <ul> <li><code>div[i] = 1</code> if the\u00a0numeric value\u00a0of\u00a0<code>word[0,...,i]</code> is divisible by <code>m</code>, or</li> <li><code>div[i] = 0</code> otherwise.</li> </ul> <p>Return the divisibility array of <code>word</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"998244353\", m = 3\nOutput: [1,1,0,0,0,1,1,0,0]\nExplanation: There are only 4 prefixes that are divisible by 3: \"9\", \"99\", \"998244\", and \"9982443\".\n</pre> <p>Example 2:</p> <pre>\nInput: word = \"1010\", m = 10\nOutput: [0,1,0,1]\nExplanation: There are only 2 prefixes that are divisible by 10: \"10\", and \"1010\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>word.length == n</code></li> <li><code>word</code> consists of digits from <code>0</code>\u00a0to <code>9</code></li> <li><code>1 &lt;= m &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2576/","title":"2576. Find the Maximum Number of Marked Indices","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>.</p> <p>Initially, all of the indices are unmarked. You are allowed to make this operation any number of times:</p> <ul> <li>Pick two different unmarked indices <code>i</code> and <code>j</code> such that <code>2 * nums[i] &lt;= nums[j]</code>, then mark <code>i</code> and <code>j</code>.</li> </ul> <p>Return the maximum possible number of marked indices in <code>nums</code> using the above operation any number of times.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,5,2,4]\nOutput: 2\nExplanation: In the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] &lt;= nums[1]. Then mark index 2 and 1.\nIt can be shown that there's no other valid operation so the answer is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [9,2,5,4]\nOutput: 4\nExplanation: In the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] &lt;= nums[0]. Then mark index 3 and 0.\nIn the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] &lt;= nums[2]. Then mark index 1 and 2.\nSince there is no other operation, the answer is 4.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [7,6,8]\nOutput: 0\nExplanation: There is no valid operation to do, so the answer is 0.\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul> <p> </p>"},{"location":"LeetCode_Problems/2577/","title":"2577. Minimum Time to Visit a Cell In a Grid","text":"Problem <p>You are given a <code>m x n</code> matrix <code>grid</code> consisting of non-negative integers where <code>grid[row][col]</code> represents the minimum time required to be able to visit the cell <code>(row, col)</code>, which means you can visit the cell <code>(row, col)</code> only when the time you visit it is greater than or equal to <code>grid[row][col]</code>.</p> <p>You are standing in the top-left cell of the matrix in the <code>0<sup>th</sup></code> second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.</p> <p>Return the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]\nOutput: 7\nExplanation: One of the paths that we can take is the following:\n- at t = 0, we are on the cell (0,0).\n- at t = 1, we move to the cell (0,1). It is possible because grid[0][1] &lt;= 1.\n- at t = 2, we move to the cell (1,1). It is possible because grid[1][1] &lt;= 2.\n- at t = 3, we move to the cell (1,2). It is possible because grid[1][2] &lt;= 3.\n- at t = 4, we move to the cell (1,1). It is possible because grid[1][1] &lt;= 4.\n- at t = 5, we move to the cell (1,2). It is possible because grid[1][2] &lt;= 5.\n- at t = 6, we move to the cell (1,3). It is possible because grid[1][3] &lt;= 6.\n- at t = 7, we move to the cell (2,3). It is possible because grid[2][3] &lt;= 7.\nThe final time is 7. It can be shown that it is the minimum time possible.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,2,4],[3,2,1],[1,0,4]]\nOutput: -1\nExplanation: There is no path from the top left to the bottom-right cell.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>2 &lt;= m, n &lt;= 1000</code></li> <li><code>4 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= grid[i][j] &lt;= 10<sup>5</sup></code></li> <li><code>grid[0][0] == 0</code></li> </ul> <p> </p>"},{"location":"LeetCode_Problems/2578/","title":"2578. Split With Minimum Sum","text":"Problem <p>Given a positive integer <code>num</code>, split it into two non-negative integers <code>num1</code> and <code>num2</code> such that:</p> <ul> <li>The concatenation of <code>num1</code> and <code>num2</code> is a permutation of <code>num</code>.      <ul> <li>In other words, the sum of the number of occurrences of each digit in <code>num1</code> and <code>num2</code> is equal to the number of occurrences of that digit in <code>num</code>.</li> </ul> </li> <li><code>num1</code> and <code>num2</code> can contain leading zeros.</li> </ul> <p>Return the minimum possible sum of <code>num1</code> and <code>num2</code>.</p> <p>Notes:</p> <ul> <li>It is guaranteed that <code>num</code> does not contain any leading zeros.</li> <li>The order of occurrence of the digits in <code>num1</code> and <code>num2</code> may differ from the order of occurrence of <code>num</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 4325\nOutput: 59\nExplanation: We can split 4325 so that <code>num1 </code>is 24 and num2<code> is </code>35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum.\n</pre> <p>Example 2:</p> <pre>\nInput: num = 687\nOutput: 75\nExplanation: We can split 687 so that <code>num1</code> is 68 and <code>num2 </code>is 7, which would give an optimal sum of 75.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>10 &lt;= num &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2579/","title":"2579. Count Total Number of Colored Cells","text":"Problem <p>There exists an infinitely large two-dimensional grid of uncolored unit cells. You are given a positive integer <code>n</code>, indicating that you must do the following routine for <code>n</code> minutes:</p> <ul> <li>At the first minute, color any arbitrary unit cell blue.</li> <li>Every minute thereafter, color blue every uncolored cell that touches a blue cell.</li> </ul> <p>Below is a pictorial representation of the state of the grid after minutes 1, 2, and 3.</p> <p></p> <p>Return the number of colored cells at the end of <code>n</code> minutes.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 1\nOutput: 1\nExplanation: After 1 minute, there is only 1 blue cell, so we return 1.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: 5\nExplanation: After 2 minutes, there are 4 colored cells on the boundary and 1 in the center, so we return 5. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2580/","title":"2580. Count Ways to Group Overlapping Ranges","text":"Problem <p>You are given a 2D integer array <code>ranges</code> where <code>ranges[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> denotes that all integers between <code>start<sub>i</sub></code> and <code>end<sub>i</sub></code> (both inclusive) are contained in the <code>i<sup>th</sup></code> range.</p> <p>You are to split <code>ranges</code> into two (possibly empty) groups such that:</p> <ul> <li>Each range belongs to exactly one group.</li> <li>Any two overlapping ranges must belong to the same group.</li> </ul> <p>Two ranges are said to be overlapping\u00a0if there exists at least one integer that is present in both ranges.</p> <ul> <li>For example, <code>[1, 3]</code> and <code>[2, 5]</code> are overlapping because <code>2</code> and <code>3</code> occur in both ranges.</li> </ul> <p>Return the total number of ways to split <code>ranges</code> into two groups. Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: ranges = [[6,10],[5,15]]\nOutput: 2\nExplanation: \nThe two ranges are overlapping, so they must be in the same group.\nThus, there are two possible ways:\n- Put both the ranges together in group 1.\n- Put both the ranges together in group 2.\n</pre> <p>Example 2:</p> <pre>\nInput: ranges = [[1,3],[10,20],[2,5],[4,8]]\nOutput: 4\nExplanation: \nRanges [1,3], and [2,5] are overlapping. So, they must be in the same group.\nAgain, ranges [2,5] and [4,8] are also overlapping. So, they must also be in the same group. \nThus, there are four possible ways to group them:\n- All the ranges in group 1.\n- All the ranges in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2.\n- Ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= ranges.length &lt;= 10<sup>5</sup></code></li> <li><code>ranges[i].length == 2</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2581/","title":"2581. Count Number of Possible Root Nodes","text":"Problem <p>Alice has an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. The tree is represented as a 2D integer array <code>edges</code> of length <code>n - 1</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p> <p>Alice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following:</p> <ul> <li>Chooses two distinct integers <code>u</code> and <code>v</code> such that there exists an edge <code>[u, v]</code> in the tree.</li> <li>He tells Alice that <code>u</code> is the parent of <code>v</code> in the tree.</li> </ul> <p>Bob's guesses are represented by a 2D integer array <code>guesses</code> where <code>guesses[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> indicates Bob guessed <code>u<sub>j</sub></code> to be the parent of <code>v<sub>j</sub></code>.</p> <p>Alice being lazy, does not reply to each of Bob's guesses, but just says that at least <code>k</code> of his guesses are <code>true</code>.</p> <p>Given the 2D integer arrays <code>edges</code>, <code>guesses</code> and the integer <code>k</code>, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return <code>0</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3\nOutput: 3\nExplanation: \nRoot = 0, correct guesses = [1,3], [0,1], [2,4]\nRoot = 1, correct guesses = [1,3], [1,0], [2,4]\nRoot = 2, correct guesses = [1,3], [1,0], [2,4]\nRoot = 3, correct guesses = [1,0], [2,4]\nRoot = 4, correct guesses = [1,3], [1,0]\nConsidering 0, 1, or 2 as root node leads to 3 correct guesses.\n\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1\nOutput: 5\nExplanation: \nRoot = 0, correct guesses = [3,4]\nRoot = 1, correct guesses = [1,0], [3,4]\nRoot = 2, correct guesses = [1,0], [2,1], [3,4]\nRoot = 3, correct guesses = [1,0], [2,1], [3,2], [3,4]\nRoot = 4, correct guesses = [1,0], [2,1], [3,2]\nConsidering any node as root will give at least 1 correct guess. \n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>edges.length == n - 1</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= guesses.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub>, u<sub>j</sub>, v<sub>j</sub> &lt;= n - 1</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>u<sub>j</sub> != v<sub>j</sub></code></li> <li><code>edges</code> represents a valid tree.</li> <li><code>guesses[j]</code> is an edge of the tree.</li> <li><code>guesses</code> is unique.</li> <li><code>0 &lt;= k &lt;= guesses.length</code></li> </ul>"},{"location":"LeetCode_Problems/2582/","title":"2582. Pass the Pillow","text":"Problem <p>There are <code>n</code> people standing in a line labeled from <code>1</code> to <code>n</code>. The first person in the line is holding a pillow initially. Every second, the person holding the pillow passes it to the next person standing in the line. Once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction.</p> <ul> <li>For example, once the pillow reaches the <code>n<sup>th</sup></code> person they pass it to the <code>n - 1<sup>th</sup></code> person, then to the <code>n - 2<sup>th</sup></code> person and so on.</li> </ul> <p>Given the two positive integers <code>n</code> and <code>time</code>, return the index of the person holding the pillow after <code>time</code> seconds.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4, time = 5\nOutput: 2\nExplanation: People pass the pillow in the following way: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 3 -&gt; 2.\nAfer five seconds, the pillow is given to the 2<sup>nd</sup> person.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, time = 2\nOutput: 3\nExplanation: People pass the pillow in the following way: 1 -&gt; 2 -&gt; 3.\nAfer two seconds, the pillow is given to the 3<sup>r</sup><sup>d</sup> person.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= time &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2583/","title":"2583. Kth Largest Sum in a Binary Tree","text":"Problem <p>You are given the <code>root</code> of a binary tree and a positive integer <code>k</code>.</p> <p>The level sum in the tree is the sum of the values of the nodes that are on the same level.</p> <p>Return the <code>k<sup>th</sup></code> largest level sum in the tree (not necessarily distinct). If there are fewer than <code>k</code> levels in the tree, return <code>-1</code>.</p> <p>Note that two nodes are on the same level if they have the same distance from the root.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [5,8,9,2,1,3,7,4,6], k = 2\nOutput: 13\nExplanation: The level sums are the following:\n- Level 1: 5.\n- Level 2: 8 + 9 = 17.\n- Level 3: 2 + 1 + 3 + 7 = 13.\n- Level 4: 4 + 6 = 10.\nThe 2<sup>nd</sup> largest level sum is 13.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [1,2,null,3], k = 1\nOutput: 3\nExplanation: The largest level sum is 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is <code>n</code>.</li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= Node.val &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= k &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2584/","title":"2584. Split the Array to Make Coprime Products","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of length <code>n</code>.</p> <p>A split at an index <code>i</code> where <code>0 &lt;= i &lt;= n - 2</code> is called valid if the product of the first <code>i + 1</code> elements and the product of the remaining elements are coprime.</p> <ul> <li>For example, if <code>nums = [2, 3, 3]</code>, then a split at the index <code>i = 0</code> is valid because <code>2</code> and <code>9</code> are coprime, while a split at the index <code>i = 1</code> is not valid because <code>6</code> and <code>3</code> are not coprime. A split at the index <code>i = 2</code> is not valid because <code>i == n - 1</code>.</li> </ul> <p>Return the smallest index <code>i</code> at which the array can be split validly or <code>-1</code> if there is no such split.</p> <p>Two values <code>val1</code> and <code>val2</code> are coprime if <code>gcd(val1, val2) == 1</code> where <code>gcd(val1, val2)</code> is the greatest common divisor of <code>val1</code> and <code>val2</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: nums = [4,7,8,15,3,5]\nOutput: 2\nExplanation: The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i.\nThe only valid split is at index 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: nums = [4,7,15,8,3,5]\nOutput: -1\nExplanation: The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i.\nThere is no valid split.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2585/","title":"2585. Number of Ways to Earn Points","text":"Problem <p>There is a test that has <code>n</code> types of questions. You are given an integer <code>target</code> and a 0-indexed 2D integer array <code>types</code> where <code>types[i] = [count<sub>i</sub>, marks<sub>i</sub>]</code> indicates that there are <code>count<sub>i</sub></code> questions of the <code>i<sup>th</sup></code> type, and each one of them is worth <code>marks<sub>i</sub></code> points.</p> <p>Return the number of ways you can earn exactly <code>target</code> points in the exam. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Note that questions of the same type are indistinguishable.</p> <ul> <li>For example, if there are <code>3</code> questions of the same type, then solving the <code>1<sup>st</sup></code> and <code>2<sup>nd</sup></code> questions is the same as solving the <code>1<sup>st</sup></code> and <code>3<sup>rd</sup></code> questions, or the <code>2<sup>nd</sup></code> and <code>3<sup>rd</sup></code> questions.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: target = 6, types = [[6,1],[3,2],[2,3]]\nOutput: 7\nExplanation: You can earn 6 points in one of the seven ways:\n- Solve 6 questions of the 0<sup>th</sup> type: 1 + 1 + 1 + 1 + 1 + 1 = 6\n- Solve 4 questions of the 0<sup>th</sup> type and 1 question of the 1<sup>st</sup> type: 1 + 1 + 1 + 1 + 2 = 6\n- Solve 2 questions of the 0<sup>th</sup> type and 2 questions of the 1<sup>st</sup> type: 1 + 1 + 2 + 2 = 6\n- Solve 3 questions of the 0<sup>th</sup> type and 1 question of the 2<sup>nd</sup> type: 1 + 1 + 1 + 3 = 6\n- Solve 1 question of the 0<sup>th</sup> type, 1 question of the 1<sup>st</sup> type and 1 question of the 2<sup>nd</sup> type: 1 + 2 + 3 = 6\n- Solve 3 questions of the 1<sup>st</sup> type: 2 + 2 + 2 = 6\n- Solve 2 questions of the 2<sup>nd</sup> type: 3 + 3 = 6\n</pre> <p>Example 2:</p> <pre>\nInput: target = 5, types = [[50,1],[50,2],[50,5]]\nOutput: 4\nExplanation: You can earn 5 points in one of the four ways:\n- Solve 5 questions of the 0<sup>th</sup> type: 1 + 1 + 1 + 1 + 1 = 5\n- Solve 3 questions of the 0<sup>th</sup> type and 1 question of the 1<sup>st</sup> type: 1 + 1 + 1 + 2 = 5\n- Solve 1 questions of the 0<sup>th</sup> type and 2 questions of the 1<sup>st</sup> type: 1 + 2 + 2 = 5\n- Solve 1 question of the 2<sup>nd</sup> type: 5\n</pre> <p>Example 3:</p> <pre>\nInput: target = 18, types = [[6,1],[3,2],[2,3]]\nOutput: 1\nExplanation: You can only earn 18 points by answering all questions.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= target &lt;= 1000</code></li> <li><code>n == types.length</code></li> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>types[i].length == 2</code></li> <li><code>1 &lt;= count<sub>i</sub>, marks<sub>i</sub> &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2586/","title":"2586. Count the Number of Vowel Strings in Range","text":"Problem <p>You are given a 0-indexed array of string <code>words</code> and two integers <code>left</code> and <code>right</code>.</p> <p>A string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>.</p> <p>Return the number of vowel strings <code>words[i]</code> where <code>i</code> belongs to the inclusive range <code>[left, right]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"are\",\"amy\",\"u\"], left = 0, right = 2\nOutput: 2\nExplanation: \n- \"are\" is a vowel string because it starts with 'a' and ends with 'e'.\n- \"amy\" is not a vowel string because it does not end with a vowel.\n- \"u\" is a vowel string because it starts with 'u' and ends with 'u'.\nThe number of vowel strings in the mentioned range is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"hey\",\"aeo\",\"mu\",\"ooo\",\"artro\"], left = 1, right = 4\nOutput: 3\nExplanation: \n- \"aeo\" is a vowel string because it starts with 'a' and ends with 'o'.\n- \"mu\" is not a vowel string because it does not start with a vowel.\n- \"ooo\" is a vowel string because it starts with 'o' and ends with 'o'.\n- \"artro\" is a vowel string because it starts with 'a' and ends with 'o'.\nThe number of vowel strings in the mentioned range is 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>words[i]</code> consists of only lowercase English letters.</li> <li><code>0 &lt;= left &lt;= right &lt; words.length</code></li> </ul>"},{"location":"LeetCode_Problems/2587/","title":"2587. Rearrange Array to Maximize Prefix Score","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. You can rearrange the elements of <code>nums</code> to any order (including the given order).</p> <p>Let <code>prefix</code> be the array containing the prefix sums of <code>nums</code> after rearranging it. In other words, <code>prefix[i]</code> is the sum of the elements from <code>0</code> to <code>i</code> in <code>nums</code> after rearranging it. The score of <code>nums</code> is the number of positive integers in the array <code>prefix</code>.</p> <p>Return the maximum score you can achieve.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,-1,0,1,-3,3,-3]\nOutput: 6\nExplanation: We can rearrange the array into nums = [2,3,1,-1,-3,0,-3].\nprefix = [2,5,6,5,2,2,-1], so the score is 6.\nIt can be shown that 6 is the maximum score we can obtain.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-2,-3,0]\nOutput: 0\nExplanation: Any rearrangement of the array will result in a score of 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>6</sup> &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2588/","title":"2588. Count the Number of Beautiful Subarrays","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. In one operation, you can:</p> <ul> <li>Choose two different indices <code>i</code> and <code>j</code> such that <code>0 &lt;= i, j &lt; nums.length</code>.</li> <li>Choose a non-negative integer <code>k</code> such that the <code>k<sup>th</sup></code> bit (0-indexed) in the binary representation of <code>nums[i]</code> and <code>nums[j]</code> is <code>1</code>.</li> <li>Subtract <code>2<sup>k</sup></code> from <code>nums[i]</code> and <code>nums[j]</code>.</li> </ul> <p>A subarray is beautiful if it is possible to make all of its elements equal to <code>0</code> after applying the above operation any number of times.</p> <p>Return the number of beautiful subarrays in the array <code>nums</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,3,1,2,4]\nOutput: 2\nExplanation: There are 2 beautiful subarrays in nums: [4,3,1,2,4] and [4,3,1,2,4].\n- We can make all elements in the subarray [3,1,2] equal to 0 in the following way:\n  - Choose [3, 1, 2] and k = 1. Subtract 2<sup>1</sup> from both numbers. The subarray becomes [1, 1, 0].\n  - Choose [1, 1, 0] and k = 0. Subtract 2<sup>0</sup> from both numbers. The subarray becomes [0, 0, 0].\n- We can make all elements in the subarray [4,3,1,2,4] equal to 0 in the following way:\n  - Choose [4, 3, 1, 2, 4] and k = 2. Subtract 2<sup>2</sup> from both numbers. The subarray becomes [0, 3, 1, 2, 0].\n  - Choose [0, 3, 1, 2, 0] and k = 0. Subtract 2<sup>0</sup> from both numbers. The subarray becomes [0, 2, 0, 2, 0].\n  - Choose [0, 2, 0, 2, 0] and k = 1. Subtract 2<sup>1</sup> from both numbers. The subarray becomes [0, 0, 0, 0, 0].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,10,4]\nOutput: 0\nExplanation: There are no beautiful subarrays in nums.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2589/","title":"2589. Minimum Time to Complete All Tasks","text":"Problem <p>There is a computer that can run an unlimited number of tasks at the same time. You are given a 2D integer array <code>tasks</code> where <code>tasks[i] = [start<sub>i</sub>, end<sub>i</sub>, duration<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> task should run for a total of <code>duration<sub>i</sub></code> seconds (not necessarily continuous) within the inclusive time range <code>[start<sub>i</sub>, end<sub>i</sub>]</code>.</p> <p>You may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.</p> <p>Return the minimum time during which the computer should be turned on to complete all tasks.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: tasks = [[2,3,1],[4,5,1],[1,5,2]]\nOutput: 2\nExplanation: \n- The first task can be run in the inclusive time range [2, 2].\n- The second task can be run in the inclusive time range [5, 5].\n- The third task can be run in the two inclusive time ranges [2, 2] and [5, 5].\nThe computer will be on for a total of 2 seconds.\n</pre> <p>Example 2:</p> <pre>\nInput: tasks = [[1,3,2],[2,5,3],[5,6,2]]\nOutput: 4\nExplanation: \n- The first task can be run in the inclusive time range [2, 3].\n- The second task can be run in the inclusive time ranges [2, 3] and [5, 5].\n- The third task can be run in the two inclusive time range [5, 6].\nThe computer will be on for a total of 4 seconds.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= tasks.length &lt;= 2000</code></li> <li><code>tasks[i].length == 3</code></li> <li><code>1 &lt;= start<sub>i</sub>, end<sub>i</sub> &lt;= 2000</code></li> <li><code>1 &lt;= duration<sub>i</sub> &lt;= end<sub>i</sub> - start<sub>i</sub> + 1 </code></li> </ul>"},{"location":"LeetCode_Problems/2590/","title":"2590. Design a Todo List","text":"Problem"},{"location":"LeetCode_Problems/2591/","title":"2591. Distribute Money to Maximum Children","text":"Problem <p>You are given an integer <code>money</code> denoting the amount of money (in dollars) that you have and another integer <code>children</code> denoting the number of children that you must distribute the money to.</p> <p>You have to distribute the money according to the following rules:</p> <ul> <li>All money must be distributed.</li> <li>Everyone must receive at least <code>1</code> dollar.</li> <li>Nobody receives <code>4</code> dollars.</li> </ul> <p>Return the maximum number of children who may receive exactly <code>8</code> dollars if you distribute the money according to the aforementioned rules. If there is no way to distribute the money, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: money = 20, children = 3\nOutput: 1\nExplanation: \nThe maximum number of children with 8 dollars will be 1. One of the ways to distribute the money is:\n- 8 dollars to the first child.\n- 9 dollars to the second child. \n- 3 dollars to the third child.\nIt can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1.\n</pre> <p>Example 2:</p> <pre>\nInput: money = 16, children = 2\nOutput: 2\nExplanation: Each child can be given 8 dollars.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= money &lt;= 200</code></li> <li><code>2 &lt;= children &lt;= 30</code></li> </ul>"},{"location":"LeetCode_Problems/2592/","title":"2592. Maximize Greatness of an Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. You are allowed to permute <code>nums</code> into a new array <code>perm</code> of your choosing.</p> <p>We define the greatness of <code>nums</code> be the number of indices <code>0 &lt;= i &lt; nums.length</code> for which <code>perm[i] &gt; nums[i]</code>.</p> <p>Return the maximum possible greatness you can achieve after permuting <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,5,2,1,3,1]\nOutput: 4\nExplanation: One of the optimal rearrangements is perm = [2,5,1,3,3,1,1].\nAt indices = 0, 1, 3, and 4, perm[i] &gt; nums[i]. Hence, we return 4.</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: 3\nExplanation: We can prove the optimal perm is [2,3,4,1].\nAt indices = 0, 1, and 2, perm[i] &gt; nums[i]. Hence, we return 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2593/","title":"2593. Find Score of an Array After Marking All Elements","text":"Problem <p>You are given an array <code>nums</code> consisting of positive integers.</p> <p>Starting with <code>score = 0</code>, apply the following algorithm:</p> <ul> <li>Choose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index.</li> <li>Add the value of the chosen integer to <code>score</code>.</li> <li>Mark the chosen element and its two adjacent elements if they exist.</li> <li>Repeat until all the array elements are marked.</li> </ul> <p>Return the score you get after applying the above algorithm.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,3,4,5,2]\nOutput: 7\nExplanation: We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,1,3,4,5,2].\n- 2 is the smallest unmarked element, so we mark it and its left adjacent element: [2,1,3,4,5,2].\n- 4 is the only remaining unmarked element, so we mark it: [2,1,3,4,5,2].\nOur score is 1 + 2 + 4 = 7.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,5,1,3,2]\nOutput: 5\nExplanation: We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,5,1,3,2].\n- 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [2,3,5,1,3,2].\n- 2 is the only remaining unmarked element, so we mark it: [2,3,5,1,3,2].\nOur score is 1 + 2 + 2 = 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2594/","title":"2594. Minimum Time to Repair Cars","text":"Problem <p>You are given an integer array <code>ranks</code> representing the ranks of some mechanics. ranks<sub>i</sub> is the rank of the i<sup>th</sup> mechanic. A mechanic with a rank <code>r</code> can repair n cars in <code>r * n<sup>2</sup></code> minutes.</p> <p>You are also given an integer <code>cars</code> representing the total number of cars waiting in the garage to be repaired.</p> <p>Return the minimum time taken to repair all the cars.</p> <p>Note: All the mechanics can repair the cars simultaneously.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: ranks = [4,2,3,1], cars = 10\nOutput: 16\nExplanation: \n- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.\n- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.\n- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.\n- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n</pre> <p>Example 2:</p> <pre>\nInput: ranks = [5,1,8], cars = 6\nOutput: 16\nExplanation: \n- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.\n- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\n- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= ranks.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= ranks[i] &lt;= 100</code></li> <li><code>1 &lt;= cars &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2595/","title":"2595. Number of Even and Odd Bits","text":"Problem <p>You are given a positive integer <code>n</code>.</p> <p>Let <code>even</code> denote the number of even indices in the binary representation of <code>n</code> (0-indexed) with value <code>1</code>.</p> <p>Let <code>odd</code> denote the number of odd indices in the binary representation of <code>n</code> (0-indexed) with value <code>1</code>.</p> <p>Return an integer array <code>answer</code> where <code>answer = [even, odd]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 17\nOutput: [2,0]\nExplanation: The binary representation of 17 is 10001. \nIt contains 1 on the 0<sup>th</sup> and 4<sup>th</sup> indices. \nThere are 2 even and 0 odd indices.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: [0,1]\nExplanation: The binary representation of 2 is 10.\nIt contains 1 on the 1<sup>st</sup> index. \nThere are 0 even and 1 odd indices.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2596/","title":"2596. Check Knight Tour Configuration","text":"Problem <p>There is a knight on an <code>n x n</code> chessboard. In a valid configuration, the knight starts at the top-left cell of the board and visits every cell on the board exactly once.</p> <p>You are given an <code>n x n</code> integer matrix <code>grid</code> consisting of distinct integers from the range <code>[0, n * n - 1]</code> where <code>grid[row][col]</code> indicates that the cell <code>(row, col)</code> is the <code>grid[row][col]<sup>th</sup></code> cell that the knight visited. The moves are 0-indexed.</p> <p>Return <code>true</code> if <code>grid</code> represents a valid configuration of the knight's movements or <code>false</code> otherwise.</p> <p>Note that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.</p> <p></p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]\nOutput: true\nExplanation: The above diagram represents the grid. It can be shown that it is a valid configuration.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,3,6],[5,8,1],[2,7,4]]\nOutput: false\nExplanation: The above diagram represents the grid. The 8<sup>th</sup> move of the knight is not valid considering its position after the 7<sup>th</sup> move.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == grid.length == grid[i].length</code></li> <li><code>3 &lt;= n &lt;= 7</code></li> <li><code>0 &lt;= grid[row][col] &lt; n * n</code></li> <li>All integers in <code>grid</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2597/","title":"2597. The Number of Beautiful Subsets","text":"Problem <p>You are given an array <code>nums</code> of positive integers and a positive integer <code>k</code>.</p> <p>A subset of <code>nums</code> is beautiful if it does not contain two integers with an absolute difference equal to <code>k</code>.</p> <p>Return the number of non-empty beautiful subsets of the array <code>nums</code>.</p> <p>A subset of <code>nums</code> is an array that can be obtained by deleting some (possibly none) elements from <code>nums</code>. Two subsets are different if and only if the chosen indices to delete are different.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,4,6], k = 2\nOutput: 4\nExplanation: The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].\nIt can be proved that there are only 4 beautiful subsets in the array [2,4,6].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1], k = 1\nOutput: 1\nExplanation: The beautiful subset of the array nums is [1].\nIt can be proved that there is only 1 beautiful subset in the array [1].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 20</code></li> <li><code>1 &lt;= nums[i], k &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2598/","title":"2598. Smallest Missing Non-negative Integer After Operations","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and an integer <code>value</code>.</p> <p>In one operation, you can add or subtract <code>value</code> from any element of <code>nums</code>.</p> <ul> <li>For example, if <code>nums = [1,2,3]</code> and <code>value = 2</code>, you can choose to subtract <code>value</code> from <code>nums[0]</code> to make <code>nums = [-1,2,3]</code>.</li> </ul> <p>The MEX (minimum excluded) of an array is the smallest missing non-negative integer in it.</p> <ul> <li>For example, the MEX of <code>[-1,2,3]</code> is <code>0</code> while the MEX of <code>[1,0,3]</code> is <code>2</code>.</li> </ul> <p>Return the maximum MEX of <code>nums</code> after applying the mentioned operation any number of times.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,-10,7,13,6,8], value = 5\nOutput: 4\nExplanation: One can achieve this result by applying the following operations:\n- Add value to nums[1] twice to make nums = [1,0,7,13,6,8]\n- Subtract value from nums[2] once to make nums = [1,0,2,13,6,8]\n- Subtract value from nums[3] twice to make nums = [1,0,2,3,6,8]\nThe MEX of nums is 4. It can be shown that 4 is the maximum MEX we can achieve.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,-10,7,13,6,8], value = 7\nOutput: 2\nExplanation: One can achieve this result by applying the following operation:\n- subtract value from nums[2] once to make nums = [1,-10,0,13,6,8]\nThe MEX of nums is 2. It can be shown that 2 is the maximum MEX we can achieve.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length, value &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2599/","title":"2599. Make the Prefix Sum Non-negative","text":"Problem"},{"location":"LeetCode_Problems/2600/","title":"2600. K Items With the Maximum Sum","text":"Problem <p>There is a bag that consists of items, each item\u00a0has a number <code>1</code>, <code>0</code>, or <code>-1</code> written on it.</p> <p>You are given four non-negative integers <code>numOnes</code>, <code>numZeros</code>, <code>numNegOnes</code>, and <code>k</code>.</p> <p>The bag initially contains:</p> <ul> <li><code>numOnes</code> items with <code>1</code>s written on them.</li> <li><code>numZeroes</code> items with <code>0</code>s written on them.</li> <li><code>numNegOnes</code> items with <code>-1</code>s written on them.</li> </ul> <p>We want to pick exactly <code>k</code> items among the available items. Return the maximum possible sum of numbers written on the items.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2\nOutput: 2\nExplanation: We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2.\nIt can be proven that 2 is the maximum possible sum.\n</pre> <p>Example 2:</p> <pre>\nInput: numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4\nOutput: 3\nExplanation: We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3.\nIt can be proven that 3 is the maximum possible sum.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= numOnes, numZeros, numNegOnes &lt;= 50</code></li> <li><code>0 &lt;= k &lt;= numOnes + numZeros + numNegOnes</code></li> </ul>"},{"location":"LeetCode_Problems/2601/","title":"2601. Prime Subtraction Operation","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of length <code>n</code>.</p> <p>You can perform the following operation as many times as you want:</p> <ul> <li>Pick an index <code>i</code> that you haven\u2019t picked before, and pick a prime <code>p</code> strictly less than <code>nums[i]</code>, then subtract <code>p</code> from <code>nums[i]</code>.</li> </ul> <p>Return true if you can make <code>nums</code> a strictly increasing array using the above operation and false otherwise.</p> <p>A strictly increasing array is an array whose each element is strictly greater than its preceding element.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,9,6,10]\nOutput: true\nExplanation: In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10].\nIn the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10].\nAfter the second operation, nums is sorted in strictly increasing order, so the answer is true.</pre> <p>Example 2:</p> <pre>\nInput: nums = [6,8,11,12]\nOutput: true\nExplanation: Initially nums is sorted in strictly increasing order, so we don't need to make any operations.</pre> <p>Example 3:</p> <pre>\nInput: nums = [5,8,3]\nOutput: false\nExplanation: It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li><code>nums.length == n</code></li> </ul>"},{"location":"LeetCode_Problems/2602/","title":"2602. Minimum Operations to Make All Array Elements Equal","text":"Problem <p>You are given an array <code>nums</code> consisting of positive integers.</p> <p>You are also given an integer array <code>queries</code> of size <code>m</code>. For the <code>i<sup>th</sup></code> query, you want to make all of the elements of <code>nums</code> equal to<code> queries[i]</code>. You can perform the following operation on the array any number of times:</p> <ul> <li>Increase or decrease an element of the array by <code>1</code>.</li> </ul> <p>Return an array <code>answer</code> of size <code>m</code> where <code>answer[i]</code> is the minimum number of operations to make all elements of <code>nums</code> equal to <code>queries[i]</code>.</p> <p>Note that after each query the array is reset to its original state.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,1,6,8], queries = [1,5]\nOutput: [14,10]\nExplanation: For the first query we can do the following operations:\n- Decrease nums[0] 2 times, so that nums = [1,1,6,8].\n- Decrease nums[2] 5 times, so that nums = [1,1,1,8].\n- Decrease nums[3] 7 times, so that nums = [1,1,1,1].\nSo the total number of operations for the first query is 2 + 5 + 7 = 14.\nFor the second query we can do the following operations:\n- Increase nums[0] 2 times, so that nums = [5,1,6,8].\n- Increase nums[1] 4 times, so that nums = [5,5,6,8].\n- Decrease nums[2] 1 time, so that nums = [5,5,5,8].\n- Decrease nums[3] 3 times, so that nums = [5,5,5,5].\nSo the total number of operations for the second query is 2 + 4 + 1 + 3 = 10.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,9,6,3], queries = [10]\nOutput: [20]\nExplanation: We can increase each value in the array to 10. The total number of operations will be 8 + 1 + 4 + 7 = 20.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>m == queries.length</code></li> <li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i], queries[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2603/","title":"2603. Collect Coins in a Tree","text":"Problem <p>There exists an undirected and unrooted tree with <code>n</code> nodes indexed from <code>0</code> to <code>n - 1</code>. You are given an integer <code>n</code> and a 2D integer array edges of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree. You are also given\u00a0an array <code>coins</code> of size <code>n</code> where <code>coins[i]</code> can be either <code>0</code> or <code>1</code>, where <code>1</code> indicates the presence of a coin in the vertex <code>i</code>.</p> <p>Initially, you choose to start at any vertex in\u00a0the tree.\u00a0Then, you can perform\u00a0the following operations any number of times:\u00a0</p> <ul> <li>Collect all the coins that are at a distance of at most <code>2</code> from the current vertex, or</li> <li>Move to any adjacent vertex in the tree.</li> </ul> <p>Find the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex.</p> <p>Note that if you pass an edge several times, you need to count it into the answer several times.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: coins = [1,0,0,0,0,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]]\nOutput: 2\nExplanation: Start at vertex 2, collect the coin at vertex 0, move to vertex 3, collect the coin at vertex 5 then move back to vertex 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: coins = [0,0,0,1,1,0,0,1], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]\nOutput: 2\nExplanation: Start at vertex 0, collect the coins at vertices 4 and 3, move to vertex 2,  collect the coin at vertex 7, then move back to vertex 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == coins.length</code></li> <li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li> <li><code>0 &lt;= coins[i] &lt;= 1</code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li><code>edges</code> represents a valid tree.</li> </ul>"},{"location":"LeetCode_Problems/2604/","title":"2604. Minimum Time to Eat All Grains","text":"Problem"},{"location":"LeetCode_Problems/2605/","title":"2605. Form Smallest Number From Two Digit Arrays","text":"Problem <p>Given two arrays of unique digits <code>nums1</code> and <code>nums2</code>, return the smallest number that contains at least one digit from each array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [4,1,3], nums2 = [5,7]\nOutput: 15\nExplanation: The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [3,5,2,6], nums2 = [3,1,7]\nOutput: 3\nExplanation: The number 3 contains the digit 3 which exists in both arrays.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length, nums2.length &lt;= 9</code></li> <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 9</code></li> <li>All digits in each array are unique.</li> </ul>"},{"location":"LeetCode_Problems/2606/","title":"2606. Find the Substring With Maximum Cost","text":"Problem <p>You are given a string <code>s</code>, a string <code>chars</code> of distinct characters and an integer array <code>vals</code> of the same length as <code>chars</code>.</p> <p>The cost of the substring is the sum of the values of each character in the substring. The cost of an empty string is considered <code>0</code>.</p> <p>The value of the character is defined in the following way:</p> <ul> <li>If the character is not in the string <code>chars</code>, then its value is its corresponding position (1-indexed) in the alphabet.      <ul> <li>For example, the value of <code>'a'</code> is <code>1</code>, the value of <code>'b'</code> is <code>2</code>, and so on. The value of <code>'z'</code> is <code>26</code>.</li> </ul> </li> <li>Otherwise, assuming <code>i</code> is the index where the character occurs in the string <code>chars</code>, then its value is <code>vals[i]</code>.</li> </ul> <p>Return the maximum cost among all substrings of the string <code>s</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"adaa\", chars = \"d\", vals = [-1000]\nOutput: 2\nExplanation: The value of the characters \"a\" and \"d\" is 1 and -1000 respectively.\nThe substring with the maximum cost is \"aa\" and its cost is 1 + 1 = 2.\nIt can be proven that 2 is the maximum cost.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abc\", chars = \"abc\", vals = [-1,-1,-1]\nOutput: 0\nExplanation: The value of the characters \"a\", \"b\" and \"c\" is -1, -1, and -1 respectively.\nThe substring with the maximum cost is the empty substring \"\" and its cost is 0.\nIt can be proven that 0 is the maximum cost.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consist of lowercase English letters.</li> <li><code>1 &lt;= chars.length &lt;= 26</code></li> <li><code>chars</code> consist of distinct lowercase English letters.</li> <li><code>vals.length == chars.length</code></li> <li><code>-1000 &lt;= vals[i] &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2607/","title":"2607. Make K-Subarray Sums Equal","text":"Problem <p>You are given a 0-indexed integer array <code>arr</code> and an integer <code>k</code>. The array <code>arr</code> is circular. In other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element.</p> <p>You can do the following operation any number of times:</p> <ul> <li>Pick any element from <code>arr</code> and increase or decrease it by <code>1</code>.</li> </ul> <p>Return the minimum number of operations such that the sum of each subarray of length <code>k</code> is equal.</p> <p>A subarray is a contiguous part of the array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,4,1,3], k = 2\nOutput: 1\nExplanation: we can do one operation on index 1 to make its value equal to 3.\nThe array after the operation is [1,3,1,3]\n- Subarray starts at index 0 is [1, 3], and its sum is 4 \n- Subarray starts at index 1 is [3, 1], and its sum is 4 \n- Subarray starts at index 2 is [1, 3], and its sum is 4 \n- Subarray starts at index 3 is [3, 1], and its sum is 4 \n</pre> <p>Example 2:</p> <pre>\nInput: arr = [2,5,5,7], k = 3\nOutput: 5\nExplanation: we can do three operations on index 0 to make its value equal to 5 and two operations on index 3 to make its value equal to 5.\nThe array after the operations is [5,5,5,5]\n- Subarray starts at index 0 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 1 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 2 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 3 is [5, 5, 5], and its sum is 15 \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= arr.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2608/","title":"2608. Shortest Cycle in a Graph","text":"Problem <p>There is a bi-directional graph with <code>n</code> vertices, where each vertex is labeled from <code>0</code> to <code>n - 1</code>. The edges in the graph are represented by a given 2D integer array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> denotes an edge between vertex <code>u<sub>i</sub></code> and vertex <code>v<sub>i</sub></code>. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.</p> <p>Return the length of the shortest cycle in the graph. If no cycle exists, return <code>-1</code>.</p> <p>A cycle is a path that starts and ends at the same node, and each edge in the path is used only once.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 7, edges = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]\nOutput: 3\nExplanation: The cycle with the smallest length is : 0 -&gt; 1 -&gt; 2 -&gt; 0 \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 4, edges = [[0,1],[0,2]]\nOutput: -1\nExplanation: There are no cycles in this graph.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 1000</code></li> <li><code>1 &lt;= edges.length &lt;= 1000</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; n</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li>There are no repeated edges.</li> </ul>"},{"location":"LeetCode_Problems/2609/","title":"2609. Find the Longest Balanced Substring of a Binary String","text":"Problem <p>You are given a binary string <code>s</code> consisting only of zeroes and ones.</p> <p>A substring of <code>s</code> is considered balanced if all zeroes are before ones and the number of zeroes is equal to the number of ones inside the substring. Notice that the empty substring is considered a balanced substring.</p> <p>Return the length of the longest balanced substring of <code>s</code>.</p> <p>A substring is a contiguous sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"01000111\"\nOutput: 6\nExplanation: The longest balanced substring is \"000111\", which has length 6.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"00111\"\nOutput: 4\nExplanation: The longest balanced substring is \"0011\", which has length 4.\u00a0\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"111\"\nOutput: 0\nExplanation: There is no balanced substring except the empty substring, so the answer is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 50</code></li> <li><code>'0' &lt;= s[i] &lt;= '1'</code></li> </ul>"},{"location":"LeetCode_Problems/2610/","title":"2610. Convert an Array Into a 2D Array With Conditions","text":"Problem <p>You are given an integer array <code>nums</code>. You need to create a 2D array from <code>nums</code> satisfying the following conditions:</p> <ul> <li>The 2D array should contain only the elements of the array <code>nums</code>.</li> <li>Each row in the 2D array contains distinct integers.</li> <li>The number of rows in the 2D array should be minimal.</li> </ul> <p>Return the resulting array. If there are multiple answers, return any of them.</p> <p>Note that the 2D array can have a different number of elements on each row.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,4,1,2,3,1]\nOutput: [[1,3,4,2],[1,3],[1]]\nExplanation: We can create a 2D array that contains the following rows:\n- 1,3,4,2\n- 1,3\n- 1\nAll elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer.\nIt can be shown that we cannot have less than 3 rows in a valid array.</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: [[4,3,2,1]]\nExplanation: All elements of the array are distinct, so we can keep all of them in the first row of the 2D array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 200</code></li> <li><code>1 &lt;= nums[i] &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/2611/","title":"2611. Mice and Cheese","text":"Problem <p>There are two mice and <code>n</code> different types of cheese, each type of cheese should be eaten by exactly one mouse.</p> <p>A point of the cheese with index <code>i</code> (0-indexed) is:</p> <ul> <li><code>reward1[i]</code> if the first mouse eats it.</li> <li><code>reward2[i]</code> if the second mouse eats it.</li> </ul> <p>You are given a positive integer array <code>reward1</code>, a positive integer array <code>reward2</code>, and a non-negative integer <code>k</code>.</p> <p>Return the maximum points the mice can achieve if the first mouse eats exactly <code>k</code> types of cheese.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: reward1 = [1,1,3,4], reward2 = [4,4,1,1], k = 2\nOutput: 15\nExplanation: In this example, the first mouse eats the 2<sup>nd</sup>\u00a0(0-indexed) and the 3<sup>rd</sup>\u00a0types of cheese, and the second mouse eats the 0<sup>th</sup>\u00a0and the 1<sup>st</sup> types of cheese.\nThe total points are 4 + 4 + 3 + 4 = 15.\nIt can be proven that 15 is the maximum total points that the mice can achieve.\n</pre> <p>Example 2:</p> <pre>\nInput: reward1 = [1,1], reward2 = [1,1], k = 2\nOutput: 2\nExplanation: In this example, the first mouse eats the 0<sup>th</sup>\u00a0(0-indexed) and 1<sup>st</sup>\u00a0types of cheese, and the second mouse does not eat any cheese.\nThe total points are 1 + 1 = 2.\nIt can be proven that 2 is the maximum total points that the mice can achieve.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == reward1.length == reward2.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= reward1[i],\u00a0reward2[i] &lt;= 1000</code></li> <li><code>0 &lt;= k &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2612/","title":"2612. Minimum Reverse Operations","text":"Problem <p>You are given an integer <code>n</code> and an integer <code>p</code> in the range <code>[0, n - 1]</code>. Representing a 0-indexed array <code>arr</code>\u00a0of length <code>n</code> where all positions are set to <code>0</code>'s, except position <code>p</code> which is set to <code>1</code>.</p> <p>You are also given an integer array <code>banned</code> containing some positions from the array. For the i<sup>th</sup> position in <code>banned</code>, <code>arr[banned[i]] = 0</code>, and <code>banned[i] != p</code>.</p> <p>You can perform multiple operations on <code>arr</code>. In an operation, you can choose a subarray with size <code>k</code> and reverse the subarray. However, the <code>1</code> in <code>arr</code> should never go to any of the positions in <code>banned</code>. In other words, after each operation <code>arr[banned[i]]</code> remains <code>0</code>.</p> <p>Return an array <code>ans</code> where for each <code>i</code> from <code>[0, n - 1]</code>, <code>ans[i]</code> is the minimum number of reverse operations needed to bring the <code>1</code> to position <code>i</code> in arr, or <code>-1</code> if it is impossible.</p> <ul> <li>A subarray is a contiguous non-empty sequence of elements within an array.</li> <li>The values of <code>ans[i]</code> are independent for all <code>i</code>'s.</li> <li>The reverse of an array is an array containing the values in reverse order.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4, p = 0, banned = [1,2], k = 4\nOutput: [0,-1,-1,1]\nExplanation: In this case <code>k = 4</code> so there is only one possible reverse operation we can perform, which is reversing the whole array. Initially, 1 is placed at position 0 so the amount of operations we need for position 0 is <code>0</code>. We can never place a 1 on the banned positions, so the answer for positions 1 and 2 is <code>-1</code>. Finally, with one reverse operation we can bring the 1 to index 3, so the answer for position 3 is <code>1</code>. \n</pre> <p>Example 2:</p> <pre>\nInput: n = 5, p = 0, banned = [2,4], k = 3\nOutput: [0,-1,-1,-1,-1]\nExplanation: In this case the 1 is initially at position 0, so the answer for that position is <code>0</code>. We can perform reverse operations of size 3. The 1 is currently located at position 0, so we need to reverse the subarray <code>[0, 2]</code> for it to leave that position, but reversing that subarray makes position 2 have a 1, which shouldn't happen. So, we can't move the 1 from position 0, making the result for all the other positions <code>-1</code>. \n</pre> <p>Example 3:</p> <pre>\nInput: n = 4, p = 2, banned = [0,1,3], k = 1\nOutput: [-1,-1,0,-1]\nExplanation: In this case we can only perform reverse operations of size 1.\u00a0So the 1 never changes its position.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= p &lt;= n - 1</code></li> <li><code>0 &lt;= banned.length &lt;= n - 1</code></li> <li><code>0 &lt;= banned[i] &lt;= n - 1</code></li> <li><code>1 &lt;= k &lt;= n\u00a0</code></li> <li><code>banned[i] != p</code></li> <li>all values in <code>banned</code>\u00a0are unique </li> </ul>"},{"location":"LeetCode_Problems/2613/","title":"2613. Beautiful Pairs","text":"Problem"},{"location":"LeetCode_Problems/2614/","title":"2614. Prime In Diagonal","text":"Problem <p>You are given a 0-indexed two-dimensional integer array <code>nums</code>.</p> <p>Return the largest prime number that lies on at least one of the diagonals of <code>nums</code>. In case, no prime is present on any of the diagonals, return 0.</p> <p>Note that:</p> <ul> <li>An integer is prime if it is greater than <code>1</code> and has no positive integer divisors other than <code>1</code> and itself.</li> <li>An integer <code>val</code> is on one of the diagonals of <code>nums</code> if there exists an integer <code>i</code> for which <code>nums[i][i] = val</code> or an <code>i</code> for which <code>nums[i][nums.length - i - 1] = val</code>.</li> </ul> <p></p> <p>In the above diagram, one diagonal is [1,5,9] and another diagonal is [3,5,7].</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [[1,2,3],[5,6,7],[9,10,11]]\nOutput: 11\nExplanation: The numbers 1, 3, 6, 9, and 11 are the only numbers present on at least one of the diagonals. Since 11 is the largest prime, we return 11.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [[1,2,3],[5,17,7],[9,11,10]]\nOutput: 17\nExplanation: The numbers 1, 3, 9, 10, and 17 are all present on at least one of the diagonals. 17 is the largest prime, so we return 17.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 300</code></li> <li><code>nums.length == nums<sub>i</sub>.length</code></li> <li><code>1 &lt;= nums[i][j]\u00a0&lt;= 4*10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2615/","title":"2615. Sum of Distances","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. There exists an array <code>arr</code> of length <code>nums.length</code>, where <code>arr[i]</code> is the sum of <code>|i - j|</code> over all <code>j</code> such that <code>nums[j] == nums[i]</code> and <code>j != i</code>. If there is no such <code>j</code>, set <code>arr[i]</code> to be <code>0</code>.</p> <p>Return the array <code>arr</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,1,1,2]\nOutput: [5,0,3,4,0]\nExplanation: \nWhen i = 0, nums[0] == nums[2] and nums[0] == nums[3]. Therefore, arr[0] = |0 - 2| + |0 - 3| = 5. \nWhen i = 1, arr[1] = 0 because there is no other index with value 3.\nWhen i = 2, nums[2] == nums[0] and nums[2] == nums[3]. Therefore, arr[2] = |2 - 0| + |2 - 3| = 3. \nWhen i = 3, nums[3] == nums[0] and nums[3] == nums[2]. Therefore, arr[3] = |3 - 0| + |3 - 2| = 4. \nWhen i = 4, arr[4] = 0 because there is no other index with value 2. \n\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,5,3]\nOutput: [0,0,0]\nExplanation: Since each element in nums is distinct, arr[i] = 0 for all i.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2616/","title":"2616. Minimize the Maximum Difference of Pairs","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and an integer <code>p</code>. Find <code>p</code> pairs of indices of <code>nums</code> such that the maximum difference amongst all the pairs is minimized. Also, ensure no index appears more than once amongst the <code>p</code> pairs.</p> <p>Note that for a pair of elements at the index <code>i</code> and <code>j</code>, the difference of this pair is <code>|nums[i] - nums[j]|</code>, where <code>|x|</code> represents the absolute value of <code>x</code>.</p> <p>Return the minimum maximum difference among all <code>p</code> pairs. We define the maximum of an empty set to be zero.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [10,1,2,7,1,3], p = 2\nOutput: 1\nExplanation: The first pair is formed from the indices 1 and 4, and the second pair is formed from the indices 2 and 5. \nThe maximum difference is max(|nums[1] - nums[4]|, |nums[2] - nums[5]|) = max(0, 1) = 1. Therefore, we return 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,2,1,2], p = 1\nOutput: 0\nExplanation: Let the indices 1 and 3 form a pair. The difference of that pair is |2 - 2| = 0, which is the minimum we can attain.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= p &lt;= (nums.length)/2</code></li> </ul>"},{"location":"LeetCode_Problems/2617/","title":"2617. Minimum Number of Visited Cells in a Grid","text":"Problem <p>You are given a 0-indexed <code>m x n</code> integer matrix <code>grid</code>. Your initial position is at the top-left cell <code>(0, 0)</code>.</p> <p>Starting from the cell <code>(i, j)</code>, you can move to one of the following cells:</p> <ul> <li>Cells <code>(i, k)</code> with <code>j &lt; k &lt;= grid[i][j] + j</code> (rightward movement), or</li> <li>Cells <code>(k, j)</code> with <code>i &lt; k &lt;= grid[i][j] + i</code> (downward movement).</li> </ul> <p>Return the minimum number of cells you need to visit to reach the bottom-right cell <code>(m - 1, n - 1)</code>. If there is no valid path, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]]\nOutput: 4\nExplanation: The image above shows one of the paths that visits exactly 4 cells.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]]\nOutput: 3\nExplanation: The image above shows one of the paths that visits exactly 3 cells.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[2,1,0],[1,0,0]]\nOutput: -1\nExplanation: It can be proven that no path exists.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= grid[i][j] &lt; m * n</code></li> <li><code>grid[m - 1][n - 1] == 0</code></li> </ul>"},{"location":"LeetCode_Problems/2618/","title":"2618. Check if Object Instance of Class","text":"Problem <p>Write a function that checks if a given value\u00a0is an instance of a given class or superclass. For this problem, an object is considered an instance of a given class if that object has access to that class's methods.</p> <p>There are\u00a0no constraints on the data types that can be passed to the function. For example, the value or the class could be\u00a0<code>undefined</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: func = () =&gt; checkIfInstanceOf(new Date(), Date)\nOutput: true\nExplanation: The object returned by the Date constructor is, by definition, an instance of Date.\n</pre> <p>Example 2:</p> <pre>\nInput: func = () =&gt; { class Animal {}; class Dog extends Animal {}; return checkIfInstanceOf(new Dog(), Animal); }\nOutput: true\nExplanation:\nclass Animal {};\nclass Dog extends Animal {};\ncheckIfInstanceOf(new Dog(), Animal); // true\n\nDog is a subclass of Animal. Therefore, a Dog object is an instance of both Dog and Animal.</pre> <p>Example 3:</p> <pre>\nInput: func = () =&gt; checkIfInstanceOf(Date, Date)\nOutput: false\nExplanation: A date constructor cannot logically be an instance of itself.\n</pre> <p>Example 4:</p> <pre>\nInput: func = () =&gt; checkIfInstanceOf(5, Number)\nOutput: true\nExplanation: 5 is a Number. Note that the \"instanceof\" keyword would return false. However, it is still considered an instance of Number because it accesses the Number methods. For example \"toFixed()\".\n</pre>"},{"location":"LeetCode_Problems/2619/","title":"2619. Array Prototype Last","text":"Problem <p>Write code that enhances all arrays such that you can call the\u00a0<code>array.last()</code>\u00a0method on any array and it will return the last element. If there are no elements in the array, it should return\u00a0<code>-1</code>.</p> <p>You may assume the array is the output of\u00a0<code>JSON.parse</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [null, {}, 3]\nOutput: 3\nExplanation: Calling nums.last() should return the last element: 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = []\nOutput: -1\nExplanation: Because there are no elements, return -1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>arr</code> is a valid JSON array</li> <li><code>0 &lt;= arr.length &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2620/","title":"2620. Counter","text":"Problem <p>Given an integer\u00a0<code>n</code>,\u00a0return a <code>counter</code> function. This <code>counter</code> function initially returns\u00a0<code>n</code>\u00a0and then returns 1 more than the previous value every subsequent time it is called (<code>n</code>, <code>n + 1</code>, <code>n + 2</code>, etc).</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nn = 10 \n[\"call\",\"call\",\"call\"]\nOutput: [10,11,12]\nExplanation: \ncounter() = 10 // The first time counter() is called, it returns n.\ncounter() = 11 // Returns 1 more than the previous time.\ncounter() = 12 // Returns 1 more than the previous time.\n</pre> <p>Example 2:</p> <pre>\nInput: \nn = -2\n[\"call\",\"call\",\"call\",\"call\",\"call\"]\nOutput: [-2,-1,0,1,2]\nExplanation: counter() initially returns -2. Then increases after each sebsequent call.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-1000&lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= calls.length &lt;= 1000</code></li> <li><code>calls[i] === \"call\"</code></li> </ul>"},{"location":"LeetCode_Problems/2621/","title":"2621. Sleep","text":"Problem <p>Given\u00a0a positive integer <code>millis</code>, write an asynchronous function that sleeps for <code>millis</code>\u00a0milliseconds. It can resolve any value.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: millis = 100\nOutput: 100\nExplanation: It should return a promise that resolves after 100ms.\nlet t = Date.now();\nsleep(100).then(() =&gt; {\n  console.log(Date.now() - t); // 100\n});\n</pre> <p>Example 2:</p> <pre>\nInput: millis = 200\nOutput: 200\nExplanation: It should return a promise that resolves after 200ms.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= millis &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2622/","title":"2622. Cache With Time Limit","text":"Problem <p>Write a class that allows getting and setting\u00a0key-value pairs, however a\u00a0time until expiration\u00a0is associated with each key.</p> <p>The class has three public methods:</p> <p><code>set(key, value, duration)</code>:\u00a0accepts an integer\u00a0<code>key</code>, an\u00a0integer\u00a0<code>value</code>, and a <code>duration</code> in milliseconds. Once the\u00a0<code>duration</code>\u00a0has elapsed, the key should be inaccessible. The method should return\u00a0<code>true</code>\u00a0if the same\u00a0un-expired key already exists and <code>false</code> otherwise. Both the value and duration should be overwritten if the key already exists.</p> <p><code>get(key)</code>: if an un-expired key exists, it should return the associated value. Otherwise it should return\u00a0<code>-1</code>.</p> <p><code>count()</code>: returns the count of un-expired keys.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nactions = [\"TimeLimitedCache\", \"set\", \"get\", \"count\", \"get\"]\nvalues = [[], [1, 42, 100], [1], [], [1]]\ntimeDelays = [0, 0, 50, 50, 150]\nOutput: [null, false, 42, 1, -1]\nExplanation:\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 100ms. The value doesn't exist so false is returned.\nAt t=50, key=1 is requested and the value of 42 is returned.\nAt t=50, count() is called and there is one active key in the cache.\nAt t=100, key=1 expires.\nAt t=150, get(1) is called but -1 is returned because the cache is empty.\n</pre> <p>Example 2:</p> <pre>\nInput: \nactions = [\"TimeLimitedCache\", \"set\", \"set\", \"get\", \"get\", \"get\", \"count\"]\nvalues = [[], [1, 42, 50], [1, 50, 100], [1], [1], [1], []]\ntimeDelays = [0, 0, 40, 50, 120, 200, 250]\nOutput: [null, false, true, 50, 50, -1, 0]\nExplanation:\nAt t=0, the cache is constructed.\nAt t=0, a key-value pair (1: 42) is added with a time limit of 50ms. The value doesn't exist so false is returned.\nAt t=40, a key-value pair (1: 50) is added with a time limit of 100ms. A non-expired value already existed so true is returned and the old value was overwritten.\nAt t=50, get(1) is called which returned 50.\nAt t=120, get(1) is called which returned 50.\nAt t=140, key=1 expires.\nAt t=200, get(1) is called but the cache is empty so -1 is returned.\nAt t=250, count() returns 0 because the cache is empty.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= key, value &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= duration &lt;= 1000</code></li> <li><code>1 &lt;= actions.length &lt;= 100</code></li> <li><code>actions.length === values.length</code></li> <li><code>actions.length === timeDelays.length</code></li> <li><code>0 &lt;= timeDelays[i] &lt;= 1450</code></li> <li><code>actions[i]</code>\u00a0is one of \"TimeLimitedCache\", \"set\", \"get\" and\u00a0\"count\"</li> <li>First action is always \"TimeLimitedCache\" and must be executed immediately, with a 0-millisecond delay</li> </ul>"},{"location":"LeetCode_Problems/2623/","title":"2623. Memoize","text":"Problem <p>Given a function <code>fn</code>, return a\u00a0memoized\u00a0version of that function.</p> <p>A\u00a0memoized\u00a0function is a function that will never be called twice with\u00a0the same inputs. Instead it will return\u00a0a cached value.</p> <p>You can assume there are\u00a03\u00a0possible input functions:\u00a0<code>sum</code>, <code>fib</code>,\u00a0and\u00a0<code>factorial</code>.</p> <ul> <li><code>sum</code> accepts two integers\u00a0<code>a</code> and <code>b</code> and returns <code>a + b</code>.</li> <li><code>fib</code> accepts a\u00a0single integer\u00a0<code>n</code> and\u00a0returns\u00a0<code>1</code> if <code>n &lt;= 1</code> or <code>fib(n - 1) + fib(n - 2)</code> otherwise.</li> <li><code>factorial</code>\u00a0accepts a single integer\u00a0<code>n</code> and returns <code>1</code>\u00a0if\u00a0<code>n &lt;= 1</code>\u00a0or\u00a0<code>factorial(n - 1) * n</code>\u00a0otherwise.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput:\nfnName = \"sum\"\nactions = [\"call\",\"call\",\"getCallCount\",\"call\",\"getCallCount\"]\nvalues = [[2,2],[2,2],[],[1,2],[]]\nOutput: [4,4,1,3,2]\nExplanation:\nconst sum = (a, b) =&gt; a + b;\nconst memoizedSum = memoize(sum);\nmemoizedSum(2, 2); // \"call\" - returns 4. sum() was called as (2, 2) was not seen before.\nmemoizedSum(2, 2); // \"call\" - returns 4. However sum() was not called because the same inputs were seen before.\n// \"getCallCount\" - total call count: 1\nmemoizedSum(1, 2); // \"call\" - returns 3. sum() was called as (1, 2) was not seen before.\n// \"getCallCount\" - total call count: 2\n</pre> <p>Example 2:</p> <pre>\nInput:\nfnName = \"factorial\"\nactions = [\"call\",\"call\",\"call\",\"getCallCount\",\"call\",\"getCallCount\"]\nvalues = [[2],[3],[2],[],[3],[]]\nOutput: [2,6,2,2,6,2]\nExplanation:\nconst factorial = (n) =&gt; (n &lt;= 1) ? 1 : (n * factorial(n - 1));\nconst memoFactorial = memoize(factorial);\nmemoFactorial(2); // \"call\" - returns 2.\nmemoFactorial(3); // \"call\" - returns 6.\nmemoFactorial(2); // \"call\" - returns 2. However factorial was not called because 2 was seen before.\n// \"getCallCount\" - total call count: 2\nmemoFactorial(3); // \"call\" - returns 6. However factorial was not called because 3 was seen before.\n// \"getCallCount\" - total call count: 2\n</pre> <p>Example 3:</p> <pre>\nInput:\nfnName = \"fib\"\nactions = [\"call\",\"getCallCount\"]\nvalues = [[5],[]]\nOutput: [8,1]\nExplanation:\nfib(5) = 8 // \"call\"\n// \"getCallCount\" - total call count: 1\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= a, b &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= n &lt;= 10</code></li> <li><code>0 &lt;= actions.length &lt;= 10<sup>5</sup></code></li> <li><code>actions.length === values.length</code></li> <li><code>actions[i]</code> is one of \"call\" and \"getCallCount\"</li> <li><code>fnName</code> is one of \"sum\", \"factorial\" and\u00a0\"fib\"</li> </ul>"},{"location":"LeetCode_Problems/2624/","title":"2624. Snail Traversal","text":"Problem <p>Write code that enhances all arrays such that you can call the <code>snail(rowsCount, colsCount)</code> method that transforms the 1D\u00a0array into\u00a0a 2D array organised in\u00a0the pattern known as snail traversal order. Invalid input values should output an empty array. If\u00a0<code>rowsCount * colsCount !== nums.length</code>,\u00a0the input is considered invalid.</p> <p>Snail traversal order starts at the top left cell with the first value of the current array. It then moves through the entire first column from top to bottom, followed by moving to the next column on the right and traversing it from bottom to top. This pattern continues, alternating the direction of traversal with each column, until the entire current array is covered. For example, when given the input array\u00a0<code>[19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15]</code> with <code>rowsCount = 5</code> and <code>colsCount = 4</code>,\u00a0the desired output matrix is shown below. Note that iterating the matrix following the arrows corresponds to the order of numbers in the original array.</p> <p> </p> <p></p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nnums = [19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15]\nrowsCount = 5\ncolsCount = 4\nOutput: \n[\n [19,17,16,15],\n\u00a0[10,1,14,4],\n\u00a0[3,2,12,20],\n\u00a0[7,5,18,11],\n\u00a0[9,8,6,13]\n]\n</pre> <p>Example 2:</p> <pre>\nInput: \nnums = [1,2,3,4]\nrowsCount = 1\ncolsCount = 4\nOutput: [[1, 2, 3, 4]]\n</pre> <p>Example 3:</p> <pre>\nInput: \nnums = [1,3]\nrowsCount = 2\ncolsCount = 2\nOutput: []\nExplanation: 2 multiplied by 2 is 4, and the original array [1,3] has a length of 2; therefore, the input is invalid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 250</code></li> <li><code>1 &lt;= nums[i] &lt;= 1000</code></li> <li><code>1 &lt;= rowsCount &lt;= 250</code></li> <li><code>1 &lt;= colsCount &lt;= 250</code></li> </ul> <p> </p>"},{"location":"LeetCode_Problems/2625/","title":"2625. Flatten Deeply Nested Array","text":"Problem <p>Given a\u00a0multi-dimensional array\u00a0<code>arr</code>\u00a0and a depth <code>n</code>, return\u00a0a\u00a0flattened\u00a0version of that array.</p> <p>A multi-dimensional\u00a0array is a recursive data structure that contains integers or other\u00a0multi-dimensional\u00a0arrays.</p> <p>A\u00a0flattened\u00a0array is a version of that array with some or all of the sub-arrays removed and replaced with the actual elements in that sub-array. This flattening operation should only be done if the current depth of nesting\u00a0is less\u00a0than\u00a0<code>n</code>. The depth of the elements in the first array are considered to be\u00a0<code>0</code>.</p> <p>Please solve it without the built-in\u00a0<code>Array.flat</code> method.</p> <p> </p> <p>Example 1:</p> <pre>\nInput\narr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]\nn = 0\nOutput\n[1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]\n\nExplanation\nPassing a depth of n=0 will always result in the original array. This is because the smallest possible depth of a subarray (0) is not less than n=0. Thus, no subarray should be flattened. </pre> <p>Example 2:</p> <pre>\nInput\narr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]\nn = 1\nOutput\n[1, 2, 3, 4, 5, 6, 7, 8, [9, 10, 11], 12, 13, 14, 15]\n\nExplanation\nThe subarrays starting with 4, 7, and 13 are all flattened. This is because their depth of 0 is less than 1. However [9, 10, 11] remains unflattened because its depth is 1.</pre> <p>Example 3:</p> <pre>\nInput\narr = [[1, 2, 3], [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]\nn = 2\nOutput\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\nExplanation\nThe maximum depth of any subarray is 1. Thus, all of them are flattened.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= count of numbers in arr &lt;=\u00a010<sup>5</sup></code></li> <li><code>0 &lt;= count of subarrays in arr &lt;=\u00a010<sup>5</sup></code></li> <li><code>maxDepth &lt;= 1000</code></li> <li><code>-1000 &lt;= each number &lt;= 1000</code></li> <li><code>0 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2626/","title":"2626. Array Reduce Transformation","text":"Problem <p>Given an integer array\u00a0<code>nums</code>, a reducer function\u00a0<code>fn</code>, and an initial value\u00a0<code>init</code>, return a\u00a0reduced\u00a0array.</p> <p>A\u00a0reduced\u00a0array is created by applying the following operation:\u00a0<code>val = fn(init, nums[0])</code>, <code>val\u00a0= fn(val, nums[1])</code>,\u00a0<code>val\u00a0= fn(val, nums[2])</code>,\u00a0<code>...</code>\u00a0until every element in the array has been processed. The final value of\u00a0<code>val</code>\u00a0is returned.</p> <p>If the length of the array is 0, it should return\u00a0<code>init</code>.</p> <p>Please solve it without using the built-in <code>Array.reduce</code> method.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nnums = [1,2,3,4]\nfn = function sum(accum, curr) { return accum + curr; }\ninit = 0\nOutput: 10\nExplanation:\ninitially, the value is init=0.\n(0) + nums[0] = 1\n(1) + nums[1] = 3\n(3) + nums[2] = 6\n(6) + nums[3] = 10\nThe final answer is 10.\n</pre> <p>Example 2:</p> <pre>\nInput: \nnums = [1,2,3,4]\nfn = function sum(accum, curr) { return accum + curr * curr; }\ninit = 100\nOutput: 130\nExplanation:\ninitially, the value is init=100.\n(100) + nums[0]^2 = 101\n(101) + nums[1]^2 = 105\n(105) + nums[2]^2 = 114\n(114) + nums[3]^2 = 130\nThe final answer is 130.\n</pre> <p>Example 3:</p> <pre>\nInput: \nnums = []\nfn = function sum(accum, curr) { return 0; }\ninit = 25\nOutput: 25\nExplanation: For empty arrays, the answer is always init.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i] &lt;= 1000</code></li> <li><code>0 &lt;= init &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2627/","title":"2627. Debounce","text":"Problem <p>Given a function\u00a0<code>fn</code> and a time in milliseconds\u00a0<code>t</code>, return\u00a0a\u00a0debounced\u00a0version of that function.</p> <p>A\u00a0debounced\u00a0function is a function whose execution is delayed by\u00a0<code>t</code>\u00a0milliseconds and whose\u00a0execution is cancelled if it is called again within that window of time. The debounced function should also receive the passed parameters.</p> <p>For example, let's say\u00a0<code>t = 50ms</code>, and the function was called at\u00a0<code>30ms</code>,\u00a0<code>60ms</code>, and <code>100ms</code>. The first 2 function calls would be cancelled, and the 3rd function call would be executed at\u00a0<code>150ms</code>. If instead\u00a0<code>t = 35ms</code>, The 1st call would be cancelled, the 2nd would be executed at\u00a0<code>95ms</code>, and the 3rd would be executed at\u00a0<code>135ms</code>.</p> <p></p> <p>The above diagram\u00a0shows how debounce will transform\u00a0events. Each rectangle represents 100ms and the debounce time is 400ms. Each color represents a different set of inputs.</p> <p>Please solve it without using lodash's\u00a0<code>_.debounce()</code> function.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nt = 50\ncalls = [\n\u00a0 {\"t\": 50, inputs: [1]},\n\u00a0 {\"t\": 75, inputs: [2]}\n]\nOutput: [{\"t\": 125, inputs: [2]}]\nExplanation:\nlet start = Date.now();\nfunction log(...inputs) { \n\u00a0 console.log([Date.now() - start, inputs ])\n}\nconst dlog = debounce(log, 50);\nsetTimeout(() =&gt; dlog(1), 50);\nsetTimeout(() =&gt; dlog(2), 75);\n\nThe 1st call is cancelled by the 2nd call because the 2nd call occurred before 100ms\nThe 2nd call is delayed by 50ms and executed at 125ms. The inputs were (2).\n</pre> <p>Example 2:</p> <pre>\nInput: \nt = 20\ncalls = [\n\u00a0 {\"t\": 50, inputs: [1]},\n\u00a0 {\"t\": 100, inputs: [2]}\n]\nOutput: [{\"t\": 70, inputs: [1]}, {\"t\": 120, inputs: [2]}]\nExplanation:\nThe 1st call is delayed until 70ms. The inputs were (1).\nThe 2nd call is delayed until 120ms. The inputs were (2).\n</pre> <p>Example 3:</p> <pre>\nInput: \nt = 150\ncalls = [\n\u00a0 {\"t\": 50, inputs: [1, 2]},\n\u00a0 {\"t\": 300, inputs: [3, 4]},\n\u00a0 {\"t\": 300, inputs: [5, 6]}\n]\nOutput: [{\"t\": 200, inputs: [1,2]}, {\"t\": 450, inputs: [5, 6]}]\nExplanation:\nThe 1st call is delayed by 150ms and ran at 200ms. The inputs were (1, 2).\nThe 2nd call is cancelled by the 3rd call\nThe 3rd call is delayed by 150ms and ran at 450ms. The inputs were (5, 6).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= t &lt;= 1000</code></li> <li><code>1 &lt;= calls.length &lt;= 10</code></li> <li><code>0 &lt;= calls[i].t &lt;= 1000</code></li> <li><code>0 &lt;= calls[i].inputs.length &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/2628/","title":"2628. JSON Deep Equal","text":"Problem"},{"location":"LeetCode_Problems/2629/","title":"2629. Function Composition","text":"Problem <p>Given an array of functions\u00a0<code>[f1, f<sub>2</sub>, f<sub>3</sub>,\u00a0..., f<sub>n</sub>]</code>, return\u00a0a new function\u00a0<code>fn</code>\u00a0that is the function\u00a0composition of the array of functions.</p> <p>The\u00a0function\u00a0composition\u00a0of\u00a0<code>[f(x), g(x), h(x)]</code>\u00a0is\u00a0<code>fn(x) = f(g(h(x)))</code>.</p> <p>The\u00a0function\u00a0composition\u00a0of an empty list of functions is the\u00a0identity function <code>f(x) = x</code>.</p> <p>You may assume each\u00a0function\u00a0in the array accepts one integer as input\u00a0and returns one integer as output.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: functions = [x =&gt; x + 1, x =&gt; x * x, x =&gt; 2 * x], x = 4\nOutput: 65\nExplanation:\nEvaluating from right to left ...\nStarting with x = 4.\n2 * (4) = 8\n(8) * (8) = 64\n(64) + 1 = 65\n</pre> <p>Example 2:</p> <pre>\nInput: functions = [x =&gt; 10 * x, x =&gt; 10 * x, x =&gt; 10 * x], x = 1\nOutput: 1000\nExplanation:\nEvaluating from right to left ...\n10 * (1) = 10\n10 * (10) = 100\n10 * (100) = 1000\n</pre> <p>Example 3:</p> <pre>\nInput: functions = [], x = 42\nOutput: 42\nExplanation:\nThe composition of zero functions is the identity function</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-1000 &lt;= x &lt;= 1000</code></li> <li><code>0 &lt;= functions.length &lt;= 1000</code></li> <li>all functions accept and return a single integer</li> </ul>"},{"location":"LeetCode_Problems/2630/","title":"2630. Memoize II","text":"Problem <p>Given a function <code>fn</code>,\u00a0return\u00a0a\u00a0memoized\u00a0version of that function.</p> <p>A\u00a0memoized\u00a0function is a function that will never be called twice with\u00a0the same inputs. Instead it will return\u00a0a cached value.</p> <p><code>fn</code>\u00a0can be any function and there are no constraints on what type of values it accepts. Inputs are considered identical if they are\u00a0<code>===</code> to each other.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \ngetInputs = () =&gt; [[2,2],[2,2],[1,2]]\nfn = function (a, b) { return a + b; }\nOutput: [{\"val\":4,\"calls\":1},{\"val\":4,\"calls\":1},{\"val\":3,\"calls\":2}]\nExplanation:\nconst inputs = getInputs();\nconst memoized = memoize(fn);\nfor (const arr of inputs) {\n  memoized(...arr);\n}\n\nFor the inputs of (2, 2): 2 + 2 = 4, and it required a call to fn().\nFor the inputs of (2, 2): 2 + 2 = 4, but those inputs were seen before so no call to fn() was required.\nFor the inputs of (1, 2): 1 + 2 = 3, and it required another call to fn() for a total of 2.\n</pre> <p>Example 2:</p> <pre>\nInput: \ngetInputs = () =&gt; [[{},{}],[{},{}],[{},{}]] \nfn = function (a, b) { return ({...a, ...b}); }\nOutput: [{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":2},{\"val\":{},\"calls\":3}]\nExplanation:\nMerging two empty objects will always result in an empty object. It may seem like there should only be 1\u00a0call to fn() because of cache-hits, however none of those objects are === to each other.\n</pre> <p>Example 3:</p> <pre>\nInput: \ngetInputs = () =&gt; { const o = {}; return [[o,o],[o,o],[o,o]]; }\nfn = function (a, b) { return ({...a, ...b}); }\nOutput: [{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":1},{\"val\":{},\"calls\":1}]\nExplanation:\nMerging two empty objects will always result in an empty object. The 2nd and 3rd third function calls result in a cache-hit. This is because every object passed in is identical.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= inputs.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= inputs.flat().length &lt;= 10<sup>5</sup></code></li> <li><code>inputs[i][j] != NaN</code></li> </ul>"},{"location":"LeetCode_Problems/2631/","title":"2631. Group By","text":"Problem <p>Write code that enhances all arrays such that you can call the\u00a0<code>array.groupBy(fn)</code>\u00a0method on any array and it will return a grouped\u00a0version of the array.</p> <p>A\u00a0grouped\u00a0array is an object where each\u00a0key\u00a0is\u00a0the output of\u00a0<code>fn(arr[i])</code>\u00a0and each\u00a0value is an array containing all items in the original array with that key.</p> <p>The provided callback\u00a0<code>fn</code>\u00a0will accept an item in the array and return a string key.</p> <p>The order of each value list should be the order the items\u00a0appear in the array. Any order of keys is acceptable.</p> <p>Please solve it without lodash's\u00a0<code>_.groupBy</code> function.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \narray = [\n\u00a0 {\"id\":\"1\"},\n\u00a0 {\"id\":\"1\"},\n\u00a0 {\"id\":\"2\"}\n], \nfn = function (item) { \n\u00a0 return item.id; \n}\nOutput: \n{ \n\u00a0 \"1\": [{\"id\": \"1\"}, {\"id\": \"1\"}], \u00a0 \n\u00a0 \"2\": [{\"id\": \"2\"}] \n}\nExplanation:\nOutput is from array.groupBy(fn).\nThe selector function gets the \"id\" out of each item in the array.\nThere are two objects with an \"id\" of 1. Both of those objects are put in the first array.\nThere is one object with an \"id\" of 2. That object is put in the second array.\n</pre> <p>Example 2:</p> <pre>\nInput: \narray = [\n\u00a0 [1, 2, 3],\n\u00a0 [1, 3, 5],\n\u00a0 [1, 5, 9]\n]\nfn = function (list) { \n\u00a0 return String(list[0]); \n}\nOutput: \n{ \n\u00a0 \"1\": [[1, 2, 3], [1, 3, 5], [1, 5, 9]] \n}\nExplanation:\nThe array can be of any type. In this case, the selector function defines the key as being the first element in the array. \nAll the arrays have 1 as their first element so they are grouped together.\n{\n  \"1\": [[1, 2, 3], [1, 3, 5], [1, 5, 9]]\n}\n</pre> <p>Example 3:</p> <pre>\nInput: \narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfn = function (n) { \n\u00a0 return String(n &gt; 5);\n}\nOutput:\n{\n\u00a0 \"true\": [6, 7, 8, 9, 10],\n\u00a0 \"false\": [1, 2, 3, 4, 5]\n}\nExplanation:\nThe selector function splits the array by whether each number is greater than 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= array.length &lt;= 10<sup>5</sup></code></li> <li><code>fn</code> returns a string</li> </ul>"},{"location":"LeetCode_Problems/2632/","title":"2632. Curry","text":"Problem"},{"location":"LeetCode_Problems/2633/","title":"2633. Convert Object to JSON String","text":"Problem"},{"location":"LeetCode_Problems/2634/","title":"2634. Filter Elements from Array","text":"Problem <p>Given an integer array <code>arr</code> and a filtering function <code>fn</code>, return a filtered array <code>filteredArr</code>.</p> <p>The <code>fn</code> function takes one or two arguments:</p> <ul> <li><code>arr[i]</code> - number\u00a0from\u00a0the <code>arr</code></li> <li><code>i</code>\u00a0- index of <code>arr[i]</code></li> </ul> <p><code>filteredArr</code> should only contain the elements from the\u00a0<code>arr</code> for which the expression <code>fn(arr[i], i)</code> evaluates to a truthy value. A\u00a0truthy\u00a0value is a value where\u00a0<code>Boolean(value)</code>\u00a0returns\u00a0<code>true</code>.</p> <p>Please solve it without the built-in <code>Array.filter</code> method.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [0,10,20,30], fn = function greaterThan10(n) { return n &gt; 10; }\nOutput: [20,30]\nExplanation:\nconst newArray = filter(arr, fn); // [20, 30]\nThe function filters out values that are not greater than 10</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2,3], fn = function firstIndex(n, i) { return i === 0; }\nOutput: [1]\nExplanation:\nfn can also accept the index of each element\nIn this case, the function removes elements not at index 0\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [-2,-1,0,1,2], fn = function plusOne(n) { return n + 1 }\nOutput: [-2,0,1,2]\nExplanation:\nFalsey values such as 0 should be filtered out\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= arr.length &lt;= 1000</code></li> <li><code>-10<sup>9</sup>\u00a0&lt;= arr[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2635/","title":"2635. Apply Transform Over Each Element in Array","text":"Problem <p>Given an integer array\u00a0<code>arr</code>\u00a0and a mapping function\u00a0<code>fn</code>, return\u00a0a new array with a transformation applied to each element.</p> <p>The returned array should be created such that\u00a0<code>returnedArray[i] = fn(arr[i], i)</code>.</p> <p>Please solve it without the built-in <code>Array.map</code> method.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,3], fn = function plusone(n) { return n + 1; }\nOutput: [2,3,4]\nExplanation:\nconst newArray = map(arr, plusone); // [2,3,4]\nThe function increases each value in the array by one. \n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,2,3], fn = function plusI(n, i) { return n + i; }\nOutput: [1,3,5]\nExplanation: The function increases each value by the index it resides in.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [10,20,30], fn = function constant() { return 42; }\nOutput: [42,42,42]\nExplanation: The function always returns 42.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= arr.length &lt;= 1000</code></li> <li><code>-10<sup>9</sup>\u00a0&lt;= arr[i] &lt;= 10<sup>9</sup></code></li> <li><code>fn</code> returns a number</li> </ul>"},{"location":"LeetCode_Problems/2636/","title":"2636. Promise Pool","text":"Problem"},{"location":"LeetCode_Problems/2637/","title":"2637. Promise Time Limit","text":"Problem <p>Given an\u00a0asynchronous function\u00a0<code>fn</code>\u00a0and a time <code>t</code>\u00a0in milliseconds, return\u00a0a new\u00a0time limited\u00a0version of the input function. <code>fn</code> takes arguments provided to the\u00a0time limited\u00a0function.</p> <p>The time limited function should follow these rules:</p> <ul> <li>If the <code>fn</code> completes within the time limit of <code>t</code> milliseconds, the time limited function should\u00a0resolve with the result.</li> <li>If the execution of the <code>fn</code> exceeds the time limit, the time limited function should reject with the string <code>\"Time Limit Exceeded\"</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: \nfn = async (n) =&gt; { \n\u00a0 await new Promise(res =&gt; setTimeout(res, 100)); \n\u00a0 return n * n; \n}\ninputs = [5]\nt = 50\nOutput: {\"rejected\":\"Time Limit Exceeded\",\"time\":50}\nExplanation:\nconst limited = timeLimit(fn, t)\nconst start = performance.now()\nlet result;\ntry {\n\u00a0 \u00a0const res = await limited(...inputs)\n\u00a0 \u00a0result = {\"resolved\": res, \"time\": Math.floor(performance.now() - start)};\n} catch (err) {\n\u00a0  result = {\"rejected\": err, \"time\": Math.floor(performance.now() - start)};\n}\nconsole.log(result) // Output\n\nThe provided function is set to resolve after 100ms. However, the time limit is set to 50ms. It rejects at t=50ms because the time limit was reached.\n</pre> <p>Example 2:</p> <pre>\nInput: \nfn = async (n) =&gt; { \n\u00a0 await new Promise(res =&gt; setTimeout(res, 100)); \n\u00a0 return n * n; \n}\ninputs = [5]\nt = 150\nOutput: {\"resolved\":25,\"time\":100}\nExplanation:\nThe function resolved 5 * 5 = 25 at t=100ms. The time limit is never reached.\n</pre> <p>Example 3:</p> <pre>\nInput: \nfn = async (a, b) =&gt; { \n\u00a0 await new Promise(res =&gt; setTimeout(res, 120)); \n\u00a0 return a + b; \n}\ninputs = [5,10]\nt = 150\nOutput: {\"resolved\":15,\"time\":120}\nExplanation:\n\u200b\u200b\u200b\u200bThe function resolved 5 + 10 = 15 at t=120ms. The time limit is never reached.\n</pre> <p>Example 4:</p> <pre>\nInput: \nfn = async () =&gt; { \n\u00a0 throw \"Error\";\n}\ninputs = []\nt = 1000\nOutput: {\"rejected\":\"Error\",\"time\":0}\nExplanation:\nThe function immediately throws an error.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= inputs.length &lt;= 10</code></li> <li><code>0 &lt;= t &lt;= 1000</code></li> <li><code>fn</code> returns a promise</li> </ul>"},{"location":"LeetCode_Problems/2638/","title":"2638. Count the Number of K-Free Subsets","text":"Problem"},{"location":"LeetCode_Problems/2639/","title":"2639. Find the Width of Columns of a Grid","text":"Problem <p>You are given a 0-indexed <code>m x n</code> integer matrix <code>grid</code>. The width of a column is the maximum length of its integers.</p> <ul> <li>For example, if <code>grid = [[-10], [3], [12]]</code>, the width of the only column is <code>3</code> since <code>-10</code> is of length <code>3</code>.</li> </ul> <p>Return an integer array <code>ans</code> of size <code>n</code> where <code>ans[i]</code> is the width of the <code>i<sup>th</sup></code> column.</p> <p>The length of an integer <code>x</code> with <code>len</code> digits is equal to <code>len</code> if <code>x</code> is non-negative, and <code>len + 1</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: grid = [[1],[22],[333]]\nOutput: [3]\nExplanation: In the 0<sup>th</sup> column, 333 is of length 3.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[-15,1,3],[15,7,12],[5,6,-2]]\nOutput: [3,1,2]\nExplanation: \nIn the 0<sup>th</sup> column, only -15 is of length 3.\nIn the 1<sup>st</sup> column, all integers are of length 1. \nIn the 2<sup>nd</sup> column, both 12 and -2 are of length 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 100 </code></li> <li><code>-10<sup>9</sup> &lt;= grid[r][c] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2640/","title":"2640. Find the Score of All Prefixes of an Array","text":"Problem <p>We define the conversion array <code>conver</code> of an array <code>arr</code> as follows:</p> <ul> <li><code>conver[i] = arr[i] + max(arr[0..i])</code> where <code>max(arr[0..i])</code> is the maximum value of <code>arr[j]</code> over <code>0 &lt;= j &lt;= i</code>.</li> </ul> <p>We also define the score of an array <code>arr</code> as the sum of the values of the conversion array of <code>arr</code>.</p> <p>Given a 0-indexed integer array <code>nums</code> of length <code>n</code>, return an array <code>ans</code> of length <code>n</code> where <code>ans[i]</code> is the score of the prefix <code>nums[0..i]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,7,5,10]\nOutput: [4,10,24,36,56]\nExplanation: \nFor the prefix [2], the conversion array is [4] hence the score is 4\nFor the prefix [2, 3], the conversion array is [4, 6] hence the score is 10\nFor the prefix [2, 3, 7], the conversion array is [4, 6, 14] hence the score is 24\nFor the prefix [2, 3, 7, 5], the conversion array is [4, 6, 14, 12] hence the score is 36\nFor the prefix [2, 3, 7, 5, 10], the conversion array is [4, 6, 14, 12, 20] hence the score is 56\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,2,4,8,16]\nOutput: [2,4,8,16,32,64]\nExplanation: \nFor the prefix [1], the conversion array is [2] hence the score is 2\nFor the prefix [1, 1], the conversion array is [2, 2] hence the score is 4\nFor the prefix [1, 1, 2], the conversion array is [2, 2, 4] hence the score is 8\nFor the prefix [1, 1, 2, 4], the conversion array is [2, 2, 4, 8] hence the score is 16\nFor the prefix [1, 1, 2, 4, 8], the conversion array is [2, 2, 4, 8, 16] hence the score is 32\nFor the prefix [1, 1, 2, 4, 8, 16], the conversion array is [2, 2, 4, 8, 16, 32] hence the score is 64\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2641/","title":"2641. Cousins in Binary Tree II","text":"Problem <p>Given the <code>root</code> of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values.</p> <p>Two nodes of a binary tree are cousins if they have the same depth with different parents.</p> <p>Return the <code>root</code> of the modified tree.</p> <p>Note that the depth of a node is the number of edges in the path from the root node to it.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: root = [5,4,9,1,10,null,7]\nOutput: [0,0,0,7,7,null,11]\nExplanation: The diagram above shows the initial binary tree and the binary tree after changing the value of each node.\n- Node with value 5 does not have any cousins so its sum is 0.\n- Node with value 4 does not have any cousins so its sum is 0.\n- Node with value 9 does not have any cousins so its sum is 0.\n- Node with value 1 has a cousin with value 7 so its sum is 7.\n- Node with value 10 has a cousin with value 7 so its sum is 7.\n- Node with value 7 has cousins with values 1 and 10 so its sum is 11.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: root = [3,1,2]\nOutput: [0,0,0]\nExplanation: The diagram above shows the initial binary tree and the binary tree after changing the value of each node.\n- Node with value 3 does not have any cousins so its sum is 0.\n- Node with value 1 does not have any cousins so its sum is 0.\n- Node with value 2 does not have any cousins so its sum is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2642/","title":"2642. Design Graph With Shortest Path Calculator","text":"Problem <p>There is a directed weighted graph that consists of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The edges of the graph are initially represented by the given array <code>edges</code> where <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, edgeCost<sub>i</sub>]</code> meaning that there is an edge from <code>from<sub>i</sub></code> to <code>to<sub>i</sub></code> with the cost <code>edgeCost<sub>i</sub></code>.</p> <p>Implement the <code>Graph</code> class:</p> <ul> <li><code>Graph(int n, int[][] edges)</code> initializes the object with <code>n</code> nodes and the given edges.</li> <li><code>addEdge(int[] edge)</code> adds an edge to the list of edges where <code>edge = [from, to, edgeCost]</code>. It is guaranteed that there is no edge between the two nodes before adding this one.</li> <li><code>int shortestPath(int node1, int node2)</code> returns the minimum cost of a path from <code>node1</code> to <code>node2</code>. If no path exists, return <code>-1</code>. The cost of a path is the sum of the costs of the edges in the path.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput\n[\"Graph\", \"shortestPath\", \"shortestPath\", \"addEdge\", \"shortestPath\"]\n[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]]\nOutput\n[null, 6, -1, null, 6]\n\nExplanation\nGraph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);\ng.shortestPath(3, 2); // return 6. The shortest path from 3 to 2 in the first diagram above is 3 -&gt; 0 -&gt; 1 -&gt; 2 with a total cost of 3 + 2 + 1 = 6.\ng.shortestPath(0, 3); // return -1. There is no path from 0 to 3.\ng.addEdge([1, 3, 4]); // We add an edge from node 1 to node 3, and we get the second diagram above.\ng.shortestPath(0, 3); // return 6. The shortest path from 0 to 3 now is 0 -&gt; 1 -&gt; 3 with a total cost of 2 + 4 = 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>0 &lt;= edges.length &lt;= n * (n - 1)</code></li> <li><code>edges[i].length == edge.length == 3</code></li> <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub>, from, to, node1, node2 &lt;= n - 1</code></li> <li><code>1 &lt;= edgeCost<sub>i</sub>, edgeCost &lt;= 10<sup>6</sup></code></li> <li>There are no repeated edges and no self-loops in the graph at any point.</li> <li>At most <code>100</code> calls will be made for <code>addEdge</code>.</li> <li>At most <code>100</code> calls will be made for <code>shortestPath</code>.</li> </ul>"},{"location":"LeetCode_Problems/2643/","title":"2643. Row With Maximum Ones","text":"Problem <p>Given a <code>m x n</code> binary matrix <code>mat</code>, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row.</p> <p>In case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected.</p> <p>Return an array containing the index of the row, and the number of ones in it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: mat = [[0,1],[1,0]]\nOutput: [0,1]\nExplanation: Both rows have the same number of 1's. So we return the index of the smaller row, 0, and the maximum count of ones (1<code>)</code>. So, the answer is [0,1]. \n</pre> <p>Example 2:</p> <pre>\nInput: mat = [[0,0,0],[0,1,1]]\nOutput: [1,2]\nExplanation: The row indexed 1 has the maximum count of ones <code>(2)</code>. So we return its index, <code>1</code>, and the count. So, the answer is [1,2].\n</pre> <p>Example 3:</p> <pre>\nInput: mat = [[0,0],[1,1],[0,0]]\nOutput: [1,2]\nExplanation: The row indexed 1 has the maximum count of ones (2). So the answer is [1,2].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code> </li> <li><code>n == mat[i].length</code> </li> <li><code>1 &lt;= m, n &lt;= 100</code> </li> <li><code>mat[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/2644/","title":"2644. Find the Maximum Divisibility Score","text":"Problem <p>You are given two 0-indexed integer arrays <code>nums</code> and <code>divisors</code>.</p> <p>The divisibility score of <code>divisors[i]</code> is the number of indices <code>j</code> such that <code>nums[j]</code> is divisible by <code>divisors[i]</code>.</p> <p>Return the integer <code>divisors[i]</code> with the maximum divisibility score. If there is more than one integer with the maximum score, return the minimum of them.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,7,9,3,9], divisors = [5,2,3]\nOutput: 3\nExplanation: The divisibility score for every element in divisors is:\nThe divisibility score of divisors[0] is 0 since no number in nums is divisible by 5.\nThe divisibility score of divisors[1] is 1 since nums[0] is divisible by 2.\nThe divisibility score of divisors[2] is 3 since nums[2], nums[3], and nums[4] are divisible by 3.\nSince divisors[2] has the maximum divisibility score, we return it.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [20,14,21,10], divisors = [5,7,5]\nOutput: 5\nExplanation: The divisibility score for every element in divisors is:\nThe divisibility score of divisors[0] is 2 since nums[0] and nums[3] are divisible by 5.\nThe divisibility score of divisors[1] is 2 since nums[1] and nums[2] are divisible by 7.\nThe divisibility score of divisors[2] is 2 since nums[0] and nums[3] are divisible by 5.\nSince divisors[0], divisors[1], and divisors[2] all have the maximum divisibility score, we return the minimum of them (i.e., divisors[2]).\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [12], divisors = [10,16]\nOutput: 10\nExplanation: The divisibility score for every element in divisors is:\nThe divisibility score of divisors[0] is 0 since no number in nums is divisible by 10.\nThe divisibility score of divisors[1] is 0 since no number in nums is divisible by 16.\nSince divisors[0] and divisors[1] both have the maximum divisibility score, we return the minimum of them (i.e., divisors[0]).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length, divisors.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i], divisors[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2645/","title":"2645. Minimum Additions to Make Valid String","text":"Problem <p>Given a string <code>word</code> to which you can insert letters \"a\", \"b\" or \"c\" anywhere and any number of times, return the minimum number of letters that must be inserted so that <code>word</code> becomes valid.</p> <p>A string is called valid if it can be formed by concatenating the string \"abc\" several times.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"b\"\nOutput: 2\nExplanation: Insert the letter \"a\" right before \"b\", and the letter \"c\" right next to \"a\" to obtain the valid string \"abc\".\n</pre> <p>Example 2:</p> <pre>\nInput: word = \"aaa\"\nOutput: 6\nExplanation: Insert letters \"b\" and \"c\" next to each \"a\" to obtain the valid string \"abcabcabc\".\n</pre> <p>Example 3:</p> <pre>\nInput: word = \"abc\"\nOutput: 0\nExplanation: word is already valid. No modifications are needed. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 50</code></li> <li><code>word</code> consists of letters \"a\", \"b\"\u00a0and \"c\" only.\u00a0</li> </ul>"},{"location":"LeetCode_Problems/2646/","title":"2646. Minimize the Total Price of the Trips","text":"Problem <p>There exists an undirected and unrooted tree with <code>n</code> nodes indexed from <code>0</code> to <code>n - 1</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p> <p>Each node has an associated price. You are given an integer array <code>price</code>, where <code>price[i]</code> is the price of the <code>i<sup>th</sup></code> node.</p> <p>The price sum of a given path is the sum of the prices of all nodes lying on that path.</p> <p>Additionally, you are given a 2D integer array <code>trips</code>, where <code>trips[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> indicates that you start the <code>i<sup>th</sup></code> trip from the node <code>start<sub>i</sub></code> and travel to the node <code>end<sub>i</sub></code> by any path you like.</p> <p>Before performing your first trip, you can choose some non-adjacent nodes and halve the prices.</p> <p>Return the minimum total price sum to perform all the given trips.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, edges = [[0,1],[1,2],[1,3]], price = [2,2,10,6], trips = [[0,3],[2,1],[2,3]]\nOutput: 23\nExplanation: The diagram above denotes the tree after rooting it at node 2. The first part shows the initial tree and the second part shows the tree after choosing nodes 0, 2, and 3, and making their price half.\nFor the 1<sup>st</sup> trip, we choose path [0,1,3]. The price sum of that path is 1 + 2 + 3 = 6.\nFor the 2<sup>nd</sup> trip, we choose path [2,1]. The price sum of that path is 2 + 5 = 7.\nFor the 3<sup>rd</sup> trip, we choose path [2,1,3]. The price sum of that path is 5 + 2 + 3 = 10.\nThe total price sum of all trips is 6 + 7 + 10 = 23.\nIt can be proven, that 23 is the minimum answer that we can achieve.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 2, edges = [[0,1]], price = [2,2], trips = [[0,0]]\nOutput: 1\nExplanation: The diagram above denotes the tree after rooting it at node 0. The first part shows the initial tree and the second part shows the tree after choosing node 0, and making its price half.\nFor the 1<sup>st</sup> trip, we choose path [0]. The price sum of that path is 1.\nThe total price sum of all trips is 1. It can be proven, that 1 is the minimum answer that we can achieve.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>edges.length == n - 1</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> <li><code>edges</code> represents a valid tree.</li> <li><code>price.length == n</code></li> <li><code>price[i]</code> is an even integer.</li> <li><code>1 &lt;= price[i] &lt;= 1000</code></li> <li><code>1 &lt;= trips.length &lt;= 100</code></li> <li><code>0 &lt;= start<sub>i</sub>, end<sub>i</sub>\u00a0&lt;= n - 1</code></li> </ul>"},{"location":"LeetCode_Problems/2647/","title":"2647. Color the Triangle Red","text":"Problem"},{"location":"LeetCode_Problems/2648/","title":"2648. Generate Fibonacci Sequence","text":"Problem <p>Write a generator function that returns a generator object which yields the\u00a0fibonacci sequence.</p> <p>The\u00a0fibonacci sequence\u00a0is defined by the relation <code>X<sub>n</sub>\u00a0= X<sub>n-1</sub>\u00a0+ X<sub>n-2</sub></code>.</p> <p>The first few numbers\u00a0of the series are <code>0, 1, 1, 2, 3, 5, 8, 13</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: callCount = 5\nOutput: [0,1,1,2,3]\nExplanation:\nconst gen = fibGenerator();\ngen.next().value; // 0\ngen.next().value; // 1\ngen.next().value; // 1\ngen.next().value; // 2\ngen.next().value; // 3\n</pre> <p>Example 2:</p> <pre>\nInput: callCount = 0\nOutput: []\nExplanation: gen.next() is never called so nothing is outputted\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= callCount &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2649/","title":"2649. Nested Array Generator","text":"Problem <p>Given a\u00a0multi-dimensional array of integers, return\u00a0a generator object which\u00a0yields integers in the same order as\u00a0inorder traversal.</p> <p>A\u00a0multi-dimensional array\u00a0is a recursive data structure that contains both integers and other\u00a0multi-dimensional arrays.</p> <p>inorder traversal\u00a0iterates over\u00a0each array from left to right, yielding any integers it encounters or applying\u00a0inorder traversal\u00a0to any arrays it encounters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [[[6]],[1,3],[]]\nOutput: [6,1,3]\nExplanation:\nconst generator = inorderTraversal(arr);\ngenerator.next().value; // 6\ngenerator.next().value; // 1\ngenerator.next().value; // 3\ngenerator.next().done; // true\n</pre> <p>Example 2:</p> <pre>\nInput: arr = []\nOutput: []\nExplanation: There are no integers so the generator doesn't yield anything.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= arr.flat().length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= arr.flat()[i]\u00a0&lt;= 10<sup>5</sup></code></li> <li><code>maxNestingDepth &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Can you solve this without creating a new flattened version of the array?</p>"},{"location":"LeetCode_Problems/2650/","title":"2650. Design Cancellable Function","text":"Problem <p>Sometimes you have a long running task, and you may wish to cancel it before it completes. To help with this goal, write a function\u00a0<code>cancellable</code> that accepts a generator object and returns an array of two values: a cancel function and a promise.</p> <p>You may assume the generator function will only\u00a0yield promises. It is your function's responsibility to pass the values resolved by the promise back to the generator. If the promise rejects, your function should throw that\u00a0error back to the generator.</p> <p>If the cancel callback is called before the generator is done, your function should throw an error back to the generator. That error should be the string\u00a0<code>\"Cancelled\"</code>\u00a0(Not an <code>Error</code>\u00a0object). If the error was caught, the returned\u00a0promise should resolve with the next value that was yielded or returned. Otherwise, the promise should reject with the thrown error. No more code should be executed.</p> <p>When the generator is done, the promise your function returned should resolve the value the generator returned. If, however, the generator throws an error, the returned promise should reject with the error.</p> <p>An example of how your code would be used:</p> <pre>\nfunction* tasks() {\n  const val = yield new Promise(resolve =&gt; resolve(2 + 2));\n  yield new Promise(resolve =&gt; setTimeout(resolve, 100));\n  return val + 1; // calculation shouldn't be done.\n}\nconst [cancel, promise] = cancellable(tasks());\nsetTimeout(cancel, 50);\npromise.catch(console.log); // logs \"Cancelled\" at t=50ms\n</pre> <p>If\u00a0instead\u00a0<code>cancel()</code> was not called or was called after <code>t=100ms</code>, the promise would\u00a0have resolved\u00a0<code>5</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \ngeneratorFunction = function*() { \n\u00a0 return 42; \n}\ncancelledAt = 100\nOutput: {\"resolved\": 42}\nExplanation:\nconst generator = generatorFunction();\nconst [cancel, promise] = cancellable(generator);\nsetTimeout(cancel, 100);\npromise.then(console.log); // resolves 42 at t=0ms\n\nThe generator immediately yields 42 and finishes. Because of that, the returned promise immediately resolves 42. Note that cancelling a finished generator does nothing.\n</pre> <p>Example 2:</p> <pre>\nInput:\ngeneratorFunction = function*() { \n\u00a0 const msg = yield new Promise(res =&gt; res(\"Hello\")); \n\u00a0 throw `Error: ${msg}`; \n}\ncancelledAt = null\nOutput: {\"rejected\": \"Error: Hello\"}\nExplanation:\nA promise is yielded. The function handles this by waiting for it to resolve and then passes the resolved value back to the generator. Then an error is thrown which has the effect of causing the promise to reject with the same thrown error.\n</pre> <p>Example 3:</p> <pre>\nInput: \ngeneratorFunction = function*() { \n\u00a0 yield new Promise(res =&gt; setTimeout(res, 200)); \n\u00a0 return \"Success\"; \n}\ncancelledAt = 100\nOutput: {\"rejected\": \"Cancelled\"}\nExplanation:\nWhile the function is waiting for the yielded promise to resolve, cancel() is called. This causes an error message to be sent back to the generator. Since this error is uncaught, the returned promise rejected with this error.\n</pre> <p>Example 4:</p> <pre>\nInput:\ngeneratorFunction = function*() { \n\u00a0 let result = 0; \n\u00a0 yield new Promise(res =&gt; setTimeout(res, 100));\n\u00a0 result += yield new Promise(res =&gt; res(1)); \n\u00a0 yield new Promise(res =&gt; setTimeout(res, 100)); \n\u00a0 result += yield new Promise(res =&gt; res(1)); \n\u00a0 return result;\n}\ncancelledAt = null\nOutput: {\"resolved\": 2}\nExplanation:\n4 promises are yielded. Two of those promises have their values added to the result. After 200ms, the generator finishes with a value of 2, and that value is resolved by the returned promise.\n</pre> <p>Example 5:</p> <pre>\nInput: \ngeneratorFunction = function*() { \n\u00a0 let result = 0; \n\u00a0 try { \n\u00a0   yield new Promise(res =&gt; setTimeout(res, 100)); \n\u00a0   result += yield new Promise(res =&gt; res(1)); \n\u00a0   yield new Promise(res =&gt; setTimeout(res, 100)); \n\u00a0   result += yield new Promise(res =&gt; res(1)); \n\u00a0 } catch(e) { \n\u00a0   return result; \n\u00a0 } \n\u00a0 return result; \n}\ncancelledAt = 150\nOutput: {\"resolved\": 1}\nExplanation:\nThe first two yielded promises resolve and cause the result to increment. However, at t=150ms, the generator is cancelled. The error sent to the generator is caught and the result is returned and finally resolved by the returned promise.\n</pre> <p>Example 6:</p> <pre>\nInput: \ngeneratorFunction = function*() { \n\u00a0 try { \n\u00a0   yield new Promise((resolve, reject) =&gt; reject(\"Promise Rejected\")); \n\u00a0 } catch(e) { \n\u00a0   let a = yield new Promise(resolve =&gt; resolve(2));\n    let b = yield new Promise(resolve =&gt; resolve(2)); \n\u00a0   return a + b; \n\u00a0 }; \n}\ncancelledAt = null\nOutput: {\"resolved\": 4}\nExplanation:\nThe first yielded promise immediately rejects. This error is caught. Because the generator hasn't been cancelled, execution continues as usual. It ends up resolving 2 + 2 = 4.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>cancelledAt == null or 0 &lt;= cancelledAt &lt;= 1000</code></li> <li><code>generatorFunction</code> returns a generator object</li> </ul>"},{"location":"LeetCode_Problems/2651/","title":"2651. Calculate Delayed Arrival Time","text":"Problem <p>You are given a positive integer <code>arrivalTime</code> denoting the arrival time of a train in hours, and another positive integer <code>delayedTime</code> denoting the amount of delay in hours.</p> <p>Return the time when the train will arrive at the station.</p> <p>Note that the time in this problem is in 24-hours format.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arrivalTime = 15, delayedTime = 5 \nOutput: 20 \nExplanation: Arrival time of the train was 15:00 hours. It is delayed by 5 hours. Now it will reach at 15+5 = 20 (20:00 hours).\n</pre> <p>Example 2:</p> <pre>\nInput: arrivalTime = 13, delayedTime = 11\nOutput: 0\nExplanation: Arrival time of the train was 13:00 hours. It is delayed by 11 hours. Now it will reach at 13+11=24 (Which is denoted by 00:00 in 24 hours format so return 0).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= arrivaltime &lt;\u00a024</code></li> <li><code>1 &lt;= delayedTime &lt;= 24</code></li> </ul>"},{"location":"LeetCode_Problems/2652/","title":"2652. Sum Multiples","text":"Problem <p>Given a positive integer <code>n</code>, find the sum of all integers in the range <code>[1, n]</code> inclusive that are divisible by <code>3</code>, <code>5</code>, or <code>7</code>.</p> <p>Return an integer denoting the sum of all numbers in the given range satisfying\u00a0the constraint.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 7\nOutput: 21\nExplanation: Numbers in the range <code>[1, 7]</code> that are divisible by <code>3</code>, <code>5,</code> or <code>7 </code>are <code>3, 5, 6, 7</code>. The sum of these numbers is <code>21</code>.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 10\nOutput: 40\nExplanation: Numbers in the range <code>[1, 10] that are</code> divisible by <code>3</code>, <code>5,</code> or <code>7</code> are <code>3, 5, 6, 7, 9, 10</code>. The sum of these numbers is 40.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 9\nOutput: 30\nExplanation: Numbers in the range <code>[1, 9]</code> that are divisible by <code>3</code>, <code>5</code>, or <code>7</code> are <code>3, 5, 6, 7, 9</code>. The sum of these numbers is <code>30</code>.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>3</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2653/","title":"2653. Sliding Subarray Beauty","text":"Problem <p>Given an integer array <code>nums</code> containing <code>n</code> integers, find the beauty of each subarray of size <code>k</code>.</p> <p>The beauty of a subarray is the <code>x<sup>th</sup></code> smallest integer in the subarray if it is negative, or <code>0</code> if there are fewer than <code>x</code> negative integers.</p> <p>Return an integer array containing <code>n - k + 1</code> integers, which denote the beauty of the subarrays in order from the first index in the array.</p> <ul> <li> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> </li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,-1,-3,-2,3], k = 3, x = 2\nOutput: [-1,-2,-2]\nExplanation: There are 3 subarrays with size k = 3. \nThe first subarray is <code>[1, -1, -3]</code> and the 2<sup>nd</sup> smallest negative integer is -1.\u00a0\nThe second subarray is <code>[-1, -3, -2]</code> and the 2<sup>nd</sup> smallest negative integer is -2.\u00a0\nThe third subarray is <code>[-3, -2, 3]\u00a0</code>and the 2<sup>nd</sup> smallest negative integer is -2.</pre> <p>Example 2:</p> <pre>\nInput: nums = [-1,-2,-3,-4,-5], k = 2, x = 2\nOutput: [-1,-2,-3,-4]\nExplanation: There are 4 subarrays with size k = 2.\nFor <code>[-1, -2]</code>, the 2<sup>nd</sup> smallest negative integer is -1.\nFor <code>[-2, -3]</code>, the 2<sup>nd</sup> smallest negative integer is -2.\nFor <code>[-3, -4]</code>, the 2<sup>nd</sup> smallest negative integer is -3.\nFor <code>[-4, -5]</code>, the 2<sup>nd</sup> smallest negative integer is -4.\u00a0</pre> <p>Example 3:</p> <pre>\nInput: nums = [-3,1,2,-3,0,-3], k = 2, x = 1\nOutput: [-3,0,-3,-3,-3]\nExplanation: There are 5 subarrays with size k = 2.\nFor <code>[-3, 1]</code>, the 1<sup>st</sup> smallest negative integer is -3.\nFor <code>[1, 2]</code>, there is no negative integer so the beauty is 0.\nFor <code>[2, -3]</code>, the 1<sup>st</sup> smallest negative integer is -3.\nFor <code>[-3, 0]</code>, the 1<sup>st</sup> smallest negative integer is -3.\nFor <code>[0, -3]</code>, the 1<sup>st</sup> smallest negative integer is -3.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == nums.length\u00a0</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= n</code></li> <li><code>1 &lt;= x &lt;= k\u00a0</code></li> <li><code>-50\u00a0&lt;= nums[i] &lt;= 50\u00a0</code></li> </ul>"},{"location":"LeetCode_Problems/2654/","title":"2654. Minimum Number of Operations to Make All Array Elements Equal to 1","text":"Problem <p>You are given a 0-indexed\u00a0array <code>nums</code> consisiting of positive integers. You can do the following operation on the array any number of times:</p> <ul> <li>Select an index <code>i</code> such that <code>0 &lt;= i &lt; n - 1</code> and replace either of\u00a0<code>nums[i]</code> or <code>nums[i+1]</code> with their gcd value.</li> </ul> <p>Return the minimum number of operations to make all elements of <code>nums</code> equal to <code>1</code>. If it is impossible, return <code>-1</code>.</p> <p>The gcd of two integers is the greatest common divisor of the two integers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,6,3,4]\nOutput: 4\nExplanation: We can do the following operations:\n- Choose index i = 2 and replace nums[2] with gcd(3,4) = 1. Now we have nums = [2,6,1,4].\n- Choose index i = 1 and replace nums[1] with gcd(6,1) = 1. Now we have nums = [2,1,1,4].\n- Choose index i = 0 and replace nums[0] with gcd(2,1) = 1. Now we have nums = [1,1,1,4].\n- Choose index i = 2 and replace nums[3] with gcd(1,4) = 1. Now we have nums = [1,1,1,1].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,10,6,14]\nOutput: -1\nExplanation: It can be shown that it is impossible to make all the elements equal to 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 50</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul> <p> </p> <p>Follow-up:</p> <p>The <code>O(n)</code> time complexity\u00a0solution works, but could you find an <code>O(1)</code> constant time complexity solution?</p>"},{"location":"LeetCode_Problems/2655/","title":"2655. Find Maximal Uncovered Ranges","text":"Problem"},{"location":"LeetCode_Problems/2656/","title":"2656. Maximum Sum With Exactly K Elements","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and an integer <code>k</code>. Your task is to perform the following operation exactly <code>k</code> times in order to maximize your score:</p> <ol> <li>Select an element <code>m</code> from <code>nums</code>.</li> <li>Remove the selected element <code>m</code> from the array.</li> <li>Add a new element with a value of <code>m + 1</code> to the array.</li> <li>Increase your score by <code>m</code>.</li> </ol> <p>Return the maximum score you can achieve after performing the operation exactly <code>k</code> times.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4,5], k = 3\nOutput: 18\nExplanation: We need to choose exactly 3 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7]\nFor the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8]\nSo, we will return 18.\nIt can be proven, that 18 is the maximum answer that we can achieve.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,5,5], k = 2\nOutput: 11\nExplanation: We need to choose exactly 2 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7]\nSo, we will return 11.\nIt can be proven, that 11 is the maximum answer that we can achieve.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= 100</code></li> </ul> <p> </p>"},{"location":"LeetCode_Problems/2657/","title":"2657. Find the Prefix Common Array of Two Arrays","text":"Problem <p>You are given two 0-indexed integer permutations <code>A</code> and <code>B</code> of length <code>n</code>.</p> <p>A prefix common array of <code>A</code> and <code>B</code> is an array <code>C</code> such that <code>C[i]</code> is equal to the count of numbers that are present at or before the index <code>i</code> in both <code>A</code> and <code>B</code>.</p> <p>Return the prefix common array of <code>A</code> and <code>B</code>.</p> <p>A sequence of <code>n</code> integers is called a\u00a0permutation if it contains all integers from <code>1</code> to <code>n</code> exactly once.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: A = [1,3,2,4], B = [3,1,2,4]\nOutput: [0,2,3,4]\nExplanation: At i = 0: no number is common, so C[0] = 0.\nAt i = 1: 1 and 3 are common in A and B, so C[1] = 2.\nAt i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.\nAt i = 3: 1, 2, 3, and 4 are common in A and B, so C[3] = 4.\n</pre> <p>Example 2:</p> <pre>\nInput: A = [2,3,1], B = [3,1,2]\nOutput: [0,1,3]\nExplanation: At i = 0: no number is common, so C[0] = 0.\nAt i = 1: only 3 is common in A and B, so C[1] = 1.\nAt i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= A.length == B.length == n &lt;= 50</code></li> <li><code>1 &lt;= A[i], B[i] &lt;= n</code></li> <li><code>It is guaranteed that A and B are both a permutation of n integers.</code></li> </ul>"},{"location":"LeetCode_Problems/2658/","title":"2658. Maximum Number of Fish in a Grid","text":"Problem <p>You are given a 0-indexed 2D matrix <code>grid</code> of size <code>m x n</code>, where <code>(r, c)</code> represents:</p> <ul> <li>A land cell if <code>grid[r][c] = 0</code>, or</li> <li>A water cell containing <code>grid[r][c]</code> fish, if <code>grid[r][c] &gt; 0</code>.</li> </ul> <p>A fisher can start at any water cell <code>(r, c)</code> and can do the following operations any number of times:</p> <ul> <li>Catch all the fish at cell <code>(r, c)</code>, or</li> <li>Move to any adjacent water cell.</li> </ul> <p>Return the maximum number of fish the fisher can catch if he chooses his starting cell optimally, or <code>0</code> if no water cell exists.</p> <p>An adjacent cell of the cell <code>(r, c)</code>, is one of the cells <code>(r, c + 1)</code>, <code>(r, c - 1)</code>, <code>(r + 1, c)</code> or <code>(r - 1, c)</code> if it exists.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]]\nOutput: 7\nExplanation: The fisher can start at cell <code>(1,3)</code> and collect 3 fish, then move to cell <code>(2,3)</code>\u00a0and collect 4 fish.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]]\nOutput: 1\nExplanation: The fisher can start at cells (0,0) or (3,3) and collect a single fish. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n &lt;= 10</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/2659/","title":"2659. Make Array Empty","text":"Problem <p>You are given an integer array <code>nums</code> containing distinct numbers, and you can perform the following operations until the array is empty:</p> <ul> <li>If the first element has the smallest value, remove it</li> <li>Otherwise, put the first element at the end of the array.</li> </ul> <p>Return an integer denoting the number of operations it takes to make <code>nums</code> empty.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,4,-1]\nOutput: 5\n</pre> Operation Array 1 [4, -1, 3] 2 [-1, 3, 4] 3 [3, 4] 4 [4] 5 [] <p>Example 2:</p> <pre>\nInput: nums = [1,2,4,3]\nOutput: 5\n</pre> Operation Array 1 [2, 4, 3] 2 [4, 3] 3 [3, 4] 4 [4] 5 [] <p>Example 3:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 3\n</pre> Operation Array 1 [2, 3] 2 [3] 3 [] <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>9\u00a0</sup>&lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li>All values in <code>nums</code> are distinct.</li> </ul>"},{"location":"LeetCode_Problems/2660/","title":"2660. Determine the Winner of a Bowling Game","text":"Problem <p>You are given two 0-indexed integer arrays <code>player1</code> and <code>player2</code>, that represent the number of pins that player 1 and player 2 hit in a bowling game, respectively.</p> <p>The bowling game consists of <code>n</code> turns, and the number of pins in each turn is exactly <code>10</code>.</p> <p>Assume a player hit <code>x<sub>i</sub></code> pins in the <code>i<sup>th</sup></code> turn. The value of the <code>i<sup>th</sup></code> turn for the player is:</p> <ul> <li><code>2x<sub>i</sub></code> if the player hit <code>10</code> pins in any of the previous two turns.</li> <li>Otherwise, It is <code>x<sub>i</sub></code>.</li> </ul> <p>The score of the player is the sum of the values of their <code>n</code> turns.</p> <p>Return</p> <ul> <li><code>1</code> if the score of player 1 is more than the score of player 2,</li> <li><code>2</code> if the score of player 2 is more than the score of player 1, and</li> <li><code>0</code> in case of a draw.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: player1 = [4,10,7,9], player2 = [6,5,2,3]\nOutput: 1\nExplanation: The score of player1 is 4 + 10 + 2*7 + 2*9 = 46.\nThe score of player2 is 6 + 5 + 2 + 3 = 16.\nScore of player1 is more than the score of player2, so, player1 is the winner, and the answer is 1.\n</pre> <p>Example 2:</p> <pre>\nInput: player1 = [3,5,7,6], player2 = [8,10,10,2]\nOutput: 2\nExplanation: The score of player1 is 3 + 5 + 7 + 6 = 21.\nThe score of player2 is 8 + 10 + 2*10 + 2*2 = 42.\nScore of player2 is more than the score of player1, so, player2 is the winner, and the answer is 2.\n</pre> <p>Example 3:</p> <pre>\nInput: player1 = [2,3], player2 = [4,1]\nOutput: 0\nExplanation: The score of player1 is 2 + 3 = 5\nThe score of player2 is 4 + 1 = 5\nThe score of player1 equals to the score of player2, so, there is a draw, and the answer is 0.\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == player1.length == player2.length</code></li> <li><code>1 &lt;= n &lt;= 1000</code></li> <li><code>0 &lt;= player1[i], player2[i] &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/2661/","title":"2661. First Completely Painted Row or Column","text":"Problem <p>You are given a 0-indexed integer array <code>arr</code>, and an <code>m x n</code> integer matrix <code>mat</code>. <code>arr</code> and <code>mat</code> both contain all the integers in the range <code>[1, m * n]</code>.</p> <p>Go through each index <code>i</code> in <code>arr</code> starting from index <code>0</code> and paint the cell in <code>mat</code> containing the integer <code>arr[i]</code>.</p> <p>Return the smallest index <code>i</code> at which either a row or a column will be completely painted in <code>mat</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: arr = [1,3,4,2], mat = [[1,4],[2,3]]\nOutput: 2\nExplanation: The moves are shown in order, and both the first row and second column of the matrix become fully painted at arr[2].\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: arr = [2,8,7,4,1,3,5,6,9], mat = [[3,2,5],[1,4,6],[8,7,9]]\nOutput: 3\nExplanation: The second column becomes fully painted at arr[3].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length</code></li> <li><code>n = mat[i].length</code></li> <li><code>arr.length == m * n</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= arr[i], mat[r][c] &lt;= m * n</code></li> <li>All the integers of <code>arr</code> are unique.</li> <li>All the integers of <code>mat</code> are unique.</li> </ul>"},{"location":"LeetCode_Problems/2662/","title":"2662. Minimum Cost of a Path With Special Roads","text":"Problem <p>You are given an array <code>start</code> where <code>start = [startX, startY]</code> represents your initial position <code>(startX, startY)</code> in a 2D space. You are also given the array <code>target</code> where <code>target = [targetX, targetY]</code> represents your target position <code>(targetX, targetY)</code>.</p> <p>The cost of going from a position <code>(x1, y1)</code> to any other position in the space <code>(x2, y2)</code> is <code>|x2 - x1| + |y2 - y1|</code>.</p> <p>There are also some special roads. You are given a 2D array <code>specialRoads</code> where <code>specialRoads[i] = [x1<sub>i</sub>, y1<sub>i</sub>, x2<sub>i</sub>, y2<sub>i</sub>, cost<sub>i</sub>]</code> indicates that the <code>i<sup>th</sup></code> special road can take you from <code>(x1<sub>i</sub>, y1<sub>i</sub>)</code> to <code>(x2<sub>i</sub>, y2<sub>i</sub>)</code> with a cost equal to <code>cost<sub>i</sub></code>. You can use each special road any number of times.</p> <p>Return the minimum cost required to go from <code>(startX, startY)</code> to <code>(targetX, targetY)</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: start = [1,1], target = [4,5], specialRoads = [[1,2,3,3,2],[3,4,4,5,1]]\nOutput: 5\nExplanation: The optimal path from (1,1) to (4,5) is the following:\n- (1,1) -&gt; (1,2). This move has a cost of |1 - 1| + |2 - 1| = 1.\n- (1,2) -&gt; (3,3). This move uses the first special edge, the cost is 2.\n- (3,3) -&gt; (3,4). This move has a cost of |3 - 3| + |4 - 3| = 1.\n- (3,4) -&gt; (4,5). This move uses the second special edge, the cost is 1.\nSo the total cost is 1 + 2 + 1 + 1 = 5.\nIt can be shown that we cannot achieve a smaller total cost than 5.\n</pre> <p>Example 2:</p> <pre>\nInput: start = [3,2], target = [5,7], specialRoads = [[3,2,3,4,4],[3,3,5,5,5],[3,4,5,6,6]]\nOutput: 7\nExplanation: It is optimal to not use any special edges and go directly from the starting to the ending position with a cost |5 - 3| + |7 - 2| = 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>start.length == target.length == 2</code></li> <li><code>1 &lt;= startX &lt;= targetX &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= startY &lt;= targetY &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= specialRoads.length &lt;= 200</code></li> <li><code>specialRoads[i].length == 5</code></li> <li><code>startX &lt;= x1<sub>i</sub>, x2<sub>i</sub> &lt;= targetX</code></li> <li><code>startY &lt;= y1<sub>i</sub>, y2<sub>i</sub> &lt;= targetY</code></li> <li><code>1 &lt;= cost<sub>i</sub> &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2663/","title":"2663. Lexicographically Smallest Beautiful String","text":"Problem <p>A string is beautiful if:</p> <ul> <li>It consists of the first <code>k</code> letters of the English lowercase alphabet.</li> <li>It does not contain any substring of length <code>2</code> or more which is a palindrome.</li> </ul> <p>You are given a beautiful string <code>s</code> of length <code>n</code> and a positive integer <code>k</code>.</p> <p>Return the lexicographically smallest string of length <code>n</code>, which is larger than <code>s</code> and is beautiful. If there is no such string, return an empty string.</p> <p>A string <code>a</code> is lexicographically larger than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, <code>a</code> has a character strictly larger than the corresponding character in <code>b</code>.</p> <ul> <li>For example, <code>\"abcd\"</code> is lexicographically larger than <code>\"abcc\"</code> because the first position they differ is at the fourth character, and <code>d</code> is greater than <code>c</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcz\", k = 26\nOutput: \"abda\"\nExplanation: The string \"abda\" is beautiful and lexicographically larger than the string \"abcz\".\nIt can be proven that there is no string that is lexicographically larger than the string \"abcz\", beautiful, and lexicographically smaller than the string \"abda\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"dc\", k = 4\nOutput: \"\"\nExplanation: It can be proven that there is no string that is lexicographically larger than the string \"dc\" and is beautiful.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == s.length &lt;= 10<sup>5</sup></code></li> <li><code>4 &lt;= k &lt;= 26</code></li> <li><code>s</code> is a beautiful string.</li> </ul>"},{"location":"LeetCode_Problems/2664/","title":"2664. The Knight\u2019s Tour","text":"Problem"},{"location":"LeetCode_Problems/2665/","title":"2665. Counter II","text":"Problem <p>Write a function\u00a0<code>createCounter</code>. It should accept an initial integer\u00a0<code>init</code>. It should return an object with three functions.</p> <p>The three functions are:</p> <ul> <li><code>increment()</code>\u00a0increases\u00a0the current value by 1 and then returns it.</li> <li><code>decrement()</code>\u00a0reduces the current value by 1 and then returns it.</li> <li><code>reset()</code>\u00a0sets the current value to\u00a0<code>init</code>\u00a0and then returns it.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: init = 5, calls = [\"increment\",\"reset\",\"decrement\"]\nOutput: [6,5,4]\nExplanation:\nconst counter = createCounter(5);\ncounter.increment(); // 6\ncounter.reset(); // 5\ncounter.decrement(); // 4\n</pre> <p>Example 2:</p> <pre>\nInput: init = 0, calls = [\"increment\",\"increment\",\"decrement\",\"reset\",\"reset\"]\nOutput: [1,2,1,0,0]\nExplanation:\nconst counter = createCounter(0);\ncounter.increment(); // 1\ncounter.increment(); // 2\ncounter.decrement(); // 1\ncounter.reset(); // 0\ncounter.reset(); // 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>-1000 &lt;= init &lt;= 1000</code></li> <li><code>0 &lt;= calls.length &lt;= 1000</code></li> <li><code>calls[i]</code> is one of \"increment\", \"decrement\" and\u00a0\"reset\"</li> </ul>"},{"location":"LeetCode_Problems/2666/","title":"2666. Allow One Function Call","text":"Problem <p>Given a function <code>fn</code>, return a new function that is identical to the original function except that it ensures\u00a0<code>fn</code>\u00a0is\u00a0called at most once.</p> <ul> <li>The first time the returned function is called, it should return the same result as\u00a0<code>fn</code>.</li> <li>Every subsequent time it is called, it should return\u00a0<code>undefined</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: fn = (a,b,c) =&gt; (a + b + c), calls = [[1,2,3],[2,3,6]]\nOutput: [{\"calls\":1,\"value\":6}]\nExplanation:\nconst onceFn = once(fn);\nonceFn(1, 2, 3); // 6\nonceFn(2, 3, 6); // undefined, fn was not called\n</pre> <p>Example 2:</p> <pre>\nInput: fn = (a,b,c) =&gt; (a * b * c), calls = [[5,7,4],[2,3,6],[4,6,8]]\nOutput: [{\"calls\":1,\"value\":140}]\nExplanation:\nconst onceFn = once(fn);\nonceFn(5, 7, 4); // 140\nonceFn(2, 3, 6); // undefined, fn was not called\nonceFn(4, 6, 8); // undefined, fn was not called\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>calls</code> is a valid JSON array</li> <li><code>1 &lt;= calls.length &lt;= 10</code></li> <li><code>1 &lt;= calls[i].length &lt;= 100</code></li> <li><code>2 &lt;= JSON.stringify(calls).length &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2667/","title":"2667. Create Hello World Function","text":"Problem <p>Write a function\u00a0<code>createHelloWorld</code>.\u00a0It should return a new function that always returns\u00a0<code>\"Hello World\"</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: args = []\nOutput: \"Hello World\"\nExplanation:\nconst f = createHelloWorld();\nf(); // \"Hello World\"\n\nThe function returned by createHelloWorld should always return \"Hello World\".\n</pre> <p>Example 2:</p> <pre>\nInput: args = [{},null,42]\nOutput: \"Hello World\"\nExplanation:\nconst f = createHelloWorld();\nf({}, null, 42); // \"Hello World\"\n\nAny arguments could be passed to the function but it should still always return \"Hello World\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= args.length &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/2668/","title":"2668. Find Latest Salaries","text":"Problem"},{"location":"LeetCode_Problems/2669/","title":"2669. Count Artist Occurrences On Spotify Ranking List","text":"Problem"},{"location":"LeetCode_Problems/2670/","title":"2670. Find the Distinct Difference Array","text":"Problem <p>You are given a 0-indexed array <code>nums</code> of length <code>n</code>.</p> <p>The distinct difference array of <code>nums</code> is an array <code>diff</code> of length <code>n</code> such that <code>diff[i]</code> is equal to the number of distinct elements in the suffix <code>nums[i + 1, ..., n - 1]</code> subtracted from the number of distinct elements in the prefix <code>nums[0, ..., i]</code>.</p> <p>Return the distinct difference array of <code>nums</code>.</p> <p>Note that <code>nums[i, ..., j]</code> denotes the subarray of <code>nums</code> starting at index <code>i</code> and ending at index <code>j</code> inclusive. Particularly, if <code>i &gt; j</code> then <code>nums[i, ..., j]</code> denotes an empty subarray.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4,5]\nOutput: [-3,-1,1,3,5]\nExplanation: For index i = 0, there is 1 element in the prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 = -3.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 3 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1.\nFor index i = 3, there are 4 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3.\nFor index i = 4, there are 5 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 5 - 0 = 5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,2,3,4,2]\nOutput: [-2,-1,0,2,3]\nExplanation: For index i = 0, there is 1 element in the prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 = -2.\nFor index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1.\nFor index i = 2, there are 2 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0.\nFor index i = 3, there are 3 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2.\nFor index i = 4, there are 3 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 3 - 0 = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == nums.length\u00a0&lt;= 50</code></li> <li><code>1 &lt;= nums[i] &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2671/","title":"2671. Frequency Tracker","text":"Problem <p>Design a data structure that keeps track of the values in it and answers some queries regarding their frequencies.</p> <p>Implement the <code>FrequencyTracker</code> class.</p> <ul> <li><code>FrequencyTracker()</code>: Initializes the <code>FrequencyTracker</code> object with an empty array initially.</li> <li><code>void add(int number)</code>: Adds <code>number</code> to the data structure.</li> <li><code>void deleteOne(int number)</code>: Deletes one occurrence of <code>number</code> from the data structure. The data structure may not contain <code>number</code>, and in this case nothing is deleted.</li> <li><code>bool hasFrequency(int frequency)</code>: Returns <code>true</code> if there is a number in the data structure that occurs <code>frequency</code> number of times, otherwise, it returns <code>false</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput\n[\"FrequencyTracker\", \"add\", \"add\", \"hasFrequency\"]\n[[], [3], [3], [2]]\nOutput\n[null, null, null, true]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.add(3); // The data structure now contains [3, 3]\nfrequencyTracker.hasFrequency(2); // Returns true, because 3 occurs twice\n\n</pre> <p>Example 2:</p> <pre>\nInput\n[\"FrequencyTracker\", \"add\", \"deleteOne\", \"hasFrequency\"]\n[[], [1], [1], [1]]\nOutput\n[null, null, null, false]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(1); // The data structure now contains [1]\nfrequencyTracker.deleteOne(1); // The data structure becomes empty []\nfrequencyTracker.hasFrequency(1); // Returns false, because the data structure is empty\n\n</pre> <p>Example 3:</p> <pre>\nInput\n[\"FrequencyTracker\", \"hasFrequency\", \"add\", \"hasFrequency\"]\n[[], [2], [3], [1]]\nOutput\n[null, false, null, true]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.hasFrequency(2); // Returns false, because the data structure is empty\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.hasFrequency(1); // Returns true, because 3 occurs once\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= number &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= frequency &lt;= 10<sup>5</sup></code></li> <li>At most, <code>2 *\u00a010<sup>5</sup></code>\u00a0calls will be made to <code>add</code>, <code>deleteOne</code>, and <code>hasFrequency</code>\u00a0in total.</li> </ul>"},{"location":"LeetCode_Problems/2672/","title":"2672. Number of Adjacent Elements With the Same Color","text":"Problem <p>There is a 0-indexed array <code>nums</code> of length <code>n</code>. Initially, all elements are uncolored (has a value of <code>0</code>).</p> <p>You are given a 2D integer array <code>queries</code> where <code>queries[i] = [index<sub>i</sub>, color<sub>i</sub>]</code>.</p> <p>For each query, you color the index <code>index<sub>i</sub></code> with the color <code>color<sub>i</sub></code> in the array <code>nums</code>.</p> <p>Return an array <code>answer</code> of the same length as <code>queries</code> where <code>answer[i]</code> is the number of adjacent elements with the same color after the <code>i<sup>th</sup></code> query.</p> <p>More formally, <code>answer[i]</code> is the number of indices <code>j</code>, such that <code>0 &lt;= j &lt; n - 1</code> and <code>nums[j] == nums[j + 1]</code> and <code>nums[j] != 0</code> after the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]]\nOutput: [0,1,1,0,2]\nExplanation: Initially array nums = [0,0,0,0], where 0 denotes uncolored elements of the array.\n- After the 1<sup>st</sup> query nums = [2,0,0,0]. The count of adjacent elements with the same color is 0.\n- After the 2<sup>nd</sup> query nums = [2,2,0,0]. The count of adjacent elements with the same color is 1.\n- After the 3<sup>rd</sup>\u00a0query nums = [2,2,0,1]. The count of adjacent elements with the same color is 1.\n- After the 4<sup>th</sup>\u00a0query nums = [2,1,0,1]. The count of adjacent elements with the same color is 0.\n- After the 5<sup>th</sup>\u00a0query nums = [2,1,1,1]. The count of adjacent elements with the same color is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 1, queries = [[0,100000]]\nOutput: [0]\nExplanation: Initially array nums = [0], where 0 denotes uncolored elements of the array.\n- After the 1<sup>st</sup> query nums = [100000]. The count of adjacent elements with the same color is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> <li><code>queries[i].length\u00a0== 2</code></li> <li><code>0 &lt;= index<sub>i</sub>\u00a0&lt;= n - 1</code></li> <li><code>1 &lt;=\u00a0 color<sub>i</sub>\u00a0&lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2673/","title":"2673. Make Costs of Paths Equal in a Binary Tree","text":"Problem <p>You are given an integer <code>n</code> representing the number of nodes in a perfect binary tree consisting of nodes numbered from <code>1</code> to <code>n</code>. The root of the tree is node <code>1</code> and each node <code>i</code> in the tree has two children where the left child is the node <code>2 * i</code> and the right child is <code>2 * i + 1</code>.</p> <p>Each node in the tree also has a cost represented by a given 0-indexed integer array <code>cost</code> of size <code>n</code> where <code>cost[i]</code> is the cost of node <code>i + 1</code>. You are allowed to increment the cost of any node by <code>1</code> any number of times.</p> <p>Return the minimum number of increments you need to make the cost of paths from the root to each leaf node equal.</p> <p>Note:</p> <ul> <li>A perfect binary tree is a tree where each node, except the leaf nodes, has exactly 2 children.</li> <li>The cost of a path is the sum of costs of nodes in the path.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 7, cost = [1,5,2,2,3,3,1]\nOutput: 6\nExplanation: We can do the following increments:\n- Increase the cost of node 4 one time.\n- Increase the cost of node 3 three times.\n- Increase the cost of node 7 two times.\nEach path from the root to a leaf will have a total cost of 9.\nThe total increments we did is 1 + 3 + 2 = 6.\nIt can be shown that this is the minimum answer we can achieve.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 3, cost = [5,3,3]\nOutput: 0\nExplanation: The two paths already have equal total costs, so no increments are needed.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>n + 1</code> is a power of <code>2</code></li> <li><code>cost.length == n</code></li> <li><code>1 &lt;= cost[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2674/","title":"2674. Split a Circular Linked List","text":"Problem"},{"location":"LeetCode_Problems/2675/","title":"2675. Array of Objects to Matrix","text":"Problem"},{"location":"LeetCode_Problems/2676/","title":"2676. Throttle","text":"Problem"},{"location":"LeetCode_Problems/2677/","title":"2677. Chunk Array","text":"Problem <p>Given an array <code>arr</code> and\u00a0a chunk size\u00a0<code>size</code>, return a\u00a0chunked array. A\u00a0chunked\u00a0array contains the original elements in\u00a0<code>arr</code>, but\u00a0consists of subarrays each of length\u00a0<code>size</code>. The length of the last subarray may be less than\u00a0<code>size</code>\u00a0if <code>arr.length</code>\u00a0is not evenly divisible by <code>size</code>.</p> <p>You may assume the\u00a0array\u00a0is\u00a0the output of\u00a0<code>JSON.parse</code>. In other words, it is valid JSON.</p> <p>Please solve it without using lodash's\u00a0<code>_.chunk</code>\u00a0function.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [1,2,3,4,5], size = 1\nOutput: [[1],[2],[3],[4],[5]]\nExplanation: The arr has been split into subarrays each with 1 element.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [1,9,6,3,2], size = 3\nOutput: [[1,9,6],[3,2]]\nExplanation: The arr has been split into subarrays with 3 elements. However, only two elements are left for the 2nd subarray.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [8,5,3,2,6], size = 6\nOutput: [[8,5,3,2,6]]\nExplanation: Size is greater than arr.length thus all elements are in the first subarray.\n</pre> <p>Example 4:</p> <pre>\nInput: arr = [], size = 1\nOutput: []\nExplanation: There are no elements to be chunked so an empty array is returned.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>arr</code> is a valid JSON array</li> <li><code>2 &lt;= JSON.stringify(arr).length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= size &lt;= arr.length + 1</code></li> </ul>"},{"location":"LeetCode_Problems/2678/","title":"2678. Number of Senior Citizens","text":"Problem <p>You are given a 0-indexed array of strings <code>details</code>. Each element of <code>details</code> provides information about a given passenger compressed into a string of length <code>15</code>. The system is such that:</p> <ul> <li>The first ten characters consist of the phone number of passengers.</li> <li>The next character denotes the gender of the person.</li> <li>The following two characters are used to indicate the age of the person.</li> <li>The last two characters determine the seat allotted to that person.</li> </ul> <p>Return the number of passengers who are strictly more than 60 years old.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: details = [\"7868190130M7522\",\"5303914400F9211\",\"9273338290F4010\"]\nOutput: 2\nExplanation: The passengers at indices 0, 1, and 2 have ages 75, 92, and 40. Thus, there are 2 people who are over 60 years old.\n</pre> <p>Example 2:</p> <pre>\nInput: details = [\"1313579440F2036\",\"2921522980M5644\"]\nOutput: 0\nExplanation: None of the passengers are older than 60.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= details.length &lt;= 100</code></li> <li><code>details[i].length == 15</code></li> <li><code>details[i] consists of digits from '0' to '9'.</code></li> <li><code>details[i][10] is either 'M' or 'F' or 'O'.</code></li> <li>The phone numbers and seat numbers of the passengers are distinct.</li> </ul>"},{"location":"LeetCode_Problems/2679/","title":"2679. Sum in a Matrix","text":"Problem <p>You are given a 0-indexed 2D integer array <code>nums</code>. Initially, your score is <code>0</code>. Perform the following operations until the matrix becomes empty:</p> <ol> <li>From each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen.</li> <li>Identify the highest number amongst all those removed in step 1. Add that number to your score.</li> </ol> <p>Return the final score.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]]\nOutput: 15\nExplanation: In the first operation, we remove 7, 6, 6, and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our score. Thus, our final score is 7 + 5 + 3 = 15.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [[1]]\nOutput: 1\nExplanation: We remove 1 and add it to the answer. We return 1.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 300</code></li> <li><code>1 &lt;= nums[i].length &lt;= 500</code></li> <li><code>0 &lt;= nums[i][j] &lt;= 10<sup>3</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2680/","title":"2680. Maximum OR","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of length <code>n</code> and an integer <code>k</code>. In an operation, you can choose an element and multiply it by <code>2</code>.</p> <p>Return the maximum possible value of <code>nums[0] | nums[1] | ... | nums[n - 1]</code> that can be obtained after applying the operation on nums at most <code>k</code> times.</p> <p>Note that <code>a | b</code> denotes the bitwise or between two integers <code>a</code> and <code>b</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [12,9], k = 1\nOutput: 30\nExplanation: If we apply the operation to index 1, our new array nums will be equal to [12,18]. Thus, we return the bitwise or of 12 and 18, which is 30.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [8,1,2], k = 2\nOutput: 35\nExplanation: If we apply the operation twice on index 0, we yield a new array of [32,1,2]. Thus, we return 32|1|2 = 35.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= 15</code></li> </ul>"},{"location":"LeetCode_Problems/2681/","title":"2681. Power of Heroes","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> representing the strength of some heroes. The power of a group of heroes is defined as follows:</p> <ul> <li>Let <code>i<sub>0</sub></code>, <code>i<sub>1</sub></code>, ... ,<code>i<sub>k</sub></code> be the indices of the heroes in a group. Then, the power of this group is <code>max(nums[i<sub>0</sub>], nums[i<sub>1</sub>], ... ,nums[i<sub>k</sub>])<sup>2</sup> * min(nums[i<sub>0</sub>], nums[i<sub>1</sub>], ... ,nums[i<sub>k</sub>])</code>.</li> </ul> <p>Return the sum of the power of all non-empty groups of heroes possible. Since the sum could be very large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,4]\nOutput: 141\nExplanation: \n1<sup>st</sup>\u00a0group: [2] has power = 2<sup>2</sup>\u00a0* 2 = 8.\n2<sup>nd</sup>\u00a0group: [1] has power = 1<sup>2</sup> * 1 = 1. \n3<sup>rd</sup>\u00a0group: [4] has power = 4<sup>2</sup> * 4 = 64. \n4<sup>th</sup>\u00a0group: [2,1] has power = 2<sup>2</sup> * 1 = 4. \n5<sup>th</sup>\u00a0group: [2,4] has power = 4<sup>2</sup> * 2 = 32. \n6<sup>th</sup>\u00a0group: [1,4] has power = 4<sup>2</sup> * 1 = 16. \n\u200b\u200b\u200b\u200b\u200b\u200b\u200b7<sup>th</sup>\u00a0group: [2,1,4] has power = 4<sup>2</sup>\u200b\u200b\u200b\u200b\u200b\u200b\u200b * 1 = 16. \nThe sum of powers of all groups is 8 + 1 + 64 + 4 + 32 + 16 + 16 = 141.\n\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1]\nOutput: 7\nExplanation: A total of 7 groups are possible, and the power of each group will be 1. Therefore, the sum of the powers of all groups is 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2682/","title":"2682. Find the Losers of the Circular Game","text":"Problem <p>There are <code>n</code> friends that are playing a game. The friends are sitting in a circle and are numbered from <code>1</code> to <code>n</code> in clockwise order. More formally, moving clockwise from the <code>i<sup>th</sup></code> friend brings you to the <code>(i+1)<sup>th</sup></code> friend for <code>1 &lt;= i &lt; n</code>, and moving clockwise from the <code>n<sup>th</sup></code> friend brings you to the <code>1<sup>st</sup></code> friend.</p> <p>The rules of the game are as follows:</p> <p><code>1<sup>st</sup></code> friend receives the ball.</p> <ul> <li>After that, <code>1<sup>st</sup></code> friend passes it to the friend who is <code>k</code> steps away from them in the clockwise direction.</li> <li>After that, the friend who receives the ball should pass it to the friend who is <code>2 * k</code> steps away from them in the clockwise direction.</li> <li>After that, the friend who receives the ball should pass it to the friend who is <code>3 * k</code> steps away from them in the clockwise direction, and so on and so forth.</li> </ul> <p>In other words, on the <code>i<sup>th</sup></code> turn, the friend holding the ball should pass it to the friend who is <code>i * k</code> steps away from them in the clockwise direction.</p> <p>The game is finished when some friend receives the ball for the second time.</p> <p>The losers of the game are friends who did not receive the ball in the entire game.</p> <p>Given the number of friends, <code>n</code>, and an integer <code>k</code>, return the array answer, which contains the losers of the game in the ascending order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5, k = 2\nOutput: [4,5]\nExplanation: The game goes as follows:\n1) Start at 1<sup>st</sup>\u00a0friend and pass the ball to the friend who is 2 steps away from them - 3<sup>rd</sup>\u00a0friend.\n2) 3<sup>rd</sup>\u00a0friend passes the ball to the friend who is 4 steps away from them - 2<sup>nd</sup>\u00a0friend.\n3) 2<sup>nd</sup>\u00a0friend passes the ball to the friend who is 6 steps away from them  - 3<sup>rd</sup>\u00a0friend.\n4) The game ends as 3<sup>rd</sup>\u00a0friend receives the ball for the second time.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4, k = 4\nOutput: [2,3,4]\nExplanation: The game goes as follows:\n1) Start at the 1<sup>st</sup>\u00a0friend and pass the ball to the friend who is 4 steps away from them - 1<sup>st</sup>\u00a0friend.\n2) The game ends as 1<sup>st</sup>\u00a0friend receives the ball for the second time.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= n &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2683/","title":"2683. Neighboring Bitwise XOR","text":"Problem <p>A 0-indexed array <code>derived</code> with length <code>n</code> is derived by computing the bitwise XOR\u00a0(\u2295) of adjacent values in a binary array <code>original</code> of length <code>n</code>.</p> <p>Specifically, for each index <code>i</code> in the range <code>[0, n - 1]</code>:</p> <ul> <li>If <code>i = n - 1</code>, then <code>derived[i] = original[i] \u2295 original[0]</code>.</li> <li>Otherwise, <code>derived[i] = original[i] \u2295 original[i + 1]</code>.</li> </ul> <p>Given an array <code>derived</code>, your task is to determine whether there exists a valid binary array <code>original</code> that could have formed <code>derived</code>.</p> <p>Return true if such an array exists or false otherwise.</p> <ul> <li>A binary array is an array containing only 0's and 1's</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: derived = [1,1,0]\nOutput: true\nExplanation: A valid original array that gives derived is [0,1,0].\nderived[0] = original[0] \u2295 original[1] = 0 \u2295 1 = 1 \nderived[1] = original[1] \u2295 original[2] = 1 \u2295 0 = 1\nderived[2] = original[2] \u2295 original[0] = 0 \u2295 0 = 0\n</pre> <p>Example 2:</p> <pre>\nInput: derived = [1,1]\nOutput: true\nExplanation: A valid original array that gives derived is [0,1].\nderived[0] = original[0] \u2295 original[1] = 1\nderived[1] = original[1] \u2295 original[0] = 1\n</pre> <p>Example 3:</p> <pre>\nInput: derived = [1,0]\nOutput: false\nExplanation: There is no valid original array that gives derived.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == derived.length</code></li> <li><code>1 &lt;= n\u00a0&lt;= 10<sup>5</sup></code></li> <li>The values in <code>derived</code>\u00a0are either 0's or 1's</li> </ul>"},{"location":"LeetCode_Problems/2684/","title":"2684. Maximum Number of Moves in a Grid","text":"Problem <p>You are given a 0-indexed <code>m x n</code> matrix <code>grid</code> consisting of positive integers.</p> <p>You can start at any cell in the first column of the matrix, and traverse the grid in the following way:</p> <ul> <li>From a cell <code>(row, col)</code>, you can move to any of the cells: <code>(row - 1, col + 1)</code>, <code>(row, col + 1)</code> and <code>(row + 1, col + 1)</code> such that the value of the cell you move to, should be strictly bigger than the value of the current cell.</li> </ul> <p>Return the maximum number of moves that you can perform.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[2,4,3,5],[5,4,9,3],[3,4,2,11],[10,9,13,15]]\nOutput: 3\nExplanation: We can start at the cell (0, 0) and make the following moves:\n- (0, 0) -&gt; (0, 1).\n- (0, 1) -&gt; (1, 2).\n- (1, 2) -&gt; (2, 3).\nIt can be shown that it is the maximum number of moves that can be made.</pre> <p>Example 2:</p> <pre>\n\nInput: grid = [[3,2,4],[2,1,9],[1,1,7]]\nOutput: 0\nExplanation: Starting from any cell in the first column we cannot perform any moves.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>2 &lt;= m, n &lt;= 1000</code></li> <li><code>4 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= grid[i][j] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2685/","title":"2685. Count the Number of Complete Components","text":"Problem <p>You are given an integer <code>n</code>. There is an undirected graph with <code>n</code> vertices, numbered from <code>0</code> to <code>n - 1</code>. You are given a 2D integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> denotes that there exists an undirected edge connecting vertices <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code>.</p> <p>Return the number of complete connected components of the graph.</p> <p>A connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.</p> <p>A connected component is said to be complete if there exists an edge between every pair of its vertices.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 6, edges = [[0,1],[0,2],[1,2],[3,4]]\nOutput: 3\nExplanation: From the picture above, one can see that all of the components of this graph are complete.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 6, edges = [[0,1],[0,2],[1,2],[3,4],[3,5]]\nOutput: 1\nExplanation: The component containing vertices 0, 1, and 2 is complete since there is an edge between every pair of two vertices. On the other hand, the component containing vertices 3, 4, and 5 is not complete since there is no edge between vertices 4 and 5. Thus, the number of complete components in this graph is 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 50</code></li> <li><code>0 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt;= n - 1</code></li> <li><code>a<sub>i</sub> != b<sub>i</sub></code></li> <li>There are no repeated edges.</li> </ul>"},{"location":"LeetCode_Problems/2686/","title":"2686. Immediate Food Delivery III","text":"Problem"},{"location":"LeetCode_Problems/2687/","title":"2687. Bikes Last Time Used","text":"Problem"},{"location":"LeetCode_Problems/2688/","title":"2688. Find Active Users","text":"Problem"},{"location":"LeetCode_Problems/2689/","title":"2689. Extract Kth Character From The Rope Tree","text":"Problem"},{"location":"LeetCode_Problems/2690/","title":"2690. Infinite Method Object","text":"Problem"},{"location":"LeetCode_Problems/2691/","title":"2691. Immutability Helper","text":"Problem"},{"location":"LeetCode_Problems/2692/","title":"2692. Make Object Immutable","text":"Problem"},{"location":"LeetCode_Problems/2693/","title":"2693. Call Function with Custom Context","text":"Problem <p>Enhance all functions to have the\u00a0<code>callPolyfill</code>\u00a0method. The method accepts an object\u00a0<code>obj</code>\u00a0as it's first parameter and any number of additional arguments. The\u00a0<code>obj</code>\u00a0becomes the\u00a0<code>this</code>\u00a0context for the function. The additional arguments are passed to the function (that the <code>callPolyfill</code>\u00a0method belongs on).</p> <p>For example if you had the function:</p> <pre>\nfunction tax(price, taxRate) {\n  const totalCost = price * (1 + taxRate);\n\u00a0 console.log(`The cost of ${this.item} is ${totalCost}`);\n}\n</pre> <p>Calling this function like\u00a0<code>tax(10, 0.1)</code>\u00a0will log\u00a0<code>\"The cost of undefined is 11\"</code>. This is because the\u00a0<code>this</code>\u00a0context was not defined.</p> <p>However, calling the function like\u00a0<code>tax.callPolyfill({item: \"salad\"}, 10, 0.1)</code>\u00a0will log\u00a0<code>\"The cost of salad is 11\"</code>. The\u00a0<code>this</code>\u00a0context was appropriately set, and the function logged an appropriate output.</p> <p>Please solve this without using\u00a0the built-in\u00a0<code>Function.call</code>\u00a0method.</p> <p> </p> <p>Example 1:</p> <pre>\nInput:\nfn = function add(b) {\n  return this.a + b;\n}\nargs = [{\"a\": 5}, 7]\nOutput: 12\nExplanation:\nfn.callPolyfill({\"a\": 5}, 7); // 12\ncallPolyfill sets the \"this\" context to {\"a\": 5}. 7 is passed as an argument.\n</pre> <p>Example 2:</p> <pre>\nInput: \nfn = function tax(price, taxRate) { \n\u00a0return `The cost of the ${this.item} is ${price * taxRate}`; \n}\nargs = [{\"item\": \"burger\"}, 10, 1.1]\nOutput: \"The cost of the burger is 11\"\nExplanation: callPolyfill sets the \"this\" context to {\"item\": \"burger\"}. 10 and 1.1 are passed as additional arguments.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>typeof args[0] == 'object' and args[0] != null</code></li> <li><code>1 &lt;= args.length &lt;= 100</code></li> <li><code>2 &lt;= JSON.stringify(args[0]).length &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2694/","title":"2694. Event Emitter","text":"Problem <p>Design an <code>EventEmitter</code> class. This interface\u00a0is similar (but with some differences) to the one found in Node.js or the Event Target interface of the DOM. The <code>EventEmitter</code> should allow for subscribing to events and emitting them.</p> <p>Your <code>EventEmitter</code> class should have the following two methods:</p> <ul> <li>subscribe - This method takes in two arguments: the name of an event as a string and a callback function. This callback function\u00a0will later be called when the event is emitted.     An event should be able to have multiple listeners for the same event. When emitting an event with multiple callbacks, each should be called in the order in which they were subscribed. An array of results should be returned. You can assume no callbacks passed to\u00a0<code>subscribe</code>\u00a0are referentially identical.     The <code>subscribe</code> method should also return an object with an <code>unsubscribe</code>\u00a0method that enables the user to unsubscribe. When it is called, the callback\u00a0should be removed from the list of subscriptions and\u00a0<code>undefined</code>\u00a0should be returned.</li> <li>emit - This method takes in two arguments: the name of an event as a string and an optional array of arguments that will be\u00a0passed to the callback(s). If there are no callbacks subscribed to the given event, return an empty array. Otherwise, return an array of the results of all callback calls in the order they were subscribed.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: \nactions = [\"EventEmitter\", \"emit\", \"subscribe\", \"subscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"function cb1() { return 5; }\"],  [\"firstEvent\", \"function cb1() { return 6; }\"], [\"firstEvent\"]]\nOutput: [[],[\"emitted\",[]],[\"subscribed\"],[\"subscribed\"],[\"emitted\",[5,6]]]\nExplanation: \nconst emitter = new EventEmitter();\nemitter.emit(\"firstEvent\"); // [], no callback are subscribed yet\nemitter.subscribe(\"firstEvent\", function cb1() { return 5; });\nemitter.subscribe(\"firstEvent\", function cb2() { return 6; });\nemitter.emit(\"firstEvent\"); // [5, 6], returns the output of cb1 and cb2\n</pre> <p>Example 2:</p> <pre>\nInput: \nactions = [\"EventEmitter\", \"subscribe\", \"emit\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"function cb1(...args) { return args.join(','); }\"], [\"firstEvent\", [1,2,3]], [\"firstEvent\", [3,4,6]]]\nOutput: [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"emitted\",[\"3,4,6\"]]]\nExplanation: Note that the emit method should be able to accept an OPTIONAL array of arguments.\n\nconst emitter = new EventEmitter();\nemitter.subscribe(\"firstEvent, function cb1(...args) { return args.join(','); });\nemitter.emit(\"firstEvent\", [1, 2, 3]); // [\"1,2,3\"]\nemitter.emit(\"firstEvent\", [3, 4, 6]); // [\"3,4,6\"]\n</pre> <p>Example 3:</p> <pre>\nInput: \nactions = [\"EventEmitter\", \"subscribe\", \"emit\", \"unsubscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"(...args) =&gt; args.join(',')\"], [\"firstEvent\", [1,2,3]], [0], [\"firstEvent\", [4,5,6]]]\nOutput: [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"unsubscribed\",0],[\"emitted\",[]]]\nExplanation:\nconst emitter = new EventEmitter();\nconst sub = emitter.subscribe(\"firstEvent\", (...args) =&gt; args.join(','));\nemitter.emit(\"firstEvent\", [1, 2, 3]); // [\"1,2,3\"]\nsub.unsubscribe(); // undefined\nemitter.emit(\"firstEvent\", [4, 5, 6]); // [], there are no subscriptions\n</pre> <p>Example 4:</p> <pre>\nInput: \nactions = [\"EventEmitter\", \"subscribe\", \"subscribe\", \"unsubscribe\", \"emit\"], \nvalues = [[], [\"firstEvent\", \"x =&gt; x + 1\"], [\"firstEvent\", \"x =&gt; x + 2\"], [0], [\"firstEvent\", [5]]]\nOutput: [[],[\"subscribed\"],[\"emitted\",[\"1,2,3\"]],[\"unsubscribed\",0],[\"emitted\",[7]]]\nExplanation:\nconst emitter = new EventEmitter();\nconst sub1 = emitter.subscribe(\"firstEvent\", x =&gt; x + 1);\nconst sub2 = emitter.subscribe(\"firstEvent\", x =&gt; x + 2);\nsub1.unsubscribe(); // undefined\nemitter.emit(\"firstEvent\", [5]); // [7]</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= actions.length &lt;= 10</code></li> <li><code>values.length === actions.length</code></li> <li>All test cases are valid, e.g. you don't need to handle scenarios when unsubscribing from a non-existing subscription.</li> <li>There are only 4 different actions: <code>EventEmitter</code>, <code>emit</code>, <code>subscribe</code>, and <code>unsubscribe</code>.</li> <li>The <code>EventEmitter</code> action doesn't take any arguments.</li> <li>The <code>emit</code>\u00a0action takes between either 1 or\u00a02\u00a0arguments. The first argument is the name of the event we want to emit, and the 2nd argument is passed to the callback functions.</li> <li>The <code>subscribe</code> action takes 2 arguments, where the first one is the event name and the second is the callback function.</li> <li>The <code>unsubscribe</code>\u00a0action takes one argument, which is the 0-indexed order of the subscription made before.</li> </ul>"},{"location":"LeetCode_Problems/2695/","title":"2695. Array Wrapper","text":"Problem <p>Create a class\u00a0<code>ArrayWrapper</code> that accepts\u00a0an array of integers in its constructor. This class should have two features:</p> <ul> <li>When two instances of this class are added together with the\u00a0<code>+</code>\u00a0operator, the resulting value is the sum of all the elements in\u00a0both arrays.</li> <li>When the\u00a0<code>String()</code>\u00a0function is called on the instance, it will return a comma separated string surrounded by brackets. For example, <code>[1,2,3]</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [[1,2],[3,4]], operation = \"Add\"\nOutput: 10\nExplanation:\nconst obj1 = new ArrayWrapper([1,2]);\nconst obj2 = new ArrayWrapper([3,4]);\nobj1 + obj2; // 10\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [[23,98,42,70]], operation = \"String\"\nOutput: \"[23,98,42,70]\"\nExplanation:\nconst obj = new ArrayWrapper([23,98,42,70]);\nString(obj); // \"[23,98,42,70]\"\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [[],[]], operation = \"Add\"\nOutput: 0\nExplanation:\nconst obj1 = new ArrayWrapper([]);\nconst obj2 = new ArrayWrapper([]);\nobj1 + obj2; // 0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= nums.length &lt;= 1000</code></li> <li><code>0 &lt;= nums[i]\u00a0&lt;= 1000</code></li> <li><code>Note: nums is the array passed to the constructor</code></li> </ul>"},{"location":"LeetCode_Problems/2696/","title":"2696. Minimum String Length After Removing Substrings","text":"Problem <p>You are given a string <code>s</code> consisting only of uppercase English letters.</p> <p>You can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings <code>\"AB\"</code> or <code>\"CD\"</code> from <code>s</code>.</p> <p>Return the minimum possible length of the resulting string that you can obtain.</p> <p>Note that the string concatenates after removing the substring and could produce new <code>\"AB\"</code> or <code>\"CD\"</code> substrings.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"ABFCACDB\"\nOutput: 2\nExplanation: We can do the following operations:\n- Remove the substring \"ABFCACDB\", so s = \"FCACDB\".\n- Remove the substring \"FCACDB\", so s = \"FCAB\".\n- Remove the substring \"FCAB\", so s = \"FC\".\nSo the resulting length of the string is 2.\nIt can be shown that it is the minimum length that we can obtain.</pre> <p>Example 2:</p> <pre>\nInput: s = \"ACBBD\"\nOutput: 5\nExplanation: We cannot do any operations on the string so the length remains the same.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code>\u00a0consists only of uppercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2697/","title":"2697. Lexicographically Smallest Palindrome","text":"Problem <p>You are given a string <code>s</code> consisting of lowercase English letters, and you are allowed to perform operations on it. In one operation, you can replace a character in <code>s</code> with another lowercase English letter.</p> <p>Your task is to make <code>s</code> a palindrome with the minimum number of operations possible. If there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one.</p> <p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>.</p> <p>Return the resulting palindrome string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"egcfe\"\nOutput: \"efcfe\"\nExplanation: The minimum number of operations to make \"egcfe\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"efcfe\", by changing 'g'.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abcd\"\nOutput: \"abba\"\nExplanation: The minimum number of operations to make \"abcd\" a palindrome is 2, and the lexicographically smallest palindrome string we can get by modifying two characters is \"abba\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"seven\"\nOutput: \"neven\"\nExplanation: The minimum number of operations to make \"seven\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"neven\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 1000</code></li> <li><code>s</code>\u00a0consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2698/","title":"2698. Find the Punishment Number of an Integer","text":"Problem <p>Given a positive integer <code>n</code>, return the punishment number of <code>n</code>.</p> <p>The punishment number of <code>n</code> is defined as the sum of the squares of all integers <code>i</code> such that:</p> <ul> <li><code>1 &lt;= i &lt;= n</code></li> <li>The decimal representation of <code>i * i</code> can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals <code>i</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10\nOutput: 182\nExplanation: There are exactly 3 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1\n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.\n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.\nHence, the punishment number of 10 is 1 + 81 + 100 = 182\n</pre> <p>Example 2:</p> <pre>\nInput: n = 37\nOutput: 1478\nExplanation: There are exactly 4 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1. \n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. \n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. \n- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.\nHence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2699/","title":"2699. Modify Graph Edge Weights","text":"Problem <p>You are given an undirected weighted connected graph containing <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, and an integer array <code>edges</code> where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>, w<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> with weight <code>w<sub>i</sub></code>.</p> <p>Some edges have a weight of <code>-1</code> (<code>w<sub>i</sub> = -1</code>), while others have a positive weight (<code>w<sub>i</sub> &gt; 0</code>).</p> <p>Your task is to modify all edges with a weight of <code>-1</code> by assigning them positive integer values in the range <code>[1, 2 * 10<sup>9</sup>]</code> so that the shortest distance between the nodes <code>source</code> and <code>destination</code> becomes equal to an integer <code>target</code>. If there are multiple modifications that make the shortest distance between <code>source</code> and <code>destination</code> equal to <code>target</code>, any of them will be considered correct.</p> <p>Return an array containing all edges (even unmodified ones) in any order if it is possible to make the shortest distance from <code>source</code> to <code>destination</code> equal to <code>target</code>, or an empty array if it's impossible.</p> <p>Note: You are not allowed to modify the weights of edges with initial positive weights.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, edges = [[4,1,-1],[2,0,-1],[0,3,-1],[4,3,-1]], source = 0, destination = 1, target = 5\nOutput: [[4,1,1],[2,0,1],[0,3,3],[4,3,1]]\nExplanation: The graph above shows a possible modification to the edges, making the distance from 0 to 1 equal to 5.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 3, edges = [[0,1,-1],[0,2,5]], source = 0, destination = 2, target = 6\nOutput: []\nExplanation: The graph above contains the initial edges. It is not possible to make the distance from 0 to 2 equal to 6 by modifying the edge with weight -1. So, an empty array is returned.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: n = 4, edges = [[1,0,4],[1,2,3],[2,3,5],[0,3,-1]], source = 0, destination = 2, target = 6\nOutput: [[1,0,4],[1,2,3],[2,3,5],[0,3,1]]\nExplanation: The graph above shows a modified graph having the shortest distance from 0 to 2 as 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 100</code></li> <li><code>1 &lt;= edges.length &lt;= n * (n - 1) / 2</code></li> <li><code>edges[i].length == 3</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i\u00a0</sub>&lt;\u00a0n</code></li> <li><code>w<sub>i</sub>\u00a0= -1\u00a0</code>or <code>1 &lt;= w<sub>i\u00a0</sub>&lt;= 10<sup>7</sup></code></li> <li><code>a<sub>i\u00a0</sub>!=\u00a0b<sub>i</sub></code></li> <li><code>0 &lt;= source, destination &lt; n</code></li> <li><code>source != destination</code></li> <li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li> <li>The graph is connected, and there are no self-loops or repeated edges</li> </ul>"},{"location":"LeetCode_Problems/2700/","title":"2700. Differences Between Two Objects","text":"Problem"},{"location":"LeetCode_Problems/2701/","title":"2701. Consecutive Transactions with Increasing Amounts","text":"Problem"},{"location":"LeetCode_Problems/2702/","title":"2702. Minimum Operations to Make Numbers Non-positive","text":"Problem"},{"location":"LeetCode_Problems/2703/","title":"2703. Return Length of Arguments Passed","text":"Problem <p>Write a function\u00a0<code>argumentsLength</code> that returns the count of arguments passed to it.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: args = [5]\nOutput: 1\nExplanation:\nargumentsLength(5); // 1\n\nOne value was passed to the function so it should return 1.\n</pre> <p>Example 2:</p> <pre>\nInput: args = [{}, null, \"3\"]\nOutput: 3\nExplanation: \nargumentsLength({}, null, \"3\"); // 3\n\nThree values were passed to the function so it should return 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>args</code>\u00a0is a valid JSON array</li> <li><code>0 &lt;= args.length &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2704/","title":"2704. To Be Or Not To Be","text":"Problem <p>Write a function\u00a0<code>expect</code> that helps developers test their code. It should take in any value\u00a0<code>val</code>\u00a0and return an object with the following two functions.</p> <ul> <li><code>toBe(val)</code>\u00a0accepts another value and returns\u00a0<code>true</code>\u00a0if the two values\u00a0<code>===</code>\u00a0each other. If they are not equal, it should throw an error\u00a0<code>\"Not Equal\"</code>.</li> <li><code>notToBe(val)</code>\u00a0accepts another value and returns\u00a0<code>true</code>\u00a0if the two values\u00a0<code>!==</code>\u00a0each other. If they are equal, it should throw an error\u00a0<code>\"Equal\"</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: func = () =&gt; expect(5).toBe(5)\nOutput: {\"value\": true}\nExplanation: 5 === 5 so this expression returns true.\n</pre> <p>Example 2:</p> <pre>\nInput: func = () =&gt; expect(5).toBe(null)\nOutput: {\"error\": \"Not Equal\"}\nExplanation: 5 !== null so this expression throw the error \"Not Equal\".\n</pre> <p>Example 3:</p> <pre>\nInput: func = () =&gt; expect(5).notToBe(null)\nOutput: {\"value\": true}\nExplanation: 5 !== null so this expression returns true.\n</pre>"},{"location":"LeetCode_Problems/2705/","title":"2705. Compact Object","text":"Problem <p>Given an object or array\u00a0<code>obj</code>, return a compact object. A compact object\u00a0is the same as the original object, except with keys containing falsy values removed. This operation applies to the object and any nested objects. Arrays are considered objects where\u00a0the indices are\u00a0keys. A value is\u00a0considered falsy\u00a0when <code>Boolean(value)</code> returns <code>false</code>.</p> <p>You may assume the\u00a0<code>obj</code> is\u00a0the output of\u00a0<code>JSON.parse</code>. In other words, it is valid JSON.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: obj = [null, 0, false, 1]\nOutput: [1]\nExplanation: All falsy values have been removed from the array.\n</pre> <p>Example 2:</p> <pre>\nInput: obj = {\"a\": null, \"b\": [false, 1]}\nOutput: {\"b\": [1]}\nExplanation: obj[\"a\"] and obj[\"b\"][0] had falsy values and were removed.</pre> <p>Example 3:</p> <pre>\nInput: obj = [null, 0, 5, [0], [false, 16]]\nOutput: [5, [], [16]]\nExplanation: obj[0], obj[1], obj[3][0], and obj[4][0] were falsy and removed.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>obj</code> is a valid JSON object</li> <li><code>2 &lt;= JSON.stringify(obj).length &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2706/","title":"2706. Buy Two Chocolates","text":"Problem <p>You are given an integer array <code>prices</code> representing the prices of various chocolates in a store. You are also given a single integer <code>money</code>, which represents your initial amount of money.</p> <p>You must buy exactly two chocolates in such a way that you still have some non-negative leftover money. You would like to minimize the sum of the prices of the two chocolates you buy.</p> <p>Return the amount of money you will have leftover after buying the two chocolates. If there is no way for you to buy two chocolates without ending up in debt, return <code>money</code>. Note that the leftover must be non-negative.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: prices = [1,2,2], money = 3\nOutput: 0\nExplanation: Purchase the chocolates priced at 1 and 2 units respectively. You will have 3 - 3 = 0 units of money afterwards. Thus, we return 0.\n</pre> <p>Example 2:</p> <pre>\nInput: prices = [3,2,3], money = 3\nOutput: 3\nExplanation: You cannot buy 2 chocolates without going in debt, so we return 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= prices.length &lt;= 50</code></li> <li><code>1 &lt;= prices[i] &lt;= 100</code></li> <li><code>1 &lt;= money &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2707/","title":"2707. Extra Characters in a String","text":"Problem <p>You are given a 0-indexed string <code>s</code> and a dictionary of words <code>dictionary</code>. You have to break <code>s</code> into one or more non-overlapping substrings such that each substring is present in <code>dictionary</code>. There may be some extra characters in <code>s</code> which are not present in any of the substrings.</p> <p>Return the minimum number of extra characters left over if you break up <code>s</code> optimally.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"]\nOutput: 1\nExplanation: We can break s in two substrings: \"leet\" from index 0 to 3 and \"code\" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.\n\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"]\nOutput: 3\nExplanation: We can break s in two substrings: \"hello\" from index 3 to 7 and \"world\" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 50</code></li> <li><code>1 &lt;= dictionary.length &lt;= 50</code></li> <li><code>1 &lt;= dictionary[i].length &lt;= 50</code></li> <li><code>dictionary[i]</code>\u00a0and <code>s</code> consists of only lowercase English letters</li> <li><code>dictionary</code> contains distinct words</li> </ul>"},{"location":"LeetCode_Problems/2708/","title":"2708. Maximum Strength of a Group","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> representing the score of students in an exam. The teacher would like to form one non-empty group of students with maximal strength, where the strength of a group of students of indices <code>i<sub>0</sub></code>, <code>i<sub>1</sub></code>, <code>i<sub>2</sub></code>, ... , <code>i<sub>k</sub></code> is defined as <code>nums[i<sub>0</sub>] * nums[i<sub>1</sub>] * nums[i<sub>2</sub>] * ... * nums[i<sub>k</sub>\u200b]</code>.</p> <p>Return the maximum strength of a group the teacher can create.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,-1,-5,2,5,-9]\nOutput: 1350\nExplanation: One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-4,-5,-4]\nOutput: 20\nExplanation: Group the students at indices [0, 1] . Then, we\u2019ll have a resulting strength of 20. We cannot achieve greater strength.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 13</code></li> <li><code>-9 &lt;= nums[i] &lt;= 9</code></li> </ul>"},{"location":"LeetCode_Problems/2709/","title":"2709. Greatest Common Divisor Traversal","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>, and you are allowed to traverse between its indices. You can traverse between index <code>i</code> and index <code>j</code>, <code>i != j</code>, if and only if <code>gcd(nums[i], nums[j]) &gt; 1</code>, where <code>gcd</code> is the greatest common divisor.</p> <p>Your task is to determine if for every pair of indices <code>i</code> and <code>j</code> in nums, where <code>i &lt; j</code>, there exists a sequence of traversals that can take us from <code>i</code> to <code>j</code>.</p> <p>Return <code>true</code> if it is possible to traverse between all such pairs of indices, or <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,6]\nOutput: true\nExplanation: In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2).\nTo go from index 0 to index 1, we can use the sequence of traversals 0 -&gt; 2 -&gt; 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 &gt; 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 &gt; 1.\nTo go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 &gt; 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 &gt; 1.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,9,5]\nOutput: false\nExplanation: No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [4,3,12,8]\nOutput: true\nExplanation: There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2710/","title":"2710. Remove Trailing Zeros From a String","text":"Problem <p>Given a positive integer <code>num</code> represented as a string, return the integer <code>num</code> without trailing zeros as a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"51230100\"\nOutput: \"512301\"\nExplanation: Integer \"51230100\" has 2 trailing zeros, we remove them and return integer \"512301\".\n</pre> <p>Example 2:</p> <pre>\nInput: num = \"123\"\nOutput: \"123\"\nExplanation: Integer \"123\" has no trailing zeros, we return integer \"123\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num.length &lt;= 1000</code></li> <li><code>num</code> consists\u00a0of only digits.</li> <li><code>num</code> doesn't\u00a0have any leading zeros.</li> </ul>"},{"location":"LeetCode_Problems/2711/","title":"2711. Difference of Number of Distinct Values on Diagonals","text":"Problem <p>Given a 0-indexed 2D <code>grid</code> of size <code>m x n</code>, you should find the matrix <code>answer</code> of size <code>m x n</code>.</p> <p>The value of each cell <code>(r, c)</code> of the matrix <code>answer</code> is calculated in the following way:</p> <ul> <li>Let <code>topLeft[r][c]</code> be the number of distinct values in the top-left diagonal of the cell <code>(r, c)</code> in the matrix <code>grid</code>.</li> <li>Let <code>bottomRight[r][c]</code> be the number of distinct values in the bottom-right diagonal of the cell <code>(r, c)</code> in the matrix <code>grid</code>.</li> </ul> <p>Then <code>answer[r][c] = |topLeft[r][c] - bottomRight[r][c]|</code>.</p> <p>Return the matrix <code>answer</code>.</p> <p>A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end.</p> <p>A cell <code>(r<sub>1</sub>, c<sub>1</sub>)</code> belongs to the top-left diagonal of the cell <code>(r, c)</code>, if both belong to the same diagonal and <code>r<sub>1</sub> &lt; r</code>. Similarly is defined bottom-right diagonal.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\n\nInput: grid = [[1,2,3],[3,1,5],[3,2,1]]\nOutput: [[1,1,0],[1,0,1],[0,1,1]]\nExplanation: The 1<sup>st</sup> diagram denotes the initial grid.\u00a0\nThe 2<sup>nd</sup> diagram denotes a grid for cell (0,0), where blue-colored cells are cells on its bottom-right diagonal.\nThe 3<sup>rd</sup> diagram denotes a grid for cell (1,2), where red-colored cells are cells on its top-left diagonal.\nThe 4<sup>th</sup> diagram denotes a grid for cell (1,1), where blue-colored cells are cells on its bottom-right diagonal and red-colored cells are cells on its top-left diagonal.\n- The cell (0,0) contains [1,1] on its bottom-right diagonal and [] on its top-left diagonal. The answer is |1 - 0| = 1.\n- The cell (1,2) contains [] on its bottom-right diagonal and [2] on its top-left diagonal. The answer is |0 - 1| = 1.\n- The cell (1,1) contains [1] on its bottom-right diagonal and [1] on its top-left diagonal. The answer is |1 - 1| = 0.\nThe answers of other cells are similarly calculated.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[1]]\nOutput: [[0]]\nExplanation: - The cell (0,0) contains [] on its bottom-right diagonal and [] on its top-left diagonal. The answer is |0 - 0| = 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m, n, grid[i][j] &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2712/","title":"2712. Minimum Cost to Make All Characters Equal","text":"Problem <p>You are given a 0-indexed binary string <code>s</code> of length <code>n</code> on which you can apply two types of operations:</p> <ul> <li>Choose an index <code>i</code> and invert all characters from\u00a0index <code>0</code> to index <code>i</code>\u00a0(both inclusive), with a cost of <code>i + 1</code></li> <li>Choose an index <code>i</code> and invert all characters\u00a0from\u00a0index <code>i</code> to index <code>n - 1</code>\u00a0(both inclusive), with a cost of <code>n - i</code></li> </ul> <p>Return the minimum cost to make all characters of the string equal.</p> <p>Invert a character means\u00a0if its value is '0' it becomes '1' and vice-versa.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"0011\"\nOutput: 2\nExplanation: Apply the second operation with <code>i = 2</code> to obtain <code>s = \"0000\" for a cost of 2</code>. It can be shown that 2 is the minimum cost to make all characters equal.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"010101\"\nOutput: 9\nExplanation: Apply the first operation with i = 2 to obtain s = \"101101\" for a cost of 3.\nApply the first operation with i = 1 to obtain s = \"011101\" for a cost of 2. \nApply the first operation with i = 0 to obtain s = \"111101\" for a cost of 1. \nApply the second operation with i = 4 to obtain s = \"111110\" for a cost of 2.\nApply the second operation with i = 5 to obtain s = \"111111\" for a cost of 1. \nThe total cost to make all characters equal is 9. It can be shown that 9 is the minimum cost to make all characters equal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length == n &lt;= 10<sup>5</sup></code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code></li> </ul>"},{"location":"LeetCode_Problems/2713/","title":"2713. Maximum Strictly Increasing Cells in a Matrix","text":"Problem <p>Given a 1-indexed <code>m x n</code> integer matrix <code>mat</code>, you can select any cell in the matrix as your starting cell.</p> <p>From the starting cell, you can move to any other cell in the same row or column, but only if the value of the destination cell is strictly greater than the value of the current cell. You can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves.</p> <p>Your task is to find the maximum number of cells that you can visit in the matrix by starting from some cell.</p> <p>Return an integer denoting the maximum number of cells that can be visited.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: mat = [[3,1],[3,4]]\nOutput: 2\nExplanation: The image shows how we can visit 2 cells starting from row 1, column 2. It can be shown that we cannot visit more than 2 cells no matter where we start from, so the answer is 2. \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: mat = [[1,1],[1,1]]\nOutput: 1\nExplanation: Since the cells must be strictly increasing, we can only visit one cell in this example. \n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: mat = [[3,1,6],[-9,5,7]]\nOutput: 4\nExplanation: The image above shows how we can visit 4 cells starting from row 2, column 1. It can be shown that we cannot visit more than 4 cells no matter where we start from, so the answer is 4. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == mat.length\u00a0</code></li> <li><code>n == mat[i].length\u00a0</code></li> <li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li> <li><code>-10<sup>5</sup>\u00a0&lt;= mat[i][j] &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2714/","title":"2714. Find Shortest Path with K Hops","text":"Problem"},{"location":"LeetCode_Problems/2715/","title":"2715. Timeout Cancellation","text":"Problem <p>Given a function <code>fn</code>, an array of\u00a0arguments\u00a0<code>args</code>, and a timeout\u00a0<code>t</code>\u00a0in milliseconds, return a cancel function <code>cancelFn</code>.</p> <p>After a delay of\u00a0<code>t</code>,\u00a0<code>fn</code>\u00a0should be called with <code>args</code> passed as parameters unless <code>cancelFn</code> was invoked before the delay of <code>t</code> milliseconds elapses, specifically at <code>cancelT</code>\u00a0ms.\u00a0In that case,\u00a0<code>fn</code> should never be called.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: fn = (x) =&gt; x * 5, args = [2], t = 20, cancelT = 50\nOutput: [{\"time\": 20, \"returned\": 10}]\nExplanation: \nconst result = []\n\nconst fn = (x) =&gt; x * 5\n\nconst start = performance.now()\u00a0\n\nconst log = (...argsArr) =&gt; {\n    const diff = Math.floor(performance.now() - start);\n    result.push({\"time\": diff, \"returned\": fn(...argsArr)})\n}\n \u00a0 \u00a0\u00a0\nconst cancel = cancellable(log, [2], 20);\n\nconst maxT = Math.max(t, 50)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\nsetTimeout(cancel, cancelT)\n\nsetTimeout(() =&gt; {\n \u00a0 \u00a0 console.log(result) // [{\"time\":20,\"returned\":10}]\n}, 65)\n\nThe cancellation was scheduled to occur after a delay of cancelT (50ms), which happened after the execution of fn(2) at 20ms.\n</pre> <p>Example 2:</p> <pre>\nInput: fn = (x) =&gt; x**2, args = [2], t = 100, cancelT = 50 \nOutput: []\nExplanation: The cancellation was scheduled to occur after a delay of cancelT (50ms), which happened before the execution of fn(2) at 100ms, resulting in fn(2) never being called.\n</pre> <p>Example 3:</p> <pre>\nInput: fn = (x1, x2) =&gt; x1 * x2, args = [2,4], t = 30, cancelT = 100\nOutput: [{\"time\": 30, \"returned\": 8}]\nExplanation: The cancellation was scheduled to occur after a delay of cancelT (100ms), which happened after the execution of fn(2,4) at 30ms.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>fn</code> is a function</li> <li><code>args</code> is a valid JSON array</li> <li><code>1 &lt;= args.length &lt;= 10</code></li> <li><code>20 &lt;= t &lt;= 1000</code></li> <li><code>10 &lt;= cancelT &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2716/","title":"2716. Minimize String Length","text":"Problem <p>Given a 0-indexed string <code>s</code>, repeatedly perform the following operation any number of times:</p> <ul> <li>Choose an index <code>i</code> in the string, and let <code>c</code> be the character in position <code>i</code>. Delete the closest occurrence of <code>c</code> to the left of <code>i</code> (if any) and the closest occurrence of <code>c</code> to the right of <code>i</code> (if any).</li> </ul> <p>Your task is to minimize the length of <code>s</code> by performing the above operation any number of times.</p> <p>Return an integer denoting the length of the minimized string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"aaabc\"\nOutput: 3\nExplanation: In this example, s is \"aaabc\". We can start by selecting the character 'a' at index 1. We then remove the closest 'a' to the left of index 1, which is at index 0, and the closest 'a' to the right of index 1, which is at index 2. After this operation, the string becomes \"abc\". Any further operation we perform on the string will leave it unchanged. Therefore, the length of the minimized string is 3.</pre> <p>Example 2:</p> <pre>\nInput: s = \"cbbd\"\nOutput: 3\nExplanation: For this we can start with character 'b' at index 1. There is no occurrence of 'b' to the left of index 1, but there is one to the right at index 2, so we delete the 'b' at index 2. The string becomes \"cbd\" and further operations will leave it unchanged. Hence, the minimized length is 3.\u00a0\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"dddaaa\"\nOutput: 2\nExplanation: For this, we can start with the character 'd' at index 1. The closest occurrence of a 'd' to its left is at index 0, and the closest occurrence of a 'd' to its right is at index 2. We delete both index 0 and 2, so the string becomes \"daaa\". In the new string, we can select the character 'a' at index 2. The closest occurrence of an 'a' to its left is at index 1, and the closest occurrence of an 'a' to its right is at index 3. We delete both of them, and the string becomes \"da\". We cannot minimize this further, so the minimized length is 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> contains only lowercase English letters</li> </ul>"},{"location":"LeetCode_Problems/2717/","title":"2717. Semi-Ordered Permutation","text":"Problem <p>You are given a 0-indexed permutation of <code>n</code> integers <code>nums</code>.</p> <p>A permutation is called semi-ordered if the first number equals <code>1</code> and the last number equals <code>n</code>. You can perform the below operation as many times as you want until you make <code>nums</code> a semi-ordered permutation:</p> <ul> <li>Pick two adjacent elements in <code>nums</code>, then swap them.</li> </ul> <p>Return the minimum number of operations to make <code>nums</code> a semi-ordered permutation.</p> <p>A permutation is a sequence of integers from <code>1</code> to <code>n</code> of length <code>n</code> containing each number exactly once.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,4,3]\nOutput: 2\nExplanation: We can make the permutation semi-ordered using these sequence of operations: \n1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,4,1,3]\nOutput: 3\nExplanation: We can make the permutation semi-ordered using these sequence of operations:\n1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3].\n2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].\n3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].\nIt can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,3,4,2,5]\nOutput: 0\nExplanation: The permutation is already a semi-ordered permutation.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length == n &lt;= 50</code></li> <li><code>1 &lt;= nums[i]\u00a0&lt;= 50</code></li> <li><code>nums is a permutation.</code></li> </ul>"},{"location":"LeetCode_Problems/2718/","title":"2718. Sum of Matrix After Queries","text":"Problem <p>You are given an integer <code>n</code> and a 0-indexed 2D array <code>queries</code> where <code>queries[i] = [type<sub>i</sub>, index<sub>i</sub>, val<sub>i</sub>]</code>.</p> <p>Initially, there is a 0-indexed <code>n x n</code> matrix filled with <code>0</code>'s. For each query, you must apply one of the following changes:</p> <ul> <li>if <code>type<sub>i</sub> == 0</code>, set the values in the row with <code>index<sub>i</sub></code> to <code>val<sub>i</sub></code>, overwriting any previous values.</li> <li>if <code>type<sub>i</sub> == 1</code>, set the values in the column with <code>index<sub>i</sub></code> to <code>val<sub>i</sub></code>, overwriting any previous values.</li> </ul> <p>Return the sum of integers in the matrix after all queries are applied.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 3, queries = [[0,0,1],[1,2,2],[0,2,3],[1,0,4]]\nOutput: 23\nExplanation: The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 23. \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 3, queries = [[0,0,4],[0,1,2],[1,0,1],[0,2,3],[1,2,1]]\nOutput: 17\nExplanation: The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 17.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= queries.length &lt;= 5 * 10<sup>4</sup></code></li> <li><code>queries[i].length == 3</code></li> <li><code>0 &lt;= type<sub>i</sub> &lt;= 1</code></li> <li><code>0 &lt;= index<sub>i</sub>\u00a0&lt; n</code></li> <li><code>0 &lt;= val<sub>i</sub> &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2719/","title":"2719. Count of Integers","text":"Problem <p>You are given two numeric strings <code>num1</code> and <code>num2</code> and two integers <code>max_sum</code> and <code>min_sum</code>. We denote an integer <code>x</code> to be good if:</p> <ul> <li><code>num1 &lt;= x &lt;= num2</code></li> <li><code>min_sum &lt;= digit_sum(x) &lt;= max_sum</code>.</li> </ul> <p>Return the number of good integers. Since the answer may be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Note that <code>digit_sum(x)</code> denotes the sum of the digits of <code>x</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num1 = \"1\", num2 = \"12\", <code>min_sum</code> = 1, max_sum = 8\nOutput: 11\nExplanation: There are 11 integers whose sum of digits lies between 1 and 8 are 1,2,3,4,5,6,7,8,10,11, and 12. Thus, we return 11.\n</pre> <p>Example 2:</p> <pre>\nInput: num1 = \"1\", num2 = \"5\", <code>min_sum</code> = 1, max_sum = 5\nOutput: 5\nExplanation: The 5 integers whose sum of digits lies between 1 and 5 are 1,2,3,4, and 5. Thus, we return 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num1 &lt;= num2 &lt;= 10<sup>22</sup></code></li> <li><code>1 &lt;= min_sum &lt;= max_sum &lt;= 400</code></li> </ul>"},{"location":"LeetCode_Problems/2720/","title":"2720. Popularity Percentage","text":"Problem"},{"location":"LeetCode_Problems/2721/","title":"2721. Execute Asynchronous Functions in Parallel","text":"Problem <p>Given an array of\u00a0asynchronous functions\u00a0<code>functions</code>, return a new promise <code>promise</code>. Each function in the array accepts no arguments\u00a0and returns a promise. All the promises should be executed in parallel.</p> <p><code>promise</code> resolves:</p> <ul> <li>When all the promises returned from\u00a0<code>functions</code>\u00a0were resolved successfully in parallel.\u00a0The resolved\u00a0value of\u00a0<code>promise</code> should be an array of all the resolved values of promises in the same order as they were in the\u00a0<code>functions</code>. The <code>promise</code> should resolve when all the asynchronous functions in the array have completed execution in parallel.</li> </ul> <p><code>promise</code> rejects:</p> <ul> <li>When any\u00a0of the promises\u00a0returned from\u00a0<code>functions</code>\u00a0were rejected.\u00a0<code>promise</code> should also\u00a0reject\u00a0with the reason of the first rejection.</li> </ul> <p>Please solve it without using the built-in\u00a0<code>Promise.all</code>\u00a0function.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: functions = [\n\u00a0 () =&gt; new Promise(resolve =&gt; setTimeout(() =&gt; resolve(5), 200))\n]\nOutput: {\"t\": 200, \"resolved\": [5]}\nExplanation: \npromiseAll(functions).then(console.log); // [5]\n\nThe single function was resolved at 200ms with a value of 5.\n</pre> <p>Example 2:</p> <pre>\nInput: functions = [\n    () =&gt; new Promise(resolve =&gt; setTimeout(() =&gt; resolve(1), 200)), \n    () =&gt; new Promise((resolve, reject) =&gt; setTimeout(() =&gt; reject(\"Error\"), 100))\n]\nOutput: {\"t\": 100, \"rejected\": \"Error\"}\nExplanation: Since one of the promises rejected, the returned promise also rejected with the same error at the same time.\n</pre> <p>Example 3:</p> <pre>\nInput: functions = [\n    () =&gt; new Promise(resolve =&gt; setTimeout(() =&gt; resolve(4), 50)), \n    () =&gt; new Promise(resolve =&gt; setTimeout(() =&gt; resolve(10), 150)), \n    () =&gt; new Promise(resolve =&gt; setTimeout(() =&gt; resolve(16), 100))\n]\nOutput: {\"t\": 150, \"resolved\": [4, 10, 16]}\nExplanation: All the promises resolved with a value. The returned promise resolved when the last promise resolved.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>functions</code>\u00a0is an array of functions that returns promises</li> <li><code>1 &lt;= functions.length &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/2722/","title":"2722. Join Two Arrays by ID","text":"Problem <p>Given two arrays <code>arr1</code> and <code>arr2</code>, return a new\u00a0array <code>joinedArray</code>. All the objects in each\u00a0of the two inputs arrays will contain an\u00a0<code>id</code>\u00a0field that has an integer value.\u00a0<code>joinedArray</code>\u00a0is an array formed by merging\u00a0<code>arr1</code> and <code>arr2</code> based on\u00a0their <code>id</code>\u00a0key. The length of\u00a0<code>joinedArray</code> should be the length of unique values of <code>id</code>. The returned array should be sorted in\u00a0ascending\u00a0order based on the <code>id</code>\u00a0key.</p> <p>If a given\u00a0<code>id</code>\u00a0exists in one array but not the other, the single object with that\u00a0<code>id</code> should be included in the result array without modification.</p> <p>If two objects share an <code>id</code>, their properties should be merged into a single\u00a0object:</p> <ul> <li>If a key only exists in one object, that single key-value pair should be included in the object.</li> <li>If a key is included in both objects, the value in the object from <code>arr2</code>\u00a0should override the value from <code>arr1</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: \narr1 = [\n\u00a0   {\"id\": 1, \"x\": 1},\n\u00a0   {\"id\": 2, \"x\": 9}\n], \narr2 = [\n    {\"id\": 3, \"x\": 5}\n]\nOutput: \n[\n\u00a0   {\"id\": 1, \"x\": 1},\n\u00a0   {\"id\": 2, \"x\": 9},\n    {\"id\": 3, \"x\": 5}\n]\nExplanation: There are no duplicate ids so arr1 is simply concatenated with arr2.\n</pre> <p>Example 2:</p> <pre>\nInput: \narr1 = [\n    {\"id\": 1, \"x\": 2, \"y\": 3},\n    {\"id\": 2, \"x\": 3, \"y\": 6}\n], \narr2 = [\n    {\"id\": 2, \"x\": 10, \"y\": 20},\n    {\"id\": 3, \"x\": 0, \"y\": 0}\n]\nOutput: \n[\n    {\"id\": 1, \"x\": 2, \"y\": 3},\n    {\"id\": 2, \"x\": 10, \"y\": 20},\n\u00a0   {\"id\": 3, \"x\": 0, \"y\": 0}\n]\nExplanation: The two objects with id=1 and id=3 are included in the result array without modifiction. The two objects with id=2 are merged together. The keys from arr2 override the values in arr1.\n</pre> <p>Example 3:</p> <pre>\nInput: \narr1 = [\n    {\"id\": 1, \"b\": {\"b\": 94},\"v\": [4, 3], \"y\": 48}\n]\narr2 = [\n    {\"id\": 1, \"b\": {\"c\": 84}, \"v\": [1, 3]}\n]\nOutput: [\n    {\"id\": 1, \"b\": {\"c\": 84}, \"v\": [1, 3], \"y\": 48}\n]\nExplanation: The two objects with id=1 are merged together. For the keys \"b\" and \"v\" the values from arr2 are used. Since the key \"y\" only exists in arr1, that value is taken form arr1.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>arr1</code> and <code>arr2</code> are valid JSON arrays</li> <li>Each object in <code>arr1</code> and <code>arr2</code> has a unique\u00a0integer <code>id</code> key</li> <li><code>2 &lt;= JSON.stringify(arr1).length &lt;= 10<sup>6</sup></code></li> <li><code>2 &lt;= JSON.stringify(arr2).length &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2723/","title":"2723. Add Two Promises","text":"Problem <p>Given two promises <code>promise1</code> and <code>promise2</code>, return a new promise. <code>promise1</code> and <code>promise2</code>\u00a0will both resolve with a number. The returned promise should resolve with the sum of the two numbers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \npromise1 = new Promise(resolve =&gt; setTimeout(() =&gt; resolve(2), 20)), \npromise2 = new Promise(resolve =&gt; setTimeout(() =&gt; resolve(5), 60))\nOutput: 7\nExplanation: The two input promises resolve with the values of 2 and 5 respectively. The returned promise should resolve with a value of 2 + 5 = 7. The time the returned promise resolves is not judged for this problem.\n</pre> <p>Example 2:</p> <pre>\nInput: \npromise1 = new Promise(resolve =&gt; setTimeout(() =&gt; resolve(10), 50)), \npromise2 = new Promise(resolve =&gt; setTimeout(() =&gt; resolve(-12), 30))\nOutput: -2\nExplanation: The two input promises resolve with the values of 10 and -12 respectively. The returned promise should resolve with a value of 10 + -12 = -2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>promise1</code> and <code>promise2</code> are\u00a0promises that resolve\u00a0with a number</li> </ul>"},{"location":"LeetCode_Problems/2724/","title":"2724. Sort By","text":"Problem <p>Given an array <code>arr</code> and a function <code>fn</code>, return a sorted array <code>sortedArr</code>. You can assume\u00a0<code>fn</code>\u00a0only returns numbers and those numbers determine the sort order of\u00a0<code>sortedArr</code>. <code>sortedArray</code> must be sorted in ascending order by <code>fn</code> output.</p> <p>You may assume that <code>fn</code> will never duplicate numbers for a given array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: arr = [5, 4, 1, 2, 3], fn = (x) =&gt; x\nOutput: [1, 2, 3, 4, 5]\nExplanation: fn simply returns the number passed to it so the array is sorted in ascending order.\n</pre> <p>Example 2:</p> <pre>\nInput: arr = [{\"x\": 1}, {\"x\": 0}, {\"x\": -1}], fn = (d) =&gt; d.x\nOutput: [{\"x\": -1}, {\"x\": 0}, {\"x\": 1}]\nExplanation: fn returns the value for the \"x\" key. So the array is sorted based on that value.\n</pre> <p>Example 3:</p> <pre>\nInput: arr = [[3, 4], [5, 2], [10, 1]], fn = (x) =&gt; x[1]\nOutput: [[10, 1], [5, 2], [3, 4]]\nExplanation: arr is sorted in ascending order by number at index=1.\u00a0\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>arr is a valid JSON array</code></li> <li><code>fn is a function that returns a number</code></li> <li><code>1 &lt;=\u00a0arr.length &lt;= 5 * 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2725/","title":"2725. Interval Cancellation","text":"Problem <p>Given a function <code>fn</code>, an array of arguments\u00a0<code>args</code>, and\u00a0an interval time <code>t</code>, return a cancel function <code>cancelFn</code>.</p> <p>The function <code>fn</code> should be called with <code>args</code> immediately and then called again every\u00a0<code>t</code> milliseconds\u00a0until\u00a0<code>cancelFn</code>\u00a0is called at <code>cancelT</code> ms.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: fn = (x) =&gt; x * 2, args = [4], t = 35, cancelT = 190\nOutput: \n[\n   {\"time\": 0, \"returned\": 8},\n   {\"time\": 35, \"returned\": 8},\n   {\"time\": 70, \"returned\": 8},\n   {\"time\": 105, \"returned\": 8},\n   {\"time\": 140, \"returned\": 8},\n   {\"time\": 175, \"returned\": 8}\n]\nExplanation: \nconst result = []\nconst fn = (x) =&gt; x * 2\nconst args = [4], t = 35, cancelT = 190\n\nconst start = performance.now()\n\nconst log = (...argsArr) =&gt; {\n    const diff = Math.floor(performance.now() - start)\n    result.push({\"time\": diff, \"returned\": fn(...argsArr)})\n}\n\nconst cancel = cancellable(log, [4], 35);\nsetTimeout(cancel, 190);\n\nsetTimeout(() =&gt; {\n    console.log(result) // Output\n }, cancelT + t + 15)  \n\nEvery 35ms, fn(4) is called. Until t=190ms, then it is cancelled.\n1st fn call is at 0ms. fn(4) returns 8.\n2nd fn call is at 35ms. fn(4) returns 8.\n3rd fn call is at 70ms. fn(4) returns 8.\n4th fn call is at\u00a0105ms. fn(4) returns 8.\n5th fn call is at 140ms. fn(4) returns 8.\n6th fn call is at 175ms. fn(4) returns 8.\nCancelled at 190ms\n</pre> <p>Example 2:</p> <pre>\nInput: fn = (x1, x2) =&gt; (x1 * x2), args = [2, 5], t = 30, cancelT = 165\nOutput: \n[\n   {\"time\": 0, \"returned\": 10},\n   {\"time\": 30, \"returned\": 10},\n   {\"time\": 60, \"returned\": 10},\n   {\"time\": 90, \"returned\": 10},\n   {\"time\": 120, \"returned\": 10},\n   {\"time\": 150, \"returned\": 10}\n]\nExplanation: Every 30ms, fn(2, 5) is called. Until t=165ms, then it is cancelled.\n1st fn call is at 0ms\u00a0\n2nd fn call is at 30ms\u00a0\n3rd fn call is at 60ms\u00a0\n4th fn call is at\u00a090ms\u00a0\n5th fn call is at 120ms\u00a0\n6th fn call is at 150ms\nCancelled at 165ms\n</pre> <p>Example 3:</p> <pre>\nInput: fn = (x1, x2, x3) =&gt; (x1 + x2 + x3), args = [5, 1, 3], t = 50, cancelT = 180\nOutput: \n[\n   {\"time\": 0, \"returned\": 9},\n   {\"time\": 50, \"returned\": 9},\n   {\"time\": 100, \"returned\": 9},\n   {\"time\": 150, \"returned\": 9}\n]\nExplanation: Every 50ms, fn(5, 1, 3) is called. Until t=180ms, then it is cancelled. \n1st fn call is at 0ms\n2nd fn call is at 50ms\n3rd fn call is at 100ms\n4th fn call is at\u00a0150ms\nCancelled at 180ms\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>fn</code> is a function</li> <li><code>args</code> is a valid JSON array</li> <li><code>1 &lt;= args.length &lt;= 10</code></li> <li><code>30 &lt;= t &lt;= 100</code></li> <li><code>10 &lt;= cancelT &lt;= 500</code></li> </ul>"},{"location":"LeetCode_Problems/2726/","title":"2726. Calculator with Method Chaining","text":"Problem <p>Design a <code>Calculator</code> class. The class should provide the\u00a0mathematical operations of\u00a0addition, subtraction, multiplication, division, and exponentiation. It should also allow consecutive operations to be performed using method chaining.\u00a0The <code>Calculator</code> class constructor should accept a number\u00a0which serves as the\u00a0initial value of <code>result</code>.</p> <p>Your <code>Calculator</code> class should have the following methods:</p> <ul> <li><code>add</code> - This method adds the given number <code>value</code> to the\u00a0<code>result</code> and returns the updated <code>Calculator</code>.</li> <li><code>subtract</code> -\u00a0This method subtracts the given number <code>value</code>\u00a0from the\u00a0<code>result</code> and returns the updated <code>Calculator</code>.</li> <li><code>multiply</code> -\u00a0This method multiplies the <code>result</code>\u00a0 by the given number <code>value</code> and returns the updated <code>Calculator</code>.</li> <li><code>divide</code> -\u00a0This method divides the <code>result</code> by the given number <code>value</code> and returns the updated <code>Calculator</code>. If the passed value is <code>0</code>, an error <code>\"Division by zero is not allowed\"</code> should be thrown.</li> <li><code>power</code> -\u00a0This method raises the\u00a0<code>result</code> to the power of the given number <code>value</code> and returns the updated <code>Calculator</code>.</li> <li><code>getResult</code> -\u00a0This method returns the <code>result</code>.</li> </ul> <p>Solutions within\u00a0<code>10<sup>-5</sup></code>\u00a0of the actual result are considered correct.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nactions = [\"Calculator\", \"add\", \"subtract\", \"getResult\"], \nvalues = [10, 5, 7]\nOutput: 8\nExplanation: \nnew Calculator(10).add(5).subtract(7).getResult() // 10 + 5 - 7 = 8\n</pre> <p>Example 2:</p> <pre>\nInput: \nactions = [\"Calculator\", \"multiply\", \"power\", \"getResult\"], \nvalues = [2, 5, 2]\nOutput: 100\nExplanation: \nnew Calculator(2).multiply(5).power(2).getResult() // (2 * 5) ^ 2 = 100\n</pre> <p>Example 3:</p> <pre>\nInput: \nactions = [\"Calculator\", \"divide\", \"getResult\"], \nvalues = [20, 0]\nOutput: \"Division by zero is not allowed\"\nExplanation: \nnew Calculator(20).divide(0).getResult() // 20 / 0 \n\nThe error should be thrown because we cannot divide by zero.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>actions</code> is a valid JSON array of strings</li> <li><code>values</code>\u00a0is a valid JSON array of numbers</li> <li><code>2 &lt;= actions.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= values.length &lt;= 2 * 10<sup>4</sup>\u00a0- 1</code></li> <li><code>actions[i]</code> is one of \"Calculator\", \"add\", \"subtract\", \"multiply\", \"divide\", \"power\", and\u00a0\"getResult\"</li> <li>First action is always \"Calculator\"</li> <li>Last action is always \"getResult\"</li> </ul>"},{"location":"LeetCode_Problems/2727/","title":"2727. Is Object Empty","text":"Problem <p>Given an object or an array, return if it is empty.</p> <ul> <li>An empty object contains no key-value pairs.</li> <li>An empty array contains no elements.</li> </ul> <p>You may assume the object or array is the output of\u00a0<code>JSON.parse</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: obj = {\"x\": 5, \"y\": 42}\nOutput: false\nExplanation: The object has 2 key-value pairs so it is not empty.\n</pre> <p>Example 2:</p> <pre>\nInput: obj = {}\nOutput: true\nExplanation: The object doesn't have any key-value pairs so it is empty.\n</pre> <p>Example 3:</p> <pre>\nInput: obj = [null, false, 0]\nOutput: false\nExplanation: The array has 3 elements so it is not empty.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>obj</code> is a valid JSON object or array</li> <li><code>2 &lt;= JSON.stringify(obj).length &lt;= 10<sup>5</sup></code></li> </ul> <p> </p> <p>Can you solve it in O(1) time?</p>"},{"location":"LeetCode_Problems/2728/","title":"2728. Count Houses in a Circular Street","text":"Problem"},{"location":"LeetCode_Problems/2729/","title":"2729. Check if The Number is Fascinating","text":"Problem <p>You are given an integer <code>n</code> that consists of exactly <code>3</code> digits.</p> <p>We call the number <code>n</code> fascinating if, after the following modification, the resulting number contains all the digits from <code>1</code> to <code>9</code> exactly once and does not contain any <code>0</code>'s:</p> <ul> <li>Concatenate <code>n</code> with the numbers <code>2 * n</code> and <code>3 * n</code>.</li> </ul> <p>Return <code>true</code> if <code>n</code> is fascinating, or <code>false</code> otherwise.</p> <p>Concatenating two numbers means joining them together. For example, the concatenation of <code>121</code> and <code>371</code> is <code>121371</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 192\nOutput: true\nExplanation: We concatenate the numbers n = 192 and 2 * n = 384 and 3 * n = 576. The resulting number is 192384576. This number contains all the digits from 1 to 9 exactly once.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 100\nOutput: false\nExplanation: We concatenate the numbers n = 100 and 2 * n = 200 and 3 * n = 300. The resulting number is 100200300. This number does not satisfy any of the conditions.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>100 &lt;= n &lt;= 999</code></li> </ul>"},{"location":"LeetCode_Problems/2730/","title":"2730. Find the Longest Semi-Repetitive Substring","text":"Problem <p>You are given a 0-indexed string <code>s</code> that consists of digits from <code>0</code> to <code>9</code>.</p> <p>A string <code>t</code> is called a semi-repetitive if there is at most one consecutive pair of the same digits inside <code>t</code>. For example, <code>0010</code>, <code>002020</code>, <code>0123</code>, <code>2002</code>, and <code>54944</code> are semi-repetitive while\u00a0<code>00101022</code>, and <code>1101234883</code> are not.</p> <p>Return the length of the longest semi-repetitive substring inside <code>s</code>.</p> <p>A substring is a contiguous non-empty sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"52233\"\nOutput: 4\nExplanation: The longest semi-repetitive substring is \"5223\", which starts at i = 0 and ends at j = 3. \n</pre> <p>Example 2:</p> <pre>\nInput: s = \"5494\"\nOutput: 4\nExplanation: s is a semi-reptitive string, so the answer is 4.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"1111111\"\nOutput: 2\nExplanation: The longest semi-repetitive substring is \"11\", which starts at i = 0 and ends at j = 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 50</code></li> <li><code>'0' &lt;= s[i] &lt;= '9'</code></li> </ul>"},{"location":"LeetCode_Problems/2731/","title":"2731. Movement of Robots","text":"Problem <p>Some robots are standing on an infinite number line with their initial coordinates given by a 0-indexed integer array <code>nums</code> and will start moving once given the command to move. The robots will move a unit distance each second.</p> <p>You are given a string <code>s</code> denoting the direction in which robots will move on command. <code>'L'</code> means the robot will move towards the left side or negative side of the number line, whereas <code>'R'</code> means the robot will move towards the right side or positive side of the number line.</p> <p>If two robots collide, they will start moving in opposite directions.</p> <p>Return the sum of distances between all the\u00a0pairs of robots <code>d</code> seconds after\u00a0the command. Since the sum can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Note: </p> <ul> <li>For two robots at the index <code>i</code> and <code>j</code>, pair <code>(i,j)</code> and pair <code>(j,i)</code> are considered the same pair.</li> <li>When robots collide, they instantly change their directions without wasting any time.</li> <li>Collision happens\u00a0when two robots share the same place in a\u00a0moment.     <ul> <li>For example, if a robot is positioned in 0 going to the right and another is positioned in 2 going to the left, the next second they'll be both in 1 and they will change direction and the next second the first one will be in 0, heading left, and another will be in 2, heading right.</li> <li>For example,\u00a0if a robot is positioned in 0 going to the right and another is positioned in 1\u00a0going to the left, the next second the first one will be in 0, heading left, and another will be in 1, heading right.</li> </ul> </li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-2,0,2], s = \"RLL\", d = 3\nOutput: 8\nExplanation: \nAfter 1 second, the positions are [-1,-1,1]. Now, the robot at index 0 will move left, and the robot at index 1 will move right.\nAfter 2 seconds, the positions are [-2,0,0]. Now, the robot at index 1 will move left, and the robot at index 2 will move right.\nAfter 3 seconds, the positions are [-3,-1,1].\nThe distance between the robot at index 0 and 1 is abs(-3 - (-1)) = 2.\nThe distance between the robot at index 0 and 2 is abs(-3 - 1) = 4.\nThe distance between the robot at index 1 and 2 is abs(-1 - 1) = 2.\nThe sum of the pairs of all distances = 2 + 4 + 2 = 8.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,0], s = \"RL\", d = 2\nOutput: 5\nExplanation: \nAfter 1 second, the positions are [2,-1].\nAfter 2 seconds, the positions are [3,-2].\nThe distance between the two robots is abs(-2 - 3) = 5.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>-2 * 10<sup>9</sup>\u00a0&lt;= nums[i] &lt;= 2 * 10<sup>9</sup></code></li> <li><code>0 &lt;= d &lt;= 10<sup>9</sup></code></li> <li><code>nums.length == s.length\u00a0</code></li> <li><code>s</code> consists of 'L' and 'R' only</li> <li><code>nums[i]</code>\u00a0will be unique.</li> </ul>"},{"location":"LeetCode_Problems/2732/","title":"2732. Find a Good Subset of the Matrix","text":"Problem <p>You are given a 0-indexed <code>m x n</code> binary matrix <code>grid</code>.</p> <p>Let us call a non-empty subset of rows good if the sum of each column of the subset is at most half of the length of the subset.</p> <p>More formally, if the length of the chosen subset of rows is <code>k</code>, then the sum of each column should be at most <code>floor(k / 2)</code>.</p> <p>Return an integer array that contains row indices of a good subset sorted in ascending order.</p> <p>If there are multiple good subsets, you can return any of them. If there are no good subsets, return an empty array.</p> <p>A subset of rows of the matrix <code>grid</code> is any matrix that can be obtained by deleting some (possibly none or all) rows from <code>grid</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]]\nOutput: [0,1]\nExplanation: We can choose the 0<sup>th</sup> and 1<sup>st</sup> rows to create a good subset of rows.\nThe length of the chosen subset is 2.\n- The sum of the 0<sup>th</sup>\u00a0column is 0 + 0 = 0, which is at most half of the length of the subset.\n- The sum of the 1<sup>st</sup>\u00a0column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 2<sup>nd</sup>\u00a0column is 1 + 0 = 1, which is at most half of the length of the subset.\n- The sum of the 3<sup>rd</sup>\u00a0column is 0 + 1 = 1, which is at most half of the length of the subset.\n</pre> <p>Example 2:</p> <pre>\nInput: grid = [[0]]\nOutput: [0]\nExplanation: We can choose the 0<sup>th</sup> row to create a good subset of rows.\nThe length of the chosen subset is 1.\n- The sum of the 0<sup>th</sup>\u00a0column is 0, which is at most half of the length of the subset.\n</pre> <p>Example 3:</p> <pre>\nInput: grid = [[1,1,1],[1,1,1]]\nOutput: []\nExplanation: It is impossible to choose any subset of rows to create a good subset.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li><code>1 &lt;= m &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= n &lt;= 5</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> </ul>"},{"location":"LeetCode_Problems/2733/","title":"2733. Neither Minimum nor Maximum","text":"Problem <p>Given an integer array <code>nums</code> containing distinct positive integers, find and return any number from the array that is neither the minimum nor the maximum value in the array, or <code>-1</code> if there is no such number.</p> <p>Return the selected integer.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,2,1,4]\nOutput: 2\nExplanation: In this example, the minimum value is 1 and the maximum value is 4. Therefore, either 2 or 3 can be valid answers.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2]\nOutput: -1\nExplanation: Since there is no number in nums that is neither the maximum nor the minimum, we cannot select a number that satisfies the given condition. Therefore, there is no answer.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,1,3]\nOutput: 2\nExplanation: Since 2 is neither the maximum nor the minimum value in nums, it is the only valid answer. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> <li>All values in <code>nums</code> are distinct</li> </ul>"},{"location":"LeetCode_Problems/2734/","title":"2734. Lexicographically Smallest String After Substring Operation","text":"Problem <p>You are given a string <code>s</code> consisting of only lowercase English letters. In one operation, you can do the following:</p> <ul> <li>Select any non-empty substring of <code>s</code>, possibly the entire string, then replace each one of its characters with the previous character of the English alphabet. For example, 'b' is converted to 'a', and 'a' is converted to 'z'.</li> </ul> <p>Return the lexicographically smallest string you can obtain after performing the above operation exactly once.</p> <p>A substring is a contiguous sequence of characters in a string.</p> <p>A string <code>x</code> is lexicographically smaller than a string <code>y</code> of the same length if <code>x[i]</code> comes before <code>y[i]</code> in alphabetic order for the first position <code>i</code> such that <code>x[i] != y[i]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"cbabc\"\nOutput: \"baabc\"\nExplanation: We apply the operation on the substring starting at index 0, and ending at index 1 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n</pre> <p>Example 2:</p> <pre>\nInput: s = \"acbbc\"\nOutput: \"abaab\"\nExplanation: We apply the operation on the substring starting at index 1, and ending at index 4 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n</pre> <p>Example 3:</p> <pre>\nInput: s = \"leetcode\"\nOutput: \"kddsbncd\"\nExplanation: We apply the operation on the entire string. \nIt can be proven that the resulting string is the lexicographically smallest. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li> <li><code>s</code> consists of lowercase English letters</li> </ul>"},{"location":"LeetCode_Problems/2735/","title":"2735. Collecting Chocolates","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of size <code>n</code> representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index <code>i</code>\u00a0is <code>nums[i]</code>. Each chocolate is of a different type, and initially, the chocolate at the index\u00a0<code>i</code>\u00a0is of <code>i<sup>th</sup></code> type.</p> <p>In one operation, you can do the following with an incurred cost of <code>x</code>:</p> <ul> <li>Simultaneously change the chocolate of <code>i<sup>th</sup></code> type to <code>((i + 1) mod n)<sup>th</sup></code> type for all chocolates.</li> </ul> <p>Return the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [20,1,15], x = 5\nOutput: 13\nExplanation: Initially, the chocolate types are [0,1,2]. We will buy the 1<sup>st</sup>\u00a0type of chocolate at a cost of 1.\nNow, we will perform the operation at a cost of 5, and the types of chocolates will become [1,2,0]. We will buy the 2<sup>nd</sup><sup> </sup>type of chocolate at a cost of 1.\nNow, we will again perform the operation at a cost of 5, and the chocolate types will become [2,0,1]. We will buy the 0<sup>th </sup>type of chocolate at a cost of 1. \nThus, the total cost will become (1 + 5 + 1 + 5 + 1) = 13. We can prove that this is optimal.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3], x = 4\nOutput: 6\nExplanation: We will collect all three types of chocolates at their own price without performing any operations. Therefore, the total cost is 1 + 2 + 3 = 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= x &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2736/","title":"2736. Maximum Sum Queries","text":"Problem <p>You are given two 0-indexed integer arrays <code>nums1</code> and <code>nums2</code>, each of length <code>n</code>, and a 1-indexed 2D array <code>queries</code> where <code>queries[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>.</p> <p>For the <code>i<sup>th</sup></code> query, find the maximum value of <code>nums1[j] + nums2[j]</code> among all indices <code>j</code> <code>(0 &lt;= j &lt; n)</code>, where <code>nums1[j] &gt;= x<sub>i</sub></code> and <code>nums2[j] &gt;= y<sub>i</sub></code>, or -1 if there is no <code>j</code> satisfying the constraints.</p> <p>Return an array <code>answer</code> where <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]\nOutput: [6,10,7]\nExplanation: \nFor the 1st query <code>x<sub>i</sub> = 4</code>\u00a0and\u00a0<code>y<sub>i</sub> = 1</code>, we can select index\u00a0<code>j = 0</code>\u00a0since\u00a0<code>nums1[j] &gt;= 4</code>\u00a0and\u00a0<code>nums2[j] &gt;= 1</code>. The sum\u00a0<code>nums1[j] + nums2[j]</code>\u00a0is 6, and we can show that 6 is the maximum we can obtain.\n\nFor the 2nd query <code>x<sub>i</sub> = 1</code>\u00a0and\u00a0<code>y<sub>i</sub> = 3</code>, we can select index\u00a0<code>j = 2</code>\u00a0since\u00a0<code>nums1[j] &gt;= 1</code>\u00a0and\u00a0<code>nums2[j] &gt;= 3</code>. The sum\u00a0<code>nums1[j] + nums2[j]</code>\u00a0is 10, and we can show that 10 is the maximum we can obtain. \n\nFor the 3rd query <code>x<sub>i</sub> = 2</code>\u00a0and\u00a0<code>y<sub>i</sub> = 5</code>, we can select index\u00a0<code>j = 3</code>\u00a0since\u00a0<code>nums1[j] &gt;= 2</code>\u00a0and\u00a0<code>nums2[j] &gt;= 5</code>. The sum\u00a0<code>nums1[j] + nums2[j]</code>\u00a0is 7, and we can show that 7 is the maximum we can obtain.\n\nTherefore, we return\u00a0<code>[6,10,7]</code>.\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [3,2,5], nums2 = [2,3,4], queries = [[4,4],[3,2],[1,1]]\nOutput: [9,9,9]\nExplanation: For this example, we can use index\u00a0<code>j = 2</code>\u00a0for all the queries since it satisfies the constraints for each query.\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [2,1], nums2 = [2,3], queries = [[3,3]]\nOutput: [-1]\nExplanation: There is one query in this example with <code>x<sub>i</sub></code> = 3 and <code>y<sub>i</sub></code> = 3. For every index, j, either nums1[j] &lt; <code>x<sub>i</sub></code> or nums2[j] &lt; <code>y<sub>i</sub></code>. Hence, there is no solution. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>nums1.length == nums2.length</code> </li> <li><code>n ==\u00a0nums1.length\u00a0</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup> </code></li> <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> <li><code>queries[i].length ==\u00a02</code></li> <li><code>x<sub>i</sub>\u00a0== queries[i][1]</code></li> <li><code>y<sub>i</sub> == queries[i][2]</code></li> <li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2737/","title":"2737. Find the Closest Marked Node","text":"Problem"},{"location":"LeetCode_Problems/2738/","title":"2738. Count Occurrences in Text","text":"Problem"},{"location":"LeetCode_Problems/2739/","title":"2739. Total Distance Traveled","text":"Problem <p>A truck has two fuel tanks. You are given two integers, <code>mainTank</code> representing the fuel present in the main tank in liters and <code>additionalTank</code> representing the fuel present in the additional tank in liters.</p> <p>The truck has a mileage of <code>10</code> km per liter. Whenever <code>5</code> liters of fuel get\u00a0used up in the main tank,\u00a0if the additional tank has at least <code>1</code> liters of fuel, <code>1</code> liters of fuel will be transferred from the additional tank to the main tank.</p> <p>Return the maximum distance which can be traveled.</p> <p>Note: Injection from the additional tank is not continuous. It happens suddenly and immediately for every 5 liters consumed.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: mainTank = 5, additionalTank = 10\nOutput: 60\nExplanation: \nAfter spending 5 litre of fuel, fuel remaining is (5 - 5 + 1) = 1 litre and distance traveled is 50km.\nAfter spending another 1 litre of fuel, no fuel gets injected in the main tank and the main tank becomes empty.\nTotal distance traveled is 60km.\n</pre> <p>Example 2:</p> <pre>\nInput: mainTank = 1, additionalTank = 2\nOutput: 10\nExplanation: \nAfter spending 1 litre of fuel, the main tank becomes empty.\nTotal distance traveled is 10km.\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= mainTank, additionalTank &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2740/","title":"2740. Find the Value of the Partition","text":"Problem <p>You are given a positive integer array <code>nums</code>.</p> <p>Partition <code>nums</code> into two arrays,\u00a0<code>nums1</code> and <code>nums2</code>, such that:</p> <ul> <li>Each element of the array <code>nums</code> belongs to either the array <code>nums1</code> or the array <code>nums2</code>.</li> <li>Both arrays are non-empty.</li> <li>The value of the partition is minimized.</li> </ul> <p>The value of the partition is <code>|max(nums1) - min(nums2)|</code>.</p> <p>Here, <code>max(nums1)</code> denotes the maximum element of the array <code>nums1</code>, and <code>min(nums2)</code> denotes the minimum element of the array <code>nums2</code>.</p> <p>Return the integer denoting the value of such partition.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,2,4]\nOutput: 1\nExplanation: We can partition the array nums into nums1 = [1,2] and nums2 = [3,4].\n- The maximum element of the array nums1 is equal to 2.\n- The minimum element of the array nums2 is equal to 3.\nThe value of the partition is |2 - 3| = 1. \nIt can be proven that 1 is the minimum value out of all partitions.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [100,1,10]\nOutput: 9\nExplanation: We can partition the array nums into nums1 = [10] and nums2 = [100,1].\n- The maximum element of the array nums1 is equal to 10.\n- The minimum element of the array nums2 is equal to 1.\nThe value of the partition is |10 - 1| = 9.\nIt can be proven that 9 is the minimum value out of all partitions.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2741/","title":"2741. Special Permutations","text":"Problem <p>You are given a\u00a00-indexed\u00a0integer array\u00a0<code>nums</code>\u00a0containing\u00a0<code>n</code> distinct positive integers. A permutation of\u00a0<code>nums</code>\u00a0is called special if:</p> <ul> <li>For all indexes\u00a0<code>0 &lt;= i &lt; n - 1</code>, either\u00a0<code>nums[i] % nums[i+1] == 0</code>\u00a0or\u00a0<code>nums[i+1] % nums[i] == 0</code>.</li> </ul> <p>Return\u00a0the total number of special permutations.\u00a0As the answer could be large, return it\u00a0modulo\u00a0<code>10<sup>9\u00a0</sup>+ 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,6]\nOutput: 2\nExplanation: [3,6,2] and [2,6,3] are the two special permutations of nums.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,4,3]\nOutput: 2\nExplanation: [3,1,4] and [4,1,3] are the two special permutations of nums.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 14</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2742/","title":"2742. Painting the Walls","text":"Problem <p>You are given two 0-indexed integer arrays,\u00a0<code>cost</code> and <code>time</code>, of size <code>n</code> representing the costs and the time taken to paint <code>n</code> different walls respectively. There are two painters available:</p> <ul> <li>A\u00a0paid painter\u00a0that paints the <code>i<sup>th</sup></code> wall in <code>time[i]</code> units of time and takes <code>cost[i]</code> units of money.</li> <li>A\u00a0free painter that paints\u00a0any wall in <code>1</code> unit of time at a cost of <code>0</code>. But the\u00a0free painter can only be used if the paid painter is already occupied.</li> </ul> <p>Return the minimum amount of money required to paint the <code>n</code>\u00a0walls.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: cost = [1,2,3,2], time = [1,2,3,2]\nOutput: 3\nExplanation: The walls at index 0 and 1 will be painted by the paid painter, and it will take 3 units of time; meanwhile, the free painter will paint the walls at index 2 and 3, free of cost in 2 units of time. Thus, the total cost is 1 + 2 = 3.\n</pre> <p>Example 2:</p> <pre>\nInput: cost = [2,3,4,2], time = [1,1,1,1]\nOutput: 4\nExplanation: The walls at index 0 and 3 will be painted by the paid painter, and it will take 2 units of time; meanwhile, the free painter will paint the walls at index 1 and 2, free of cost in 2 units of time. Thus, the total cost is 2 + 2 = 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= cost.length &lt;= 500</code></li> <li><code>cost.length == time.length</code></li> <li><code>1 &lt;= cost[i] &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= time[i] &lt;= 500</code></li> </ul>"},{"location":"LeetCode_Problems/2743/","title":"2743. Count Substrings Without Repeating Character","text":"Problem"},{"location":"LeetCode_Problems/2744/","title":"2744. Find Maximum Number of String Pairs","text":"Problem <p>You are given a 0-indexed array <code>words</code> consisting of distinct strings.</p> <p>The string <code>words[i]</code> can be paired with the string <code>words[j]</code> if:</p> <ul> <li>The string <code>words[i]</code> is equal to the reversed string of <code>words[j]</code>.</li> <li><code>0 &lt;= i &lt; j &lt; words.length</code>.</li> </ul> <p>Return the maximum number of pairs that can be formed from the array <code>words</code>.</p> <p>Note that\u00a0each string can belong in\u00a0at most one pair.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]\nOutput: 2\nExplanation: In this example, we can form 2 pair of strings in the following way:\n- We pair the 0<sup>th</sup> string with the 2<sup>nd</sup> string, as the reversed string of word[0] is \"dc\" and is equal to words[2].\n- We pair the 1<sup>st</sup> string with the 3<sup>rd</sup> string, as the reversed string of word[1] is \"ca\" and is equal to words[3].\nIt can be proven that 2 is the maximum number of pairs that can be formed.</pre> <p>Example 2:</p> <pre>\nInput: words = [\"ab\",\"ba\",\"cc\"]\nOutput: 1\nExplanation: In this example, we can form 1 pair of strings in the following way:\n- We pair the 0<sup>th</sup> string with the 1<sup>st</sup> string, as the reversed string of words[1] is \"ab\" and is equal to words[0].\nIt can be proven that 1 is the maximum number of pairs that can be formed.\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"aa\",\"ab\"]\nOutput: 0\nExplanation: In this example, we are unable to form any pair of strings.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 50</code></li> <li><code>words[i].length == 2</code></li> <li><code>words</code>\u00a0consists of distinct strings.</li> <li><code>words[i]</code>\u00a0contains only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2745/","title":"2745. Construct the Longest New String","text":"Problem <p>You are given three integers <code>x</code>, <code>y</code>, and <code>z</code>.</p> <p>You have <code>x</code> strings equal to <code>\"AA\"</code>, <code>y</code> strings equal to <code>\"BB\"</code>, and <code>z</code> strings equal to <code>\"AB\"</code>. You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain <code>\"AAA\"</code> or <code>\"BBB\"</code> as a substring.</p> <p>Return the maximum possible length of the new string.</p> <p>A substring is a contiguous non-empty sequence of characters within a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: x = 2, y = 5, z = 1\nOutput: 12\nExplanation: We can concactenate the strings \"BB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AB\" in that order. Then, our new string is \"BBAABBAABBAB\". \nThat string has length 12, and we can show that it is impossible to construct a string of longer length.\n</pre> <p>Example 2:</p> <pre>\nInput: x = 3, y = 2, z = 2\nOutput: 14\nExplanation: We can concactenate the strings \"AB\", \"AB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AA\" in that order. Then, our new string is \"ABABAABBAABBAA\". \nThat string has length 14, and we can show that it is impossible to construct a string of longer length.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= x, y, z &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2746/","title":"2746. Decremental String Concatenation","text":"Problem <p>You are given a 0-indexed array <code>words</code> containing <code>n</code> strings.</p> <p>Let's define a join operation <code>join(x, y)</code> between two strings <code>x</code> and <code>y</code> as concatenating them into <code>xy</code>. However, if the last character of <code>x</code> is equal to the first character of <code>y</code>, one of them is deleted.</p> <p>For example <code>join(\"ab\", \"ba\") = \"aba\"</code> and <code>join(\"ab\", \"cde\") = \"abcde\"</code>.</p> <p>You are to perform <code>n - 1</code> join operations. Let <code>str<sub>0</sub> = words[0]</code>. Starting from <code>i = 1</code> up to <code>i = n - 1</code>, for the <code>i<sup>th</sup></code> operation, you can do one of the following:</p> <ul> <li>Make <code>str<sub>i</sub> = join(str<sub>i - 1</sub>, words[i])</code></li> <li>Make <code>str<sub>i</sub> = join(words[i], str<sub>i - 1</sub>)</code></li> </ul> <p>Your task is to minimize the length of <code>str<sub>n - 1</sub></code>.</p> <p>Return an integer denoting the minimum possible length of <code>str<sub>n - 1</sub></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"aa\",\"ab\",\"bc\"]\nOutput: 4\nExplanation: In this example, we can perform join operations in the following order to minimize the length of str<sub>2</sub>: \nstr<sub>0</sub> = \"aa\"\nstr<sub>1</sub> = join(str<sub>0</sub>, \"ab\") = \"aab\"\nstr<sub>2</sub> = join(str<sub>1</sub>, \"bc\") = \"aabc\" \nIt can be shown that the minimum possible length of str<sub>2</sub> is 4.</pre> <p>Example 2:</p> <pre>\nInput: words = [\"ab\",\"b\"]\nOutput: 2\nExplanation: In this example, str<sub>0</sub> = \"ab\", there are two ways to get str<sub>1</sub>: \njoin(str<sub>0</sub>, \"b\") = \"ab\" or join(\"b\", str<sub>0</sub>) = \"bab\". \nThe first string, \"ab\", has the minimum length. Hence, the answer is 2.\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"aaa\",\"c\",\"aba\"]\nOutput: 6\nExplanation: In this example, we can perform join operations in the following order to minimize the length of str<sub>2</sub>: \nstr<sub>0</sub> = \"aaa\"\nstr<sub>1</sub> = join(str<sub>0</sub>, \"c\") = \"aaac\"\nstr<sub>2</sub> = join(\"aba\", str<sub>1</sub>) = \"abaaac\"\nIt can be shown that the minimum possible length of str<sub>2</sub> is 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 50</code></li> <li>Each character in <code>words[i]</code> is an English lowercase letter</li> </ul>"},{"location":"LeetCode_Problems/2747/","title":"2747. Count Zero Request Servers","text":"Problem <p>You are given an integer <code>n</code> denoting the total number of servers and a 2D 0-indexed integer array <code>logs</code>, where <code>logs[i] = [server_id, time]</code> denotes that the server with id <code>server_id</code> received a request at time <code>time</code>.</p> <p>You are also given an integer <code>x</code> and a 0-indexed integer array <code>queries</code>.</p> <p>Return a 0-indexed integer array <code>arr</code> of length <code>queries.length</code> where <code>arr[i]</code> represents the number of servers that did not receive any requests during the time interval <code>[queries[i] - x, queries[i]]</code>.</p> <p>Note that the time intervals are inclusive.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, logs = [[1,3],[2,6],[1,5]], x = 5, queries = [10,11]\nOutput: [1,2]\nExplanation: \nFor queries[0]: The servers with ids 1 and 2 get requests in the duration of [5, 10]. Hence, only server 3 gets zero requests.\nFor queries[1]: Only the server with id 2 gets a request in duration of [6,11]. Hence, the servers with ids 1 and 3 are the only servers that do not receive any requests during that time period.\n\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2, queries = [3,4]\nOutput: [0,1]\nExplanation: \nFor queries[0]: All servers get at least one request in the duration of [1, 3].\nFor queries[1]: Only server with id 3 gets no request in the duration [2,4].\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= logs.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li> <li><code>logs[i].length == 2</code></li> <li><code>1 &lt;= logs[i][0] &lt;= n</code></li> <li><code>1 &lt;= logs[i][1] &lt;= 10<sup>6</sup></code></li> <li><code>1 &lt;= x &lt;= 10<sup>5</sup></code></li> <li><code>x &lt;\u00a0queries[i]\u00a0&lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2748/","title":"2748. Number of Beautiful Pairs","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. A pair of indices <code>i</code>, <code>j</code> where <code>0 &lt;=\u00a0i &lt; j &lt; nums.length</code> is called beautiful if the first digit of <code>nums[i]</code> and the last digit of <code>nums[j]</code> are coprime.</p> <p>Return the total number of beautiful pairs in <code>nums</code>.</p> <p>Two integers <code>x</code> and <code>y</code> are coprime if there is no integer greater than 1 that divides both of them. In other words, <code>x</code> and <code>y</code> are coprime if <code>gcd(x, y) == 1</code>, where <code>gcd(x, y)</code> is the greatest common divisor of <code>x</code> and <code>y</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,5,1,4]\nOutput: 5\nExplanation: There are 5 beautiful pairs in nums:\nWhen i = 0 and j = 1: the first digit of nums[0] is 2, and the last digit of nums[1] is 5. We can confirm that 2 and 5 are coprime, since gcd(2,5) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 2, and the last digit of nums[2] is 1. Indeed, gcd(2,1) == 1.\nWhen i = 1 and j = 2: the first digit of nums[1] is 5, and the last digit of nums[2] is 1. Indeed, gcd(5,1) == 1.\nWhen i = 1 and j = 3: the first digit of nums[1] is 5, and the last digit of nums[3] is 4. Indeed, gcd(5,4) == 1.\nWhen i = 2 and j = 3: the first digit of nums[2] is 1, and the last digit of nums[3] is 4. Indeed, gcd(1,4) == 1.\nThus, we return 5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [11,21,12]\nOutput: 2\nExplanation: There are 2 beautiful pairs:\nWhen i = 0 and j = 1: the first digit of nums[0] is 1, and the last digit of nums[1] is 1. Indeed, gcd(1,1) == 1.\nWhen i = 0 and j = 2: the first digit of nums[0] is 1, and the last digit of nums[2] is 2. Indeed, gcd(1,2) == 1.\nThus, we return 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 9999</code></li> <li><code>nums[i] % 10 != 0</code></li> </ul>"},{"location":"LeetCode_Problems/2749/","title":"2749. Minimum Operations to Make the Integer Zero","text":"Problem <p>You are given two integers <code>num1</code> and <code>num2</code>.</p> <p>In one operation, you can choose integer <code>i</code> in the range <code>[0, 60]</code> and subtract <code>2<sup>i</sup> + num2</code> from <code>num1</code>.</p> <p>Return the integer denoting the minimum number of operations needed to make <code>num1</code> equal to <code>0</code>.</p> <p>If it is impossible to make <code>num1</code> equal to <code>0</code>, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num1 = 3, num2 = -2\nOutput: 3\nExplanation: We can make 3 equal to 0 with the following operations:\n- We choose i = 2 and substract 2<sup>2</sup> + (-2) from 3, 3 - (4 + (-2)) = 1.\n- We choose i = 2 and substract 2<sup>2</sup>\u00a0+ (-2) from 1, 1 - (4 + (-2)) = -1.\n- We choose i = 0 and substract 2<sup>0</sup>\u00a0+ (-2) from -1, (-1) - (1 + (-2)) = 0.\nIt can be proven, that 3 is the minimum number of operations that we need to perform.\n</pre> <p>Example 2:</p> <pre>\nInput: num1 = 5, num2 = 7\nOutput: -1\nExplanation: It can be proven, that it is impossible to make 5 equal to 0 with the given operation.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num1 &lt;= 10<sup>9</sup></code></li> <li><code>-10<sup>9</sup>\u00a0&lt;= num2 &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2750/","title":"2750. Ways to Split Array Into Good Subarrays","text":"Problem <p>You are given a binary array <code>nums</code>.</p> <p>A subarray of an array is good if it contains exactly one element with the value <code>1</code>.</p> <p>Return an integer denoting the number of ways to split the array <code>nums</code> into good subarrays. As the number may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [0,1,0,0,1]\nOutput: 3\nExplanation: There are 3 ways to split nums into good subarrays:\n- [0,1] [0,0,1]\n- [0,1,0] [0,1]\n- [0,1,0,0] [1]\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [0,1,0]\nOutput: 1\nExplanation: There is 1 way to split nums into good subarrays:\n- [0,1,0]\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 1</code></li> </ul>"},{"location":"LeetCode_Problems/2751/","title":"2751. Robot Collisions","text":"Problem <p>There are <code>n</code> 1-indexed robots, each having a position on a line, health, and movement direction.</p> <p>You are given 0-indexed integer arrays <code>positions</code>, <code>healths</code>, and a string <code>directions</code> (<code>directions[i]</code> is either 'L' for left or 'R' for right). All integers in <code>positions</code> are unique.</p> <p>All robots start moving on the line simultaneously at the same speed in their given directions. If two robots ever share the same position while moving, they will collide.</p> <p>If two robots collide, the robot with lower health is removed from the line, and the health of the other robot decreases by one. The surviving robot continues in the same direction it was going. If both robots have the same health, they are both removed from the line.</p> <p>Your task is to determine the health of the robots that survive the collisions, in the same order that the robots were given, i.e. final heath of robot 1 (if survived), final health of robot 2 (if survived), and so on. If there are no survivors, return an empty array.</p> <p>Return an array containing the health of the remaining robots (in the order they were given in the input), after no further collisions can occur.</p> <p>Note: The positions may be unsorted.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: positions = [5,4,3,2,1], healths = [2,17,9,15,10], directions = \"RRRRR\"\nOutput: [2,17,9,15,10]\nExplanation: No collision occurs in this example, since all robots are moving in the same direction. So, the health of the robots in order from the first robot is returned, [2, 17, 9, 15, 10].\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: positions = [3,5,2,6], healths = [10,10,15,12], directions = \"RLRL\"\nOutput: [14]\nExplanation: There are 2 collisions in this example. Firstly, robot 1 and robot 2 will collide, and since both have the same health, they will be removed from the line. Next, robot 3 and robot 4 will collide and since robot 4's health is smaller, it gets removed, and robot 3's health becomes 15 - 1 = 14. Only robot 3 remains, so we return [14].\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: positions = [1,2,5,6], healths = [10,10,11,11], directions = \"RLRL\"\nOutput: []\nExplanation: Robot 1 and robot 2 will collide and since both have the same health, they are both removed. Robot 3 and 4 will collide and since both have the same health, they are both removed. So, we return an empty array, [].</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= positions.length == healths.length == directions.length == n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= positions[i], healths[i] &lt;= 10<sup>9</sup></code></li> <li><code>directions[i] == 'L'</code> or <code>directions[i] == 'R'</code></li> <li>All values in <code>positions</code> are distinct</li> </ul>"},{"location":"LeetCode_Problems/2752/","title":"2752. Customers with Maximum Number of Transactions on Consecutive Days","text":"Problem"},{"location":"LeetCode_Problems/2753/","title":"2753. Count Houses in a Circular Street II","text":"Problem"},{"location":"LeetCode_Problems/2754/","title":"2754. Bind Function to Context","text":"Problem"},{"location":"LeetCode_Problems/2755/","title":"2755. Deep Merge of Two Objects","text":"Problem"},{"location":"LeetCode_Problems/2756/","title":"2756. Query Batching","text":"Problem"},{"location":"LeetCode_Problems/2757/","title":"2757. Generate Circular Array Values","text":"Problem"},{"location":"LeetCode_Problems/2758/","title":"2758. Next Day","text":"Problem"},{"location":"LeetCode_Problems/2759/","title":"2759. Convert JSON String to Object","text":"Problem"},{"location":"LeetCode_Problems/2760/","title":"2760. Longest Even Odd Subarray With Threshold","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and an integer <code>threshold</code>.</p> <p>Find the length of the longest subarray of <code>nums</code> starting at index <code>l</code> and ending at index <code>r</code> <code>(0 &lt;= l &lt;= r &lt; nums.length)</code> that satisfies the following conditions:</p> <ul> <li><code>nums[l] % 2 == 0</code></li> <li>For all indices <code>i</code> in the range <code>[l, r - 1]</code>, <code>nums[i] % 2 != nums[i + 1] % 2</code></li> <li>For all indices <code>i</code> in the range <code>[l, r]</code>, <code>nums[i] &lt;= threshold</code></li> </ul> <p>Return an integer denoting the length of the longest such subarray.</p> <p>Note: A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,2,5,4], threshold = 5\nOutput: 3\nExplanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 3 =&gt; [2,5,4]. This subarray satisfies the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2], threshold = 2\nOutput: 1\nExplanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 1 =&gt; [2]. \nIt satisfies all the conditions and we can show that 1 is the maximum possible achievable length.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,3,4,5], threshold = 4\nOutput: 3\nExplanation: In this example, we can select the subarray that starts at l = 0 and ends at r = 2 =&gt; [2,3,4]. \nIt satisfies all the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100 </code></li> <li><code>1 &lt;= nums[i] &lt;= 100 </code></li> <li><code>1 &lt;= threshold &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2761/","title":"2761. Prime Pairs With Target Sum","text":"Problem <p>You are given an integer <code>n</code>. We say that two integers <code>x</code> and <code>y</code> form a prime number pair if:</p> <ul> <li><code>1 &lt;= x &lt;= y &lt;= n</code></li> <li><code>x + y == n</code></li> <li><code>x</code> and <code>y</code> are prime numbers</li> </ul> <p>Return the 2D sorted list of prime number pairs <code>[x<sub>i</sub>, y<sub>i</sub>]</code>. The list should be sorted in increasing order of <code>x<sub>i</sub></code>. If there are no prime number pairs at all, return an empty array.</p> <p>Note: A prime number is a natural number greater than <code>1</code> with only two factors, itself and <code>1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10\nOutput: [[3,7],[5,5]]\nExplanation: In this example, there are two prime pairs that satisfy the criteria. \nThese pairs are [3,7] and [5,5], and we return them in the sorted order as described in the problem statement.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2\nOutput: []\nExplanation: We can show that there is no prime number pair that gives a sum of 2, so we return an empty array. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2762/","title":"2762. Continuous Subarrays","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. A subarray of <code>nums</code> is called continuous if:</p> <ul> <li>Let <code>i</code>, <code>i + 1</code>, ..., <code>j</code>be the indices in the subarray. Then, for each pair of indices <code>i &lt;= i<sub>1</sub>, i<sub>2</sub> &lt;= j</code>, <code>0 &lt;= |nums[i<sub>1</sub>] - nums[i<sub>2</sub>]| &lt;= 2</code>.</li> </ul> <p>Return the total number of continuous subarrays.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,4,2,4]\nOutput: 8\nExplanation: \nContinuous subarray of size 1: [5], [4], [2], [4].\nContinuous subarray of size 2: [5,4], [4,2], [2,4].\nContinuous subarray of size 3: [4,2,4].\nThereare no subarrys of size 4.\nTotal continuous subarrays = 4 + 3 + 1 = 8.\nIt can be shown that there are no more continuous subarrays.\n</pre> <p> </p> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 6\nExplanation: \nContinuous subarray of size 1: [1], [2], [3].\nContinuous subarray of size 2: [1,2], [2,3].\nContinuous subarray of size 3: [1,2,3].\nTotal continuous subarrays = 3 + 2 + 1 = 6.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2763/","title":"2763. Sum of Imbalance Numbers of All Subarrays","text":"Problem <p>The imbalance number of a 0-indexed integer array <code>arr</code> of length <code>n</code> is defined as the number of indices in <code>sarr = sorted(arr)</code> such that:</p> <ul> <li><code>0 &lt;= i &lt; n - 1</code>, and</li> <li><code>sarr[i+1] - sarr[i] &gt; 1</code></li> </ul> <p>Here, <code>sorted(arr)</code> is the function that returns the sorted version of <code>arr</code>.</p> <p>Given a 0-indexed integer array <code>nums</code>, return the sum of imbalance numbers of all its subarrays.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,1,4]\nOutput: 3\nExplanation: There are 3 subarrays with non-zero imbalance numbers:\n- Subarray [3, 1] with an imbalance number of 1.\n- Subarray [3, 1, 4] with an imbalance number of 1.\n- Subarray [1, 4] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 3. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,3,3,5]\nOutput: 8\nExplanation: There are 7 subarrays with non-zero imbalance numbers:\n- Subarray [1, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3] with an imbalance number of 1.\n- Subarray [1, 3, 3, 3, 5] with an imbalance number of 2. \n- Subarray [3, 3, 3, 5] with an imbalance number of 1. \n- Subarray [3, 3, 5] with an imbalance number of 1.\n- Subarray [3, 5] with an imbalance number of 1.\nThe imbalance number of all other subarrays is 0. Hence, the sum of imbalance numbers of all the subarrays of nums is 8. </pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/2764/","title":"2764. is Array a Preorder of Some \u200cBinary Tree","text":"Problem"},{"location":"LeetCode_Problems/2765/","title":"2765. Longest Alternating Subarray","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. A subarray <code>s</code> of length <code>m</code> is called alternating if:</p> <ul> <li><code>m</code> is greater than <code>1</code>.</li> <li><code>s<sub>1</sub> = s<sub>0</sub> + 1</code>.</li> <li>The 0-indexed subarray <code>s</code> looks like <code>[s<sub>0</sub>, s<sub>1</sub>, s<sub>0</sub>, s<sub>1</sub>,...,s<sub>(m-1) % 2</sub>]</code>. In other words, <code>s<sub>1</sub> - s<sub>0</sub> = 1</code>, <code>s<sub>2</sub> - s<sub>1</sub> = -1</code>, <code>s<sub>3</sub> - s<sub>2</sub> = 1</code>, <code>s<sub>4</sub> - s<sub>3</sub> = -1</code>, and so on up to <code>s[m - 1] - s[m - 2] = (-1)<sup>m</sup></code>.</li> </ul> <p>Return the maximum length of all alternating subarrays present in <code>nums</code> or <code>-1</code> if no such subarray exists.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,4,3,4]\nOutput: 4\nExplanation: The alternating subarrays are [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,5,6]\nOutput: 2\nExplanation: [4,5] and [5,6] are the only two alternating subarrays. They are both of length 2.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2766/","title":"2766. Relocate Marbles","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> representing the initial positions of some marbles. You are also given two 0-indexed integer arrays <code>moveFrom</code> and <code>moveTo</code> of equal length.</p> <p>Throughout <code>moveFrom.length</code> steps, you will change the positions of the marbles. On the <code>i<sup>th</sup></code> step, you will move all marbles at position <code>moveFrom[i]</code> to position <code>moveTo[i]</code>.</p> <p>After completing all the steps, return the sorted list of occupied positions.</p> <p>Notes:</p> <ul> <li>We call a position occupied if there is at least one marble in that position.</li> <li>There may be multiple marbles in a single position.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]\nOutput: [5,6,8,9]\nExplanation: Initially, the marbles are at positions 1,6,7,8.\nAt the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.\nAt the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.\nAt the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.\nAt the end, the final positions containing at least one marbles are [5,6,8,9].</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]\nOutput: [2]\nExplanation: Initially, the marbles are at positions [1,1,3,3].\nAt the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].\nAt the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].\nSince 2 is the only occupied position, we return [2].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= moveFrom.length &lt;= 10<sup>5</sup></code></li> <li><code>moveFrom.length == moveTo.length</code></li> <li><code>1 &lt;= nums[i], moveFrom[i], moveTo[i] &lt;= 10<sup>9</sup></code></li> <li>The test cases are generated such that there is at least a marble in\u00a0<code>moveFrom[i]</code>\u00a0at the moment we want to apply\u00a0the <code>i<sup>th</sup></code>\u00a0move.</li> </ul>"},{"location":"LeetCode_Problems/2767/","title":"2767. Partition String Into Minimum Beautiful Substrings","text":"Problem <p>Given a binary string <code>s</code>, partition the string into one or more substrings such that each substring is beautiful.</p> <p>A string is beautiful if:</p> <ul> <li>It doesn't contain leading zeros.</li> <li>It's the binary representation of a number that is a power of <code>5</code>.</li> </ul> <p>Return the minimum number of substrings in such partition. If it is impossible to partition the string <code>s</code> into beautiful substrings,\u00a0return <code>-1</code>.</p> <p>A substring is a contiguous sequence of characters in a string.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"1011\"\nOutput: 2\nExplanation: We can paritition the given string into [\"101\", \"1\"].\n- The string \"101\" does not contain leading zeros and is the binary representation of integer 5<sup>1</sup> = 5.\n- The string \"1\" does not contain leading zeros and is the binary representation of integer 5<sup>0</sup> = 1.\nIt can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"111\"\nOutput: 3\nExplanation: We can paritition the given string into [\"1\", \"1\", \"1\"].\n- The string \"1\" does not contain leading zeros and is the binary representation of integer 5<sup>0</sup> = 1.\nIt can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into.\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"0\"\nOutput: -1\nExplanation: We can not partition the given string into beautiful substrings.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 15</code></li> <li><code>s[i]</code> is either <code>'0'</code> or <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2768/","title":"2768. Number of Black Blocks","text":"Problem <p>You are given two integers <code>m</code> and <code>n</code> representing the dimensions of a\u00a00-indexed <code>m x n</code> grid.</p> <p>You are also given a 0-indexed 2D integer matrix <code>coordinates</code>, where <code>coordinates[i] = [x, y]</code> indicates that the cell with coordinates <code>[x, y]</code> is colored black. All cells in the grid that do not appear in <code>coordinates</code> are white.</p> <p>A block is defined as a <code>2 x 2</code> submatrix of the grid. More formally, a block with cell <code>[x, y]</code> as its top-left corner where <code>0 &lt;= x &lt; m - 1</code> and <code>0 &lt;= y &lt; n - 1</code> contains the coordinates <code>[x, y]</code>, <code>[x + 1, y]</code>, <code>[x, y + 1]</code>, and <code>[x + 1, y + 1]</code>.</p> <p>Return a 0-indexed integer array <code>arr</code> of size <code>5</code> such that <code>arr[i]</code> is the number of blocks that contains exactly <code>i</code> black cells.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: m = 3, n = 3, coordinates = [[0,0]]\nOutput: [3,1,0,0,0]\nExplanation: The grid looks like this:\n\nThere is only 1 block with one black cell, and it is the block starting with cell [0,0].\nThe other 3 blocks start with cells [0,1], [1,0] and [1,1]. They all have zero black cells. \nThus, we return [3,1,0,0,0]. \n</pre> <p>Example 2:</p> <pre>\nInput: m = 3, n = 3, coordinates = [[0,0],[1,1],[0,2]]\nOutput: [0,2,2,0,0]\nExplanation: The grid looks like this:\n\nThere are 2 blocks with two black cells (the ones starting with cell coordinates [0,0] and [0,1]).\nThe other 2 blocks have starting cell coordinates of [1,0] and [1,1]. They both have 1 black cell.\nTherefore, we return [0,2,2,0,0].\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= m &lt;= 10<sup>5</sup></code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= coordinates.length &lt;= 10<sup>4</sup></code></li> <li><code>coordinates[i].length == 2</code></li> <li><code>0 &lt;= coordinates[i][0] &lt; m</code></li> <li><code>0 &lt;= coordinates[i][1] &lt; n</code></li> <li>It is guaranteed that <code>coordinates</code> contains pairwise distinct coordinates.</li> </ul>"},{"location":"LeetCode_Problems/2769/","title":"2769. Find the Maximum Achievable Number","text":"Problem <p>You are given two integers, <code>num</code> and <code>t</code>.</p> <p>An integer <code>x</code> is called achievable if it can become equal to <code>num</code> after applying the following operation no more than <code>t</code> times:</p> <ul> <li>Increase or decrease <code>x</code> by <code>1</code>, and simultaneously increase or decrease <code>num</code> by <code>1</code>.</li> </ul> <p>Return the maximum possible achievable number. It can be proven that there exists at least one achievable number.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = 4, t = 1\nOutput: 6\nExplanation: The maximum achievable number is x = 6; it can become equal to num after performing this operation:\n1- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5. \nIt can be proven that there is no achievable number larger than 6.\n\n</pre> <p>Example 2:</p> <pre>\nInput: num = 3, t = 2\nOutput: 7\nExplanation: The maximum achievable number is x = 7; after performing these operations, x will equal num: \n1- Decrease x by 1, and increase num by 1. Now, x = 6 and num = 4.\n2- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5.\nIt can be proven that there is no achievable number larger than 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num, t\u00a0&lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2770/","title":"2770. Maximum Number of Jumps to Reach the Last Index","text":"Problem <p>You are given a 0-indexed array <code>nums</code> of <code>n</code> integers and an integer <code>target</code>.</p> <p>You are initially positioned at index <code>0</code>. In one step, you can jump from index <code>i</code> to any index <code>j</code> such that:</p> <ul> <li><code>0 &lt;= i &lt; j &lt; n</code></li> <li><code>-target &lt;= nums[j] - nums[i] &lt;= target</code></li> </ul> <p>Return the maximum number of jumps you can make to reach index <code>n - 1</code>.</p> <p>If there is no way to reach index <code>n - 1</code>, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,6,4,1,2], target = 2\nOutput: 3\nExplanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1. \n- Jump from index 1 to index 3.\n- Jump from index 3 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 3 jumps. Hence, the answer is 3. </pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,6,4,1,2], target = 3\nOutput: 5\nExplanation: To go from index 0 to index n - 1 with the maximum number of jumps, you can perform the following jumping sequence:\n- Jump from index 0 to index 1.\n- Jump from index 1 to index 2.\n- Jump from index 2 to index 3.\n- Jump from index 3 to index 4.\n- Jump from index 4 to index 5.\nIt can be proven that there is no other jumping sequence that goes from 0 to n - 1 with more than 5 jumps. Hence, the answer is 5. </pre> <p>Example 3:</p> <pre>\nInput: nums = [1,3,6,4,1,2], target = 0\nOutput: -1\nExplanation: It can be proven that there is no jumping sequence that goes from 0 to n - 1. Hence, the answer is -1. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length == n &lt;= 1000</code></li> <li><code>-10<sup>9</sup>\u00a0&lt;= nums[i]\u00a0&lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= target &lt;= 2 * 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2771/","title":"2771. Longest Non-decreasing Subarray From Two Arrays","text":"Problem <p>You are given two 0-indexed integer arrays <code>nums1</code> and <code>nums2</code> of length <code>n</code>.</p> <p>Let's define another 0-indexed integer array, <code>nums3</code>, of length <code>n</code>. For each index <code>i</code> in the range <code>[0, n - 1]</code>, you can assign either <code>nums1[i]</code> or <code>nums2[i]</code> to <code>nums3[i]</code>.</p> <p>Your task is to maximize the length of the longest non-decreasing subarray in <code>nums3</code> by choosing its values optimally.</p> <p>Return an integer representing the length of the longest non-decreasing subarray in <code>nums3</code>.</p> <p>Note: A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [2,3,1], nums2 = [1,2,1]\nOutput: 2\nExplanation: One way to construct nums3 is: \nnums3 = [nums1[0], nums2[1], nums2[2]] =&gt; [2,2,1]. \nThe subarray starting from index 0 and ending at index 1, [2,2], forms a non-decreasing subarray of length 2. \nWe can show that 2 is the maximum achievable length.</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,3,2,1], nums2 = [2,2,3,4]\nOutput: 4\nExplanation: One way to construct nums3 is: \nnums3 = [nums1[0], nums2[1], nums2[2], nums2[3]] =&gt; [1,2,3,4]. \nThe entire array forms a non-decreasing subarray of length 4, making it the maximum achievable length.\n</pre> <p>Example 3:</p> <pre>\nInput: nums1 = [1,1], nums2 = [2,2]\nOutput: 2\nExplanation: One way to construct nums3 is: \nnums3 = [nums1[0], nums1[1]] =&gt; [1,1]. \nThe entire array forms a non-decreasing subarray of length 2, making it the maximum achievable length.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length == nums2.length == n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2772/","title":"2772. Apply Operations to Make All Array Elements Equal to Zero","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and a positive integer <code>k</code>.</p> <p>You can apply the following operation on the array any number of times:</p> <ul> <li>Choose any subarray of size <code>k</code> from the array and decrease all its elements by <code>1</code>.</li> </ul> <p>Return <code>true</code> if you can make all the array elements equal to <code>0</code>, or <code>false</code> otherwise.</p> <p>A subarray is a contiguous non-empty part of an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,2,3,1,1,0], k = 3\nOutput: true\nExplanation: We can do the following operations:\n- Choose the subarray [2,2,3]. The resulting array will be nums = [1,1,2,1,1,0].\n- Choose the subarray [2,1,1]. The resulting array will be nums = [1,1,1,0,0,0].\n- Choose the subarray [1,1,1]. The resulting array will be nums = [0,0,0,0,0,0].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,1,1], k = 2\nOutput: false\nExplanation: It is not possible to make all the array elements equal to 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2773/","title":"2773. Height of Special Binary Tree","text":"Problem"},{"location":"LeetCode_Problems/2774/","title":"2774. Array Upper Bound","text":"Problem"},{"location":"LeetCode_Problems/2775/","title":"2775. Undefined to Null","text":"Problem"},{"location":"LeetCode_Problems/2776/","title":"2776. Convert Callback Based Function to Promise Based Function","text":"Problem"},{"location":"LeetCode_Problems/2777/","title":"2777. Date Range Generator","text":"Problem"},{"location":"LeetCode_Problems/2778/","title":"2778. Sum of Squares of Special Elements","text":"Problem <p>You are given a 1-indexed integer array <code>nums</code> of length <code>n</code>.</p> <p>An element <code>nums[i]</code> of <code>nums</code> is called special if <code>i</code> divides <code>n</code>, i.e. <code>n % i == 0</code>.</p> <p>Return the sum of the squares of all special elements of <code>nums</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: 21\nExplanation: There are exactly 3 special elements in nums: nums[1] since 1 divides 4, nums[2] since 2 divides 4, and nums[4] since 4 divides 4. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[4] * nums[4] = 1 * 1 + 2 * 2 + 4 * 4 = 21.  \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,7,1,19,18,3]\nOutput: 63\nExplanation: There are exactly 4 special elements in nums: nums[1] since 1 divides 6, nums[2] since 2 divides 6, nums[3] since 3 divides 6, and nums[6] since 6 divides 6. \nHence, the sum of the squares of all special elements of nums is nums[1] * nums[1] + nums[2] * nums[2] + nums[3] * nums[3] + nums[6] * nums[6] = 2 * 2 + 7 * 7 + 1 * 1 + 3 * 3 = 63. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length == n &lt;= 50</code></li> <li><code>1 &lt;= nums[i] &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2779/","title":"2779. Maximum Beauty of an Array After Applying Operation","text":"Problem <p>You are given a 0-indexed array <code>nums</code> and a non-negative integer <code>k</code>.</p> <p>In one operation, you can do the following:</p> <ul> <li>Choose an index <code>i</code> that hasn't been chosen before from the range <code>[0, nums.length - 1]</code>.</li> <li>Replace <code>nums[i]</code> with any integer from the range <code>[nums[i] - k, nums[i] + k]</code>.</li> </ul> <p>The beauty of the array is the length of the longest subsequence consisting of equal elements.</p> <p>Return the maximum possible beauty of the array <code>nums</code> after applying the operation any number of times.</p> <p>Note that you can apply the operation to each index only once.</p> <p>A\u00a0subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,6,1,2], k = 2\nOutput: 3\nExplanation: In this example, we apply the following operations:\n- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].\n- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].\nAfter the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).\nIt can be proven that 3 is the maximum possible length we can achieve.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1,1], k = 10\nOutput: 4\nExplanation: In this example we don't have to apply any operations.\nThe beauty of the array nums is 4 (whole array).\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i], k &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2780/","title":"2780. Minimum Index of a Valid Split","text":"Problem <p>An element <code>x</code> of an integer array <code>arr</code> of length <code>m</code> is dominant if <code>freq(x) * 2 &gt; m</code>, where <code>freq(x)</code> is the number of occurrences of <code>x</code> in <code>arr</code>. Note that this definition implies that <code>arr</code> can have at most one dominant element.</p> <p>You are given a 0-indexed integer array <code>nums</code> of length <code>n</code> with one dominant element.</p> <p>You can split <code>nums</code> at an index <code>i</code> into two arrays <code>nums[0, ..., i]</code> and <code>nums[i + 1, ..., n - 1]</code>, but the split is only valid if:</p> <ul> <li><code>0 &lt;= i &lt; n - 1</code></li> <li><code>nums[0, ..., i]</code>, and <code>nums[i + 1, ..., n - 1]</code> have the same dominant element.</li> </ul> <p>Here, <code>nums[i, ..., j]</code> denotes the subarray of <code>nums</code> starting at index <code>i</code> and ending at index <code>j</code>, both ends being inclusive. Particularly, if <code>j &lt; i</code> then <code>nums[i, ..., j]</code> denotes an empty subarray.</p> <p>Return the minimum index of a valid split. If no valid split exists, return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,2,2]\nOutput: 2\nExplanation: We can split the array at index 2 to obtain arrays [1,2,2] and [2]. \nIn array [1,2,2], element 2 is dominant since it occurs twice in the array and 2 * 2 &gt; 3. \nIn array [2], element 2 is dominant since it occurs once in the array and 1 * 2 &gt; 1.\nBoth [1,2,2] and [2] have the same dominant element as nums, so this is a valid split. \nIt can be shown that index 2 is the minimum index of a valid split. </pre> <p>Example 2:</p> <pre>\nInput: nums = [2,1,3,1,1,1,7,1,2,1]\nOutput: 4\nExplanation: We can split the array at index 4 to obtain arrays [2,1,3,1,1] and [1,7,1,2,1].\nIn array [2,1,3,1,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 &gt; 5.\nIn array [1,7,1,2,1], element 1 is dominant since it occurs thrice in the array and 3 * 2 &gt; 5.\nBoth [2,1,3,1,1] and [1,7,1,2,1] have the same dominant element as nums, so this is a valid split.\nIt can be shown that index 4 is the minimum index of a valid split.</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,3,3,3,7,2,2]\nOutput: -1\nExplanation: It can be shown that there is no valid split.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>nums</code> has exactly one dominant element.</li> </ul>"},{"location":"LeetCode_Problems/2781/","title":"2781. Length of the Longest Valid Substring","text":"Problem <p>You are given a string <code>word</code> and an array of strings <code>forbidden</code>.</p> <p>A string is called valid if none of its substrings are present in <code>forbidden</code>.</p> <p>Return the length of the longest valid substring of the string <code>word</code>.</p> <p>A substring is a contiguous sequence of characters in a string, possibly empty.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: word = \"cbaaaabc\", forbidden = [\"aaa\",\"cb\"]\nOutput: 4\nExplanation: There are 11 valid substrings in word: \"c\", \"b\", \"a\", \"ba\", \"aa\", \"bc\", \"baa\", \"aab\", \"ab\", \"abc\" and \"aabc\". The length of the longest valid substring is 4. \nIt can be shown that all other substrings contain either \"aaa\" or \"cb\" as a substring. </pre> <p>Example 2:</p> <pre>\nInput: word = \"leetcode\", forbidden = [\"de\",\"le\",\"e\"]\nOutput: 4\nExplanation: There are 11 valid substrings in word: \"l\", \"t\", \"c\", \"o\", \"d\", \"tc\", \"co\", \"od\", \"tco\", \"cod\", and \"tcod\". The length of the longest valid substring is 4.\nIt can be shown that all other substrings contain either \"de\", \"le\", or \"e\" as a substring. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li> <li><code>word</code> consists only of lowercase English letters.</li> <li><code>1 &lt;= forbidden.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= forbidden[i].length &lt;= 10</code></li> <li><code>forbidden[i]</code> consists only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2782/","title":"2782. Number of Unique Categories","text":"Problem"},{"location":"LeetCode_Problems/2783/","title":"2783. Flight Occupancy and Waitlist Analysis","text":"Problem"},{"location":"LeetCode_Problems/2784/","title":"2784. Check if Array is Good","text":"Problem <p>You are given an integer array <code>nums</code>. We consider an array good if it is a permutation of an array <code>base[n]</code>.</p> <p><code>base[n] = [1, 2, ..., n - 1, n, n] </code>(in other words, it is an array of length <code>n + 1</code> which contains <code>1</code> to <code>n - 1 </code>exactly once, plus two occurrences of <code>n</code>). For example, <code>base[1] = [1, 1]</code> and<code> base[3] = [1, 2, 3, 3]</code>.</p> <p>Return <code>true</code> if the given array is good, otherwise return <code>false</code>.</p> <p>Note: A permutation of integers represents an arrangement of these numbers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2, 1, 3]\nOutput: false\nExplanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1, 3, 3, 2]\nOutput: true\nExplanation: Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true.</pre> <p>Example 3:</p> <pre>\nInput: nums = [1, 1]\nOutput: true\nExplanation: Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true.</pre> <p>Example 4:</p> <pre>\nInput: nums = [3, 4, 4, 1, 2, 1]\nOutput: false\nExplanation: Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= num[i] &lt;= 200</code></li> </ul>"},{"location":"LeetCode_Problems/2785/","title":"2785. Sort Vowels in a String","text":"Problem <p>Given a 0-indexed string <code>s</code>, permute <code>s</code> to get a new string <code>t</code> such that:</p> <ul> <li>All consonants remain in their original places. More formally, if there is an index <code>i</code> with <code>0 &lt;= i &lt; s.length</code> such that <code>s[i]</code> is a consonant, then <code>t[i] = s[i]</code>.</li> <li>The vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices <code>i</code>, <code>j</code> with <code>0 &lt;= i &lt; j &lt; s.length</code> such that <code>s[i]</code> and <code>s[j]</code> are vowels, then <code>t[i]</code> must not have a higher ASCII value than <code>t[j]</code>.</li> </ul> <p>Return the resulting string.</p> <p>The vowels are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>, and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"lEetcOde\"\nOutput: \"lEOtcede\"\nExplanation: 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places.\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"lYmpH\"\nOutput: \"lYmpH\"\nExplanation: There are no vowels in s (all characters in s are consonants), so we return \"lYmpH\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li> <li><code>s</code> consists only of letters of the\u00a0English alphabet\u00a0in uppercase and lowercase.</li> </ul>"},{"location":"LeetCode_Problems/2786/","title":"2786. Visit Array Positions to Maximize Score","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and a positive integer <code>x</code>.</p> <p>You are initially at position <code>0</code> in the array and you can visit other positions according to the following rules:</p> <ul> <li>If you are currently in position <code>i</code>, then you can move to any position <code>j</code> such that <code>i &lt; j</code>.</li> <li>For each position <code>i</code> that you visit, you get a score of <code>nums[i]</code>.</li> <li>If you move from a position <code>i</code> to a position <code>j</code> and the parities of <code>nums[i]</code> and <code>nums[j]</code> differ, then you lose a score of <code>x</code>.</li> </ul> <p>Return the maximum total score you can get.</p> <p>Note that initially you have <code>nums[0]</code> points.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,6,1,9,2], x = 5\nOutput: 13\nExplanation: We can visit the following positions in the array: 0 -&gt; 2 -&gt; 3 -&gt; 4.\nThe corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -&gt; 3 will make you lose a score of x = 5.\nThe total score will be: 2 + 6 + 1 + 9 - 5 = 13.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,4,6,8], x = 3\nOutput: 20\nExplanation: All the integers in the array have the same parities, so we can visit all of them without losing any score.\nThe total score is: 2 + 4 + 6 + 8 = 20.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i], x &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2787/","title":"2787. Ways to Express an Integer as Sum of Powers","text":"Problem <p>Given two positive integers <code>n</code> and <code>x</code>.</p> <p>Return the number of ways <code>n</code> can be expressed as the sum of the <code>x<sup>th</sup></code> power of unique positive integers, in other words, the number of sets of unique integers <code>[n<sub>1</sub>, n<sub>2</sub>, ..., n<sub>k</sub>]</code> where <code>n = n<sub>1</sub><sup>x</sup> + n<sub>2</sub><sup>x</sup> + ... + n<sub>k</sub><sup>x</sup></code>.</p> <p>Since the result can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>For example, if <code>n = 160</code> and <code>x = 3</code>, one way to express <code>n</code> is <code>n = 2<sup>3</sup> + 3<sup>3</sup> + 5<sup>3</sup></code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10, x = 2\nOutput: 1\nExplanation: We can express n as the following: n = 3<sup>2</sup> + 1<sup>2</sup> = 10.\nIt can be shown that it is the only way to express 10 as the sum of the 2<sup>nd</sup> power of unique integers.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 4, x = 1\nOutput: 2\nExplanation: We can express n in the following ways:\n- n = 4<sup>1</sup> = 4.\n- n = 3<sup>1</sup> + 1<sup>1</sup> = 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 300</code></li> <li><code>1 &lt;= x &lt;= 5</code></li> </ul>"},{"location":"LeetCode_Problems/2788/","title":"2788. Split Strings by Separator","text":"Problem <p>Given an array of strings <code>words</code> and a character <code>separator</code>, split each string in <code>words</code> by <code>separator</code>.</p> <p>Return an array of strings containing the new strings formed after the splits, excluding empty strings.</p> <p>Notes</p> <ul> <li><code>separator</code> is used to determine where the split should occur, but it is not included as part of the resulting strings.</li> <li>A split may result in more than two strings.</li> <li>The resulting strings must maintain the same order as they were initially given.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"one.two.three\",\"four.five\",\"six\"], separator = \".\"\nOutput: [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"]\nExplanation: In this example we split as follows:\n\n\"one.two.three\" splits into \"one\", \"two\", \"three\"\n\"four.five\" splits into \"four\", \"five\"\n\"six\" splits into \"six\" \n\nHence, the resulting array is [\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"].</pre> <p>Example 2:</p> <pre>\nInput: words = [\"$easy$\",\"$problem$\"], separator = \"$\"\nOutput: [\"easy\",\"problem\"]\nExplanation: In this example we split as follows: \n\n\"$easy$\" splits into \"easy\" (excluding empty strings)\n\"$problem$\" splits into \"problem\" (excluding empty strings)\n\nHence, the resulting array is [\"easy\",\"problem\"].\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"|||\"], separator = \"|\"\nOutput: []\nExplanation: In this example the resulting split of \"|||\" will contain only empty strings, so we return an empty array []. </pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 20</code></li> <li>characters in <code>words[i]</code> are either lowercase English letters or characters from the string <code>\".,|$#@\"</code> (excluding the quotes)</li> <li><code>separator</code> is a character from the string <code>\".,|$#@\"</code> (excluding the quotes)</li> </ul>"},{"location":"LeetCode_Problems/2789/","title":"2789. Largest Element in an Array after Merge Operations","text":"Problem <p>You are given a 0-indexed array <code>nums</code> consisting of positive integers.</p> <p>You can do the following operation on the array any number of times:</p> <ul> <li>Choose an integer <code>i</code> such that <code>0 &lt;= i &lt; nums.length - 1</code> and <code>nums[i] &lt;= nums[i + 1]</code>. Replace the element <code>nums[i + 1]</code> with <code>nums[i] + nums[i + 1]</code> and delete the element <code>nums[i]</code> from the array.</li> </ul> <p>Return the value of the largest element that you can possibly obtain in the final array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,7,9,3]\nOutput: 21\nExplanation: We can apply the following operations on the array:\n- Choose i = 0. The resulting array will be nums = [5,7,9,3].\n- Choose i = 1. The resulting array will be nums = [5,16,3].\n- Choose i = 0. The resulting array will be nums = [21,3].\nThe largest element in the final array is 21. It can be shown that we cannot obtain a larger element.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,3,3]\nOutput: 11\nExplanation: We can do the following operations on the array:\n- Choose i = 1. The resulting array will be nums = [5,6].\n- Choose i = 0. The resulting array will be nums = [11].\nThere is only one element in the final array, which is 11.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2790/","title":"2790. Maximum Number of Groups With Increasing Length","text":"Problem <p>You are given a 0-indexed array <code>usageLimits</code> of length <code>n</code>.</p> <p>Your task is to create groups using numbers from <code>0</code> to <code>n - 1</code>, ensuring that each number, <code>i</code>, is used no more than <code>usageLimits[i]</code> times in total across all groups. You must also satisfy the following conditions:</p> <ul> <li>Each group must consist of distinct numbers, meaning that no duplicate numbers are allowed within a single group.</li> <li>Each group (except the first one) must have a length strictly greater than the previous group.</li> </ul> <p>Return an integer denoting the maximum number of groups you can create while satisfying these conditions.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: <code>usageLimits</code> = [1,2,5]\nOutput: 3\nExplanation: In this example, we can use 0 at most once, 1 at most twice, and 2 at most five times.\nOne way of creating the maximum number of groups while satisfying the conditions is: \nGroup 1 contains the number [2].\nGroup 2 contains the numbers [1,2].\nGroup 3 contains the numbers [0,1,2]. \nIt can be shown that the maximum number of groups is 3. \nSo, the output is 3. </pre> <p>Example 2:</p> <pre>\nInput: <code>usageLimits</code> = [2,1,2]\nOutput: 2\nExplanation: In this example, we can use 0 at most twice, 1 at most once, and 2 at most twice.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nGroup 2 contains the numbers [1,2].\nIt can be shown that the maximum number of groups is 2.\nSo, the output is 2. \n</pre> <p>Example 3:</p> <pre>\nInput: <code>usageLimits</code> = [1,1]\nOutput: 1\nExplanation: In this example, we can use both 0 and 1 at most once.\nOne way of creating the maximum number of groups while satisfying the conditions is:\nGroup 1 contains the number [0].\nIt can be shown that the maximum number of groups is 1.\nSo, the output is 1. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= usageLimits.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= usageLimits[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2791/","title":"2791. Count Paths That Can Form a Palindrome in a Tree","text":"Problem <p>You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node <code>0</code> consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>. The tree is represented by a 0-indexed array <code>parent</code> of size <code>n</code>, where <code>parent[i]</code> is the parent of node <code>i</code>. Since node <code>0</code> is the root, <code>parent[0] == -1</code>.</p> <p>You are also given a string <code>s</code> of length <code>n</code>, where <code>s[i]</code> is the character assigned to the edge between <code>i</code> and <code>parent[i]</code>. <code>s[0]</code> can be ignored.</p> <p>Return the number of pairs of nodes <code>(u, v)</code> such that <code>u &lt; v</code> and the characters assigned to edges on the path from <code>u</code> to <code>v</code> can be rearranged to form a palindrome.</p> <p>A string is a palindrome when it reads the same backwards as forwards.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: parent = [-1,0,0,1,1,2], s = \"acaabc\"\nOutput: 8\nExplanation: The valid pairs are:\n- All the pairs (0,1), (0,2), (1,3), (1,4) and (2,5) result in one character which is always a palindrome.\n- The pair (2,3) result in the string \"aca\" which is a palindrome.\n- The pair (1,5) result in the string \"cac\" which is a palindrome.\n- The pair (3,5) result in the string \"acac\" which can be rearranged into the palindrome \"acca\".\n</pre> <p>Example 2:</p> <pre>\nInput: parent = [-1,0,0,0,0], s = \"aaaaa\"\nOutput: 10\nExplanation: Any pair of nodes (u,v) where u &lt; v is valid.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == parent.length == s.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= parent[i] &lt;= n - 1</code> for all <code>i &gt;= 1</code></li> <li><code>parent[0] == -1</code></li> <li><code>parent</code> represents a valid tree.</li> <li><code>s</code> consists of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2792/","title":"2792. Count Nodes That Are Great Enough","text":"Problem"},{"location":"LeetCode_Problems/2793/","title":"2793. Status of Flight Tickets","text":"Problem"},{"location":"LeetCode_Problems/2794/","title":"2794. Create Object from Two Arrays","text":"Problem"},{"location":"LeetCode_Problems/2795/","title":"2795. Parallel Execution of Promises for Individual Results Retrieval","text":"Problem"},{"location":"LeetCode_Problems/2796/","title":"2796. Repeat String","text":"Problem"},{"location":"LeetCode_Problems/2797/","title":"2797. Partial Function with Placeholders","text":"Problem"},{"location":"LeetCode_Problems/2798/","title":"2798. Number of Employees Who Met the Target","text":"Problem <p>There are <code>n</code> employees in a company, numbered from <code>0</code> to <code>n - 1</code>. Each employee <code>i</code> has worked for <code>hours[i]</code> hours in the company.</p> <p>The company requires each employee to work for at least <code>target</code> hours.</p> <p>You are given a 0-indexed array of non-negative integers <code>hours</code> of length <code>n</code> and a non-negative integer <code>target</code>.</p> <p>Return the integer denoting the number of employees who worked at least <code>target</code> hours.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: hours = [0,1,2,3,4], target = 2\nOutput: 3\nExplanation: The company wants each employee to work for at least 2 hours.\n- Employee 0 worked for 0 hours and didn't meet the target.\n- Employee 1 worked for 1 hours and didn't meet the target.\n- Employee 2 worked for 2 hours and met the target.\n- Employee 3 worked for 3 hours and met the target.\n- Employee 4 worked for 4 hours and met the target.\nThere are 3 employees who met the target.\n</pre> <p>Example 2:</p> <pre>\nInput: hours = [5,1,4,2,2], target = 6\nOutput: 0\nExplanation: The company wants each employee to work for at least 6 hours.\nThere are 0 employees who met the target.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == hours.length &lt;= 50</code></li> <li><code>0 &lt;=\u00a0hours[i], target &lt;= 10<sup>5</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2799/","title":"2799. Count Complete Subarrays in an Array","text":"Problem <p>You are given an array <code>nums</code> consisting of positive integers.</p> <p>We call a subarray of an array complete if the following condition is satisfied:</p> <ul> <li>The number of distinct elements in the subarray is equal to the number of distinct elements in the whole array.</li> </ul> <p>Return the number of complete subarrays.</p> <p>A subarray is a contiguous non-empty part of an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,1,2,2]\nOutput: 4\nExplanation: The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,5,5,5]\nOutput: 10\nExplanation: The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 2000</code></li> </ul>"},{"location":"LeetCode_Problems/2800/","title":"2800. Shortest String That Contains Three Strings","text":"Problem <p>Given three strings <code>a</code>, <code>b</code>, and <code>c</code>, your task is to find a string that has the minimum length and contains all three strings as substrings.</p> <p>If there are multiple such strings, return the lexicographically smallest one.</p> <p>Return a string denoting the answer to the problem.</p> <p>Notes</p> <ul> <li>A string <code>a</code> is lexicographically smaller than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>.</li> <li>A substring is a contiguous sequence of characters within a string.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: a = \"abc\", b = \"bca\", c = \"aaa\"\nOutput: \"aaabca\"\nExplanation:  We show that \"aaabca\" contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and \"aaabca\" is the lexicographically smallest one.</pre> <p>Example 2:</p> <pre>\nInput: a = \"ab\", b = \"ba\", c = \"aba\"\nOutput: \"aba\"\nExplanation: We show that the string \"aba\" contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that \"aba\" is the lexicographically smallest one.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= a.length, b.length, c.length &lt;= 100</code></li> <li><code>a</code>, <code>b</code>, <code>c</code> consist only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2801/","title":"2801. Count Stepping Numbers in Range","text":"Problem <p>Given two positive integers <code>low</code> and <code>high</code> represented as strings, find the count of stepping numbers in the inclusive range <code>[low, high]</code>.</p> <p>A stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly <code>1</code>.</p> <p>Return an integer denoting the count of stepping numbers in the inclusive range <code>[low, high]</code>. </p> <p>Since the answer may be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>Note: A stepping number should not have a leading zero.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: low = \"1\", high = \"11\"\nOutput: 10\nExplanation: The stepping numbers in the range [1,11] are 1, 2, 3, 4, 5, 6, 7, 8, 9 and 10. There are a total of 10 stepping numbers in the range. Hence, the output is 10.</pre> <p>Example 2:</p> <pre>\nInput: low = \"90\", high = \"101\"\nOutput: 2\nExplanation: The stepping numbers in the range [90,101] are 98 and 101. There are a total of 2 stepping numbers in the range. Hence, the output is 2. </pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= int(low) &lt;= int(high) &lt; 10<sup>100</sup></code></li> <li><code>1 &lt;= low.length, high.length &lt;= 100</code></li> <li><code>low</code> and <code>high</code> consist of only digits.</li> <li><code>low</code> and <code>high</code> don't have any leading zeros.</li> </ul>"},{"location":"LeetCode_Problems/2802/","title":"2802. Find The K-th Lucky Number","text":"Problem"},{"location":"LeetCode_Problems/2803/","title":"2803. Factorial Generator","text":"Problem"},{"location":"LeetCode_Problems/2804/","title":"2804. Array Prototype ForEach","text":"Problem"},{"location":"LeetCode_Problems/2805/","title":"2805. Custom Interval","text":"Problem"},{"location":"LeetCode_Problems/2806/","title":"2806. Account Balance After Rounded Purchase","text":"Problem <p>Initially, you have a bank account balance of <code>100</code> dollars.</p> <p>You are given an integer <code>purchaseAmount</code> representing the amount you will spend on a purchase in dollars.</p> <p>At the store where you will make the purchase, the purchase amount is rounded to the nearest multiple of <code>10</code>. In other words, you pay a non-negative amount, <code>roundedAmount</code>, such that <code>roundedAmount</code> is a multiple of <code>10</code> and <code>abs(roundedAmount - purchaseAmount)</code> is minimized.</p> <p>If there is more than one nearest multiple of <code>10</code>, the largest multiple is chosen.</p> <p>Return an integer denoting your account balance after making a purchase worth <code>purchaseAmount</code> dollars from the store.</p> <p>Note: <code>0</code> is considered to be a multiple of <code>10</code> in this problem.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: purchaseAmount = 9\nOutput: 90\nExplanation: In this example, the nearest multiple of 10 to 9 is 10. Hence, your account balance becomes 100 - 10 = 90.\n</pre> <p>Example 2:</p> <pre>\nInput: purchaseAmount = 15\nOutput: 80\nExplanation: In this example, there are two nearest multiples of 10 to 15: 10 and 20. So, the larger multiple, 20, is chosen.\nHence, your account balance becomes 100 - 20 = 80.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt;= purchaseAmount &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2807/","title":"2807. Insert Greatest Common Divisors in Linked List","text":"Problem <p>Given the head of a linked list <code>head</code>, in which each node contains an integer value.</p> <p>Between every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them.</p> <p>Return the linked list after insertion.</p> <p>The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [18,6,10,3]\nOutput: [18,6,6,2,10,1,3]\nExplanation: The 1<sup>st</sup> diagram denotes the initial linked list and the 2<sup>nd</sup> diagram denotes the linked list after inserting the new nodes (nodes in blue are the inserted nodes).\n- We insert the greatest common divisor of 18 and 6 = 6 between the 1<sup>st</sup> and the 2<sup>nd</sup> nodes.\n- We insert the greatest common divisor of 6 and 10 = 2 between the 2<sup>nd</sup> and the 3<sup>rd</sup> nodes.\n- We insert the greatest common divisor of 10 and 3 = 1 between the 3<sup>rd</sup> and the 4<sup>th</sup> nodes.\nThere are no more adjacent nodes, so we return the linked list.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [7]\nOutput: [7]\nExplanation: The 1<sup>st</sup> diagram denotes the initial linked list and the 2<sup>nd</sup> diagram denotes the linked list after inserting the new nodes.\nThere are no pairs of adjacent nodes, so we return the initial linked list.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 5000]</code>.</li> <li><code>1 &lt;= Node.val &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2808/","title":"2808. Minimum Seconds to Equalize a Circular Array","text":"Problem <p>You are given a 0-indexed array <code>nums</code> containing <code>n</code> integers.</p> <p>At each second, you perform the following operation on the array:</p> <ul> <li>For every index <code>i</code> in the range <code>[0, n - 1]</code>, replace <code>nums[i]</code> with either <code>nums[i]</code>, <code>nums[(i - 1 + n) % n]</code>, or <code>nums[(i + 1) % n]</code>.</li> </ul> <p>Note that all the elements get replaced simultaneously.</p> <p>Return the minimum number of seconds needed to make all elements in the array <code>nums</code> equal.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,1,2]\nOutput: 1\nExplanation: We can equalize the array in 1 second in the following way:\n- At 1<sup>st</sup> second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2].\nIt can be proven that 1 second is the minimum amount of seconds needed for equalizing the array.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,1,3,3,2]\nOutput: 2\nExplanation: We can equalize the array in 2 seconds in the following way:\n- At 1<sup>st</sup> second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3].\n- At 2<sup>nd</sup> second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3].\nIt can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [5,5,5,5]\nOutput: 0\nExplanation: We don't need to perform any operations as all elements in the initial array are the same.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2809/","title":"2809. Minimum Time to Make Array Sum At Most x","text":"Problem <p>You are given two 0-indexed integer arrays <code>nums1</code> and <code>nums2</code> of equal length. Every second, for all indices <code>0 &lt;= i &lt; nums1.length</code>, value of <code>nums1[i]</code> is incremented by <code>nums2[i]</code>. After this is done, you can do the following operation:</p> <ul> <li>Choose an index <code>0 &lt;= i &lt; nums1.length</code> and make <code>nums1[i] = 0</code>.</li> </ul> <p>You are also given an integer <code>x</code>.</p> <p>Return the minimum time in which you can make the sum of all elements of <code>nums1</code> to be less than or equal to <code>x</code>, or <code>-1</code> if this is not possible.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums1 = [1,2,3], nums2 = [1,2,3], x = 4\nOutput: 3\nExplanation: \nFor the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6]. \nFor the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9]. \nFor the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0]. \nNow sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3.\n\n</pre> <p>Example 2:</p> <pre>\nInput: nums1 = [1,2,3], nums2 = [3,3,3], x = 4\nOutput: -1\nExplanation: It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums1.length &lt;= 10<sup>3</sup></code></li> <li><code>1 &lt;= nums1[i] &lt;= 10<sup>3</sup></code></li> <li><code>0 &lt;= nums2[i] &lt;= 10<sup>3</sup></code></li> <li><code>nums1.length == nums2.length</code></li> <li><code>0 &lt;= x &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2810/","title":"2810. Faulty Keyboard","text":"Problem <p>Your laptop keyboard is faulty, and whenever you type a character <code>'i'</code> on it, it reverses the string that you have written. Typing other characters works as expected.</p> <p>You are given a 0-indexed string <code>s</code>, and you type each character of <code>s</code> using your faulty keyboard.</p> <p>Return the final string that will be present on your laptop screen.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"string\"\nOutput: \"rtsng\"\nExplanation: \nAfter typing first character, the text on the screen is \"s\".\nAfter the second character, the text is \"st\". \nAfter the third character, the text is \"str\".\nSince the fourth character is an 'i', the text gets reversed and becomes \"rts\".\nAfter the fifth character, the text is \"rtsn\". \nAfter the sixth character, the text is \"rtsng\". \nTherefore, we return \"rtsng\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"poiinter\"\nOutput: \"ponter\"\nExplanation: \nAfter the first character, the text on the screen is \"p\".\nAfter the second character, the text is \"po\". \nSince the third character you type is an 'i', the text gets reversed and becomes \"op\". \nSince the fourth character you type is an 'i', the text gets reversed and becomes \"po\".\nAfter the fifth character, the text is \"pon\".\nAfter the sixth character, the text is \"pont\". \nAfter the seventh character, the text is \"ponte\". \nAfter the eighth character, the text is \"ponter\". \nTherefore, we return \"ponter\".</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists of lowercase English letters.</li> <li><code>s[0] != 'i'</code></li> </ul>"},{"location":"LeetCode_Problems/2811/","title":"2811. Check if it is Possible to Split Array","text":"Problem <p>You are given an array <code>nums</code> of length <code>n</code> and an integer <code>m</code>. You need to determine if it is possible to split the array into <code>n</code> non-empty arrays by performing a series of steps.</p> <p>In each step, you can select an existing array (which may be the result of previous steps) with a length of at least two and split it into two subarrays, if, for each resulting subarray, at least one of the following holds:</p> <ul> <li>The length of the subarray is one, or</li> <li>The sum of elements of the subarray is greater than or equal to <code>m</code>.</li> </ul> <p>Return <code>true</code> if you can split the given array into <code>n</code> arrays, otherwise return <code>false</code>.</p> <p>Note: A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2, 2, 1], m = 4\nOutput: true\nExplanation: We can split the array into [2, 2] and [1] in the first step. Then, in the second step, we can split [2, 2] into [2] and [2]. As a result, the answer is true.</pre> <p>Example 2:</p> <pre>\nInput: nums = [2, 1, 3], m = 5 \nOutput: false\nExplanation: We can try splitting the array in two different ways: the first way is to have [2, 1] and [3], and the second way is to have [2] and [1, 3]. However, both of these ways are not valid. So, the answer is false.</pre> <p>Example 3:</p> <pre>\nInput: nums = [2, 3, 3, 2, 3], m = 6\nOutput: true\nExplanation: We can split the array into [2, 3, 3, 2] and [3] in the first step. Then, in the second step, we can split [2, 3, 3, 2] into [2, 3, 3] and [2]. Then, in the third step, we can split [2, 3, 3] into [2] and [3, 3]. And in the last step we can split [3, 3] into [3] and [3]. As a result, the answer is true.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> <li><code>1 &lt;= m &lt;= 200</code></li> </ul>"},{"location":"LeetCode_Problems/2812/","title":"2812. Find the Safest Path in a Grid","text":"Problem <p>You are given a 0-indexed 2D matrix <code>grid</code> of size <code>n x n</code>, where <code>(r, c)</code> represents:</p> <ul> <li>A cell containing a thief if <code>grid[r][c] = 1</code></li> <li>An empty cell if <code>grid[r][c] = 0</code></li> </ul> <p>You are initially positioned at cell <code>(0, 0)</code>. In one move, you can move to any adjacent cell in the grid, including cells containing thieves.</p> <p>The safeness factor of a path on the grid is defined as the minimum manhattan distance from any cell in the path to any thief in the grid.</p> <p>Return the maximum safeness factor of all paths leading to cell <code>(n - 1, n - 1)</code>.</p> <p>An adjacent cell of cell <code>(r, c)</code>, is one of the cells <code>(r, c + 1)</code>, <code>(r, c - 1)</code>, <code>(r + 1, c)</code> and <code>(r - 1, c)</code> if it exists.</p> <p>The Manhattan distance between two cells <code>(a, b)</code> and <code>(x, y)</code> is equal to <code>|a - x| + |b - y|</code>, where <code>|val|</code> denotes the absolute value of val.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,0,0],[0,0,0],[0,0,1]]\nOutput: 0\nExplanation: All paths from (0, 0) to (n - 1, n - 1) go through the thieves in cells (0, 0) and (n - 1, n - 1).\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[0,0,1],[0,0,0],[0,0,0]]\nOutput: 2\nExplanation: The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 2) is cell (0, 0). The distance between them is | 0 - 0 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor.\n</pre> <p>Example 3:</p> <p></p> <pre>\nInput: grid = [[0,0,0,1],[0,0,0,0],[0,0,0,0],[1,0,0,0]]\nOutput: 2\nExplanation: The path depicted in the picture above has a safeness factor of 2 since:\n- The closest cell of the path to the thief at cell (0, 3) is cell (1, 2). The distance between them is | 0 - 1 | + | 3 - 2 | = 2.\n- The closest cell of the path to the thief at cell (3, 0) is cell (3, 2). The distance between them is | 3 - 3 | + | 0 - 2 | = 2.\nIt can be shown that there are no other paths with a higher safeness factor.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= grid.length == n &lt;= 400</code></li> <li><code>grid[i].length == n</code></li> <li><code>grid[i][j]</code> is either <code>0</code> or <code>1</code>.</li> <li>There is at least one thief in the <code>grid</code>.</li> </ul>"},{"location":"LeetCode_Problems/2813/","title":"2813. Maximum Elegance of a K-Length Subsequence","text":"Problem <p>You are given a 0-indexed 2D integer array <code>items</code> of length <code>n</code> and an integer <code>k</code>.</p> <p><code>items[i] = [profit<sub>i</sub>, category<sub>i</sub>]</code>, where <code>profit<sub>i</sub></code> and <code>category<sub>i</sub></code> denote the profit and category of the <code>i<sup>th</sup></code> item respectively.</p> <p>Let's define the elegance of a subsequence of <code>items</code> as <code>total_profit + distinct_categories<sup>2</sup></code>, where <code>total_profit</code> is the sum of all profits in the subsequence, and <code>distinct_categories</code> is the number of distinct categories from all the categories in the selected subsequence.</p> <p>Your task is to find the maximum elegance from all subsequences of size <code>k</code> in <code>items</code>.</p> <p>Return an integer denoting the maximum elegance of a subsequence of <code>items</code> with size exactly <code>k</code>.</p> <p>Note: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: items = [[3,2],[5,1],[10,1]], k = 2\nOutput: 17\nExplanation: In this example, we have to select a subsequence of size 2.\nWe can select items[0] = [3,2] and items[2] = [10,1].\nThe total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].\nHence, the elegance is 13 + 2<sup>2</sup> = 17, and we can show that it is the maximum achievable elegance. \n</pre> <p>Example 2:</p> <pre>\nInput: items = [[3,1],[3,1],[2,2],[5,3]], k = 3\nOutput: 19\nExplanation: In this example, we have to select a subsequence of size 3. \nWe can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3]. \nThe total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3]. \nHence, the elegance is 10 + 3<sup>2</sup> = 19, and we can show that it is the maximum achievable elegance.</pre> <p>Example 3:</p> <pre>\nInput: items = [[1,1],[2,1],[3,1]], k = 3\nOutput: 7\nExplanation: In this example, we have to select a subsequence of size 3. \nWe should select all the items. \nThe total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. \nHence, the maximum elegance is 6 + 1<sup>2</sup> = 7.  </pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= items.length == n &lt;= 10<sup>5</sup></code></li> <li><code>items[i].length == 2</code></li> <li><code>items[i][0] == profit<sub>i</sub></code></li> <li><code>items[i][1] == category<sub>i</sub></code></li> <li><code>1 &lt;= profit<sub>i</sub> &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= category<sub>i</sub> &lt;= n </code></li> <li><code>1 &lt;= k &lt;= n</code></li> </ul>"},{"location":"LeetCode_Problems/2814/","title":"2814. Minimum Time Takes to Reach Destination Without Drowning","text":"Problem"},{"location":"LeetCode_Problems/2815/","title":"2815. Max Pair Sum in an Array","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>. You have to find the maximum sum of a pair of numbers from <code>nums</code> such that the maximum digit in both numbers are equal.</p> <p>Return the maximum sum or <code>-1</code> if no such pair exists.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [51,71,17,24,42]\nOutput: 88\nExplanation: \nFor i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88. \nFor i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66.\nIt can be shown that there are no other pairs with equal maximum digits, so the answer is 88.</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,2,3,4]\nOutput: -1\nExplanation: No pair exists in nums with equal maximum digits.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2816/","title":"2816. Double a Number Represented as a Linked List","text":"Problem <p>You are given the <code>head</code> of a non-empty linked list representing a non-negative integer without leading zeroes.</p> <p>Return the <code>head</code> of the linked list after doubling it.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: head = [1,8,9]\nOutput: [3,7,8]\nExplanation: The figure above corresponds to the given linked list which represents the number 189. Hence, the returned linked list represents the number 189 * 2 = 378.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: head = [9,9,9]\nOutput: [1,9,9,8]\nExplanation: The figure above corresponds to the given linked list which represents the number 999. Hence, the returned linked list reprersents the number 999 * 2 = 1998. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li>The number of nodes in the list is in the range <code>[1, 10<sup>4</sup>]</code></li> <li><code>0 &lt;= Node.val &lt;= 9</code></li> <li>The input is generated such that the list represents a number that does not have leading zeros, except the number <code>0</code> itself.</li> </ul>"},{"location":"LeetCode_Problems/2817/","title":"2817. Minimum Absolute Difference Between Elements With Constraint","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and an integer <code>x</code>.</p> <p>Find the minimum absolute difference between two elements in the array that are at least <code>x</code> indices apart.</p> <p>In other words, find two indices <code>i</code> and <code>j</code> such that <code>abs(i - j) &gt;= x</code> and <code>abs(nums[i] - nums[j])</code> is minimized.</p> <p>Return an integer denoting the minimum absolute difference between two elements that are at least <code>x</code> indices apart.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [4,3,2,4], x = 2\nOutput: 0\nExplanation: We can select nums[0] = 4 and nums[3] = 4. \nThey are at least 2 indices apart, and their absolute difference is the minimum, 0. \nIt can be shown that 0 is the optimal answer.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,3,2,10,15], x = 1\nOutput: 1\nExplanation: We can select nums[1] = 3 and nums[2] = 2.\nThey are at least 1 index apart, and their absolute difference is the minimum, 1.\nIt can be shown that 1 is the optimal answer.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3,4], x = 3\nOutput: 3\nExplanation: We can select nums[0] = 1 and nums[3] = 4.\nThey are at least 3 indices apart, and their absolute difference is the minimum, 3.\nIt can be shown that 3 is the optimal answer.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= x &lt; nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/2818/","title":"2818. Apply Operations to Maximize Score","text":"Problem <p>You are given an array <code>nums</code> of <code>n</code> positive integers and an integer <code>k</code>.</p> <p>Initially, you start with a score of <code>1</code>. You have to maximize your score by applying the following operation at most <code>k</code> times:</p> <ul> <li>Choose any non-empty subarray <code>nums[l, ..., r]</code> that you haven't chosen previously.</li> <li>Choose an element <code>x</code> of <code>nums[l, ..., r]</code> with the highest prime score. If multiple such elements exist, choose the one with the smallest index.</li> <li>Multiply your score by <code>x</code>.</li> </ul> <p>Here, <code>nums[l, ..., r]</code> denotes the subarray of <code>nums</code> starting at index <code>l</code> and ending at the index <code>r</code>, both ends being inclusive.</p> <p>The prime score of an integer <code>x</code> is equal to the number of distinct prime factors of <code>x</code>. For example, the prime score of <code>300</code> is <code>3</code> since <code>300 = 2 * 2 * 3 * 5 * 5</code>.</p> <p>Return the maximum possible score after applying at most <code>k</code> operations.</p> <p>Since the answer may be large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [8,3,9,3,8], k = 2\nOutput: 81\nExplanation: To get a score of 81, we can apply the following operations:\n- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.\nIt can be proven that 81 is the highest score one can obtain.</pre> <p>Example 2:</p> <pre>\nInput: nums = [19,12,14,6,10,18], k = 3\nOutput: 4788\nExplanation: To get a score of 4788, we can apply the following operations: \n- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.\n- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.\n- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.\nIt can be proven that 4788 is the highest score one can obtain.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length == n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= min(n * (n + 1) / 2, 10<sup>9</sup>)</code></li> </ul>"},{"location":"LeetCode_Problems/2819/","title":"2819. Minimum Relative Loss After Buying Chocolates","text":"Problem"},{"location":"LeetCode_Problems/2820/","title":"2820. Election Results","text":"Problem"},{"location":"LeetCode_Problems/2821/","title":"2821. Delay the Resolution of Each Promise","text":"Problem"},{"location":"LeetCode_Problems/2822/","title":"2822. Inversion of Object","text":"Problem"},{"location":"LeetCode_Problems/2823/","title":"2823. Deep Object Filter","text":"Problem"},{"location":"LeetCode_Problems/2824/","title":"2824. Count Pairs Whose Sum is Less than Target","text":"Problem <p>Given a 0-indexed integer array <code>nums</code> of length <code>n</code> and an integer <code>target</code>, return the number of pairs <code>(i, j)</code> where <code>0 &lt;= i &lt; j &lt; n</code> and <code>nums[i] + nums[j] &lt; target</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [-1,1,2,3,1], target = 2\nOutput: 3\nExplanation: There are 3 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 &lt; 1 and nums[0] + nums[1] = 0 &lt; target\n- (0, 2) since 0 &lt; 2 and nums[0] + nums[2] = 1 &lt; target \n- (0, 4) since 0 &lt; 4 and nums[0] + nums[4] = 0 &lt; target\nNote that (0, 3) is not counted since nums[0] + nums[3] is not strictly less than the target.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [-6,2,5,-2,-7,-1,3], target = -2\nOutput: 10\nExplanation: There are 10 pairs of indices that satisfy the conditions in the statement:\n- (0, 1) since 0 &lt; 1 and nums[0] + nums[1] = -4 &lt; target\n- (0, 3) since 0 &lt; 3 and nums[0] + nums[3] = -8 &lt; target\n- (0, 4) since 0 &lt; 4 and nums[0] + nums[4] = -13 &lt; target\n- (0, 5) since 0 &lt; 5 and nums[0] + nums[5] = -7 &lt; target\n- (0, 6) since 0 &lt; 6 and nums[0] + nums[6] = -3 &lt; target\n- (1, 4) since 1 &lt; 4 and nums[1] + nums[4] = -5 &lt; target\n- (3, 4) since 3 &lt; 4 and nums[3] + nums[4] = -9 &lt; target\n- (3, 5) since 3 &lt; 5 and nums[3] + nums[5] = -3 &lt; target\n- (4, 5) since 4 &lt; 5 and nums[4] + nums[5] = -8 &lt; target\n- (4, 6) since 4 &lt; 6 and nums[4] + nums[6] = -4 &lt; target\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length == n &lt;= 50</code></li> <li><code>-50 &lt;= nums[i], target &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2825/","title":"2825. Make String a Subsequence Using Cyclic Increments","text":"Problem <p>You are given two 0-indexed strings <code>str1</code> and <code>str2</code>.</p> <p>In an operation, you select a set of indices in <code>str1</code>, and for each index <code>i</code> in the set, increment <code>str1[i]</code> to the next character cyclically. That is <code>'a'</code> becomes <code>'b'</code>, <code>'b'</code> becomes <code>'c'</code>, and so on, and <code>'z'</code> becomes <code>'a'</code>.</p> <p>Return <code>true</code> if it is possible to make <code>str2</code> a subsequence of <code>str1</code> by performing the operation at most once, and <code>false</code> otherwise.</p> <p>Note: A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: str1 = \"abc\", str2 = \"ad\"\nOutput: true\nExplanation: Select index 2 in str1.\nIncrement str1[2] to become 'd'. \nHence, str1 becomes \"abd\" and str2 is now a subsequence. Therefore, true is returned.</pre> <p>Example 2:</p> <pre>\nInput: str1 = \"zc\", str2 = \"ad\"\nOutput: true\nExplanation: Select indices 0 and 1 in str1. \nIncrement str1[0] to become 'a'. \nIncrement str1[1] to become 'd'. \nHence, str1 becomes \"ad\" and str2 is now a subsequence. Therefore, true is returned.</pre> <p>Example 3:</p> <pre>\nInput: str1 = \"ab\", str2 = \"d\"\nOutput: false\nExplanation: In this example, it can be shown that it is impossible to make str2 a subsequence of str1 using the operation at most once. \nTherefore, false is returned.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= str1.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= str2.length &lt;= 10<sup>5</sup></code></li> <li><code>str1</code> and <code>str2</code> consist of only lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2826/","title":"2826. Sorting Three Groups","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of length <code>n</code>.  The numbers from <code>0</code> to <code>n - 1</code> are divided into three groups numbered from <code>1</code> to <code>3</code>, where number <code>i</code> belongs to group <code>nums[i]</code>. Notice that some groups may be empty.  You are allowed to perform this operation any number of times:</p> <ul> <li>Pick number <code>x</code> and change its group. More formally, change <code>nums[x]</code> to any number from <code>1</code> to <code>3</code>.</li> </ul> <p>A new array <code>res</code> is constructed using the following procedure:</p> <ol> <li>Sort the numbers in each group independently.</li> <li>Append the elements of groups <code>1</code>, <code>2</code>, and <code>3</code> to <code>res</code> in this order.</li> </ol> <p>Array <code>nums</code> is called a beautiful array if the constructed array <code>res</code> is sorted in non-decreasing order.</p> <p>Return the minimum number of operations to make <code>nums</code> a beautiful array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,1,3,2,1]\nOutput: 3\nExplanation: It's optimal to perform three operations:\n1. change nums[0] to 1.\n2. change nums[2] to 1.\n3. change nums[3] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3,4] and group 2 and group 3 become empty. Hence, res is equal to [0,1,2,3,4] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than three operations.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,2,1,3,3]\nOutput: 2\nExplanation: It's optimal to perform two operations:\n1. change nums[1] to 1.\n2. change nums[2] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3], group 2 becomes empty, and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than two operations.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,2,2,2,3,3]\nOutput: 0\nExplanation: It's optimal to not perform operations.\nAfter sorting the numbers in each group, group 1 becomes empty, group 2 becomes equal to [0,1,2,3] and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 3</code></li> </ul>"},{"location":"LeetCode_Problems/2827/","title":"2827. Number of Beautiful Integers in the Range","text":"Problem <p>You are given positive integers <code>low</code>, <code>high</code>, and <code>k</code>.</p> <p>A number is beautiful if it meets both of the following conditions:</p> <ul> <li>The count of even digits in the number is equal to the count of odd digits.</li> <li>The number is divisible by <code>k</code>.</li> </ul> <p>Return the number of beautiful integers in the range <code>[low, high]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: low = 10, high = 20, k = 3\nOutput: 2\nExplanation: There are 2 beautiful integers in the given range: [12,18]. \n- 12 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\n- 18 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\nAdditionally we can see that:\n- 16 is not beautiful because it is not divisible by k = 3.\n- 15 is not beautiful because it does not contain equal counts even and odd digits.\nIt can be shown that there are only 2 beautiful integers in the given range.\n</pre> <p>Example 2:</p> <pre>\nInput: low = 1, high = 10, k = 1\nOutput: 1\nExplanation: There is 1 beautiful integer in the given range: [10].\n- 10 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 1.\nIt can be shown that there is only 1 beautiful integer in the given range.\n</pre> <p>Example 3:</p> <pre>\nInput: low = 5, high = 5, k = 2\nOutput: 0\nExplanation: There are 0 beautiful integers in the given range.\n- 5 is not beautiful because it is not divisible by k = 2 and it does not contain equal even and odd digits.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>0 &lt; low &lt;= high &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt; k &lt;= 20</code></li> </ul>"},{"location":"LeetCode_Problems/2828/","title":"2828. Check if a String Is an Acronym of Words","text":"Problem <p>Given an array of strings <code>words</code> and a string <code>s</code>, determine if <code>s</code> is an acronym of words.</p> <p>The string <code>s</code> is considered an acronym of <code>words</code> if it can be formed by concatenating the first character of each string in <code>words</code> in order. For example, <code>\"ab\"</code> can be formed from <code>[\"apple\", \"banana\"]</code>, but it can't be formed from <code>[\"bear\", \"aardvark\"]</code>.</p> <p>Return <code>true</code> if <code>s</code> is an acronym of <code>words</code>, and <code>false</code> otherwise. </p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\"\nOutput: true\nExplanation: The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym. \n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"an\",\"apple\"], s = \"a\"\nOutput: false\nExplanation: The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively. \nThe acronym formed by concatenating these characters is \"aa\". \nHence, s = \"a\" is not the acronym.\n</pre> <p>Example 3:</p> <pre>\nInput: words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\"\nOutput: true\nExplanation: By concatenating the first character of the words in the array, we get the string \"ngguoy\". \nHence, s = \"ngguoy\" is the acronym.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>words[i]</code> and <code>s</code> consist of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2829/","title":"2829. Determine the Minimum Sum of a k-avoiding Array","text":"Problem <p>You are given two integers,\u00a0<code>n</code> and <code>k</code>.</p> <p>An array of distinct positive integers is called a k-avoiding array if there does not exist any pair of distinct elements that sum to <code>k</code>.</p> <p>Return the minimum possible sum of a k-avoiding array of length <code>n</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5, k = 4\nOutput: 18\nExplanation: Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\nIt can be proven that there is no k-avoiding array with a sum less than 18.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 2, k = 6\nOutput: 3\nExplanation: We can construct the array [1,2], which has a sum of 3.\nIt can be proven that there is no k-avoiding array with a sum less than 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n, k &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2830/","title":"2830. Maximize the Profit as the Salesman","text":"Problem <p>You are given an integer <code>n</code> representing the number of houses on a number line, numbered from <code>0</code> to <code>n - 1</code>.</p> <p>Additionally, you are given a 2D integer array <code>offers</code> where <code>offers[i] = [start<sub>i</sub>, end<sub>i</sub>, gold<sub>i</sub>]</code>, indicating that <code>i<sup>th</sup></code> buyer wants to buy all the houses from <code>start<sub>i</sub></code> to <code>end<sub>i</sub></code> for <code>gold<sub>i</sub></code> amount of gold.</p> <p>As a salesman, your goal is to maximize your earnings by strategically selecting and selling houses to buyers.</p> <p>Return the maximum amount of gold you can earn.</p> <p>Note that different buyers can't buy the same house, and some houses may remain unsold.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]\nOutput: 3\nExplanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,0] to 1<sup>st</sup> buyer for 1 gold and houses in the range [1,3] to 3<sup>rd</sup> buyer for 2 golds.\nIt can be proven that 3 is the maximum amount of gold we can achieve.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]\nOutput: 10\nExplanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.\nWe sell houses in the range [0,2] to 2<sup>nd</sup> buyer for 10 golds.\nIt can be proven that 10 is the maximum amount of gold we can achieve.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= offers.length &lt;= 10<sup>5</sup></code></li> <li><code>offers[i].length == 3</code></li> <li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= n - 1</code></li> <li><code>1 &lt;= gold<sub>i</sub> &lt;= 10<sup>3</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2831/","title":"2831. Find the Longest Equal Subarray","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and an integer <code>k</code>.</p> <p>A subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray.</p> <p>Return the length of the longest possible equal subarray after deleting at most <code>k</code> elements from <code>nums</code>.</p> <p>A subarray is a contiguous, possibly empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,2,3,1,3], k = 3\nOutput: 3\nExplanation: It's optimal to delete the elements at index 2 and index 4.\nAfter deleting them, nums becomes equal to [1, 3, 3, 3].\nThe longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3.\nIt can be proven that no longer equal subarrays can be created.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,2,2,1,1], k = 2\nOutput: 4\nExplanation: It's optimal to delete the elements at index 2 and index 3.\nAfter deleting them, nums becomes equal to [1, 1, 1, 1].\nThe array itself is an equal subarray, so the answer is 4.\nIt can be proven that no longer equal subarrays can be created.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= nums.length</code></li> <li><code>0 &lt;= k &lt;= nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/2832/","title":"2832. Maximal Range That Each Element Is Maximum in It","text":"Problem"},{"location":"LeetCode_Problems/2833/","title":"2833. Furthest Point From Origin","text":"Problem <p>You are given a string <code>moves</code> of length <code>n</code> consisting only of characters <code>'L'</code>, <code>'R'</code>, and <code>'_'</code>. The string represents your movement on a number line starting from the origin <code>0</code>.</p> <p>In the <code>i<sup>th</sup></code> move, you can choose one of the following directions:</p> <ul> <li>move to the left if <code>moves[i] = 'L'</code> or <code>moves[i] = '_'</code></li> <li>move to the right if <code>moves[i] = 'R'</code> or <code>moves[i] = '_'</code></li> </ul> <p>Return the distance from the origin of the furthest point you can get to after <code>n</code> moves.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: moves = \"L_RL__R\"\nOutput: 3\nExplanation: The furthest point we can reach from the origin 0 is point -3 through the following sequence of moves \"LLRLLLR\".\n</pre> <p>Example 2:</p> <pre>\nInput: moves = \"_R__LL_\"\nOutput: 5\nExplanation: The furthest point we can reach from the origin 0 is point -5 through the following sequence of moves \"LRLLLLL\".\n</pre> <p>Example 3:</p> <pre>\nInput: moves = \"_______\"\nOutput: 7\nExplanation: The furthest point we can reach from the origin 0 is point 7 through the following sequence of moves \"RRRRRRR\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= moves.length == n &lt;= 50</code></li> <li><code>moves</code> consists only of characters <code>'L'</code>, <code>'R'</code> and <code>'_'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2834/","title":"2834. Find the Minimum Possible Sum of a Beautiful Array","text":"Problem <p>You are given positive integers <code>n</code> and <code>target</code>.</p> <p>An array <code>nums</code> is beautiful if it meets the following conditions:</p> <ul> <li><code>nums.length == n</code>.</li> <li><code>nums</code> consists of pairwise distinct positive integers.</li> <li>There doesn't exist two distinct indices, <code>i</code> and <code>j</code>, in the range <code>[0, n - 1]</code>, such that <code>nums[i] + nums[j] == target</code>.</li> </ul> <p>Return the minimum possible sum that a beautiful array could have modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 2, target = 3\nOutput: 4\nExplanation: We can see that nums = [1,3] is beautiful.\n- The array nums has length n = 2.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 4 is the minimum possible sum that a beautiful array could have.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, target = 3\nOutput: 8\nExplanation: We can see that nums = [1,3,4] is beautiful.\n- The array nums has length n = 3.\n- The array nums consists of pairwise distinct positive integers.\n- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.\nIt can be proven that 8 is the minimum possible sum that a beautiful array could have.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 1, target = 1\nOutput: 1\nExplanation: We can see, that nums = [1] is beautiful.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2835/","title":"2835. Minimum Operations to Form Subsequence With Target Sum","text":"Problem <p>You are given a 0-indexed array <code>nums</code> consisting of non-negative powers of <code>2</code>, and an integer <code>target</code>.</p> <p>In one operation, you must apply the following changes to the array:</p> <ul> <li>Choose any element of the array <code>nums[i]</code> such that <code>nums[i] &gt; 1</code>.</li> <li>Remove <code>nums[i]</code> from the array.</li> <li>Add two occurrences of <code>nums[i] / 2</code> to the end of <code>nums</code>.</li> </ul> <p>Return the minimum number of operations you need to perform so that <code>nums</code> contains a subsequence whose elements sum to <code>target</code>. If it is impossible to obtain such a subsequence, return <code>-1</code>.</p> <p>A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,8], target = 7\nOutput: 1\nExplanation: In the first operation, we choose element nums[2]. The array becomes equal to nums = [1,2,4,4].\nAt this stage, nums contains the subsequence [1,2,4] which sums up to 7.\nIt can be shown that there is no shorter sequence of operations that results in a subsequnce that sums up to 7.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,32,1,2], target = 12\nOutput: 2\nExplanation: In the first operation, we choose element nums[1]. The array becomes equal to nums = [1,1,2,16,16].\nIn the second operation, we choose element nums[3]. The array becomes equal to nums = [1,1,2,16,8,8]\nAt this stage, nums contains the subsequence [1,1,2,8] which sums up to 12.\nIt can be shown that there is no shorter sequence of operations that results in a subsequence that sums up to 12.</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,32,1], target = 35\nOutput: -1\nExplanation: It can be shown that no sequence of operations results in a subsequence that sums up to 35.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 2<sup>30</sup></code></li> <li><code>nums</code> consists only of non-negative powers of two.</li> <li><code>1 &lt;= target &lt; 2<sup>31</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2836/","title":"2836. Maximize Value of Function in a Ball Passing Game","text":"Problem <p>You are given a 0-indexed integer array <code>receiver</code> of length <code>n</code> and an integer <code>k</code>.</p> <p>There are <code>n</code> players having a unique id in the range <code>[0, n - 1]</code> who will play a ball passing game, and <code>receiver[i]</code> is the id of the player who receives passes from the player with id <code>i</code>. Players can pass to themselves, i.e. <code>receiver[i]</code> may be equal to <code>i</code>.</p> <p>You must choose one of the <code>n</code> players as the starting player for the game, and the ball will be passed exactly <code>k</code> times starting from the chosen player.</p> <p>For a chosen starting player having id <code>x</code>, we define a function <code>f(x)</code> that denotes the sum of <code>x</code> and the ids of all players who receive the ball during the <code>k</code> passes, including repetitions. In other words, <code>f(x) = x + receiver[x] + receiver[receiver[x]] + ... + receiver<sup>(k)</sup>[x]</code>.</p> <p>Your task is to choose a starting player having id <code>x</code> that maximizes the value of <code>f(x)</code>.</p> <p>Return an integer denoting the maximum value of the function.</p> <p>Note: <code>receiver</code> may contain duplicates.</p> <p> </p> <p>Example 1:</p> Pass Number Sender ID Receiver ID x + Receiver IDs 2 1 2 1 3 2 1 0 3 3 0 2 5 4 2 1 6 <pre>\nInput: receiver = [2,0,1], k = 4\nOutput: 6\nExplanation: The table above shows a simulation of the game starting with the player having id x = 2. \nFrom the table, f(2) is equal to 6. \nIt can be shown that 6 is the maximum achievable value of the function. \nHence, the output is 6. \n</pre> <p>Example 2:</p> Pass Number Sender ID Receiver ID x + Receiver IDs 4 1 4 3 7 2 3 2 9 3 2 1 10 <pre>\nInput: receiver = [1,1,1,2,3], k = 3\nOutput: 10\nExplanation: The table above shows a simulation of the game starting with the player having id x = 4. \nFrom the table, f(4) is equal to 10. \nIt can be shown that 10 is the maximum achievable value of the function. \nHence, the output is 10. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= receiver.length == n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= receiver[i] &lt;= n - 1</code></li> <li><code>1 &lt;= k &lt;= 10<sup>10</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2837/","title":"2837. Total Traveled Distance","text":"Problem"},{"location":"LeetCode_Problems/2838/","title":"2838. Maximum Coins Heroes Can Collect","text":"Problem"},{"location":"LeetCode_Problems/2839/","title":"2839. Check if Strings Can be Made Equal With Operations I","text":"Problem <p>You are given two strings <code>s1</code> and <code>s2</code>, both of length <code>4</code>, consisting of lowercase English letters.</p> <p>You can apply the following operation on any of the two strings any number of times:</p> <ul> <li>Choose any two indices <code>i</code> and <code>j</code> such that <code>j - i = 2</code>, then swap the two characters at those indices in the string.</li> </ul> <p>Return <code>true</code> if you can make the strings <code>s1</code> and <code>s2</code> equal, and <code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"abcd\", s2 = \"cdab\"\nOutput: true\nExplanation: We can do the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbad\".\n- Choose the indices i = 1, j = 3. The resulting string is s1 = \"cdab\" = s2.\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"abcd\", s2 = \"dacb\"\nOutput: false\nExplanation: It is not possible to make the two strings equal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>s1.length == s2.length == 4</code></li> <li><code>s1</code> and <code>s2</code> consist only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2840/","title":"2840. Check if Strings Can be Made Equal With Operations II","text":"Problem <p>You are given two strings <code>s1</code> and <code>s2</code>, both of length <code>n</code>, consisting of lowercase English letters.</p> <p>You can apply the following operation on any of the two strings any number of times:</p> <ul> <li>Choose any two indices <code>i</code> and <code>j</code> such that <code>i &lt; j</code> and the difference <code>j - i</code> is even, then swap the two characters at those indices in the string.</li> </ul> <p>Return <code>true</code> if you can make the strings <code>s1</code> and <code>s2</code> equal, and\u00a0<code>false</code> otherwise.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"abcdba\", s2 = \"cabdab\"\nOutput: true\nExplanation: We can apply the following operations on s1:\n- Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbadba\".\n- Choose the indices i = 2, j = 4. The resulting string is s1 = \"cbbdaa\".\n- Choose the indices i = 1, j = 5. The resulting string is s1 = \"cabdab\" = s2.\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"abe\", s2 = \"bea\"\nOutput: false\nExplanation: It is not possible to make the two strings equal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == s1.length == s2.length</code></li> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>s1</code> and <code>s2</code> consist only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2841/","title":"2841. Maximum Sum of Almost Unique Subarray","text":"Problem <p>You are given an integer array <code>nums</code> and two positive integers <code>m</code> and <code>k</code>.</p> <p>Return the maximum sum out of all almost unique subarrays of length <code>k</code> of <code>nums</code>. If no such subarray exists, return <code>0</code>.</p> <p>A subarray of <code>nums</code> is almost unique if it contains at least <code>m</code> distinct elements.</p> <p>A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,6,7,3,1,7], m = 3, k = 4\nOutput: 18\nExplanation: There are 3 almost unique subarrays of size <code>k = 4</code>. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1], and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is [2, 6, 7, 3] which has a sum of 18.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,9,9,2,4,5,4], m = 1, k = 3\nOutput: 23\nExplanation: There are 5 almost unique subarrays of size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5], and [4, 5, 4]. Among these subarrays, the one with the maximum sum is [5, 9, 9] which has a sum of 23.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,1,2,1,2,1], m = 3, k = 3\nOutput: 0\nExplanation: There are no subarrays of size <code>k = 3</code> that contain at least <code>m = 3</code> distinct elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique subarrays exist, and the maximum sum is 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>1 &lt;= m &lt;= k &lt;= nums.length</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2842/","title":"2842. Count K-Subsequences of a String With Maximum Beauty","text":"Problem <p>You are given a string <code>s</code> and an integer <code>k</code>.</p> <p>A k-subsequence is a subsequence of <code>s</code>, having length <code>k</code>, and all its characters are unique, i.e., every character occurs once.</p> <p>Let <code>f(c)</code> denote the number of times the character <code>c</code> occurs in <code>s</code>.</p> <p>The beauty of a k-subsequence is the sum of <code>f(c)</code> for every character <code>c</code> in the k-subsequence.</p> <p>For example, consider <code>s = \"abbbdd\"</code> and <code>k = 2</code>:</p> <ul> <li><code>f('a') = 1</code>, <code>f('b') = 3</code>, <code>f('d') = 2</code></li> <li>Some k-subsequences of <code>s</code> are:     <ul> <li><code>\"abbbdd\"</code> -&gt; <code>\"ab\"</code> having a beauty of <code>f('a') + f('b') = 4</code></li> <li><code>\"abbbdd\"</code> -&gt; <code>\"ad\"</code> having a beauty of <code>f('a') + f('d') = 3</code></li> <li><code>\"abbbdd\"</code> -&gt; <code>\"bd\"</code> having a beauty of <code>f('b') + f('d') = 5</code></li> </ul> </li> </ul> <p>Return an integer denoting the number of k-subsequences whose beauty is the maximum among all k-subsequences. Since the answer may be too large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p>A subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.</p> <p>Notes</p> <ul> <li><code>f(c)</code> is the number of times a character <code>c</code> occurs in <code>s</code>, not a k-subsequence.</li> <li>Two k-subsequences are considered different if one is formed by an index that is not present in the other. So, two k-subsequences may form the same string.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"bcca\", k = 2\nOutput: 4\nExplanation: From s we have f('a') = 1, f('b') = 1, and f('c') = 2.\nThe k-subsequences of s are: \nbcca having a beauty of f('b') + f('c') = 3 \nbcca having a beauty of f('b') + f('c') = 3 \nbcca having a beauty of f('b') + f('a') = 2 \nbcca having a beauty of f('c') + f('a') = 3\nbcca having a beauty of f('c') + f('a') = 3 \nThere are 4 k-subsequences that have the maximum beauty, 3. \nHence, the answer is 4. \n</pre> <p>Example 2:</p> <pre>\nInput: s = \"abbcd\", k = 4\nOutput: 2\nExplanation: From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1. \nThe k-subsequences of s are: \nabbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5\nabbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5 \nThere are 2 k-subsequences that have the maximum beauty, 5. \nHence, the answer is 2. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= s.length</code></li> <li><code>s</code> consists only of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2843/","title":"2843.   Count Symmetric Integers","text":"Problem <p>You are given two positive integers <code>low</code> and <code>high</code>.</p> <p>An integer <code>x</code> consisting of <code>2 * n</code> digits is symmetric if the sum of the first <code>n</code> digits of <code>x</code> is equal to the sum of the last <code>n</code> digits of <code>x</code>. Numbers with an odd number of digits are never symmetric.</p> <p>Return the number of symmetric integers in the range <code>[low, high]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: low = 1, high = 100\nOutput: 9\nExplanation: There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99.\n</pre> <p>Example 2:</p> <pre>\nInput: low = 1200, high = 1230\nOutput: 4\nExplanation: There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= low &lt;= high &lt;= 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2844/","title":"2844. Minimum Operations to Make a Special Number","text":"Problem <p>You are given a 0-indexed string <code>num</code> representing a non-negative integer.</p> <p>In one operation, you can pick any digit of <code>num</code> and delete it. Note that if you delete all the digits of <code>num</code>, <code>num</code> becomes <code>0</code>.</p> <p>Return the minimum number of operations required to make <code>num</code> special.</p> <p>An integer <code>x</code> is considered special if it is divisible by <code>25</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: num = \"2245047\"\nOutput: 2\nExplanation: Delete digits num[5] and num[6]. The resulting number is \"22450\" which is special since it is divisible by 25.\nIt can be shown that 2 is the minimum number of operations required to get a special number.</pre> <p>Example 2:</p> <pre>\nInput: num = \"2908305\"\nOutput: 3\nExplanation: Delete digits num[3], num[4], and num[6]. The resulting number is \"2900\" which is special since it is divisible by 25.\nIt can be shown that 3 is the minimum number of operations required to get a special number.</pre> <p>Example 3:</p> <pre>\nInput: num = \"10\"\nOutput: 1\nExplanation: Delete digit num[0]. The resulting number is \"0\" which is special since it is divisible by 25.\nIt can be shown that 1 is the minimum number of operations required to get a special number.\n\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= num.length &lt;= 100</code></li> <li><code>num</code> only consists of digits <code>'0'</code> through <code>'9'</code>.</li> <li><code>num</code> does not contain any leading zeros.</li> </ul>"},{"location":"LeetCode_Problems/2845/","title":"2845. Count of Interesting Subarrays","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>, an integer <code>modulo</code>, and an integer <code>k</code>.</p> <p>Your task is to find the count of subarrays that are interesting.</p> <p>A subarray <code>nums[l..r]</code> is interesting if the following condition holds:</p> <ul> <li>Let <code>cnt</code> be the number of indices <code>i</code> in the range <code>[l, r]</code> such that <code>nums[i] % modulo == k</code>. Then, <code>cnt % modulo == k</code>.</li> </ul> <p>Return an integer denoting the count of interesting subarrays. </p> <p>Note: A subarray is a contiguous non-empty sequence of elements within an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,2,4], modulo = 2, k = 1\nOutput: 3\nExplanation: In this example the interesting subarrays are: \nThe subarray nums[0..0] which is [3]. \n- There is only one index, i = 0, in the range [0, 0] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 1 and cnt % modulo == k.  \nThe subarray nums[0..1] which is [3,2].\n- There is only one index, i = 0, in the range [0, 1] that satisfies nums[i] % modulo == k.  \n- Hence, cnt = 1 and cnt % modulo == k.\nThe subarray nums[0..2] which is [3,2,4]. \n- There is only one index, i = 0, in the range [0, 2] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 1 and cnt % modulo == k. \nIt can be shown that there are no other interesting subarrays. So, the answer is 3.</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,1,9,6], modulo = 3, k = 0\nOutput: 2\nExplanation: In this example the interesting subarrays are: \nThe subarray nums[0..3] which is [3,1,9,6]. \n- There are three indices, i = 0, 2, 3, in the range [0, 3] that satisfy nums[i] % modulo == k. \n- Hence, cnt = 3 and cnt % modulo == k. \nThe subarray nums[1..1] which is [1]. \n- There is no index, i, in the range [1, 1] that satisfies nums[i] % modulo == k. \n- Hence, cnt = 0 and cnt % modulo == k. \nIt can be shown that there are no other interesting subarrays. So, the answer is 2.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5 </sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= modulo &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= k &lt; modulo</code></li> </ul>"},{"location":"LeetCode_Problems/2846/","title":"2846. Minimum Edge Weight Equilibrium Queries in a Tree","text":"Problem <p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>, w<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> with weight <code>w<sub>i</sub></code> in the tree.</p> <p>You are also given a 2D integer array <code>queries</code> of length <code>m</code>, where <code>queries[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>. For each query, find the minimum number of operations required to make the weight of every edge on the path from <code>a<sub>i</sub></code> to <code>b<sub>i</sub></code> equal. In one operation, you can choose any edge of the tree and change its weight to any value.</p> <p>Note that:</p> <ul> <li>Queries are independent of each other, meaning that the tree returns to its initial state on each new query.</li> <li>The path from <code>a<sub>i</sub></code> to <code>b<sub>i</sub></code> is a sequence of distinct nodes starting with node <code>a<sub>i</sub></code> and ending with node <code>b<sub>i</sub></code> such that every two adjacent nodes in the sequence share an edge in the tree.</li> </ul> <p>Return an array <code>answer</code> of length <code>m</code> where <code>answer[i]</code> is the answer to the <code>i<sup>th</sup></code> query.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 7, edges = [[0,1,1],[1,2,1],[2,3,1],[3,4,2],[4,5,2],[5,6,2]], queries = [[0,3],[3,6],[2,6],[0,6]]\nOutput: [0,0,1,3]\nExplanation: In the first query, all the edges in the path from 0 to 3 have a weight of 1. Hence, the answer is 0.\nIn the second query, all the edges in the path from 3 to 6 have a weight of 2. Hence, the answer is 0.\nIn the third query, we change the weight of edge [2,3] to 2. After this operation, all the edges in the path from 2 to 6 have a weight of 2. Hence, the answer is 1.\nIn the fourth query, we change the weights of edges [0,1], [1,2] and [2,3] to 2. After these operations, all the edges in the path from 0 to 6 have a weight of 2. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from a<sub>i</sub> to b<sub>i</sub>.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 8, edges = [[1,2,6],[1,3,4],[2,4,6],[2,5,3],[3,6,6],[3,0,8],[7,0,2]], queries = [[4,6],[0,4],[6,5],[7,4]]\nOutput: [1,2,2,3]\nExplanation: In the first query, we change the weight of edge [1,3] to 6. After this operation, all the edges in the path from 4 to 6 have a weight of 6. Hence, the answer is 1.\nIn the second query, we change the weight of edges [0,3] and [3,1] to 6. After these operations, all the edges in the path from 0 to 4 have a weight of 6. Hence, the answer is 2.\nIn the third query, we change the weight of edges [1,3] and [5,2] to 6. After these operations, all the edges in the path from 6 to 5 have a weight of 6. Hence, the answer is 2.\nIn the fourth query, we change the weights of edges [0,7], [0,3] and [1,3] to 6. After these operations, all the edges in the path from 7 to 4 have a weight of 6. Hence, the answer is 3.\nFor each queries[i], it can be shown that answer[i] is the minimum number of operations needed to equalize all the edge weights in the path from a<sub>i</sub> to b<sub>i</sub>.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 3</code></li> <li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; n</code></li> <li><code>1 &lt;= w<sub>i</sub> &lt;= 26</code></li> <li>The input is generated such that <code>edges</code> represents a valid tree.</li> <li><code>1 &lt;= queries.length == m &lt;= 2 * 10<sup>4</sup></code></li> <li><code>queries[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> </ul>"},{"location":"LeetCode_Problems/2847/","title":"2847. Smallest Number With Given Digit Product","text":"Problem"},{"location":"LeetCode_Problems/2848/","title":"2848. Points That Intersect With Cars","text":"Problem <p>You are given a 0-indexed 2D integer array <code>nums</code> representing the coordinates of the cars parking on a number line. For any index <code>i</code>, <code>nums[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> where <code>start<sub>i</sub></code> is the starting point of the <code>i<sup>th</sup></code> car and <code>end<sub>i</sub></code> is the ending point of the <code>i<sup>th</sup></code> car.</p> <p>Return the number of integer points on the line that are covered with any part of a car.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [[3,6],[1,5],[4,7]]\nOutput: 7\nExplanation: All the points from 1 to 7 intersect at least one car, therefore the answer would be 7.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [[1,3],[5,8]]\nOutput: 7\nExplanation: Points intersecting at least one car are 1, 2, 3, 5, 6, 7, 8. There are a total of 7 points, therefore the answer would be 7.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>nums[i].length == 2</code></li> <li><code>1 &lt;= start<sub>i</sub>\u00a0&lt;= end<sub>i</sub>\u00a0&lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2849/","title":"2849. Determine if a Cell Is Reachable at a Given Time","text":"Problem <p>You are given four integers <code>sx</code>, <code>sy</code>, <code>fx</code>, <code>fy</code>, and a non-negative integer <code>t</code>.</p> <p>In an infinite 2D grid, you start at the cell <code>(sx, sy)</code>. Each second, you must move to any of its adjacent cells.</p> <p>Return <code>true</code> if you can reach cell <code>(fx, fy)</code> after exactly <code>t</code> seconds, or <code>false</code> otherwise.</p> <p>A cell's adjacent cells are the 8 cells around it that share at least one corner with it. You can visit the same cell several times.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: sx = 2, sy = 4, fx = 7, fy = 7, t = 6\nOutput: true\nExplanation: Starting at cell (2, 4), we can reach cell (7, 7) in exactly 6 seconds by going through the cells depicted in the picture above. \n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: sx = 3, sy = 1, fx = 7, fy = 3, t = 3\nOutput: false\nExplanation: Starting at cell (3, 1), it takes at least 4 seconds to reach cell (7, 3) by going through the cells depicted in the picture above. Hence, we cannot reach cell (7, 3) at the third second.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= sx, sy, fx, fy &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= t &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2850/","title":"2850. Minimum Moves to Spread Stones Over Grid","text":"Problem <p>You are given a 0-indexed 2D integer matrix <code>grid</code> of size <code>3 * 3</code>, representing the number of stones in each cell. The grid contains exactly <code>9</code> stones, and there can be multiple stones in a single cell.</p> <p>In one move, you can move a single stone from its current cell to any other cell if the two cells share a side.</p> <p>Return the minimum number of moves required to place one stone in each cell.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: grid = [[1,1,0],[1,1,1],[1,2,1]]\nOutput: 3\nExplanation: One possible sequence of moves to place one stone in each cell is: \n1- Move one stone from cell (2,1) to cell (2,2).\n2- Move one stone from cell (2,2) to cell (1,2).\n3- Move one stone from cell (1,2) to cell (0,2).\nIn total, it takes 3 moves to place one stone in each cell of the grid.\nIt can be shown that 3 is the minimum number of moves required to place one stone in each cell.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: grid = [[1,3,0],[1,0,0],[1,0,3]]\nOutput: 4\nExplanation: One possible sequence of moves to place one stone in each cell is:\n1- Move one stone from cell (0,1) to cell (0,2).\n2- Move one stone from cell (0,1) to cell (1,1).\n3- Move one stone from cell (2,2) to cell (1,2).\n4- Move one stone from cell (2,2) to cell (2,1).\nIn total, it takes 4 moves to place one stone in each cell of the grid.\nIt can be shown that 4 is the minimum number of moves required to place one stone in each cell.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>grid.length == grid[i].length == 3</code></li> <li><code>0 &lt;= grid[i][j] &lt;= 9</code></li> <li>Sum of <code>grid</code> is equal to <code>9</code>.</li> </ul>"},{"location":"LeetCode_Problems/2851/","title":"2851. String Transformation","text":"Problem <p>You are given two strings <code>s</code> and <code>t</code> of equal length <code>n</code>. You can perform the following operation on the string <code>s</code>:</p> <ul> <li>Remove a suffix of <code>s</code> of length <code>l</code> where <code>0 &lt; l &lt; n</code> and append it at the start of <code>s</code>.     For example, let <code>s = 'abcd'</code> then in one operation you can remove the suffix <code>'cd'</code> and append it in front of <code>s</code> making <code>s = 'cdab'</code>.</li> </ul> <p>You are also given an integer <code>k</code>. Return the number of ways in which <code>s</code> can be transformed into <code>t</code> in exactly <code>k</code> operations.</p> <p>Since the answer can be large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"abcd\", t = \"cdab\", k = 2\nOutput: 2\nExplanation: \nFirst way:\nIn first operation, choose suffix from index = 3, so resulting s = \"dabc\".\nIn second operation, choose suffix from index = 3, so resulting s = \"cdab\".\n\nSecond way:\nIn first operation, choose suffix from index = 1, so resulting s = \"bcda\".\nIn second operation, choose suffix from index = 1, so resulting s = \"cdab\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"ababab\", t = \"ababab\", k = 1\nOutput: 2\nExplanation: \nFirst way:\nChoose suffix from index = 2, so resulting s = \"ababab\".\n\nSecond way:\nChoose suffix from index = 4, so resulting s = \"ababab\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>15</sup></code></li> <li><code>s.length == t.length</code></li> <li><code>s</code> and <code>t</code> consist of only lowercase English alphabets.</li> </ul>"},{"location":"LeetCode_Problems/2852/","title":"2852. Sum of Remoteness of All Cells","text":"Problem"},{"location":"LeetCode_Problems/2853/","title":"2853. Highest Salaries Difference","text":"Problem"},{"location":"LeetCode_Problems/2854/","title":"2854. Rolling Average Steps","text":"Problem"},{"location":"LeetCode_Problems/2855/","title":"2855. Minimum Right Shifts to Sort the Array","text":"Problem <p>You are given a 0-indexed array <code>nums</code> of length <code>n</code> containing distinct positive integers. Return the minimum number of right shifts required to sort <code>nums</code> and <code>-1</code> if this is not possible.</p> <p>A right shift is defined as shifting the element at index <code>i</code> to index <code>(i + 1) % n</code>, for all indices.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,4,5,1,2]\nOutput: 2\nExplanation: \nAfter the first right shift, nums = [2,3,4,5,1].\nAfter the second right shift, nums = [1,2,3,4,5].\nNow nums is sorted; therefore the answer is 2.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,3,5]\nOutput: 0\nExplanation: nums is already sorted therefore, the answer is 0.</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,1,4]\nOutput: -1\nExplanation: It's impossible to sort the array using right shifts.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 100</code></li> <li><code>nums</code> contains distinct integers.</li> </ul>"},{"location":"LeetCode_Problems/2856/","title":"2856. Minimum Array Length After Pair Removals","text":"Problem <p>You are given a 0-indexed sorted array of integers <code>nums</code>.</p> <p>You can perform the following operation any number of times:</p> <ul> <li>Choose two indices, <code>i</code> and <code>j</code>, where <code>i &lt; j</code>, such that <code>nums[i] &lt; nums[j]</code>.</li> <li>Then, remove the elements at indices <code>i</code> and <code>j</code> from <code>nums</code>. The remaining elements retain their original order, and the array is re-indexed.</li> </ul> <p>Return an integer that denotes the minimum length of <code>nums</code> after performing the operation any number of times (including zero).</p> <p>Note that <code>nums</code> is sorted in non-decreasing order.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,3,4,9]\nOutput: 0\nExplanation: Initially, nums = [1, 3, 4, 9].\nIn the first operation, we can choose index 0 and 1 because nums[0] &lt; nums[1] &lt;=&gt; 1 &lt; 3.\nRemove indices 0 and 1, and nums becomes [4, 9].\nFor the next operation, we can choose index 0 and 1 because nums[0] &lt; nums[1] &lt;=&gt; 4 &lt; 9.\nRemove indices 0 and 1, and nums becomes an empty array [].\nHence, the minimum length achievable is 0.</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,3,6,9]\nOutput: 0\nExplanation: Initially, nums = [2, 3, 6, 9]. \nIn the first operation, we can choose index 0 and 2 because nums[0] &lt; nums[2] &lt;=&gt; 2 &lt; 6. \nRemove indices 0 and 2, and nums becomes [3, 9]. \nFor the next operation, we can choose index 0 and 1 because nums[0] &lt; nums[1] &lt;=&gt; 3 &lt; 9. \nRemove indices 0 and 1, and nums becomes an empty array []. \nHence, the minimum length achievable is 0.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,1,2]\nOutput: 1\nExplanation: Initially, nums = [1, 1, 2].\nIn an operation, we can choose index 0 and 2 because nums[0] &lt; nums[2] &lt;=&gt; 1 &lt; 2. \nRemove indices 0 and 2, and nums becomes [1]. \nIt is no longer possible to perform an operation on the array. \nHence, the minimum achievable length is 1. \n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>nums</code> is sorted in non-decreasing order.</li> </ul>"},{"location":"LeetCode_Problems/2857/","title":"2857. Count Pairs of Points With Distance k","text":"Problem <p>You are given a 2D integer array <code>coordinates</code> and an integer <code>k</code>, where <code>coordinates[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> are the coordinates of the <code>i<sup>th</sup></code> point in a 2D plane.</p> <p>We define the distance between two points <code>(x<sub>1</sub>, y<sub>1</sub>)</code> and <code>(x<sub>2</sub>, y<sub>2</sub>)</code> as <code>(x1 XOR x2) + (y1 XOR y2)</code> where <code>XOR</code> is the bitwise <code>XOR</code> operation.</p> <p>Return the number of pairs <code>(i, j)</code> such that <code>i &lt; j</code> and the distance between points <code>i</code> and <code>j</code> is equal to <code>k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: coordinates = [[1,2],[4,2],[1,3],[5,2]], k = 5\nOutput: 2\nExplanation: We can choose the following pairs:\n- (0,1): Because we have (1 XOR 4) + (2 XOR 2) = 5.\n- (2,3): Because we have (1 XOR 5) + (3 XOR 2) = 5.\n</pre> <p>Example 2:</p> <pre>\nInput: coordinates = [[1,3],[1,3],[1,3],[1,3],[1,3]], k = 0\nOutput: 10\nExplanation: Any two chosen pairs will have a distance of 0. There are 10 ways to choose two pairs.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= coordinates.length &lt;= 50000</code></li> <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>6</sup></code></li> <li><code>0 &lt;= k &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2858/","title":"2858. Minimum Edge Reversals So Every Node Is Reachable","text":"Problem <p>There is a simple directed graph with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. The graph would form a tree if its edges were bi-directional.</p> <p>You are given an integer <code>n</code> and a 2D integer array <code>edges</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> represents a directed edge going from node <code>u<sub>i</sub></code> to node <code>v<sub>i</sub></code>.</p> <p>An edge reversal changes the direction of an edge, i.e., a directed edge going from node <code>u<sub>i</sub></code> to node <code>v<sub>i</sub></code> becomes a directed edge going from node <code>v<sub>i</sub></code> to node <code>u<sub>i</sub></code>.</p> <p>For every node <code>i</code> in the range <code>[0, n - 1]</code>, your task is to independently calculate the minimum number of edge reversals required so it is possible to reach any other node starting from node <code>i</code> through a sequence of directed edges.</p> <p>Return an integer array <code>answer</code>, where <code>answer[i]</code> is the minimum number of edge reversals required so it is possible to reach any other node starting from node <code>i</code> through a sequence of directed edges.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 4, edges = [[2,0],[2,1],[1,3]]\nOutput: [1,1,0,2]\nExplanation: The image above shows the graph formed by the edges.\nFor node 0: after reversing the edge [2,0], it is possible to reach any other node starting from node 0.\nSo, answer[0] = 1.\nFor node 1: after reversing the edge [2,1], it is possible to reach any other node starting from node 1.\nSo, answer[1] = 1.\nFor node 2: it is already possible to reach any other node starting from node 2.\nSo, answer[2] = 0.\nFor node 3: after reversing the edges [1,3] and [2,1], it is possible to reach any other node starting from node 3.\nSo, answer[3] = 2.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 3, edges = [[1,2],[2,0]]\nOutput: [2,0,1]\nExplanation: The image above shows the graph formed by the edges.\nFor node 0: after reversing the edges [2,0] and [1,2], it is possible to reach any other node starting from node 0.\nSo, answer[0] = 2.\nFor node 1: it is already possible to reach any other node starting from node 1.\nSo, answer[1] = 0.\nFor node 2: after reversing the edge [1, 2], it is possible to reach any other node starting from node 2.\nSo, answer[2] = 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= u<sub>i</sub> == edges[i][0] &lt; n</code></li> <li><code>0 &lt;= v<sub>i</sub> == edges[i][1] &lt; n</code></li> <li><code>u<sub>i</sub> != v<sub>i</sub></code></li> <li>The input is generated such\u00a0that if the edges were bi-directional, the graph would be a tree.</li> </ul>"},{"location":"LeetCode_Problems/2859/","title":"2859. Sum of Values at Indices With K Set Bits","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and an integer <code>k</code>.</p> <p>Return an integer that denotes the sum of elements in <code>nums</code> whose corresponding indices have exactly <code>k</code> set bits in their binary representation.</p> <p>The set bits in an integer are the <code>1</code>'s present when it is written in binary.</p> <ul> <li>For example, the binary representation of <code>21</code> is <code>10101</code>, which has <code>3</code> set bits.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,10,1,5,2], k = 1\nOutput: 13\nExplanation: The binary representation of the indices are: \n0 = 000<sub>2</sub>\n1 = 001<sub>2</sub>\n2 = 010<sub>2</sub>\n3 = 011<sub>2</sub>\n4 = 100<sub>2 \n</sub>Indices 1, 2, and 4 have k = 1 set bits in their binary representation.\nHence, the answer is nums[1] + nums[2] + nums[4] = 13.</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,3,2,1], k = 2\nOutput: 1\nExplanation: The binary representation of the indices are:\n0 = 00<sub>2</sub>\n1 = 01<sub>2</sub>\n2 = 10<sub>2</sub>\n3 = 11<sub>2\n</sub>Only index 3 has k = 2 set bits in its binary representation.\nHence, the answer is nums[3] = 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 1000</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= k &lt;= 10</code></li> </ul>"},{"location":"LeetCode_Problems/2860/","title":"2860. Happy Students","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> of length <code>n</code> where <code>n</code> is the total number of students in the class. The class teacher tries to select a group of students so that all the students remain happy.</p> <p>The <code>i<sup>th</sup></code> student will become happy if one of these two conditions is met:</p> <ul> <li>The student is selected and the total number of selected students is strictly greater than <code>nums[i]</code>.</li> <li>The student is not selected and the total number of selected students is strictly less than <code>nums[i]</code>.</li> </ul> <p>Return the number of ways to select a group of students so that everyone remains happy.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,1]\nOutput: 2\nExplanation: \nThe two possible ways are:\nThe class teacher selects no student.\nThe class teacher selects both students to form the group. \nIf the class teacher selects just one student to form a group then the both students will not be happy. Therefore, there are only two possible ways.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [6,0,3,3,6,7,2,7]\nOutput: 3\nExplanation: \nThe three possible ways are:\nThe class teacher selects the student with index = 1 to form the group.\nThe class teacher selects the students with index = 1, 2, 3, 6 to form the group.\nThe class teacher selects all the students to form the group.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt; nums.length</code></li> </ul>"},{"location":"LeetCode_Problems/2861/","title":"2861. Maximum Number of Alloys","text":"Problem <p>You are the owner of a company that creates alloys using various types of metals. There are <code>n</code> different types of metals available, and you have access to <code>k</code> machines that can be used to create alloys. Each machine requires a specific amount of each metal type to create an alloy.</p> <p>For the <code>i<sup>th</sup></code> machine to create an alloy, it needs <code>composition[i][j]</code> units of metal of type <code>j</code>. Initially, you have <code>stock[i]</code> units of metal type <code>i</code>, and purchasing one unit of metal type <code>i</code> costs <code>cost[i]</code> coins.</p> <p>Given integers <code>n</code>, <code>k</code>, <code>budget</code>, a 1-indexed 2D array <code>composition</code>, and 1-indexed arrays <code>stock</code> and <code>cost</code>, your goal is to maximize the number of alloys the company can create while staying within the budget of <code>budget</code> coins.</p> <p>All alloys must be created with the same machine.</p> <p>Return the maximum number of alloys that the company can create.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,0], cost = [1,2,3]\nOutput: 2\nExplanation: It is optimal to use the 1<sup>st</sup> machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 2 units of metal of the 1<sup>st</sup> type.\n- 2 units of metal of the 2<sup>nd</sup> type.\n- 2 units of metal of the 3<sup>rd</sup> type.\nIn total, we need 2 * 1 + 2 * 2 + 2 * 3 = 12 coins, which is smaller than or equal to budget = 15.\nNotice that we have 0 units of metal of each type and we have to buy all the required units of metal.\nIt can be proven that we can create at most 2 alloys.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 3, k = 2, budget = 15, composition = [[1,1,1],[1,1,10]], stock = [0,0,100], cost = [1,2,3]\nOutput: 5\nExplanation: It is optimal to use the 2<sup>nd</sup> machine to create alloys.\nTo create 5 alloys we need to buy:\n- 5 units of metal of the 1<sup>st</sup> type.\n- 5 units of metal of the 2<sup>nd</sup> type.\n- 0 units of metal of the 3<sup>rd</sup> type.\nIn total, we need 5 * 1 + 5 * 2 + 0 * 3 = 15 coins, which is smaller than or equal to budget = 15.\nIt can be proven that we can create at most 5 alloys.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 2, k = 3, budget = 10, composition = [[2,1],[1,2],[1,1]], stock = [1,1], cost = [5,5]\nOutput: 2\nExplanation: It is optimal to use the 3<sup>rd</sup> machine to create alloys.\nTo create 2 alloys we need to buy the:\n- 1 unit of metal of the 1<sup>st</sup> type.\n- 1 unit of metal of the 2<sup>nd</sup> type.\nIn total, we need 1 * 5 + 1 * 5 = 10 coins, which is smaller than or equal to budget = 10.\nIt can be proven that we can create at most 2 alloys.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n, k &lt;= 100</code></li> <li><code>0 &lt;= budget &lt;= 10<sup>8</sup></code></li> <li><code>composition.length == k</code></li> <li><code>composition[i].length == n</code></li> <li><code>1 &lt;= composition[i][j] &lt;= 100</code></li> <li><code>stock.length == cost.length == n</code></li> <li><code>0 &lt;= stock[i] &lt;= 10<sup>8</sup></code></li> <li><code>1 &lt;= cost[i] &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2862/","title":"2862. Maximum Element-Sum of a Complete Subset of Indices","text":"Problem <p>You are given a 1-indexed array <code>nums</code> of <code>n</code> integers.</p> <p>A set of numbers is complete if the product of every pair of its elements is a perfect square.</p> <p>For a subset of the indices set <code>{1, 2, ..., n}</code> represented as <code>{i<sub>1</sub>, i<sub>2</sub>, ..., i<sub>k</sub>}</code>, we define its element-sum as: <code>nums[i<sub>1</sub>] + nums[i<sub>2</sub>] + ... + nums[i<sub>k</sub>]</code>.</p> <p>Return the maximum element-sum of a complete subset of the indices set <code>{1, 2, ..., n}</code>.</p> <p>A perfect square is a number that can be expressed as the product of an integer by itself.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [8,7,3,5,7,2,4,9]\nOutput: 16\nExplanation: Apart from the subsets consisting of a single index, there are two other complete subsets of indices: {1,4} and {2,8}.\nThe sum of the elements corresponding to indices 1 and 4 is equal to nums[1] + nums[4] = 8 + 5 = 13.\nThe sum of the elements corresponding to indices 2 and 8 is equal to nums[2] + nums[8] = 7 + 9 = 16.\nHence, the maximum element-sum of a complete subset of indices is 16.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,10,3,10,1,13,7,9,4]\nOutput: 19\nExplanation: Apart from the subsets consisting of a single index, there are four other complete subsets of indices: {1,4}, {1,9}, {2,8}, {4,9}, and {1,4,9}.\nThe sum of the elements corresponding to indices 1 and 4 is equal to nums[1] + nums[4] = 5 + 10 = 15.\nThe sum of the elements corresponding to indices 1 and 9 is equal to nums[1] + nums[9] = 5 + 4 = 9.\nThe sum of the elements corresponding to indices 2 and 8 is equal to nums[2] + nums[8] = 10 + 9 = 19.\nThe sum of the elements corresponding to indices 4 and 9 is equal to nums[4] + nums[9] = 10 + 4 = 14.\nThe sum of the elements corresponding to indices 1, 4, and 9 is equal to nums[1] + nums[4] + nums[9] = 5 + 10 + 4 = 19.\nHence, the maximum element-sum of a complete subset of indices is 19.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == nums.length &lt;= 10<sup>4</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2863/","title":"2863. Maximum Length of Semi-Decreasing Subarrays","text":"Problem"},{"location":"LeetCode_Problems/2864/","title":"2864. Maximum Odd Binary Number","text":"Problem <p>You are given a binary string <code>s</code> that contains at least one <code>'1'</code>.</p> <p>You have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination.</p> <p>Return a string representing the maximum odd binary number that can be created from the given combination.</p> <p>Note that the resulting string can have leading zeros.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"010\"\nOutput: \"001\"\nExplanation: Because there is just one '1', it must be in the last position. So the answer is \"001\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"0101\"\nOutput: \"1001\"\nExplanation: One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is \"100\". So the answer is \"1001\".\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>s</code> consists only of <code>'0'</code> and <code>'1'</code>.</li> <li><code>s</code> contains at least one <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2865/","title":"2865. Beautiful Towers I","text":"Problem <p>You are given a 0-indexed array <code>maxHeights</code> of <code>n</code> integers.</p> <p>You are tasked with building <code>n</code> towers in the coordinate line. The <code>i<sup>th</sup></code> tower is built at coordinate <code>i</code> and has a height of <code>heights[i]</code>.</p> <p>A configuration of towers is beautiful if the following conditions hold:</p> <ol> <li><code>1 &lt;= heights[i] &lt;= maxHeights[i]</code></li> <li><code>heights</code> is a mountain array.</li> </ol> <p>Array <code>heights</code> is a mountain if there exists an index <code>i</code> such that:</p> <ul> <li>For all <code>0 &lt; j &lt;= i</code>, <code>heights[j - 1] &lt;= heights[j]</code></li> <li>For all <code>i &lt;= k &lt; n - 1</code>, <code>heights[k + 1] &lt;= heights[k]</code></li> </ul> <p>Return the maximum possible sum of heights of a beautiful configuration of towers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: maxHeights = [5,3,4,1,1]\nOutput: 13\nExplanation: One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]  \n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13.</pre> <p>Example 2:</p> <pre>\nInput: maxHeights = [6,5,3,9,2,7]\nOutput: 22\nExplanation: One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22.</pre> <p>Example 3:</p> <pre>\nInput: maxHeights = [3,2,5,5,2,3]\nOutput: 18\nExplanation: One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]\n- heights is a mountain of peak i = 2. \nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == maxHeights &lt;= 10<sup>3</sup></code></li> <li><code>1 &lt;= maxHeights[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2866/","title":"2866. Beautiful Towers II","text":"Problem <p>You are given a 0-indexed array <code>maxHeights</code> of <code>n</code> integers.</p> <p>You are tasked with building <code>n</code> towers in the coordinate line. The <code>i<sup>th</sup></code> tower is built at coordinate <code>i</code> and has a height of <code>heights[i]</code>.</p> <p>A configuration of towers is beautiful if the following conditions hold:</p> <ol> <li><code>1 &lt;= heights[i] &lt;= maxHeights[i]</code></li> <li><code>heights</code> is a mountain array.</li> </ol> <p>Array <code>heights</code> is a mountain if there exists an index <code>i</code> such that:</p> <ul> <li>For all <code>0 &lt; j &lt;= i</code>, <code>heights[j - 1] &lt;= heights[j]</code></li> <li>For all <code>i &lt;= k &lt; n - 1</code>, <code>heights[k + 1] &lt;= heights[k]</code></li> </ul> <p>Return the maximum possible sum of heights of a beautiful configuration of towers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: maxHeights = [5,3,4,1,1]\nOutput: 13\nExplanation: One beautiful configuration with a maximum sum is heights = [5,3,3,1,1]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]  \n- heights is a mountain of peak i = 0.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 13.</pre> <p>Example 2:</p> <pre>\nInput: maxHeights = [6,5,3,9,2,7]\nOutput: 22\nExplanation: One beautiful configuration with a maximum sum is heights = [3,3,3,9,2,2]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]\n- heights is a mountain of peak i = 3.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 22.</pre> <p>Example 3:</p> <pre>\nInput: maxHeights = [3,2,5,5,2,3]\nOutput: 18\nExplanation: One beautiful configuration with a maximum sum is heights = [2,2,5,5,2,2]. This configuration is beautiful since:\n- 1 &lt;= heights[i] &lt;= maxHeights[i]\n- heights is a mountain of peak i = 2. \nNote that, for this configuration, i = 3 can also be considered a peak.\nIt can be shown that there exists no other beautiful configuration with a sum of heights greater than 18.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == maxHeights\u00a0&lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= maxHeights[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2867/","title":"2867. Count Valid Paths in a Tree","text":"Problem <p>There is an undirected tree with <code>n</code> nodes labeled from <code>1</code> to <code>n</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> indicates that there is an edge between nodes <code>u<sub>i</sub></code> and <code>v<sub>i</sub></code> in the tree.</p> <p>Return the number of valid paths in the tree.</p> <p>A path <code>(a, b)</code> is valid if there exists exactly one prime number among the node labels in the path from <code>a</code> to <code>b</code>.</p> <p>Note that:</p> <ul> <li>The path <code>(a, b)</code> is a sequence of distinct nodes starting with node <code>a</code> and ending with node <code>b</code> such that every two adjacent nodes in the sequence share an edge in the tree.</li> <li>Path <code>(a, b)</code> and path <code>(b, a)</code> are considered the same and counted only once.</li> </ul> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, edges = [[1,2],[1,3],[2,4],[2,5]]\nOutput: 4\nExplanation: The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2. \n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\nIt can be shown that there are only 4 valid paths.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 6, edges = [[1,2],[1,3],[2,4],[3,5],[3,6]]\nOutput: 6\nExplanation: The pairs with exactly one prime number on the path between them are: \n- (1, 2) since the path from 1 to 2 contains prime number 2.\n- (1, 3) since the path from 1 to 3 contains prime number 3.\n- (1, 4) since the path from 1 to 4 contains prime number 2.\n- (1, 6) since the path from 1 to 6 contains prime number 3.\n- (2, 4) since the path from 2 to 4 contains prime number 2.\n- (3, 6) since the path from 3 to 6 contains prime number 3.\nIt can be shown that there are only 6 valid paths.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li> <li>The input is generated such that <code>edges</code> represent a valid tree.</li> </ul>"},{"location":"LeetCode_Problems/2868/","title":"2868. The Wording Game","text":"Problem"},{"location":"LeetCode_Problems/2869/","title":"2869. Minimum Operations to Collect Elements","text":"Problem <p>You are given an array <code>nums</code> of positive integers and an integer <code>k</code>.</p> <p>In one operation, you can remove the last element of the array and add it to your collection.</p> <p>Return the minimum number of operations needed to collect elements <code>1, 2, ..., k</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [3,1,5,4,2], k = 2\nOutput: 4\nExplanation: After 4 operations, we collect elements 2, 4, 5, and 1, in this order. Our collection contains elements 1 and 2. Hence, the answer is 4.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [3,1,5,4,2], k = 5\nOutput: 5\nExplanation: After 5 operations, we collect elements 2, 4, 5, 1, and 3, in this order. Our collection contains elements 1 through 5. Hence, the answer is 5.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [3,2,5,3,1], k = 3\nOutput: 4\nExplanation: After 4 operations, we collect elements 1, 3, 5, and 2, in this order. Our collection contains elements 1 through 3. Hence, the answer is 4.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 50</code></li> <li><code>1 &lt;= nums[i] &lt;= nums.length</code></li> <li><code>1 &lt;= k &lt;= nums.length</code></li> <li>The input is generated such that you can collect elements <code>1, 2, ..., k</code>.</li> </ul>"},{"location":"LeetCode_Problems/2870/","title":"2870. Minimum Number of Operations to Make Array Empty","text":"Problem <p>You are given a 0-indexed array <code>nums</code> consisting of positive integers.</p> <p>There are two types of operations that you can apply on the array any number of times:</p> <ul> <li>Choose two elements with equal values and delete them from the array.</li> <li>Choose three elements with equal values and delete them from the array.</li> </ul> <p>Return the minimum number of operations required to make the array empty, or <code>-1</code> if it is not possible.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,3,3,2,2,4,2,3,4]\nOutput: 4\nExplanation: We can apply the following operations to make the array empty:\n- Apply the first operation on the elements at indices 0 and 3. The resulting array is nums = [3,3,2,4,2,3,4].\n- Apply the first operation on the elements at indices 2 and 4. The resulting array is nums = [3,3,4,3,4].\n- Apply the second operation on the elements at indices 0, 1, and 3. The resulting array is nums = [4,4].\n- Apply the first operation on the elements at indices 0 and 1. The resulting array is nums = [].\nIt can be shown that we cannot make the array empty in less than 4 operations.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,1,2,2,3,3]\nOutput: -1\nExplanation: It is impossible to empty the array.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2871/","title":"2871. Split Array Into Maximum Number of Subarrays","text":"Problem <p>You are given an array <code>nums</code> consisting of non-negative integers.</p> <p>We define the score of subarray <code>nums[l..r]</code> such that <code>l &lt;= r</code> as <code>nums[l] AND nums[l + 1] AND ... AND nums[r]</code> where AND is the bitwise <code>AND</code> operation.</p> <p>Consider splitting the array into one or more subarrays such that the following conditions are satisfied:</p> <ul> <li>Each element of the array belongs to exactly one subarray.</li> <li>The sum of scores of the subarrays is the minimum possible.</li> </ul> <p>Return the maximum number of subarrays in a split that satisfies the conditions above.</p> <p>A subarray is a contiguous part of an array.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,0,2,0,1,2]\nOutput: 3\nExplanation: We can split the array into the following subarrays:\n- [1,0]. The score of this subarray is 1 AND 0 = 0.\n- [2,0]. The score of this subarray is 2 AND 0 = 0.\n- [1,2]. The score of this subarray is 1 AND 2 = 0.\nThe sum of scores is 0 + 0 + 0 = 0, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 3 subarrays with a total score of 0. So we return 3.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [5,7,1,3]\nOutput: 1\nExplanation: We can split the array into one subarray: [5,7,1,3] with a score of 1, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 1 subarray with a total score of 1. So we return 1.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2872/","title":"2872. Maximum Number of K-Divisible Components","text":"Problem <p>There is an undirected tree with <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given the integer <code>n</code> and a 2D integer array <code>edges</code> of length <code>n - 1</code>, where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the tree.</p> <p>You are also given a 0-indexed integer array <code>values</code> of length <code>n</code>, where <code>values[i]</code> is the value associated with the <code>i<sup>th</sup></code> node, and an integer <code>k</code>.</p> <p>A valid split of the tree is obtained by removing any set of edges, possibly empty, from the tree such that the resulting components all have values that are divisible by <code>k</code>, where the value of a connected component is the sum of the values of its nodes.</p> <p>Return the maximum number of components in any valid split.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6\nOutput: 2\nExplanation: We remove the edge connecting node 1 with 2. The resulting split is valid because:\n- The value of the component containing nodes 1 and 3 is values[1] + values[3] = 12.\n- The value of the component containing nodes 0, 2, and 4 is values[0] + values[2] + values[4] = 6.\nIt can be shown that no other valid split has more than 2 connected components.</pre> <p>Example 2:</p> <p></p> <pre>\nInput: n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3\nOutput: 3\nExplanation: We remove the edge connecting node 0 with 2, and the edge connecting node 0 with 1. The resulting split is valid because:\n- The value of the component containing node 0 is values[0] = 3.\n- The value of the component containing nodes 2, 5, and 6 is values[2] + values[5] + values[6] = 9.\n- The value of the component containing nodes 1, 3, and 4 is values[1] + values[3] + values[4] = 6.\nIt can be shown that no other valid split has more than 3 connected components.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li> <li><code>edges.length == n - 1</code></li> <li><code>edges[i].length == 2</code></li> <li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li> <li><code>values.length == n</code></li> <li><code>0 &lt;= values[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li> <li>Sum of <code>values</code> is divisible by <code>k</code>.</li> <li>The input is generated such that <code>edges</code> represents a valid tree.</li> </ul>"},{"location":"LeetCode_Problems/2873/","title":"2873. Maximum Value of an Ordered Triplet I","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>.</p> <p>Return the maximum value over all triplets of indices <code>(i, j, k)</code> such that <code>i &lt; j &lt; k</code>. If all such triplets have a negative value, return <code>0</code>.</p> <p>The value of a triplet of indices <code>(i, j, k)</code> is equal to <code>(nums[i] - nums[j]) * nums[k]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [12,6,1,2,7]\nOutput: 77\nExplanation: The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.\nIt can be shown that there are no ordered triplets of indices with a value greater than 77. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,10,3,4,19]\nOutput: 133\nExplanation: The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\nIt can be shown that there are no ordered triplets of indices with a value greater than 133.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 0\nExplanation: The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 100</code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2874/","title":"2874. Maximum Value of an Ordered Triplet II","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code>.</p> <p>Return the maximum value over all triplets of indices <code>(i, j, k)</code> such that <code>i &lt; j &lt; k</code>. If all such triplets have a negative value, return <code>0</code>.</p> <p>The value of a triplet of indices <code>(i, j, k)</code> is equal to <code>(nums[i] - nums[j]) * nums[k]</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [12,6,1,2,7]\nOutput: 77\nExplanation: The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.\nIt can be shown that there are no ordered triplets of indices with a value greater than 77. \n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,10,3,4,19]\nOutput: 133\nExplanation: The value of the triplet (1, 2, 4) is (nums[1] - nums[2]) * nums[4] = 133.\nIt can be shown that there are no ordered triplets of indices with a value greater than 133.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3]\nOutput: 0\nExplanation: The only ordered triplet of indices (0, 1, 2) has a negative value of (nums[0] - nums[1]) * nums[2] = -3. Hence, the answer would be 0.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2875/","title":"2875. Minimum Size Subarray in Infinite Array","text":"Problem <p>You are given a 0-indexed array <code>nums</code> and an integer <code>target</code>.</p> <p>A 0-indexed array <code>infinite_nums</code> is generated by infinitely appending the elements of <code>nums</code> to itself.</p> <p>Return the length of the shortest subarray of the array <code>infinite_nums</code> with a sum equal to <code>target</code>. If there is no such subarray return <code>-1</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,3], target = 5\nOutput: 2\nExplanation: In this example infinite_nums = [1,2,3,1,2,3,1,2,...].\nThe subarray in the range [1,2], has the sum equal to target = 5 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 5.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [1,1,1,2,3], target = 4\nOutput: 2\nExplanation: In this example infinite_nums = [1,1,1,2,3,1,1,1,2,3,1,1,...].\nThe subarray in the range [4,5], has the sum equal to target = 4 and length = 2.\nIt can be proven that 2 is the shortest length of a subarray with sum equal to target = 4.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [2,4,6,8], target = 3\nOutput: -1\nExplanation: In this example infinite_nums = [2,4,6,8,2,4,6,8,...].\nIt can be proven that there is no subarray with sum equal to target = 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2876/","title":"2876. Count Visited Nodes in a Directed Graph","text":"Problem <p>There is a directed graph consisting of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code> and <code>n</code> directed edges.</p> <p>You are given a 0-indexed array <code>edges</code> where <code>edges[i]</code> indicates that there is an edge from node <code>i</code> to node <code>edges[i]</code>.</p> <p>Consider the following process on the graph:</p> <ul> <li>You start from a node <code>x</code> and keep visiting other nodes through edges until you reach a node that you have already visited before on this same process.</li> </ul> <p>Return an array <code>answer</code> where <code>answer[i]</code> is the number of different nodes that you will visit if you perform the process starting from node <code>i</code>.</p> <p> </p> <p>Example 1:</p> <p></p> <pre>\nInput: edges = [1,2,0,0]\nOutput: [3,3,3,4]\nExplanation: We perform the process starting from each node in the following way:\n- Starting from node 0, we visit the nodes 0 -&gt; 1 -&gt; 2 -&gt; 0. The number of different nodes we visit is 3.\n- Starting from node 1, we visit the nodes 1 -&gt; 2 -&gt; 0 -&gt; 1. The number of different nodes we visit is 3.\n- Starting from node 2, we visit the nodes 2 -&gt; 0 -&gt; 1 -&gt; 2. The number of different nodes we visit is 3.\n- Starting from node 3, we visit the nodes 3 -&gt; 0 -&gt; 1 -&gt; 2 -&gt; 0. The number of different nodes we visit is 4.\n</pre> <p>Example 2:</p> <p></p> <pre>\nInput: edges = [1,2,3,4,0]\nOutput: [5,5,5,5,5]\nExplanation: Starting from any node we can visit every node in the graph in the process.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == edges.length</code></li> <li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= edges[i] &lt;= n - 1</code></li> <li><code>edges[i] != i</code></li> </ul>"},{"location":"LeetCode_Problems/2877/","title":"2877. Create a DataFrame from List","text":"Problem <p>Write a solution to create a DataFrame from a 2D list called <code>student_data</code>. This 2D list contains the IDs and ages of some students.</p> <p>The DataFrame should have two columns, <code>student_id</code> and <code>age</code>, and be in the same order as the original 2D list.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput:\nstudent_data:\n<code>[\n  [1, 15],\n  [2, 11],\n  [3, 11],\n  [4, 20]\n]</code>\nOutput:\n+------------+-----+\n| student_id | age |\n+------------+-----+\n| 1          | 15  |\n| 2          | 11  |\n| 3          | 11  |\n| 4          | 20  |\n+------------+-----+\nExplanation:\nA DataFrame was created on top of student_data, with two columns named <code>student_id</code> and <code>age</code>.\n</pre>"},{"location":"LeetCode_Problems/2878/","title":"2878. Get the Size of a DataFrame","text":"Problem <pre>\nDataFrame <code>players:</code>\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| player_id   | int    |\n| name        | object |\n| age         | int    |\n| position    | object |\n| ...         | ...    |\n+-------------+--------+\n</pre> <p>Write a solution to calculate and display the number of rows and columns of <code>players</code>.</p> <p>Return the result as an array:</p> <p><code>[number of rows, number of columns]</code></p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput:\n+-----------+----------+-----+-------------+--------------------+\n| player_id | name     | age | position    | team               |\n+-----------+----------+-----+-------------+--------------------+\n| 846       | Mason    | 21  | Forward     | RealMadrid         |\n| 749       | Riley    | 30  | Winger      | Barcelona          |\n| 155       | Bob      | 28  | Striker     | ManchesterUnited   |\n| 583       | Isabella | 32  | Goalkeeper  | Liverpool          |\n| 388       | Zachary  | 24  | Midfielder  | BayernMunich       |\n| 883       | Ava      | 23  | Defender    | Chelsea            |\n| 355       | Violet   | 18  | Striker     | Juventus           |\n| 247       | Thomas   | 27  | Striker     | ParisSaint-Germain |\n| 761       | Jack     | 33  | Midfielder  | ManchesterCity     |\n| 642       | Charlie  | 36  | Center-back | Arsenal            |\n+-----------+----------+-----+-------------+--------------------+\nOutput:\n[10, 5]\nExplanation:\nThis DataFrame contains 10 rows and 5 columns.\n</pre>"},{"location":"LeetCode_Problems/2879/","title":"2879. Display the First Three Rows","text":"Problem <pre>\nDataFrame: <code>employees</code>\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| employee_id | int    |\n| name        | object |\n| department  | object |\n| salary      | int    |\n+-------------+--------+\n</pre> <p>Write a solution to display the first <code>3</code> rows of this DataFrame.</p> <p> </p> <p>Example 1:</p> <pre>\nInput:\nDataFrame employees\n+-------------+-----------+-----------------------+--------+\n| employee_id | name      | department            | salary |\n+-------------+-----------+-----------------------+--------+\n| 3           | Bob       | Operations            | 48675  |\n| 90          | Alice     | Sales                 | 11096  |\n| 9           | Tatiana   | Engineering           | 33805  |\n| 60          | Annabelle | InformationTechnology | 37678  |\n| 49          | Jonathan  | HumanResources        | 23793  |\n| 43          | Khaled    | Administration        | 40454  |\n+-------------+-----------+-----------------------+--------+\nOutput:\n+-------------+---------+-------------+--------+\n| employee_id | name    | department  | salary |\n+-------------+---------+-------------+--------+\n| 3           | Bob     | Operations  | 48675  |\n| 90          | Alice   | Sales       | 11096  |\n| 9           | Tatiana | Engineering | 33805  |\n+-------------+---------+-------------+--------+\nExplanation: \nOnly the first 3 rows are displayed.</pre>"},{"location":"LeetCode_Problems/2880/","title":"2880. Select Data","text":"Problem <pre>\nDataFrame students\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n+-------------+--------+\n\n</pre> <p>Write a solution to select the name and age of the student with <code>student_id = 101</code>.</p> <p>The result format is in the following example.</p> <p> </p> <pre>\nExample 1:\nInput:\n+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 101        | Ulysses | 13  |\n| 53         | William | 10  |\n| 128        | Henry   | 6   |\n| 3          | Henry   | 11  |\n+------------+---------+-----+\nOutput:\n+---------+-----+\n| name    | age | \n+---------+-----+\n| Ulysses | 13  |\n+---------+-----+\nExplanation:\nStudent Ulysses has student_id = 101, we select the name and age.</pre>"},{"location":"LeetCode_Problems/2881/","title":"2881. Create a New Column","text":"Problem <pre>\nDataFrame <code>employees</code>\n+-------------+--------+\n| Column Name | Type.  |\n+-------------+--------+\n| name        | object |\n| salary      | int.   |\n+-------------+--------+\n</pre> <p>A\u00a0company plans to provide its employees with a bonus.</p> <p>Write a solution to create a new column name <code>bonus</code> that contains the doubled values of the <code>salary</code> column.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput:\nDataFrame employees\n+---------+--------+\n| name    | salary |\n+---------+--------+\n| Piper   | 4548   |\n| Grace   | 28150  |\n| Georgia | 1103   |\n| Willow  | 6593   |\n| Finn    | 74576  |\n| Thomas  | 24433  |\n+---------+--------+\nOutput:\n+---------+--------+--------+\n| name    | salary | bonus  |\n+---------+--------+--------+\n| Piper   | 4548   | 9096   |\n| Grace   | 28150  | 56300  |\n| Georgia | 1103   | 2206   |\n| Willow  |  593   | 13186  |\n| Finn    | 74576  | 149152 |\n| Thomas  | 24433  | 48866  |\n+---------+--------+--------+\nExplanation: \nA new column bonus is created by doubling the value in the column salary.</pre>"},{"location":"LeetCode_Problems/2882/","title":"2882. Drop Duplicate Rows","text":"Problem <pre>\nDataFrame customers\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| customer_id | int    |\n| name        | object |\n| email       | object |\n+-------------+--------+\n</pre> <p>There are some duplicate rows in the DataFrame based on the <code>email</code> column.</p> <p>Write a solution to remove these duplicate rows and keep only the first occurrence.</p> <p>The result format is in the following example.</p> <p> </p> <pre>\nExample 1:\nInput:\n+-------------+---------+---------------------+\n| customer_id | name    | email               |\n+-------------+---------+---------------------+\n| 1           | Ella    | emily@example.com   |\n| 2           | David   | michael@example.com |\n| 3           | Zachary | sarah@example.com   |\n| 4           | Alice   | john@example.com    |\n| 5           | Finn    | john@example.com    |\n| 6           | Violet  | alice@example.com   |\n+-------------+---------+---------------------+\nOutput:  \n+-------------+---------+---------------------+\n| customer_id | name    | email               |\n+-------------+---------+---------------------+\n| 1           | Ella    | emily@example.com   |\n| 2           | David   | michael@example.com |\n| 3           | Zachary | sarah@example.com   |\n| 4           | Alice   | john@example.com    |\n| 6           | Violet  | alice@example.com   |\n+-------------+---------+---------------------+\nExplanation:\nAlic (customer_id = 4) and Finn (customer_id = 5) both use john@example.com, so only the first occurrence of this email is retained.\n</pre>"},{"location":"LeetCode_Problems/2883/","title":"2883. Drop Missing Data","text":"Problem <pre>\nDataFrame students\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n+-------------+--------+\n</pre> <p>There are some rows having missing values in the <code>name</code> column.</p> <p>Write a solution to remove the rows with missing values.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput:\n+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 32         | Piper   | 5   |\n| 217        | None    | 19  |\n| 779        | Georgia | 20  |\n| 849        | Willow  | 14  |\n+------------+---------+-----+\nOutput:\n+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 32         | Piper   | 5   |\n| 779        | Georgia | 20  | \n| 849        | Willow  | 14  | \n+------------+---------+-----+\nExplanation: \nStudent with id 217 havs empty value in the name column, so it will be removed.</pre>"},{"location":"LeetCode_Problems/2884/","title":"2884. Modify Columns","text":"Problem <pre>\nDataFrame <code>employees</code>\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| name        | object |\n| salary      | int    |\n+-------------+--------+\n</pre> <p>A company intends to give its employees a pay rise.</p> <p>Write a solution to modify the <code>salary</code> column by multiplying each salary by 2.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput:\nDataFrame employees\n+---------+--------+\n| name    | salary |\n+---------+--------+\n| Jack    | 19666  |\n| Piper   | 74754  |\n| Mia     | 62509  |\n| Ulysses | 54866  |\n+---------+--------+\nOutput:\n+---------+--------+\n| name    | salary |\n+---------+--------+\n| Jack    | 39332  |\n| Piper   | 149508 |\n| Mia     | 125018 |\n| Ulysses | 109732 |\n+---------+--------+\nExplanation:\nEvery salary has been doubled.</pre>"},{"location":"LeetCode_Problems/2885/","title":"2885. Rename Columns","text":"Problem <pre>\nDataFrame <code>students</code>\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| id          | int    |\n| first       | object |\n| last        | object |\n| age         | int    |\n+-------------+--------+\n</pre> <p>Write a solution to rename the columns as follows:</p> <ul> <li><code>id</code> to <code>student_id</code></li> <li><code>first</code> to <code>first_name</code></li> <li><code>last</code> to <code>last_name</code></li> <li><code>age</code> to <code>age_in_years</code></li> </ul> <p>The result format is in the following example.</p> <p> </p> <pre>\nExample 1:\nInput:\n+----+---------+----------+-----+\n| id | first   | last     | age |\n+----+---------+----------+-----+\n| 1  | Mason   | King     | 6   |\n| 2  | Ava     | Wright   | 7   |\n| 3  | Taylor  | Hall     | 16  |\n| 4  | Georgia | Thompson | 18  |\n| 5  | Thomas  | Moore    | 10  |\n+----+---------+----------+-----+\nOutput:\n+------------+------------+-----------+--------------+\n| student_id | first_name | last_name | age_in_years |\n+------------+------------+-----------+--------------+\n| 1          | Mason      | King      | 6            |\n| 2          | Ava        | Wright    | 7            |\n| 3          | Taylor     | Hall      | 16           |\n| 4          | Georgia    | Thompson  | 18           |\n| 5          | Thomas     | Moore     | 10           |\n+------------+------------+-----------+--------------+\nExplanation: \nThe column names are changed accordingly.</pre>"},{"location":"LeetCode_Problems/2886/","title":"2886. Change Data Type","text":"Problem <pre>\nDataFrame <code>students</code>\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n| grade       | float  |\n+-------------+--------+\n</pre> <p>Write a solution to correct the errors:</p> <p>The <code>grade</code> column is stored as floats,\u00a0convert it to integers.</p> <p>The result format is in the following example.</p> <p> </p> <pre>\nExample 1:\nInput:\nDataFrame students:\n+------------+------+-----+-------+\n| student_id | name | age | grade |\n+------------+------+-----+-------+\n| 1          | Ava  | 6   | 73.0  |\n| 2          | Kate | 15  | 87.0  |\n+------------+------+-----+-------+\nOutput:\n+------------+------+-----+-------+\n| student_id | name | age | grade |\n+------------+------+-----+-------+\n| 1          | Ava  | 6   | 73    |\n| 2          | Kate | 15  | 87    |\n+------------+------+-----+-------+\nExplanation: \nThe data types of the column grade is converted to int.</pre>"},{"location":"LeetCode_Problems/2887/","title":"2887. Fill Missing Data","text":"Problem <pre>\nDataFrame <code>products</code>\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| name        | object |\n| quantity    | int    |\n| price       | int    |\n+-------------+--------+\n</pre> <p>Write a solution to fill in the missing value as <code>0</code> in the <code>quantity</code> column.</p> <p>The result format is in the following example.</p> <p> </p> <pre>\nExample 1:\nInput:+-----------------+----------+-------+\n| name            | quantity | price |\n+-----------------+----------+-------+\n| Wristwatch      | None     | 135   |\n| WirelessEarbuds | None     | 821   |\n| GolfClubs       | 779      | 9319  |\n| Printer         | 849      | 3051  |\n+-----------------+----------+-------+\nOutput:\n+-----------------+----------+-------+\n| name            | quantity | price |\n+-----------------+----------+-------+\n| Wristwatch      | 0        | 135   |\n| WirelessEarbuds | 0        | 821   |\n| GolfClubs       | 779      | 9319  |\n| Printer         | 849      | 3051  |\n+-----------------+----------+-------+\nExplanation: \nThe quantity for Wristwatch and WirelessEarbuds are filled by 0.</pre>"},{"location":"LeetCode_Problems/2888/","title":"2888. Reshape Data: Concatenate","text":"Problem <pre>\nDataFrame <code>df1</code>\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n+-------------+--------+\n\nDataFrame <code>df2</code>\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| student_id  | int    |\n| name        | object |\n| age         | int    |\n+-------------+--------+\n\n</pre> <p>Write a solution to concatenate these two DataFrames vertically into one DataFrame.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput:\ndf1\n+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 1          | Mason   | 8   |\n| 2          | Ava     | 6   |\n| 3          | Taylor  | 15  |\n| 4          | Georgia | 17  |\n+------------+---------+-----+\ndf2\n+------------+------+-----+\n| student_id | name | age |\n+------------+------+-----+\n| 5          | Leo  | 7   |\n| 6          | Alex | 7   |\n+------------+------+-----+\nOutput:\n+------------+---------+-----+\n| student_id | name    | age |\n+------------+---------+-----+\n| 1          | Mason   | 8   |\n| 2          | Ava     | 6   |\n| 3          | Taylor  | 15  |\n| 4          | Georgia | 17  |\n| 5          | Leo     | 7   |\n| 6          | Alex    | 7   |\n+------------+---------+-----+\nExplanation:\nThe two DataFramess are stacked vertically, and their rows are combined.</pre>"},{"location":"LeetCode_Problems/2889/","title":"2889. Reshape Data: Pivot","text":"Problem <pre>\nDataFrame <code>weather</code>\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| city        | object |\n| month       | object |\n| temperature | int    |\n+-------------+--------+\n</pre> <p>Write a solution to pivot the data so that each row represents temperatures for a specific month, and each city is a separate column.</p> <p>The result format is in the following example.</p> <p> </p> <pre>\nExample 1:\nInput:\n+--------------+----------+-------------+\n| city         | month    | temperature |\n+--------------+----------+-------------+\n| Jacksonville | January  | 13          |\n| Jacksonville | February | 23          |\n| Jacksonville | March    | 38          |\n| Jacksonville | April    | 5           |\n| Jacksonville | May      | 34          |\n| ElPaso       | January  | 20          |\n| ElPaso       | February | 6           |\n| ElPaso       | March    | 26          |\n| ElPaso       | April    | 2           |\n| ElPaso       | May      | 43          |\n+--------------+----------+-------------+\nOutput:<code>\n+----------+--------+--------------+\n| month    | ElPaso | Jacksonville |\n+----------+--------+--------------+\n| April    | 2      | 5            |\n| February | 6      | 23           |\n| January  | 20     | 13           |\n| March    | 26     | 38           |\n| May      | 43     | 34           |\n+----------+--------+--------------+</code>\nExplanation:\nThe table is pivoted, each column represents a city, and each row represents a specific month.</pre>"},{"location":"LeetCode_Problems/2890/","title":"2890. Reshape Data: Melt","text":"Problem <pre>\nDataFrame <code>report</code>\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| product     | object |\n| quarter_1   | int    |\n| quarter_2   | int    |\n| quarter_3   | int    |\n| quarter_4   | int    |\n+-------------+--------+\n</pre> <p>Write a solution to reshape the data so that each row represents sales data for a product in a specific quarter.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput:\n+-------------+-----------+-----------+-----------+-----------+\n| product     | quarter_1 | quarter_2 | quarter_3 | quarter_4 |\n+-------------+-----------+-----------+-----------+-----------+\n| Umbrella    | 417       | 224       | 379       | 611       |\n| SleepingBag | 800       | 936       | 93        | 875       |\n+-------------+-----------+-----------+-----------+-----------+\nOutput:\n+-------------+-----------+-------+\n| product     | quarter   | sales |\n+-------------+-----------+-------+\n| Umbrella    | quarter_1 | 417   |\n| SleepingBag | quarter_1 | 800   |\n| Umbrella    | quarter_2 | 224   |\n| SleepingBag | quarter_2 | 936   |\n| Umbrella    | quarter_3 | 379   |\n| SleepingBag | quarter_3 | 93    |\n| Umbrella    | quarter_4 | 611   |\n| SleepingBag | quarter_4 | 875   |\n+-------------+-----------+-------+\nExplanation:\nThe DataFrame is reshaped from wide to long format. Each row represents the sales of a product in a quarter.\n</pre>"},{"location":"LeetCode_Problems/2891/","title":"2891. Method Chaining","text":"Problem <pre>\nDataFrame <code>animals</code>\n+-------------+--------+\n| Column Name | Type   |\n+-------------+--------+\n| name        | object |\n| species     | object |\n| age         | int    |\n| weight      | int    |\n+-------------+--------+\n</pre> <p>Write a solution to list the names of animals that weigh strictly more than <code>100</code> kilograms.</p> <p>Return the\u00a0animals sorted by weight in descending order.</p> <p>The result format is in the following example.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: \nDataFrame animals:\n+----------+---------+-----+--------+\n| name     | species | age | weight |\n+----------+---------+-----+--------+\n| Tatiana  | Snake   | 98  | 464    |\n| Khaled   | Giraffe | 50  | 41     |\n| Alex     | Leopard | 6   | 328    |\n| Jonathan | Monkey  | 45  | 463    |\n| Stefan   | Bear    | 100 | 50     |\n| Tommy    | Panda   | 26  | 349    |\n+----------+---------+-----+--------+\nOutput: \n+----------+\n| name     |\n+----------+\n| Tatiana  |\n| Jonathan |\n| Tommy    |\n| Alex     |\n+----------+\nExplanation: \nAll animals weighing more than 100 should be included in the results table.\nTatiana's weight is 464, Jonathan's weight is 463, Tommy's weight is 349, and Alex's weight is 328.\nThe results should be sorted in descending order of weight.</pre> <p> </p> <p>In Pandas, method chaining enables us to\u00a0perform operations on a DataFrame without breaking up each operation into a separate line or creating multiple temporary variables.\u00a0</p> <p>Can you complete this\u00a0task in just one line of code using method chaining?</p>"},{"location":"LeetCode_Problems/2892/","title":"2892. Minimizing Array After Replacing Pairs With Their Product","text":"Problem"},{"location":"LeetCode_Problems/2893/","title":"2893. Calculate Orders Within Each Interval","text":"Problem"},{"location":"LeetCode_Problems/2894/","title":"2894. Divisible and Non-divisible Sums Difference","text":"Problem <p>You are given positive integers <code>n</code> and <code>m</code>.</p> <p>Define two integers, <code>num1</code> and <code>num2</code>, as follows:</p> <ul> <li><code>num1</code>: The sum of all integers in the range <code>[1, n]</code> that are not divisible by <code>m</code>.</li> <li><code>num2</code>: The sum of all integers in the range <code>[1, n]</code> that are divisible by <code>m</code>.</li> </ul> <p>Return the integer <code>num1 - num2</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 10, m = 3\nOutput: 19\nExplanation: In the given example:\n- Integers in the range [1, 10] that are not divisible by 3 are [1,2,4,5,7,8,10], num1 is the sum of those integers = 37.\n- Integers in the range [1, 10] that are divisible by 3 are [3,6,9], num2 is the sum of those integers = 18.\nWe return 37 - 18 = 19 as the answer.\n</pre> <p>Example 2:</p> <pre>\nInput: n = 5, m = 6\nOutput: 15\nExplanation: In the given example:\n- Integers in the range [1, 5] that are not divisible by 6 are [1,2,3,4,5], num1 is the sum of those integers = 15.\n- Integers in the range [1, 5] that are divisible by 6 are [], num2 is the sum of those integers = 0.\nWe return 15 - 0 = 15 as the answer.\n</pre> <p>Example 3:</p> <pre>\nInput: n = 5, m = 1\nOutput: -15\nExplanation: In the given example:\n- Integers in the range [1, 5] that are not divisible by 1 are [], num1 is the sum of those integers = 0.\n- Integers in the range [1, 5] that are divisible by 1 are [1,2,3,4,5], num2 is the sum of those integers = 15.\nWe return 0 - 15 = -15 as the answer.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n, m &lt;= 1000</code></li> </ul>"},{"location":"LeetCode_Problems/2895/","title":"2895. Minimum Processing Time","text":"Problem <p>You have <code>n</code> processors each having <code>4</code> cores and <code>n * 4</code> tasks that need to be executed such that each core should perform only one task.</p> <p>Given a 0-indexed integer array <code>processorTime</code> representing the time at which each processor becomes available for the first time and a 0-indexed integer array <code>tasks</code> representing the time it takes to execute each task, return the minimum time when all of the tasks have been executed by the processors.</p> <p>Note: Each core executes the task independently of the others.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5]\nOutput: 16\nExplanation: \nIt's optimal to assign the tasks at indexes 4, 5, 6, 7 to the first processor which becomes available at time = 8, and the tasks at indexes 0, 1, 2, 3 to the second processor which becomes available at time = 10. \nTime taken by the first processor to finish execution of all tasks = max(8 + 8, 8 + 7, 8 + 4, 8 + 5) = 16.\nTime taken by the second processor to finish execution of all tasks = max(10 + 2, 10 + 2, 10 + 3, 10 + 1) = 13.\nHence, it can be shown that the minimum time taken to execute all the tasks is 16.</pre> <p>Example 2:</p> <pre>\nInput: processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3]\nOutput: 23\nExplanation: \nIt's optimal to assign the tasks at indexes 1, 4, 5, 6 to the first processor which becomes available at time = 10, and the tasks at indexes 0, 2, 3, 7 to the second processor which becomes available at time = 20.\nTime taken by the first processor to finish execution of all tasks = max(10 + 3, 10 + 5, 10 + 8, 10 + 4) = 18.\nTime taken by the second processor to finish execution of all tasks = max(20 + 2, 20 + 1, 20 + 2, 20 + 3) = 23.\nHence, it can be shown that the minimum time taken to execute all the tasks is 23.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == processorTime.length &lt;= 25000</code></li> <li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= processorTime[i] &lt;= 10<sup>9</sup></code></li> <li><code>1 &lt;= tasks[i] &lt;= 10<sup>9</sup></code></li> <li><code>tasks.length == 4 * n</code></li> </ul>"},{"location":"LeetCode_Problems/2896/","title":"2896. Apply Operations to Make Two Strings Equal","text":"Problem <p>You are given two 0-indexed binary strings <code>s1</code> and <code>s2</code>, both of length <code>n</code>, and a positive integer <code>x</code>.</p> <p>You can perform any of the following operations on the string <code>s1</code> any number of times:</p> <ul> <li>Choose two indices <code>i</code> and <code>j</code>, and flip both <code>s1[i]</code> and <code>s1[j]</code>. The cost of this operation is <code>x</code>.</li> <li>Choose an index <code>i</code> such that <code>i &lt; n - 1</code> and flip both <code>s1[i]</code> and <code>s1[i + 1]</code>. The cost of this operation is <code>1</code>.</li> </ul> <p>Return the minimum cost needed to make the strings <code>s1</code> and <code>s2</code> equal, or return <code>-1</code> if it is impossible.</p> <p>Note that flipping a character means changing it from <code>0</code> to <code>1</code> or vice-versa.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: s1 = \"1100011000\", s2 = \"0101001010\", x = 2\nOutput: 4\nExplanation: We can do the following operations:\n- Choose i = 3 and apply the second operation. The resulting string is s1 = \"1101111000\".\n- Choose i = 4 and apply the second operation. The resulting string is s1 = \"1101001000\".\n- Choose i = 0 and j = 8 and apply the first operation. The resulting string is s1 = \"0101001010\" = s2.\nThe total cost is 1 + 1 + 2 = 4. It can be shown that it is the minimum cost possible.\n</pre> <p>Example 2:</p> <pre>\nInput: s1 = \"10110\", s2 = \"00011\", x = 4\nOutput: -1\nExplanation: It is not possible to make the two strings equal.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>n == s1.length == s2.length</code></li> <li><code>1 &lt;= n, x &lt;= 500</code></li> <li><code>s1</code> and <code>s2</code> consist only of the characters <code>'0'</code> and <code>'1'</code>.</li> </ul>"},{"location":"LeetCode_Problems/2897/","title":"2897. Apply Operations on Array to Maximize Sum of Squares","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> and a positive integer <code>k</code>.</p> <p>You can do the following operation on the array any number of times:</p> <ul> <li>Choose any two distinct indices <code>i</code> and <code>j</code> and simultaneously update the values of <code>nums[i]</code> to <code>(nums[i] AND nums[j])</code> and <code>nums[j]</code> to <code>(nums[i] OR nums[j])</code>. Here, <code>OR</code> denotes the bitwise <code>OR</code> operation, and <code>AND</code> denotes the bitwise <code>AND</code> operation.</li> </ul> <p>You have to choose <code>k</code> elements from the final array and calculate the sum of their squares.</p> <p>Return the maximum sum of squares you can achieve.</p> <p>Since the answer can be very large, return it modulo <code>10<sup>9</sup> + 7</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [2,6,5,8], k = 2\nOutput: 261\nExplanation: We can do the following operations on the array:\n- Choose i = 0 and j = 3, then change nums[0] to (2 AND 8) = 0 and nums[3] to (2 OR 8) = 10. The resulting array is nums = [0,6,5,10].\n- Choose i = 2 and j = 3, then change nums[2] to (5 AND 10) = 0 and nums[3] to (5 OR 10) = 15. The resulting array is nums = [0,6,0,15].\nWe can choose the elements 15 and 6 from the final array. The sum of squares is 15<sup>2</sup> + 6<sup>2</sup> = 261.\nIt can be shown that this is the maximum value we can get.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [4,5,4,7], k = 3\nOutput: 90\nExplanation: We do not need to apply any operations.\nWe can choose the elements 7, 5, and 4 with a sum of squares: 7<sup>2</sup> + 5<sup>2</sup> + 4<sup>2</sup> = 90.\nIt can be shown that this is the maximum value we can get.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2898/","title":"2898. Maximum Linear Stock Score","text":"Problem"},{"location":"LeetCode_Problems/2899/","title":"2899. Last Visited Integers","text":"Problem <p>Given a 0-indexed array of strings <code>words</code> where <code>words[i]</code> is either a positive integer represented as a string or the string <code>\"prev\"</code>.</p> <p>Start iterating from the beginning of the array; for every <code>\"prev\"</code> string seen in <code>words</code>, find the last visited integer in <code>words</code> which is defined as follows:</p> <ul> <li>Let <code>k</code> be the number of consecutive <code>\"prev\"</code> strings seen so far (containing the current string). Let <code>nums</code> be the 0-indexed array of integers seen so far and <code>nums_reverse</code> be the reverse of <code>nums</code>, then the integer at <code>(k - 1)<sup>th</sup></code> index of <code>nums_reverse</code> will be the last visited integer for this <code>\"prev\"</code>.</li> <li>If <code>k</code> is greater than the total visited integers, then the last visited integer will be <code>-1</code>.</li> </ul> <p>Return an integer array containing the last visited integers.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: words = [\"1\",\"2\",\"prev\",\"prev\",\"prev\"]\nOutput: [2,1,-1]\nExplanation: \nFor \"prev\" at index = 2, last visited integer will be 2 as here the number of consecutive \"prev\" strings is 1, and in the array reverse_nums, 2 will be the first element.\nFor \"prev\" at index = 3, last visited integer will be 1 as there are a total of two consecutive \"prev\" strings including this \"prev\" which are visited, and 1 is the second last visited integer.\nFor \"prev\" at index = 4, last visited integer will be -1 as there are a total of three consecutive \"prev\" strings including this \"prev\" which are visited, but the total number of integers visited is two.\n</pre> <p>Example 2:</p> <pre>\nInput: words = [\"1\",\"prev\",\"2\",\"prev\",\"prev\"]\nOutput: [1,2,1]\nExplanation:\nFor \"prev\" at index = 1, last visited integer will be 1.\nFor \"prev\" at index = 3, last visited integer will be 2.\nFor \"prev\" at index = 4, last visited integer will be 1 as there are a total of two consecutive \"prev\" strings including this \"prev\" which are visited, and 1 is the second last visited integer.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= words.length &lt;= 100</code></li> <li><code>words[i] == \"prev\"</code> or <code>1 &lt;= int(words[i]) &lt;= 100</code></li> </ul>"},{"location":"LeetCode_Problems/2900/","title":"2900. Longest Unequal Adjacent Groups Subsequence I","text":"Problem <p>You are given an integer <code>n</code>, a 0-indexed string array <code>words</code>, and a 0-indexed binary array <code>groups</code>, both arrays having length <code>n</code>.</p> <p>You need to select the longest subsequence from an array of indices <code>[0, 1, ..., n - 1]</code>, such that for the subsequence denoted as <code>[i<sub>0</sub>, i<sub>1</sub>, ..., i<sub>k - 1</sub>]</code> having length <code>k</code>, <code>groups[i<sub>j</sub>] != groups[i<sub>j + 1</sub>]</code>, for each <code>j</code> where <code>0 &lt; j + 1 &lt; k</code>.</p> <p>Return a string array containing the words corresponding to the indices (in order) in the selected subsequence. If there are multiple answers, return any of them.</p> <p>A subsequence of an array is a new array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.</p> <p>Note: strings in <code>words</code> may be unequal in length.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, words = [\"e\",\"a\",\"b\"], groups = [0,0,1]\nOutput: [\"e\",\"b\"]\nExplanation: A subsequence that can be selected is [0,2] because groups[0] != groups[2].\nSo, a valid answer is [words[0],words[2]] = [\"e\",\"b\"].\nAnother subsequence that can be selected is [1,2] because groups[1] != groups[2].\nThis results in [words[1],words[2]] = [\"a\",\"b\"].\nIt is also a valid answer.\nIt can be shown that the length of the longest subsequence of indices that satisfies the condition is 2.</pre> <p>Example 2:</p> <pre>\nInput: n = 4, words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,0,1,1]\nOutput: [\"a\",\"b\",\"c\"]\nExplanation: A subsequence that can be selected is [0,1,2] because groups[0] != groups[1] and groups[1] != groups[2].\nSo, a valid answer is [words[0],words[1],words[2]] = [\"a\",\"b\",\"c\"].\nAnother subsequence that can be selected is [0,1,3] because groups[0] != groups[1] and groups[1] != groups[3].\nThis results in [words[0],words[1],words[3]] = [\"a\",\"b\",\"d\"].\nIt is also a valid answer.\nIt can be shown that the length of the longest subsequence of indices that satisfies the condition is 3.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == words.length == groups.length &lt;= 100</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>0 &lt;= groups[i] &lt; 2</code></li> <li><code>words</code> consists of distinct strings.</li> <li><code>words[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2901/","title":"2901. Longest Unequal Adjacent Groups Subsequence II","text":"Problem <p>You are given an integer <code>n</code>, a 0-indexed string array <code>words</code>, and a 0-indexed array <code>groups</code>, both arrays having length <code>n</code>.</p> <p>The hamming distance between two strings of equal length is the number of positions at which the corresponding characters are different.</p> <p>You need to select the longest subsequence from an array of indices <code>[0, 1, ..., n - 1]</code>, such that for the subsequence denoted as <code>[i<sub>0</sub>, i<sub>1</sub>, ..., i<sub>k - 1</sub>]</code> having length <code>k</code>, the following holds:</p> <ul> <li>For adjacent indices in the subsequence, their corresponding groups are unequal, i.e., <code>groups[i<sub>j</sub>] != groups[i<sub>j + 1</sub>]</code>, for each <code>j</code> where <code>0 &lt; j + 1 &lt; k</code>.</li> <li><code>words[i<sub>j</sub>]</code> and <code>words[i<sub>j + 1</sub>]</code> are equal in length, and the hamming distance between them is <code>1</code>, where <code>0 &lt; j + 1 &lt; k</code>, for all indices in the subsequence.</li> </ul> <p>Return a string array containing the words corresponding to the indices (in order) in the selected subsequence. If there are multiple answers, return any of them.</p> <p>A subsequence of an array is a new array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.</p> <p>Note: strings in <code>words</code> may be unequal in length.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: n = 3, words = [\"bab\",\"dab\",\"cab\"], groups = [1,2,2]\nOutput: [\"bab\",\"cab\"]\nExplanation: A subsequence that can be selected is [0,2].\n- groups[0] != groups[2]\n- words[0].length == words[2].length, and the hamming distance between them is 1.\nSo, a valid answer is [words[0],words[2]] = [\"bab\",\"cab\"].\nAnother subsequence that can be selected is [0,1].\n- groups[0] != groups[1]\n- words[0].length == words[1].length, and the hamming distance between them is 1.\nSo, another valid answer is [words[0],words[1]] = [\"bab\",\"dab\"].\nIt can be shown that the length of the longest subsequence of indices that satisfies the conditions is 2.  </pre> <p>Example 2:</p> <pre>\nInput: n = 4, words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,2,3,4]\nOutput: [\"a\",\"b\",\"c\",\"d\"]\nExplanation: We can select the subsequence [0,1,2,3].\nIt satisfies both conditions.\nHence, the answer is [words[0],words[1],words[2],words[3]] = [\"a\",\"b\",\"c\",\"d\"].\nIt has the longest length among all subsequences of indices that satisfy the conditions.\nHence, it is the only answer.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == words.length == groups.length &lt;= 1000</code></li> <li><code>1 &lt;= words[i].length &lt;= 10</code></li> <li><code>1 &lt;= groups[i] &lt;= n</code></li> <li><code>words</code> consists of distinct strings.</li> <li><code>words[i]</code> consists of lowercase English letters.</li> </ul>"},{"location":"LeetCode_Problems/2902/","title":"2902. Count of Sub-Multisets With Bounded Sum","text":"Problem <p>You are given a 0-indexed array <code>nums</code> of non-negative integers, and two integers <code>l</code> and <code>r</code>.</p> <p>Return the count of sub-multisets within <code>nums</code> where the sum of elements in each subset falls within the inclusive range of <code>[l, r]</code>.</p> <p>Since the answer may be large, return it modulo <code>10<sup>9 </sup>+ 7</code>.</p> <p>A sub-multiset is an unordered collection of elements of the array in which a given value <code>x</code> can occur <code>0, 1, ..., occ[x]</code> times, where <code>occ[x]</code> is the number of occurrences of <code>x</code> in the array.</p> <p>Note that:</p> <ul> <li>Two sub-multisets are the same if sorting both sub-multisets results in identical multisets.</li> <li>The sum of an empty multiset is <code>0</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [1,2,2,3], l = 6, r = 6\nOutput: 1\nExplanation: The only subset of nums that has a sum of 6 is {1, 2, 3}.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,1,4,2,7], l = 1, r = 5\nOutput: 7\nExplanation: The subsets of nums that have a sum within the range [1, 5] are {1}, {2}, {4}, {2, 2}, {1, 2}, {1, 4}, and {1, 2, 2}.\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,1,3,5,2], l = 3, r = 5\nOutput: 9\nExplanation: The subsets of nums that have a sum within the range [3, 5] are {3}, {5}, {1, 2}, {1, 3}, {2, 2}, {2, 3}, {1, 1, 2}, {1, 1, 3}, and {1, 2, 2}.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></code></li> <li>Sum of <code>nums</code> does not exceed <code>2 * 10<sup>4</sup></code>.</li> <li><code>0 &lt;= l &lt;= r &lt;= 2 * 10<sup>4</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2903/","title":"2903. Find Indices With Index and Value Difference I","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> having length <code>n</code>, an integer <code>indexDifference</code>, and an integer <code>valueDifference</code>.</p> <p>Your task is to find two indices <code>i</code> and <code>j</code>, both in the range <code>[0, n - 1]</code>, that satisfy the following conditions:</p> <ul> <li><code>abs(i - j) &gt;= indexDifference</code>, and</li> <li><code>abs(nums[i] - nums[j]) &gt;= valueDifference</code></li> </ul> <p>Return an integer array <code>answer</code>, where <code>answer = [i, j]</code> if there are two such indices, and <code>answer = [-1, -1]</code> otherwise. If there are multiple choices for the two indices, return any of them.</p> <p>Note: <code>i</code> and <code>j</code> may be equal.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,1,4,1], indexDifference = 2, valueDifference = 4\nOutput: [0,3]\nExplanation: In this example, i = 0 and j = 3 can be selected.\nabs(0 - 3) &gt;= 2 and abs(nums[0] - nums[3]) &gt;= 4.\nHence, a valid answer is [0,3].\n[3,0] is also a valid answer.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,1], indexDifference = 0, valueDifference = 0\nOutput: [0,0]\nExplanation: In this example, i = 0 and j = 0 can be selected.\nabs(0 - 0) &gt;= 0 and abs(nums[0] - nums[0]) &gt;= 0.\nHence, a valid answer is [0,0].\nOther valid answers are [0,1], [1,0], and [1,1].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3], indexDifference = 2, valueDifference = 4\nOutput: [-1,-1]\nExplanation: In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.\nHence, [-1,-1] is returned.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == nums.length &lt;= 100</code></li> <li><code>0 &lt;= nums[i] &lt;= 50</code></li> <li><code>0 &lt;= indexDifference &lt;= 100</code></li> <li><code>0 &lt;= valueDifference &lt;= 50</code></li> </ul>"},{"location":"LeetCode_Problems/2904/","title":"2904. Shortest and Lexicographically Smallest Beautiful String","text":"Problem <p>You are given a binary string <code>s</code> and a positive integer <code>k</code>.</p> <p>A substring of <code>s</code> is beautiful if the number of <code>1</code>'s in it is exactly <code>k</code>.</p> <p>Let <code>len</code> be the length of the shortest beautiful substring.</p> <p>Return the lexicographically smallest beautiful substring of string <code>s</code> with length equal to <code>len</code>. If <code>s</code> doesn't contain a beautiful substring, return an empty string.</p> <p>A string <code>a</code> is lexicographically larger than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, <code>a</code> has a character strictly larger than the corresponding character in <code>b</code>.</p> <ul> <li>For example, <code>\"abcd\"</code> is lexicographically larger than <code>\"abcc\"</code> because the first position they differ is at the fourth character, and <code>d</code> is greater than <code>c</code>.</li> </ul> <p> </p> <p>Example 1:</p> <pre>\nInput: s = \"100011001\", k = 3\nOutput: \"11001\"\nExplanation: There are 7 beautiful substrings in this example:\n1. The substring \"100011001\".\n2. The substring \"100011001\".\n3. The substring \"100011001\".\n4. The substring \"100011001\".\n5. The substring \"100011001\".\n6. The substring \"100011001\".\n7. The substring \"100011001\".\nThe length of the shortest beautiful substring is 5.\nThe lexicographically smallest beautiful substring with length 5 is the substring \"11001\".\n</pre> <p>Example 2:</p> <pre>\nInput: s = \"1011\", k = 2\nOutput: \"11\"\nExplanation: There are 3 beautiful substrings in this example:\n1. The substring \"1011\".\n2. The substring \"1011\".\n3. The substring \"1011\".\nThe length of the shortest beautiful substring is 2.\nThe lexicographically smallest beautiful substring with length 2 is the substring \"11\".\n</pre> <p>Example 3:</p> <pre>\nInput: s = \"000\", k = 1\nOutput: \"\"\nExplanation: There are no beautiful substrings in this example.\n</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= s.length &lt;= 100</code></li> <li><code>1 &lt;= k &lt;= s.length</code></li> </ul>"},{"location":"LeetCode_Problems/2905/","title":"2905. Find Indices With Index and Value Difference II","text":"Problem <p>You are given a 0-indexed integer array <code>nums</code> having length <code>n</code>, an integer <code>indexDifference</code>, and an integer <code>valueDifference</code>.</p> <p>Your task is to find two indices <code>i</code> and <code>j</code>, both in the range <code>[0, n - 1]</code>, that satisfy the following conditions:</p> <ul> <li><code>abs(i - j) &gt;= indexDifference</code>, and</li> <li><code>abs(nums[i] - nums[j]) &gt;= valueDifference</code></li> </ul> <p>Return an integer array <code>answer</code>, where <code>answer = [i, j]</code> if there are two such indices, and <code>answer = [-1, -1]</code> otherwise. If there are multiple choices for the two indices, return any of them.</p> <p>Note: <code>i</code> and <code>j</code> may be equal.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: nums = [5,1,4,1], indexDifference = 2, valueDifference = 4\nOutput: [0,3]\nExplanation: In this example, i = 0 and j = 3 can be selected.\nabs(0 - 3) &gt;= 2 and abs(nums[0] - nums[3]) &gt;= 4.\nHence, a valid answer is [0,3].\n[3,0] is also a valid answer.\n</pre> <p>Example 2:</p> <pre>\nInput: nums = [2,1], indexDifference = 0, valueDifference = 0\nOutput: [0,0]\nExplanation: In this example, i = 0 and j = 0 can be selected.\nabs(0 - 0) &gt;= 0 and abs(nums[0] - nums[0]) &gt;= 0.\nHence, a valid answer is [0,0].\nOther valid answers are [0,1], [1,0], and [1,1].\n</pre> <p>Example 3:</p> <pre>\nInput: nums = [1,2,3], indexDifference = 2, valueDifference = 4\nOutput: [-1,-1]\nExplanation: In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.\nHence, [-1,-1] is returned.</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == nums.length &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li> <li><code>0 &lt;= indexDifference &lt;= 10<sup>5</sup></code></li> <li><code>0 &lt;= valueDifference &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2906/","title":"2906. Construct Product Matrix","text":"Problem <p>Given a 0-indexed 2D integer matrix <code>grid</code> of size <code>n * m</code>, we define a 0-indexed 2D matrix <code>p</code> of size <code>n * m</code> as the product matrix of <code>grid</code> if the following condition is met:</p> <ul> <li>Each element <code>p[i][j]</code> is calculated as the product of all elements in <code>grid</code> except for the element <code>grid[i][j]</code>. This product is then taken modulo <code>12345</code>.</li> </ul> <p>Return the product matrix of <code>grid</code>.</p> <p> </p> <p>Example 1:</p> <pre>\nInput: grid = [[1,2],[3,4]]\nOutput: [[24,12],[8,6]]\nExplanation: p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24\np[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12\np[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8\np[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6\nSo the answer is [[24,12],[8,6]].</pre> <p>Example 2:</p> <pre>\nInput: grid = [[12345],[2],[1]]\nOutput: [[2],[0],[0]]\nExplanation: p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2.\np[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0. So p[0][1] = 0.\np[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0. So p[0][2] = 0.\nSo the answer is [[2],[0],[0]].</pre> <p> </p> <p>Constraints:</p> <ul> <li><code>1 &lt;= n == grid.length\u00a0&lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= m == grid[i].length\u00a0&lt;= 10<sup>5</sup></code></li> <li><code>2 &lt;= n * m &lt;= 10<sup>5</sup></code></li> <li><code>1 &lt;= grid[i][j] &lt;= 10<sup>9</sup></code></li> </ul>"},{"location":"LeetCode_Problems/2907/","title":"2907. Maximum Profitable Triplets With Increasing Prices I","text":"Problem"},{"location":"about/about/","title":"About","text":"<ul> <li>\ud83d\udd2d I'm a 2022 Graduate and my branch is Computer Science.</li> <li>\ud83c\udf31 I\u2019m currently working as a Python Developer.</li> <li>\ud83d\udc6c I\u2019m looking to collaborate on   Repository.</li> <li> I\u2019m currently learning Project Management Skills.</li> <li>\ud83c\udfaf I\u2019m focusing on Data Science.</li> <li> \u260e\ufe0f How to reach me : \u2b50 Stars \ud83c\udf74 Forks \ud83d\udd14 Open PRs \ud83d\udd15 Close PRs \ud83d\udc68\u200d\ud83d\udcbb Total Languages \ud83d\udc1b Open Issues \ud83d\udd15 Close Issues \ud83d\udcbb Top Language 2021 Aug2021-08-31 Sep2021-09-30 Oct2021-10-31 Nov2021-11-30 Dec2021-12-31 2022 Jan2022-01-31 Feb2022-02-28 Mar2022-03-31 Apr2022-04-30 May2022-05-31 Jun2022-06-30 Jul2022-07-31 Aug2022-08-31 Sep2022-09-30 Oct2022-10-31 Nov2022-11-30 Dec2022-12-31 2023 Jan2023-01-31 Feb2023-02-28 Mar2023-03-31 Apr2023-04-30 May2023-05-31 Jun2023-06-30 Jul2023-07-31 Aug2023-08-31 Old Study Plan New Study Plan Programming Skills I Programming Skills II Programming Skills III Programming Skills 30 Days of JavaScript 30 Days of Pandas Data Structur I Data Structur II Data Structur III Top Interview 150 Top 100 Liked Algorithm I Algorithm II Algorithm III Premium Algo 100 Binary Search I Binary Search II Binary Search III Binary Search Dynamic Programming I Dynamic Programming II Dynamic Programming Dynamic Programming Grandmaster Graph Theory I Graph Theory II Graph Theory Level I Level II Level III LeetCode 75 SQL I SQL II SQL III SQL 50 Advanced SQL 50 34 Gold  1st Rank 8 Silver  2nd-5th Rank 1 Bronze  6th-10th Rank Topic Badge Guided path Badge Special Guided path Badge 15 Sensei <code>Topic:</code> Arrays Strings Matrices (2D Arrays) Sorting Bit Manipulation Linked List Stacks &amp; Queues Heap Greedy Dynamic Programming Binary Search Trees Binary Search Trees Tries Graph 26 Sensei <code>Guided path:</code> Data Structures and Algorithms Basics of C++ Oops in C++ Basics of Python Core Python Essentials Oops in Python Basics of Java Fundamentals of Java Essentials of Core Java Oops in Java Interview Preparation Aptitude Preparation Operating System (OS) Database Management Systems (DBMS) Interview Guide for Product Based Companies Top 150 Interview Puzzles System Design Web/App development Basics of HTML Basics of CSS Basics of JavaScript Basics of React Basics of Angular Basics of Node Fundamentals of React Native Flutter Data Science / Machine Learning Basics of Machine Learning Data Science New Tech Blockchain 2 Sensei <code>Special Guided path:</code> Data Structures and Algorithms Data Structures and Algorithm Competitive programming"},{"location":"about/contributing/","title":"Contributing &amp; Support","text":""},{"location":"about/contributing/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via GitHub Sponsors.</p> <p> GitHub Sponsors</p>"},{"location":"LeetCode_Articles/2023/","title":"2023","text":""},{"location":"LeetCode_Articles/../labels/array/","title":"Array","text":""},{"location":"LeetCode_Articles/../labels/hash_table/","title":"Hash Table","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#array","title":"Array","text":"<ul> <li>1. Two Sum</li> <li>1. Two Sum</li> </ul>"},{"location":"tags/#easy","title":"Easy","text":"<ul> <li>1. Two Sum</li> <li>1. Two Sum</li> </ul>"},{"location":"tags/#hash-table","title":"Hash Table","text":"<ul> <li>1. Two Sum</li> <li>1. Two Sum</li> </ul>"},{"location":"tags/#linked-list","title":"Linked List","text":"<ul> <li>2. Add Two Numbers</li> </ul>"},{"location":"tags/#math","title":"Math","text":"<ul> <li>2. Add Two Numbers</li> </ul>"},{"location":"tags/#medium","title":"Medium","text":"<ul> <li>2. Add Two Numbers</li> </ul>"},{"location":"tags/#recursion","title":"Recursion","text":"<ul> <li>2. Add Two Numbers</li> </ul>"}]}